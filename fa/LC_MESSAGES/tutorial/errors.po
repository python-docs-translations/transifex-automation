# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-03-21 16:10+0000\n"
"PO-Revision-Date: 2022-11-05 17:23+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2025\n"
"Language-Team: Persian (https://app.transifex.com/python-doc/teams/5390/"
"fa/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: fa\n"
"Plural-Forms: nplurals=2; plural=(n > 1);\n"

#: ../../tutorial/errors.rst:5
msgid "Errors and Exceptions"
msgstr "Errors and Exceptions"

#: ../../tutorial/errors.rst:7
msgid ""
"Until now error messages haven't been more than mentioned, but if you have "
"tried out the examples you have probably seen some.  There are (at least) "
"two distinguishable kinds of errors: *syntax errors* and *exceptions*."
msgstr ""
"تا به حال پیام های خطا بیش از ذکر شده نبوده است، اما اگر نمونه هایی را "
"امتحان کرده باشید احتمالاً برخی از آنها را دیده اید.  (حداقل) دو نوع خطا قابل "
"تشخیص وجود دارد: *syntax errors* و *exceptions*."

#: ../../tutorial/errors.rst:15
msgid "Syntax Errors"
msgstr "خطاهای نحوی"

#: ../../tutorial/errors.rst:17
msgid ""
"Syntax errors, also known as parsing errors, are perhaps the most common "
"kind of complaint you get while you are still learning Python::"
msgstr ""
"خطاهای نحوی که به عنوان خطاهای تجزیه نیز شناخته می شوند، شاید رایج ترین نوع "
"شکایتی باشند که در حین یادگیری پایتون دریافت می کنید::"

#: ../../tutorial/errors.rst:26
msgid ""
"The parser repeats the offending line and displays a little 'arrow' pointing "
"at the earliest point in the line where the error was detected.  The error "
"is caused by (or at least detected at) the token *preceding* the arrow: in "
"the example, the error is detected at the function :func:`print`, since a "
"colon (``':'``) is missing before it.  File name and line number are printed "
"so you know where to look in case the input came from a script."
msgstr ""

#: ../../tutorial/errors.rst:37
msgid "Exceptions"
msgstr "استثنائات"

#: ../../tutorial/errors.rst:39
msgid ""
"Even if a statement or expression is syntactically correct, it may cause an "
"error when an attempt is made to execute it. Errors detected during "
"execution are called *exceptions* and are not unconditionally fatal: you "
"will soon learn how to handle them in Python programs.  Most exceptions are "
"not handled by programs, however, and result in error messages as shown "
"here::"
msgstr ""
"حتی اگر یک عبارت یا عبارت از نظر نحوی صحیح باشد، ممکن است هنگام تلاش برای "
"اجرای آن خطا ایجاد کند. خطاهایی که در حین اجرا شناسایی می شوند *exceptions* "
"نامیده می شوند و بی قید و شرط کشنده نیستند: به زودی یاد خواهید گرفت که چگونه "
"آنها را در برنامه های پایتون مدیریت کنید.  با این حال، اکثر استثناها توسط "
"برنامه ها مدیریت نمی شوند و منجر به پیام های خطا می شوند که در اینجا نشان "
"داده شده است:"

#: ../../tutorial/errors.rst:58
msgid ""
"The last line of the error message indicates what happened. Exceptions come "
"in different types, and the type is printed as part of the message: the "
"types in the example are :exc:`ZeroDivisionError`, :exc:`NameError` and :exc:"
"`TypeError`. The string printed as the exception type is the name of the "
"built-in exception that occurred.  This is true for all built-in exceptions, "
"but need not be true for user-defined exceptions (although it is a useful "
"convention). Standard exception names are built-in identifiers (not reserved "
"keywords)."
msgstr ""
"خط آخر پیام خطا نشان می دهد که چه اتفاقی افتاده است. استثناها انواع مختلفی "
"دارند و نوع به عنوان بخشی از پیام چاپ می شود: انواع موجود در مثال :exc:"
"`ZeroDivisionError`، :exc:`NameError` و :exc:`TypeError` هستند. رشته چاپ شده "
"به عنوان نوع استثنا، نام استثنای داخلی است که رخ داده است.  این برای همه "
"استثناهای داخلی صادق است، اما لازم نیست برای استثناهای تعریف شده توسط کاربر "
"صادق باشد (اگرچه این یک قرارداد مفید است). نام‌های استثنای استاندارد، "
"شناسه‌های داخلی هستند (کلمات کلیدی رزرو شده نیستند)."

#: ../../tutorial/errors.rst:66
msgid ""
"The rest of the line provides detail based on the type of exception and what "
"caused it."
msgstr ""
"بقیه خط جزئیات را بر اساس نوع استثنا و آنچه باعث آن شده است ارائه می دهد."

#: ../../tutorial/errors.rst:69
msgid ""
"The preceding part of the error message shows the context where the "
"exception occurred, in the form of a stack traceback. In general it contains "
"a stack traceback listing source lines; however, it will not display lines "
"read from standard input."
msgstr ""
"قسمت قبلی پیام خطا، زمینه ای را که در آن استثنا رخ داده است، به شکل پشته "
"ردیابی نشان می دهد. به طور کلی شامل یک پشته ردیابی خطوط منبع است. با این "
"حال، خطوط خوانده شده از ورودی استاندارد را نمایش نمی دهد."

#: ../../tutorial/errors.rst:74
msgid ""
":ref:`bltin-exceptions` lists the built-in exceptions and their meanings."
msgstr ":ref:`bltin-exceptions` استثناهای داخلی و معانی آنها را فهرست می کند."

#: ../../tutorial/errors.rst:80
msgid "Handling Exceptions"
msgstr "رسیدگی به استثناها"

#: ../../tutorial/errors.rst:82
msgid ""
"It is possible to write programs that handle selected exceptions. Look at "
"the following example, which asks the user for input until a valid integer "
"has been entered, but allows the user to interrupt the program (using :kbd:"
"`Control-C` or whatever the operating system supports); note that a user-"
"generated interruption is signalled by raising the :exc:`KeyboardInterrupt` "
"exception. ::"
msgstr ""
"امکان نوشتن برنامه هایی وجود دارد که استثناهای انتخاب شده را مدیریت کنند. به "
"مثال زیر نگاه کنید، که از کاربر درخواست ورودی می کند تا زمانی که یک عدد صحیح "
"صحیح وارد شود، اما به کاربر اجازه می دهد برنامه را قطع کند (با استفاده از :"
"kbd:`Control-C` یا هر چیزی که سیستم عامل پشتیبانی می کند). توجه داشته باشید "
"که یک وقفه ایجاد شده توسط کاربر با بالا بردن استثنای :exc:"
"`KeyboardInterrupt` علامت گذاری می شود. ::"

#: ../../tutorial/errors.rst:96
msgid "The :keyword:`try` statement works as follows."
msgstr "دستور :keyword:`try` به صورت زیر عمل می کند."

#: ../../tutorial/errors.rst:98
msgid ""
"First, the *try clause* (the statement(s) between the :keyword:`try` and :"
"keyword:`except` keywords) is executed."
msgstr ""
"ابتدا *try clause* (عبارت(های) بین کلمات کلیدی :keyword:`try` و :keyword:"
"`except`) اجرا می شود."

#: ../../tutorial/errors.rst:101
msgid ""
"If no exception occurs, the *except clause* is skipped and execution of the :"
"keyword:`try` statement is finished."
msgstr ""
"اگر هیچ استثنایی رخ ندهد، *except clause* نادیده گرفته می شود و اجرای دستور :"
"keyword:`try` به پایان می رسد."

#: ../../tutorial/errors.rst:104
msgid ""
"If an exception occurs during execution of the :keyword:`try` clause, the "
"rest of the clause is skipped.  Then, if its type matches the exception "
"named after the :keyword:`except` keyword, the *except clause* is executed, "
"and then execution continues after the try/except block."
msgstr ""
"اگر در حین اجرای بند :keyword:`try` استثنایی رخ دهد، بقیه بند حذف می شود.  "
"سپس، اگر نوع آن با استثنای نام‌گذاری شده پس از کلمه کلیدی :keyword:`except` "
"مطابقت داشته باشد، *except clause* اجرا می‌شود و سپس اجرا بعد از بلوک try/"
"except ادامه می‌یابد."

#: ../../tutorial/errors.rst:109
msgid ""
"If an exception occurs which does not match the exception named in the "
"*except clause*, it is passed on to outer :keyword:`try` statements; if no "
"handler is found, it is an *unhandled exception* and execution stops with a "
"message as shown above."
msgstr ""

#: ../../tutorial/errors.rst:114
msgid ""
"A :keyword:`try` statement may have more than one *except clause*, to "
"specify handlers for different exceptions.  At most one handler will be "
"executed. Handlers only handle exceptions that occur in the corresponding "
"*try clause*, not in other handlers of the same :keyword:`!try` statement.  "
"An *except clause* may name multiple exceptions as a parenthesized tuple, "
"for example::"
msgstr ""
"یک دستور :keyword:`try` ممکن است بیش از یک *except clause* داشته باشد تا "
"کنترل کننده هایی را برای استثناهای مختلف مشخص کند.  حداکثر یک کنترل کننده "
"اجرا خواهد شد. کنترل‌کننده‌ها فقط استثناهایی را که در *try clause* مربوطه رخ "
"می‌دهند، کنترل می‌کنند، نه در سایر کنترل‌کننده‌های همان عبارت :keyword:`!try`.  "
"یک *except clause* ممکن است چندین استثنا را به عنوان یک تاپل پرانتز نامگذاری "
"کند، به عنوان مثال:"

#: ../../tutorial/errors.rst:123
msgid ""
"A class in an :keyword:`except` clause is compatible with an exception if it "
"is the same class or a base class thereof (but not the other way around --- "
"an *except clause* listing a derived class is not compatible with a base "
"class). For example, the following code will print B, C, D in that order::"
msgstr ""

#: ../../tutorial/errors.rst:147
msgid ""
"Note that if the *except clauses* were reversed (with ``except B`` first), "
"it would have printed B, B, B --- the first matching *except clause* is "
"triggered."
msgstr ""
"توجه داشته باشید که اگر *except clauses* معکوس می شد (اول با ``except B``), "
"B، B، B چاپ می شد --- اولین *except clause* منطبق فعال می شود."

#: ../../tutorial/errors.rst:150
msgid ""
"All exceptions inherit from :exc:`BaseException`, and so it can be used to "
"serve as a wildcard. Use this with extreme caution, since it is easy to mask "
"a real programming error in this way!  It can also be used to print an error "
"message and then re-raise the exception (allowing a caller to handle the "
"exception as well)::"
msgstr ""

#: ../../tutorial/errors.rst:169
msgid ""
"Alternatively the last except clause may omit the exception name(s), however "
"the exception value must then be retrieved from ``sys.exc_info()[1]``."
msgstr ""

#: ../../tutorial/errors.rst:172
msgid ""
"The :keyword:`try` ... :keyword:`except` statement has an optional *else "
"clause*, which, when present, must follow all *except clauses*.  It is "
"useful for code that must be executed if the *try clause* does not raise an "
"exception. For example::"
msgstr ""
"دستور :keyword:`try` ... :keyword:`except` یک *else clause* اختیاری دارد که "
"در صورت وجود، باید از تمام *except clauses* پیروی کند.  اگر *try clause* "
"استثنایی ایجاد نکند برای کدهایی مفید است که باید اجرا شوند. به عنوان مثال::"

#: ../../tutorial/errors.rst:186
msgid ""
"The use of the :keyword:`!else` clause is better than adding additional code "
"to the :keyword:`try` clause because it avoids accidentally catching an "
"exception that wasn't raised by the code being protected by the :keyword:`!"
"try` ... :keyword:`!except` statement."
msgstr ""
"استفاده از بند :keyword:`!else` بهتر از افزودن کد اضافی به عبارت :keyword:"
"`try` است زیرا از گرفتن تصادفی استثنایی که توسط کد محافظت شده توسط دستور :"
"keyword:`!try` ... :keyword:`!except` ایجاد نشده است جلوگیری می کند."

#: ../../tutorial/errors.rst:191
msgid ""
"When an exception occurs, it may have an associated value, also known as the "
"exception's *argument*. The presence and type of the argument depend on the "
"exception type."
msgstr ""

#: ../../tutorial/errors.rst:195
msgid ""
"The *except clause* may specify a variable after the exception name.  The "
"variable is bound to an exception instance with the arguments stored in "
"``instance.args``.  For convenience, the exception instance defines :meth:"
"`__str__` so the arguments can be printed directly without having to "
"reference ``.args``.  One may also instantiate an exception first before "
"raising it and add any attributes to it as desired. ::"
msgstr ""

#: ../../tutorial/errors.rst:219
msgid ""
"If an exception has arguments, they are printed as the last part ('detail') "
"of the message for unhandled exceptions."
msgstr ""

#: ../../tutorial/errors.rst:222
msgid ""
"Exception handlers don't just handle exceptions if they occur immediately in "
"the *try clause*, but also if they occur inside functions that are called "
"(even indirectly) in the *try clause*. For example::"
msgstr ""

#: ../../tutorial/errors.rst:240
msgid "Raising Exceptions"
msgstr "افزایش استثنائات"

#: ../../tutorial/errors.rst:242
msgid ""
"The :keyword:`raise` statement allows the programmer to force a specified "
"exception to occur. For example::"
msgstr ""
"دستور :keyword:`raise` به برنامه نویس اجازه می دهد تا یک استثنا مشخص شده را "
"مجبور به رخ دادن کند. به عنوان مثال::"

#: ../../tutorial/errors.rst:250
msgid ""
"The sole argument to :keyword:`raise` indicates the exception to be raised. "
"This must be either an exception instance or an exception class (a class "
"that derives from :class:`Exception`).  If an exception class is passed, it "
"will be implicitly instantiated by calling its constructor with no "
"arguments::"
msgstr ""

#: ../../tutorial/errors.rst:257
msgid ""
"If you need to determine whether an exception was raised but don't intend to "
"handle it, a simpler form of the :keyword:`raise` statement allows you to re-"
"raise the exception::"
msgstr ""
"اگر باید تعیین کنید که آیا یک استثنا مطرح شده است یا خیر، اما قصد ندارید آن "
"را مدیریت کنید، یک شکل ساده تر از عبارت :keyword:`raise` به شما اجازه می دهد "
"تا استثنا را دوباره مطرح کنید:"

#: ../../tutorial/errors.rst:276
msgid "Exception Chaining"
msgstr "استثناء زنجیر"

#: ../../tutorial/errors.rst:278
msgid ""
"If an unhandled exception occurs inside an :keyword:`except` section, it "
"will have the exception being handled attached to it and included in the "
"error message::"
msgstr ""
"اگر یک استثنا کنترل نشده در یک بخش :keyword:`except` رخ دهد، این استثنا به "
"آن پیوست شده و در پیام خطا گنجانده شده است:"

#: ../../tutorial/errors.rst:297
msgid ""
"To indicate that an exception is a direct consequence of another, the :"
"keyword:`raise` statement allows an optional :keyword:`from<raise>` clause::"
msgstr ""
"برای نشان دادن اینکه یک استثنا پیامد مستقیم دیگری است، دستور :keyword:"
"`raise` یک عبارت :keyword:`from<raise>` اختیاری را مجاز می‌کند:"

#: ../../tutorial/errors.rst:303
msgid "This can be useful when you are transforming exceptions. For example::"
msgstr ""
"این می تواند زمانی مفید باشد که در حال تبدیل استثناها هستید. به عنوان مثال::"

#: ../../tutorial/errors.rst:324
msgid ""
"It also allows disabling automatic exception chaining using the ``from "
"None`` idiom::"
msgstr ""
"همچنین امکان غیرفعال کردن زنجیره استثنایی خودکار با استفاده از اصطلاح ``from "
"None``::"

#: ../../tutorial/errors.rst:336
msgid ""
"For more information about chaining mechanics, see :ref:`bltin-exceptions`."
msgstr ""
"برای اطلاعات بیشتر در مورد مکانیک زنجیر، به :ref:`bltin-exceptions` مراجعه "
"کنید."

#: ../../tutorial/errors.rst:342
msgid "User-defined Exceptions"
msgstr "استثناهای تعریف شده توسط کاربر"

#: ../../tutorial/errors.rst:344
msgid ""
"Programs may name their own exceptions by creating a new exception class "
"(see :ref:`tut-classes` for more about Python classes).  Exceptions should "
"typically be derived from the :exc:`Exception` class, either directly or "
"indirectly."
msgstr ""
"برنامه ها ممکن است استثناهای خود را با ایجاد یک کلاس استثنای جدید نام گذاری "
"کنند (برای اطلاعات بیشتر در مورد کلاس های پایتون به :ref:`tut-classes` "
"مراجعه کنید).  استثناها معمولاً باید به طور مستقیم یا غیر مستقیم از کلاس :exc:"
"`Exception` مشتق شوند."

#: ../../tutorial/errors.rst:348
msgid ""
"Exception classes can be defined which do anything any other class can do, "
"but are usually kept simple, often only offering a number of attributes that "
"allow information about the error to be extracted by handlers for the "
"exception."
msgstr ""
"کلاس های استثنا را می توان تعریف کرد که هر کلاس دیگری را انجام می دهد، اما "
"معمولاً ساده نگه داشته می شوند، اغلب فقط تعدادی ویژگی ارائه می دهند که اجازه "
"می دهد اطلاعات مربوط به خطا توسط کنترل کننده ها برای استثنا استخراج شود."

#: ../../tutorial/errors.rst:352
msgid ""
"Most exceptions are defined with names that end in \"Error\", similar to the "
"naming of the standard exceptions."
msgstr ""
"اکثر استثناها با نام‌هایی تعریف می‌شوند که به «خطا» ختم می‌شوند، مشابه نام‌گذاری "
"استثناهای استاندارد."

#: ../../tutorial/errors.rst:355
msgid ""
"Many standard modules define their own exceptions to report errors that may "
"occur in functions they define.  More information on classes is presented in "
"chapter :ref:`tut-classes`."
msgstr ""

#: ../../tutorial/errors.rst:363
msgid "Defining Clean-up Actions"
msgstr "تعریف اقدامات پاکسازی"

#: ../../tutorial/errors.rst:365
msgid ""
"The :keyword:`try` statement has another optional clause which is intended "
"to define clean-up actions that must be executed under all circumstances.  "
"For example::"
msgstr ""
"دستور :keyword:`try` یک بند اختیاری دیگر دارد که برای تعریف اقدامات پاکسازی "
"که باید تحت هر شرایطی اجرا شوند، در نظر گرفته شده است.  به عنوان مثال::"

#: ../../tutorial/errors.rst:379
msgid ""
"If a :keyword:`finally` clause is present, the :keyword:`!finally` clause "
"will execute as the last task before the :keyword:`try` statement completes. "
"The :keyword:`!finally` clause runs whether or not the :keyword:`!try` "
"statement produces an exception. The following points discuss more complex "
"cases when an exception occurs:"
msgstr ""
"اگر یک بند :keyword:`finally` وجود داشته باشد، بند :keyword:`!finally` به "
"عنوان آخرین کار قبل از تکمیل دستور :keyword:`try` اجرا می شود. بند :keyword:"
"`!finally` اجرا می شود چه دستور :keyword:`!try` یک استثنا ایجاد کند یا نه. "
"نکات زیر موارد پیچیده تری را که یک استثنا رخ می دهد مورد بحث قرار می دهد:"

#: ../../tutorial/errors.rst:385
msgid ""
"If an exception occurs during execution of the :keyword:`!try` clause, the "
"exception may be handled by an :keyword:`except` clause. If the exception is "
"not handled by an :keyword:`!except` clause, the exception is re-raised "
"after the :keyword:`!finally` clause has been executed."
msgstr ""
"اگر یک استثنا در طول اجرای بند :keyword:`!try` رخ دهد، این استثنا ممکن است "
"توسط یک بند :keyword:`except` مدیریت شود. اگر استثنا توسط یک بند :keyword:`!"
"except` مدیریت نشود، پس از اجرای بند :keyword:`!finally`، استثنا دوباره مطرح "
"می شود."

#: ../../tutorial/errors.rst:391
msgid ""
"An exception could occur during execution of an :keyword:`!except` or :"
"keyword:`!else` clause. Again, the exception is re-raised after the :keyword:"
"`!finally` clause has been executed."
msgstr ""
"یک استثنا ممکن است در طول اجرای یک بند :keyword:`!except` یا :keyword:`!"
"else` رخ دهد. مجدداً، پس از اجرای بند :keyword:`!finally`، استثنا دوباره مطرح "
"می شود."

#: ../../tutorial/errors.rst:395
msgid ""
"If the :keyword:`!finally` clause executes a :keyword:`break`, :keyword:"
"`continue` or :keyword:`return` statement, exceptions are not re-raised."
msgstr ""
"اگر عبارت :keyword:`!finally` یک دستور :keyword:`break`، :keyword:`continue` "
"یا :keyword:`return` را اجرا کند، استثناها دوباره مطرح نمی شوند."

#: ../../tutorial/errors.rst:399
msgid ""
"If the :keyword:`!try` statement reaches a :keyword:`break`, :keyword:"
"`continue` or :keyword:`return` statement, the :keyword:`!finally` clause "
"will execute just prior to the :keyword:`!break`, :keyword:`!continue` or :"
"keyword:`!return` statement's execution."
msgstr ""
"اگر دستور :keyword:`!try` به یک دستور :keyword:`break`، :keyword:`continue` "
"یا :keyword:`return` برسد، عبارت :keyword:`!finally` درست قبل از اجرای "
"دستور :keyword:`!break`، :keyword:`!continue` یا :keyword:`!return` اجرا می "
"شود."

#: ../../tutorial/errors.rst:405
msgid ""
"If a :keyword:`!finally` clause includes a :keyword:`!return` statement, the "
"returned value will be the one from the :keyword:`!finally` clause's :"
"keyword:`!return` statement, not the value from the :keyword:`!try` "
"clause's :keyword:`!return` statement."
msgstr ""
"اگر یک بند :keyword:`!finally` شامل یک دستور :keyword:`!return` باشد، مقدار "
"بازگشتی عبارت :keyword:`!return` عبارت :keyword:`!finally` خواهد بود، نه "
"مقدار دستور :keyword:`!return` بند :keyword:`!try`."

#: ../../tutorial/errors.rst:411
msgid "For example::"
msgstr "به عنوان مثال::"

#: ../../tutorial/errors.rst:422
msgid "A more complicated example::"
msgstr "یک مثال پیچیده تر::"

#: ../../tutorial/errors.rst:447
msgid ""
"As you can see, the :keyword:`finally` clause is executed in any event.  "
"The :exc:`TypeError` raised by dividing two strings is not handled by the :"
"keyword:`except` clause and therefore re-raised after the :keyword:`!"
"finally` clause has been executed."
msgstr ""
"همانطور که می بینید، بند :keyword:`finally` در هر صورت اجرا می شود.  :exc:"
"`TypeError` که با تقسیم دو رشته ایجاد می شود توسط بند :keyword:`except` "
"مدیریت نمی شود و بنابراین پس از اجرای بند :keyword:`!finally` دوباره مطرح می "
"شود."

#: ../../tutorial/errors.rst:452
msgid ""
"In real world applications, the :keyword:`finally` clause is useful for "
"releasing external resources (such as files or network connections), "
"regardless of whether the use of the resource was successful."
msgstr ""
"در برنامه های کاربردی دنیای واقعی، بند :keyword:`finally` برای انتشار منابع "
"خارجی (مانند فایل ها یا اتصالات شبکه), صرف نظر از اینکه استفاده از منبع "
"موفقیت آمیز بوده است مفید است."

#: ../../tutorial/errors.rst:460
msgid "Predefined Clean-up Actions"
msgstr "اقدامات پاکسازی از پیش تعریف شده"

#: ../../tutorial/errors.rst:462
msgid ""
"Some objects define standard clean-up actions to be undertaken when the "
"object is no longer needed, regardless of whether or not the operation using "
"the object succeeded or failed. Look at the following example, which tries "
"to open a file and print its contents to the screen. ::"
msgstr ""
"برخی از اشیاء اقدامات پاکسازی استانداردی را تعریف می‌کنند که باید در مواقعی "
"که شی دیگر مورد نیاز نیست، انجام شود، صرف نظر از اینکه آیا عملیات با استفاده "
"از شی موفقیت‌آمیز بوده یا ناموفق بوده است. به مثال زیر نگاه کنید، که سعی می "
"کند یک فایل را باز کند و محتویات آن را روی صفحه چاپ کند. ::"

#: ../../tutorial/errors.rst:470
msgid ""
"The problem with this code is that it leaves the file open for an "
"indeterminate amount of time after this part of the code has finished "
"executing. This is not an issue in simple scripts, but can be a problem for "
"larger applications. The :keyword:`with` statement allows objects like files "
"to be used in a way that ensures they are always cleaned up promptly and "
"correctly. ::"
msgstr ""
"مشکل این کد این است که پس از اتمام اجرای این قسمت از کد، فایل را برای مدت "
"زمان نامشخصی باز می گذارد. این مشکل در اسکریپت های ساده نیست، اما می تواند "
"برای برنامه های بزرگتر مشکل ساز باشد. دستور :keyword:`with` به اشیایی مانند "
"فایل‌ها اجازه می‌دهد به گونه‌ای استفاده شوند که اطمینان حاصل شود که همیشه "
"به‌درستی و به‌درستی پاک می‌شوند. ::"

#: ../../tutorial/errors.rst:480
msgid ""
"After the statement is executed, the file *f* is always closed, even if a "
"problem was encountered while processing the lines. Objects which, like "
"files, provide predefined clean-up actions will indicate this in their "
"documentation."
msgstr ""
"پس از اجرای دستور، فایل *f* همیشه بسته می شود، حتی اگر هنگام پردازش خطوط با "
"مشکلی مواجه شود. اشیایی که مانند فایل‌ها، اقدامات پاکسازی از پیش تعریف شده را "
"ارائه می‌کنند، این موضوع را در مستندات خود نشان می‌دهند."
