# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Alireza Shabani (Revisto) <theRevisto@gmail.com>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.9\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-03-14 16:54+0000\n"
"PO-Revision-Date: 2017-02-16 23:41+0000\n"
"Last-Translator: Alireza Shabani (Revisto) <theRevisto@gmail.com>, 2025\n"
"Language-Team: Persian (https://app.transifex.com/python-doc/teams/5390/"
"fa/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: fa\n"
"Plural-Forms: nplurals=2; plural=(n > 1);\n"

#: ../../tutorial/introduction.rst:5
msgid "An Informal Introduction to Python"
msgstr "معرفی غیر رسمی پایتون"

#: ../../tutorial/introduction.rst:7
msgid ""
"In the following examples, input and output are distinguished by the "
"presence or absence of prompts (:term:`>>>` and :term:`...`): to repeat the "
"example, you must type everything after the prompt, when the prompt appears; "
"lines that do not begin with a prompt are output from the interpreter. Note "
"that a secondary prompt on a line by itself in an example means you must "
"type a blank line; this is used to end a multi-line command."
msgstr ""
"در مثال‌های زیر، ورودی و خروجی با وجود یا عدم وجود اعلان‌ها (:term:`>>>` و :"
"term:`...`) متمایز می‌شوند: برای تکرار مثال, باید همه چیز را بعد از دستور "
"تایپ کنید, زمانی که اعلان ظاهر شد. خطوطی که با اعلان شروع نمی شوند از مفسر "
"خروجی می شوند. توجه داشته باشید که یک دستور ثانویه روی یک خط به تنهایی در یک "
"مثال به این معنی است که باید یک خط خالی تایپ کنید. این برای پایان دادن به یک "
"فرمان چند خطی استفاده می شود."

#: ../../tutorial/introduction.rst:16
msgid ""
"You can toggle the display of prompts and output by clicking on ``>>>`` in "
"the upper-right corner of an example box.  If you hide the prompts and "
"output for an example, then you can easily copy and paste the input lines "
"into your interpreter."
msgstr ""
"می توانید با کلیک بر روی ``>>>`` در گوشه سمت راست بالای یک کادر مثال, نمایش "
"اعلان ها و خروجی ها را تغییر دهید.  اگر اعلان ها و خروجی ها را برای مثال "
"مخفی کنید, می توانید به راحتی خطوط ورودی را در مترجم خود کپی و جایگذاری کنید."

#: ../../tutorial/introduction.rst:23
msgid ""
"Many of the examples in this manual, even those entered at the interactive "
"prompt, include comments.  Comments in Python start with the hash character, "
"``#``, and extend to the end of the physical line.  A comment may appear at "
"the start of a line or following whitespace or code, but not within a string "
"literal.  A hash character within a string literal is just a hash character. "
"Since comments are to clarify code and are not interpreted by Python, they "
"may be omitted when typing in examples."
msgstr ""
"بسیاری از مثال‌های موجود در این راهنما، حتی نمونه‌هایی که در اعلان تعاملی وارد "
"شده‌اند، شامل نظرات هستند.  نظرات در پایتون با کاراکتر هش ``#`` شروع می شود و "
"تا انتهای خط فیزیکی گسترش می یابد.  یک نظر ممکن است در ابتدای یک خط یا پس از "
"فضای خالی یا کد ظاهر شود، اما نه در یک رشته به معنای واقعی کلمه.  یک کاراکتر "
"هش در یک رشته واقعی فقط یک کاراکتر هش است. از آنجایی که کامنت‌ها برای "
"شفاف‌سازی کد هستند و توسط پایتون تفسیر نمی‌شوند، ممکن است هنگام تایپ در مثال‌ها "
"حذف شوند."

#: ../../tutorial/introduction.rst:31
msgid "Some examples::"
msgstr "چند نمونه::"

#: ../../tutorial/introduction.rst:42
msgid "Using Python as a Calculator"
msgstr "استفاده از پایتون به عنوان ماشین حساب"

#: ../../tutorial/introduction.rst:44
msgid ""
"Let's try some simple Python commands.  Start the interpreter and wait for "
"the primary prompt, ``>>>``.  (It shouldn't take long.)"
msgstr ""
"بیایید چند دستور ساده پایتون را امتحان کنیم.  مفسر را راه اندازی کنید و "
"منتظر فرمان اولیه، ``>>>`` باشید.  (نباید زیاد طول بکشد.)"

#: ../../tutorial/introduction.rst:51
msgid "Numbers"
msgstr "اعداد"

#: ../../tutorial/introduction.rst:53
msgid ""
"The interpreter acts as a simple calculator: you can type an expression at "
"it and it will write the value.  Expression syntax is straightforward: the "
"operators ``+``, ``-``, ``*`` and ``/`` work just like in most other "
"languages (for example, Pascal or C); parentheses (``()``) can be used for "
"grouping. For example::"
msgstr ""

#: ../../tutorial/introduction.rst:68
msgid ""
"The integer numbers (e.g. ``2``, ``4``, ``20``) have type :class:`int`, the "
"ones with a fractional part (e.g. ``5.0``, ``1.6``) have type :class:"
"`float`.  We will see more about numeric types later in the tutorial."
msgstr ""
"اعداد صحیح (مانند ``2``, ``4``, ``20``) دارای نوع :class:`int` هستند، اعدادی "
"که دارای قسمت کسری هستند (مانند ``5.0``, ``1.6``) دارای نوع :class:`float` "
"هستند.  در ادامه در آموزش بیشتر در مورد انواع عددی خواهیم دید."

#: ../../tutorial/introduction.rst:72
msgid ""
"Division (``/``) always returns a float.  To do :term:`floor division` and "
"get an integer result (discarding any fractional result) you can use the ``//"
"`` operator; to calculate the remainder you can use ``%``::"
msgstr ""

#: ../../tutorial/introduction.rst:86
msgid ""
"With Python, it is possible to use the ``**`` operator to calculate powers "
"[#]_::"
msgstr ""
"با پایتون، می توان از عملگر ``**`` برای محاسبه قدرت ها استفاده کرد [#]_::"

#: ../../tutorial/introduction.rst:93
msgid ""
"The equal sign (``=``) is used to assign a value to a variable. Afterwards, "
"no result is displayed before the next interactive prompt::"
msgstr ""
"علامت مساوی (``=``) برای تخصیص یک مقدار به یک متغیر استفاده می شود. پس از "
"آن، هیچ نتیجه ای قبل از اعلان تعاملی بعدی نمایش داده نمی شود::"

#: ../../tutorial/introduction.rst:101
msgid ""
"If a variable is not \"defined\" (assigned a value), trying to use it will "
"give you an error::"
msgstr ""
"اگر متغیری \"تعریف\" نشده باشد (مقدار اختصاص داده شده), تلاش برای استفاده از "
"آن با خطای زیر مواجه می شود::"

#: ../../tutorial/introduction.rst:109
msgid ""
"There is full support for floating point; operators with mixed type operands "
"convert the integer operand to floating point::"
msgstr ""
"پشتیبانی کامل از ممیز شناور وجود دارد. عملگرهایی با عملوندهای نوع مختلط، "
"عملوند عدد صحیح را به ممیز شناور تبدیل می کنند:"

#: ../../tutorial/introduction.rst:115
msgid ""
"In interactive mode, the last printed expression is assigned to the variable "
"``_``.  This means that when you are using Python as a desk calculator, it "
"is somewhat easier to continue calculations, for example::"
msgstr ""
"در حالت تعاملی، آخرین عبارت چاپ شده به متغیر ``_`` اختصاص داده می شود.  این "
"بدان معنی است که وقتی از پایتون به عنوان یک ماشین حساب میز استفاده می کنید، "
"ادامه محاسبات تا حدودی آسان تر است، به عنوان مثال:"

#: ../../tutorial/introduction.rst:128
msgid ""
"This variable should be treated as read-only by the user.  Don't explicitly "
"assign a value to it --- you would create an independent local variable with "
"the same name masking the built-in variable with its magic behavior."
msgstr ""
"این متغیر باید توسط کاربر فقط خواندنی باشد.  صراحتاً مقداری به آن اختصاص "
"ندهید --- می توانید یک متغیر محلی مستقل با همان نام ایجاد کنید که متغیر "
"داخلی را با رفتار جادویی آن پوشانده است."

#: ../../tutorial/introduction.rst:132
msgid ""
"In addition to :class:`int` and :class:`float`, Python supports other types "
"of numbers, such as :class:`~decimal.Decimal` and :class:`~fractions."
"Fraction`. Python also has built-in support for :ref:`complex numbers "
"<typesnumeric>`, and uses the ``j`` or ``J`` suffix to indicate the "
"imaginary part (e.g. ``3+5j``)."
msgstr ""
"علاوه بر :class:`int` و :class:`float`، پایتون از انواع دیگری از اعداد "
"مانند :class:`~decimal.Decimal` و :class:`~fractions.Fraction` پشتیبانی می "
"کند. پایتون همچنین از :ref:`complex numbers <typesnumeric>` پشتیبانی داخلی "
"دارد و از پسوند ``j`` یا ``J`` برای نشان دادن قسمت خیالی (مثلاً ``3+5j``) "
"استفاده می کند."

#: ../../tutorial/introduction.rst:142
msgid "Strings"
msgstr ""

#: ../../tutorial/introduction.rst:144
msgid ""
"Besides numbers, Python can also manipulate strings, which can be expressed "
"in several ways.  They can be enclosed in single quotes (``'...'``) or "
"double quotes (``\"...\"``) with the same result [#]_.  ``\\`` can be used "
"to escape quotes::"
msgstr ""

#: ../../tutorial/introduction.rst:162
msgid ""
"In the interactive interpreter, the output string is enclosed in quotes and "
"special characters are escaped with backslashes.  While this might sometimes "
"look different from the input (the enclosing quotes could change), the two "
"strings are equivalent.  The string is enclosed in double quotes if the "
"string contains a single quote and no double quotes, otherwise it is "
"enclosed in single quotes.  The :func:`print` function produces a more "
"readable output, by omitting the enclosing quotes and by printing escaped "
"and special characters::"
msgstr ""

#: ../../tutorial/introduction.rst:182
msgid ""
"If you don't want characters prefaced by ``\\`` to be interpreted as special "
"characters, you can use *raw strings* by adding an ``r`` before the first "
"quote::"
msgstr ""
"اگر نمی‌خواهید کاراکترهای پیش‌گفتار ``\\`` به عنوان کاراکترهای خاص تفسیر شوند، "
"می‌توانید از *raw strings* با اضافه کردن یک ``r`` قبل از اولین نقل قول "
"استفاده کنید:"

#: ../../tutorial/introduction.rst:192
msgid ""
"String literals can span multiple lines.  One way is using triple-quotes: "
"``\"\"\"...\"\"\"`` or ``'''...'''``.  End of lines are automatically "
"included in the string, but it's possible to prevent this by adding a ``\\`` "
"at the end of the line.  The following example::"
msgstr ""

#: ../../tutorial/introduction.rst:203
msgid ""
"produces the following output (note that the initial newline is not "
"included):"
msgstr ""

#: ../../tutorial/introduction.rst:211
msgid ""
"Strings can be concatenated (glued together) with the ``+`` operator, and "
"repeated with ``*``::"
msgstr ""
"رشته ها را می توان با عملگر ``+`` متصل کرد (به هم چسباند) و با ``*`` تکرار "
"کرد:"

#: ../../tutorial/introduction.rst:218
msgid ""
"Two or more *string literals* (i.e. the ones enclosed between quotes) next "
"to each other are automatically concatenated. ::"
msgstr ""
"دو یا چند *string literals* (یعنی آنهایی که بین نقل قول قرار می گیرند) در "
"کنار یکدیگر به طور خودکار به هم متصل می شوند. ::"

#: ../../tutorial/introduction.rst:224
msgid ""
"This feature is particularly useful when you want to break long strings::"
msgstr ""
"این ویژگی به ویژه زمانی مفید است که می خواهید رشته های طولانی را بشکنید:"

#: ../../tutorial/introduction.rst:231
msgid ""
"This only works with two literals though, not with variables or expressions::"
msgstr "این فقط با دو حرف واقعی کار می کند، نه با متغیرها یا عبارات::"

#: ../../tutorial/introduction.rst:245
msgid ""
"If you want to concatenate variables or a variable and a literal, use ``+``::"
msgstr ""
"اگر می خواهید متغیرها یا یک متغیر و یک لفظ را به هم متصل کنید، از ``+`` "
"استفاده کنید::"

#: ../../tutorial/introduction.rst:250
msgid ""
"Strings can be *indexed* (subscripted), with the first character having "
"index 0. There is no separate character type; a character is simply a string "
"of size one::"
msgstr ""
"رشته ها می توانند *indexed* (مشترک) باشند که اولین کاراکتر دارای اندیس 0 "
"باشد. هیچ نوع کاراکتر جداگانه ای وجود ندارد. یک کاراکتر به سادگی یک رشته با "
"اندازه یک است:"

#: ../../tutorial/introduction.rst:260
msgid ""
"Indices may also be negative numbers, to start counting from the right::"
msgstr "شاخص ها نیز ممکن است اعداد منفی باشند، برای شروع شمارش از سمت راست:"

#: ../../tutorial/introduction.rst:269
msgid "Note that since -0 is the same as 0, negative indices start from -1."
msgstr ""
"توجه داشته باشید که از آنجایی که -0 همان 0 است، شاخص های منفی از -1 شروع می "
"شوند."

#: ../../tutorial/introduction.rst:271
msgid ""
"In addition to indexing, *slicing* is also supported.  While indexing is "
"used to obtain individual characters, *slicing* allows you to obtain "
"substring::"
msgstr ""

#: ../../tutorial/introduction.rst:279
msgid ""
"Slice indices have useful defaults; an omitted first index defaults to zero, "
"an omitted second index defaults to the size of the string being sliced. ::"
msgstr ""
"شاخص های برش دارای پیش فرض های مفیدی هستند. شاخص اول حذف شده به طور پیش فرض "
"صفر است، شاخص دوم حذف شده به طور پیش فرض به اندازه رشته در حال برش است. ::"

#: ../../tutorial/introduction.rst:289
msgid ""
"Note how the start is always included, and the end always excluded.  This "
"makes sure that ``s[:i] + s[i:]`` is always equal to ``s``::"
msgstr ""
"توجه داشته باشید که چگونه شروع همیشه گنجانده می شود و پایان همیشه حذف می "
"شود.  این اطمینان حاصل می کند که ``s[:i] + s[i:]`` همیشه برابر با ``s`` است:"

#: ../../tutorial/introduction.rst:297
msgid ""
"One way to remember how slices work is to think of the indices as pointing "
"*between* characters, with the left edge of the first character numbered 0. "
"Then the right edge of the last character of a string of *n* characters has "
"index *n*, for example::"
msgstr ""
"یکی از راه‌های به یاد آوردن نحوه کار برش‌ها این است که شاخص‌ها را به‌عنوان "
"کاراکترهای *between* در نظر بگیرید، با لبه سمت چپ اولین کاراکتر با شماره 0. "
"سپس لبه سمت راست آخرین کاراکتر یک رشته از کاراکترهای *n* دارای شاخص *n* است، "
"برای مثال:"

#: ../../tutorial/introduction.rst:308
msgid ""
"The first row of numbers gives the position of the indices 0...6 in the "
"string; the second row gives the corresponding negative indices. The slice "
"from *i* to *j* consists of all characters between the edges labeled *i* and "
"*j*, respectively."
msgstr ""
"ردیف اول اعداد موقعیت شاخص ها را 0...6 در رشته می دهد. ردیف دوم شاخص های "
"منفی مربوطه را نشان می دهد. برش از *i* تا *j* شامل تمام کاراکترهای بین "
"لبه‌های با برچسب *i* و *j* است."

#: ../../tutorial/introduction.rst:313
msgid ""
"For non-negative indices, the length of a slice is the difference of the "
"indices, if both are within bounds.  For example, the length of "
"``word[1:3]`` is 2."
msgstr ""
"برای شاخص‌های غیرمنفی، در صورتی که هر دو در محدوده باشند، طول یک برش تفاوت "
"شاخص‌ها است.  به عنوان مثال، طول ``word[1:3]`` 2 است."

#: ../../tutorial/introduction.rst:317
msgid "Attempting to use an index that is too large will result in an error::"
msgstr "تلاش برای استفاده از شاخصی که خیلی بزرگ است با خطا مواجه می شود::"

#: ../../tutorial/introduction.rst:324
msgid ""
"However, out of range slice indexes are handled gracefully when used for "
"slicing::"
msgstr ""
"با این حال، شاخص‌های برش خارج از محدوده زمانی که برای برش استفاده می‌شوند، به "
"خوبی مدیریت می‌شوند:"

#: ../../tutorial/introduction.rst:332
msgid ""
"Python strings cannot be changed --- they are :term:`immutable`. Therefore, "
"assigning to an indexed position in the string results in an error::"
msgstr ""
"رشته های پایتون قابل تغییر نیستند --- آنها :term:`immutable` هستند. "
"بنابراین، انتساب به یک موقعیت ایندکس شده در رشته منجر به خطا می شود::"

#: ../../tutorial/introduction.rst:344
msgid "If you need a different string, you should create a new one::"
msgstr "اگر به رشته دیگری نیاز دارید، باید رشته جدیدی ایجاد کنید:"

#: ../../tutorial/introduction.rst:351
msgid "The built-in function :func:`len` returns the length of a string::"
msgstr "تابع داخلی :func:`len` طول یک رشته را برمی گرداند:"

#: ../../tutorial/introduction.rst:362
msgid ":ref:`textseq`"
msgstr ":ref:`textseq`"

#: ../../tutorial/introduction.rst:361
msgid ""
"Strings are examples of *sequence types*, and support the common operations "
"supported by such types."
msgstr ""
"رشته ها نمونه هایی از *sequence types* هستند و از عملیات رایج پشتیبانی شده "
"توسط چنین انواعی پشتیبانی می کنند."

#: ../../tutorial/introduction.rst:366
msgid ":ref:`string-methods`"
msgstr ":ref:`string-methods`"

#: ../../tutorial/introduction.rst:365
msgid ""
"Strings support a large number of methods for basic transformations and "
"searching."
msgstr ""
"رشته ها از تعداد زیادی روش برای تبدیل های اساسی و جستجو پشتیبانی می کنند."

#: ../../tutorial/introduction.rst:369
msgid ":ref:`f-strings`"
msgstr ":ref:`f-strings`"

#: ../../tutorial/introduction.rst:369
msgid "String literals that have embedded expressions."
msgstr "لفظ رشته ای که عبارات تعبیه شده دارند."

#: ../../tutorial/introduction.rst:372
msgid ":ref:`formatstrings`"
msgstr ":ref:`formatstrings`"

#: ../../tutorial/introduction.rst:372
msgid "Information about string formatting with :meth:`str.format`."
msgstr "اطلاعاتی در مورد قالب بندی رشته با :meth:`str.format`."

#: ../../tutorial/introduction.rst:375
msgid ":ref:`old-string-formatting`"
msgstr ":ref:`old-string-formatting`"

#: ../../tutorial/introduction.rst:375
msgid ""
"The old formatting operations invoked when strings are the left operand of "
"the ``%`` operator are described in more detail here."
msgstr ""
"عملیات قالب‌بندی قدیمی که زمانی که رشته‌ها عملوند سمت چپ عملگر ``%`` هستند "
"فراخوانی می‌شوند در اینجا با جزئیات بیشتری توضیح داده شده‌اند."

#: ../../tutorial/introduction.rst:382
msgid "Lists"
msgstr "لیست ها"

#: ../../tutorial/introduction.rst:384
msgid ""
"Python knows a number of *compound* data types, used to group together other "
"values.  The most versatile is the *list*, which can be written as a list of "
"comma-separated values (items) between square brackets.  Lists might contain "
"items of different types, but usually the items all have the same type. ::"
msgstr ""
"پایتون تعدادی از انواع داده *compound* را می شناسد که برای گروه بندی مقادیر "
"دیگر استفاده می شود.  همه کاره ترین *list* است که می تواند به عنوان لیستی از "
"مقادیر (اقلام) جدا شده با کاما بین پرانتز نوشته شود.  فهرست ها ممکن است شامل "
"مواردی از انواع مختلف باشند، اما معمولاً همه موارد دارای یک نوع هستند. ::"

#: ../../tutorial/introduction.rst:393
msgid ""
"Like strings (and all other built-in :term:`sequence` types), lists can be "
"indexed and sliced::"
msgstr ""
"مانند رشته ها (و سایر انواع :term:`sequence` داخلی), لیست ها را می توان "
"ایندکس و برش داد:"

#: ../../tutorial/introduction.rst:403
msgid ""
"All slice operations return a new list containing the requested elements.  "
"This means that the following slice returns a :ref:`shallow copy "
"<shallow_vs_deep_copy>` of the list::"
msgstr ""
"تمام عملیات برش یک لیست جدید حاوی عناصر درخواستی را برمی گرداند.  این بدان "
"معنی است که برش زیر یک :ref:`shallow copy <shallow_vs_deep_copy>` از لیست را "
"برمی گرداند:"

#: ../../tutorial/introduction.rst:410
msgid "Lists also support operations like concatenation::"
msgstr "لیست ها همچنین از عملیات هایی مانند الحاق::"

#: ../../tutorial/introduction.rst:415
msgid ""
"Unlike strings, which are :term:`immutable`, lists are a :term:`mutable` "
"type, i.e. it is possible to change their content::"
msgstr ""
"بر خلاف رشته ها که :term:`immutable` هستند، لیست ها از نوع :term:`mutable` "
"هستند، یعنی می توان محتوای آنها را تغییر داد:"

#: ../../tutorial/introduction.rst:425
msgid ""
"You can also add new items at the end of the list, by using the :meth:`~list."
"append` *method* (we will see more about methods later)::"
msgstr ""

#: ../../tutorial/introduction.rst:433
msgid ""
"Assignment to slices is also possible, and this can even change the size of "
"the list or clear it entirely::"
msgstr ""
"تخصیص به برش ها نیز امکان پذیر است، و این حتی می تواند اندازه لیست را تغییر "
"دهد یا آن را به طور کامل پاک کند::"

#: ../../tutorial/introduction.rst:452
msgid "The built-in function :func:`len` also applies to lists::"
msgstr "تابع داخلی :func:`len` همچنین برای لیست ها اعمال می شود:"

#: ../../tutorial/introduction.rst:458
msgid ""
"It is possible to nest lists (create lists containing other lists), for "
"example::"
msgstr ""
"امکان تودرتو کردن لیست ها (ایجاد لیست های حاوی لیست های دیگر) وجود دارد، به "
"عنوان مثال::"

#: ../../tutorial/introduction.rst:474
msgid "First Steps Towards Programming"
msgstr "اولین قدم به سوی برنامه نویسی"

#: ../../tutorial/introduction.rst:476
msgid ""
"Of course, we can use Python for more complicated tasks than adding two and "
"two together.  For instance, we can write an initial sub-sequence of the "
"`Fibonacci series <https://en.wikipedia.org/wiki/Fibonacci_number>`_ as "
"follows::"
msgstr ""

#: ../../tutorial/introduction.rst:496
msgid "This example introduces several new features."
msgstr "این مثال چندین ویژگی جدید را معرفی می کند."

#: ../../tutorial/introduction.rst:498
msgid ""
"The first line contains a *multiple assignment*: the variables ``a`` and "
"``b`` simultaneously get the new values 0 and 1.  On the last line this is "
"used again, demonstrating that the expressions on the right-hand side are "
"all evaluated first before any of the assignments take place.  The right-"
"hand side expressions are evaluated  from the left to the right."
msgstr ""
"خط اول حاوی یک *multiple assignment* است: متغیرهای ``a`` و ``b`` به طور "
"همزمان مقادیر جدید 0 و 1 را دریافت می کنند. در خط آخر دوباره از این استفاده "
"می شود و نشان می دهد که عبارات سمت راست قبل از انجام هر یک از تخصیص ها ابتدا "
"ارزیابی می شوند.  عبارات سمت راست از چپ به راست ارزیابی می شوند."

#: ../../tutorial/introduction.rst:504
msgid ""
"The :keyword:`while` loop executes as long as the condition (here: ``a < "
"10``) remains true.  In Python, like in C, any non-zero integer value is "
"true; zero is false.  The condition may also be a string or list value, in "
"fact any sequence; anything with a non-zero length is true, empty sequences "
"are false.  The test used in the example is a simple comparison.  The "
"standard comparison operators are written the same as in C: ``<`` (less "
"than), ``>`` (greater than), ``==`` (equal to), ``<=`` (less than or equal "
"to), ``>=`` (greater than or equal to) and ``!=`` (not equal to)."
msgstr ""
"حلقه :keyword:`while` تا زمانی اجرا می شود که شرط (در اینجا: ``a < 10``) "
"درست باقی بماند.  در پایتون، مانند C، هر عدد صحیح غیر صفر درست است. صفر "
"نادرست است  شرط همچنین ممکن است یک مقدار رشته یا لیست، در واقع هر دنباله ای "
"باشد. هر چیزی با طول غیر صفر درست است، دنباله های خالی نادرست هستند.  تست "
"استفاده شده در مثال یک مقایسه ساده است.  عملگرهای مقایسه استاندارد مانند C "
"نوشته می شوند: ``<`` (کمتر از)، ``>`` (بزرگتر از)، ``==`` (برابر)، ``<=`` "
"(کمتر یا مساوی)، ``>=`` (بزرگتر یا مساوی) و ``!=`` (نه برابر)."

#: ../../tutorial/introduction.rst:513
msgid ""
"The *body* of the loop is *indented*: indentation is Python's way of "
"grouping statements.  At the interactive prompt, you have to type a tab or "
"space(s) for each indented line.  In practice you will prepare more "
"complicated input for Python with a text editor; all decent text editors "
"have an auto-indent facility.  When a compound statement is entered "
"interactively, it must be followed by a blank line to indicate completion "
"(since the parser cannot guess when you have typed the last line).  Note "
"that each line within a basic block must be indented by the same amount."
msgstr ""
"*body* حلقه *indented* است: تورفتگی روش پایتون برای گروه بندی عبارات است.  "
"در اعلان تعاملی، باید یک برگه یا فاصله (ها) را برای هر خط تورفتگی تایپ "
"کنید.  در عمل با یک ویرایشگر متن ورودی پیچیده تری را برای پایتون آماده "
"خواهید کرد. همه ویرایشگرهای متن مناسب دارای قابلیت تورفتگی خودکار هستند.  "
"هنگامی که یک عبارت ترکیبی به صورت تعاملی وارد می شود، باید یک خط خالی برای "
"نشان دادن تکمیل شدن دنبال شود (زیرا تجزیه کننده نمی تواند حدس بزند که آخرین "
"خط را چه زمانی تایپ کرده اید).  توجه داشته باشید که هر خط در یک بلوک اصلی "
"باید به همان میزان فرورفته باشد."

#: ../../tutorial/introduction.rst:522
msgid ""
"The :func:`print` function writes the value of the argument(s) it is given. "
"It differs from just writing the expression you want to write (as we did "
"earlier in the calculator examples) in the way it handles multiple "
"arguments, floating point quantities, and strings.  Strings are printed "
"without quotes, and a space is inserted between items, so you can format "
"things nicely, like this::"
msgstr ""

#: ../../tutorial/introduction.rst:533
msgid ""
"The keyword argument *end* can be used to avoid the newline after the "
"output, or end the output with a different string::"
msgstr ""
"آرگومان کلمه کلیدی *end* را می توان برای اجتناب از خط جدید بعد از خروجی "
"استفاده کرد یا خروجی را با رشته ای متفاوت خاتمه داد:"

#: ../../tutorial/introduction.rst:545
msgid "Footnotes"
msgstr "پاورقی ها"

#: ../../tutorial/introduction.rst:546
msgid ""
"Since ``**`` has higher precedence than ``-``, ``-3**2`` will be interpreted "
"as ``-(3**2)`` and thus result in ``-9``.  To avoid this and get ``9``, you "
"can use ``(-3)**2``."
msgstr ""
"از آنجایی که ``**`` اولویت بیشتری نسبت به ``-`` دارد، ``-3**2`` به عنوان ``-"
"(3**2)`` تفسیر می شود و بنابراین منجر به ``-9`` می شود.  برای جلوگیری از این "
"امر و دریافت ``9``، می توانید از ``(-3)**2`` استفاده کنید."

#: ../../tutorial/introduction.rst:550
msgid ""
"Unlike other languages, special characters such as ``\\n`` have the same "
"meaning with both single (``'...'``) and double (``\"...\"``) quotes. The "
"only difference between the two is that within single quotes you don't need "
"to escape ``\"`` (but you have to escape ``\\'``) and vice versa."
msgstr ""
"بر خلاف زبان های دیگر، کاراکترهای ویژه مانند ``\\n`` با هر دو نقل قول تک "
"(``'...'``) و دو (``\"...\"``) معنی یکسانی دارند. تنها تفاوت بین این دو این "
"است که در داخل نقل قول های تک نیازی به فرار از ``\"`` ندارید (اما باید از "
"``\\'`` فرار کنید) و بالعکس."
