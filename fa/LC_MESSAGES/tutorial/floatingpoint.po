# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Alireza Shabani <theRevisto@gmail.com>, 2025
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-02-21 14:16+0000\n"
"PO-Revision-Date: 2021-06-28 01:50+0000\n"
"Last-Translator: Alireza Shabani <theRevisto@gmail.com>, 2025\n"
"Language-Team: Persian (https://app.transifex.com/python-doc/teams/5390/fa/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: fa\n"
"Plural-Forms: nplurals=2; plural=(n > 1);\n"

#: ../../tutorial/floatingpoint.rst:10
msgid "Floating-Point Arithmetic:  Issues and Limitations"
msgstr "محاسبات ممیز شناور: مسائل و محدودیت ها"

#: ../../tutorial/floatingpoint.rst:16
msgid ""
"Floating-point numbers are represented in computer hardware as base 2 "
"(binary) fractions.  For example, the **decimal** fraction ``0.625`` has "
"value 6/10 + 2/100 + 5/1000, and in the same way the **binary** fraction "
"``0.101`` has value 1/2 + 0/4 + 1/8. These two fractions have identical "
"values, the only real difference being that the first is written in base 10 "
"fractional notation, and the second in base 2."
msgstr ""
"اعداد ممیز شناور در سخت افزار کامپیوتر به صورت کسری پایه 2 (دودویی) نشان "
"داده می شوند.  به عنوان مثال، کسر **decimal** ``0.625`` دارای ارزش 6/10 + "
"2/100 + 5/1000 است و به همین ترتیب کسر **binary** ``0.101`` دارای ارزش 1/2 +"
" 0/4 + 1/8 است. این دو کسر مقادیر یکسانی دارند، تنها تفاوت واقعی این است که "
"اولی با نماد کسری پایه 10 و دومی در پایه 2 نوشته شده است."

#: ../../tutorial/floatingpoint.rst:23
msgid ""
"Unfortunately, most decimal fractions cannot be represented exactly as "
"binary fractions.  A consequence is that, in general, the decimal floating-"
"point numbers you enter are only approximated by the binary floating-point "
"numbers actually stored in the machine."
msgstr ""
"متأسفانه، اکثر کسرهای اعشاری نمی توانند دقیقاً به صورت کسرهای دودویی نمایش "
"داده شوند.  نتیجه این است که، به طور کلی، اعداد ممیز شناور اعشاری که وارد "
"می‌کنید، تنها با اعداد ممیز شناور باینری که واقعاً در دستگاه ذخیره می‌شوند، "
"تقریبی دارند."

#: ../../tutorial/floatingpoint.rst:28
msgid ""
"The problem is easier to understand at first in base 10.  Consider the "
"fraction 1/3.  You can approximate that as a base 10 fraction::"
msgstr ""
"درک مسئله در ابتدا در پایه 10 آسانتر است. کسری 1/3 را در نظر بگیرید.  شما می"
" توانید آن را به عنوان کسری پایه 10 تقریب بزنید:"

#: ../../tutorial/floatingpoint.rst:31
msgid "0.3"
msgstr "0.3"

#: ../../tutorial/floatingpoint.rst:33 ../../tutorial/floatingpoint.rst:37
msgid "or, better, ::"
msgstr "یا بهتر ::"

#: ../../tutorial/floatingpoint.rst:35
msgid "0.33"
msgstr "0.33"

#: ../../tutorial/floatingpoint.rst:39
msgid "0.333"
msgstr "0.333"

#: ../../tutorial/floatingpoint.rst:41
msgid ""
"and so on.  No matter how many digits you're willing to write down, the "
"result will never be exactly 1/3, but will be an increasingly better "
"approximation of 1/3."
msgstr ""
"و غیره  مهم نیست که چند رقم را بخواهید یادداشت کنید، نتیجه هرگز دقیقاً 1/3 "
"نخواهد بود، بلکه تقریب فزاینده بهتری از 1/3 خواهد بود."

#: ../../tutorial/floatingpoint.rst:45
msgid ""
"In the same way, no matter how many base 2 digits you're willing to use, the"
" decimal value 0.1 cannot be represented exactly as a base 2 fraction.  In "
"base 2, 1/10 is the infinitely repeating fraction ::"
msgstr ""
"به همین ترتیب، مهم نیست که چند رقم پایه 2 را می خواهید استفاده کنید، مقدار "
"اعشاری 0.1 نمی تواند دقیقاً به عنوان یک کسر پایه 2 نمایش داده شود.  در پایه "
"2، 1/10 کسر بی نهایت تکراری است::"

#: ../../tutorial/floatingpoint.rst:49
msgid "0.0001100110011001100110011001100110011001100110011..."
msgstr "0.0001100110011001100110011001100110011001100110011..."

#: ../../tutorial/floatingpoint.rst:51
msgid ""
"Stop at any finite number of bits, and you get an approximation.  On most "
"machines today, floats are approximated using a binary fraction with the "
"numerator using the first 53 bits starting with the most significant bit and"
" with the denominator as a power of two.  In the case of 1/10, the binary "
"fraction is ``3602879701896397 / 2 ** 55`` which is close to but not exactly"
" equal to the true value of 1/10."
msgstr ""
"روی هر تعداد بیت محدودی توقف کنید و یک تقریب به دست می آورید.  در اکثر "
"ماشین‌های امروزی، شناورها با استفاده از یک کسر دودویی با عددی که از 53 بیت "
"اول استفاده می‌کند، با مهم‌ترین بیت شروع می‌شود و مخرج آن به توان دو می‌رسد."
"  در مورد 1/10، کسر باینری ``3602879701896397 / 2 ** 55`` است که نزدیک است "
"اما دقیقاً برابر با مقدار واقعی 1/10 نیست."

#: ../../tutorial/floatingpoint.rst:58
msgid ""
"Many users are not aware of the approximation because of the way values are "
"displayed.  Python only prints a decimal approximation to the true decimal "
"value of the binary approximation stored by the machine.  On most machines, "
"if Python were to print the true decimal value of the binary approximation "
"stored for 0.1, it would have to display::"
msgstr ""
"بسیاری از کاربران به دلیل نحوه نمایش مقادیر از تقریب آگاه نیستند.  پایتون "
"فقط یک تقریب اعشاری را به مقدار اعشاری واقعی تقریب باینری ذخیره شده توسط "
"ماشین چاپ می کند.  در اکثر ماشین‌ها، اگر پایتون مقدار اعشاری واقعی تقریب "
"باینری ذخیره شده برای 0.1 را چاپ کند، باید نشان دهد:"

#: ../../tutorial/floatingpoint.rst:64
msgid ""
">>> 0.1\n"
"0.1000000000000000055511151231257827021181583404541015625"
msgstr ""
">>> 0.1\n"
"0.1000000000000000055511151231257827021181583404541015625"

#: ../../tutorial/floatingpoint.rst:67
msgid ""
"That is more digits than most people find useful, so Python keeps the number"
" of digits manageable by displaying a rounded value instead:"
msgstr ""
"این ارقام بیشتر از آن چیزی است که بیشتر مردم مفید می دانند، بنابراین پایتون "
"با نمایش یک مقدار گرد شده، تعداد ارقام را قابل مدیریت نگه می دارد:"

#: ../../tutorial/floatingpoint.rst:70
msgid ""
">>> 1 / 10\n"
"0.1"
msgstr ""
">>> 1 / 10\n"
"0.1"

#: ../../tutorial/floatingpoint.rst:75
msgid ""
"Just remember, even though the printed result looks like the exact value of "
"1/10, the actual stored value is the nearest representable binary fraction."
msgstr ""
"فقط به یاد داشته باشید، حتی اگر نتیجه چاپ شده شبیه مقدار دقیق 1/10 باشد، "
"مقدار ذخیره شده واقعی نزدیکترین کسر باینری قابل نمایش است."

#: ../../tutorial/floatingpoint.rst:78
msgid ""
"Interestingly, there are many different decimal numbers that share the same "
"nearest approximate binary fraction.  For example, the numbers ``0.1`` and "
"``0.10000000000000001`` and "
"``0.1000000000000000055511151231257827021181583404541015625`` are all "
"approximated by ``3602879701896397 / 2 ** 55``.  Since all of these decimal "
"values share the same approximation, any one of them could be displayed "
"while still preserving the invariant ``eval(repr(x)) == x``."
msgstr ""
"جالب اینجاست که اعداد اعشاری مختلف زیادی وجود دارند که نزدیکترین کسر دودویی "
"تقریبی یکسانی دارند.  به عنوان مثال، اعداد ``0.1`` و ``0.10000000000000001``"
" و ``0.1000000000000000055511151231257827021181583404541015625`` همگی با "
"``3602879701896397 / 2 ** 55`` تقریبی هستند.  از آنجایی که همه این مقادیر "
"اعشاری تقریب یکسانی دارند، هر یک از آنها می تواند با حفظ ``eval(repr(x)) == "
"x`` ثابت نمایش داده شود."

#: ../../tutorial/floatingpoint.rst:86
msgid ""
"Historically, the Python prompt and built-in :func:`repr` function would "
"choose the one with 17 significant digits, ``0.10000000000000001``.   "
"Starting with Python 3.1, Python (on most systems) is now able to choose the"
" shortest of these and simply display ``0.1``."
msgstr ""
"از لحاظ تاریخی، تابع اعلان پایتون و تابع :func:`repr` داخلی، یکی با 17 رقم "
"قابل توجه، ``0.10000000000000001`` را انتخاب می کند.   با شروع پایتون 3.1، "
"پایتون (در اکثر سیستم ها) اکنون می تواند کوتاه ترین را انتخاب کند و به سادگی"
" ``0.1`` را نمایش دهد."

#: ../../tutorial/floatingpoint.rst:91
msgid ""
"Note that this is in the very nature of binary floating point: this is not a"
" bug in Python, and it is not a bug in your code either.  You'll see the "
"same kind of thing in all languages that support your hardware's floating-"
"point arithmetic (although some languages may not *display* the difference "
"by default, or in all output modes)."
msgstr ""
"توجه داشته باشید که این در ماهیت نقطه شناور باینری است: این یک باگ در پایتون"
" نیست و در کد شما نیز وجود ندارد.  در همه زبان‌هایی که از محاسبات ممیز شناور"
" سخت‌افزار شما پشتیبانی می‌کنند، چیزهای مشابهی خواهید دید (اگرچه ممکن است "
"برخی از زبان‌ها به‌طور پیش‌فرض یا در همه حالت‌های خروجی تفاوت *display* را "
"نداشته باشند)."

#: ../../tutorial/floatingpoint.rst:97
msgid ""
"For more pleasant output, you may wish to use string formatting to produce a"
" limited number of significant digits:"
msgstr ""
"برای خروجی دلپذیرتر، ممکن است بخواهید از قالب بندی رشته برای تولید تعداد "
"محدودی ارقام قابل توجه استفاده کنید:"

#: ../../tutorial/floatingpoint.rst:100
msgid ""
">>> format(math.pi, '.12g')  # give 12 significant digits\n"
"'3.14159265359'\n"
"\n"
">>> format(math.pi, '.2f')   # give 2 digits after the point\n"
"'3.14'\n"
"\n"
">>> repr(math.pi)\n"
"'3.141592653589793'"
msgstr ""
">>> format(math.pi, '.12g')  # give 12 significant digits\n"
"'3.14159265359'\n"
"\n"
">>> format(math.pi, '.2f')   # give 2 digits after the point\n"
"'3.14'\n"
"\n"
">>> repr(math.pi)\n"
"'3.141592653589793'"

#: ../../tutorial/floatingpoint.rst:111
msgid ""
"It's important to realize that this is, in a real sense, an illusion: you're"
" simply rounding the *display* of the true machine value."
msgstr ""
"درک این نکته مهم است که این به معنای واقعی یک توهم است: شما به سادگی "
"*display* مقدار واقعی ماشین را گرد می کنید."

#: ../../tutorial/floatingpoint.rst:114
msgid ""
"One illusion may beget another.  For example, since 0.1 is not exactly 1/10,"
" summing three values of 0.1 may not yield exactly 0.3, either:"
msgstr ""
"یک توهم ممکن است توهم دیگری ایجاد کند.  برای مثال، از آنجایی که 0.1 دقیقاً "
"1/10 نیست، با جمع کردن سه مقدار 0.1 ممکن است دقیقاً 0.3 به دست نیاید:"

#: ../../tutorial/floatingpoint.rst:117
msgid ""
">>> 0.1 + 0.1 + 0.1 == 0.3\n"
"False"
msgstr ""
">>> 0.1 + 0.1 + 0.1 == 0.3\n"
"False"

#: ../../tutorial/floatingpoint.rst:122
msgid ""
"Also, since the 0.1 cannot get any closer to the exact value of 1/10 and 0.3"
" cannot get any closer to the exact value of 3/10, then pre-rounding with "
":func:`round` function cannot help:"
msgstr ""
"همچنین، از آنجایی که 0.1 نمی تواند به مقدار دقیق 1/10 نزدیک شود و 0.3 نمی "
"تواند به مقدار دقیق 3/10 نزدیک شود، بنابراین پیش گرد کردن با تابع "
":func:`round` نمی تواند کمک کند:"

#: ../../tutorial/floatingpoint.rst:126
msgid ""
">>> round(0.1, 1) + round(0.1, 1) + round(0.1, 1) == round(0.3, 1)\n"
"False"
msgstr ""
">>> round(0.1, 1) + round(0.1, 1) + round(0.1, 1) == round(0.3, 1)\n"
"False"

#: ../../tutorial/floatingpoint.rst:131
msgid ""
"Though the numbers cannot be made closer to their intended exact values, the"
" :func:`math.isclose` function can be useful for comparing inexact values:"
msgstr ""
"اگرچه نمی توان اعداد را به مقادیر دقیق مورد نظر نزدیکتر کرد، تابع "
":func:`math.isclose` می تواند برای مقایسه مقادیر غیر دقیق مفید باشد:"

#: ../../tutorial/floatingpoint.rst:134
msgid ""
">>> math.isclose(0.1 + 0.1 + 0.1, 0.3)\n"
"True"
msgstr ""
">>> math.isclose(0.1 + 0.1 + 0.1, 0.3)\n"
"True"

#: ../../tutorial/floatingpoint.rst:139
msgid ""
"Alternatively, the :func:`round` function can be used to compare rough "
"approximations:"
msgstr ""
"همچنین می توان از تابع :func:`round` برای مقایسه تقریب های تقریبی استفاده "
"کرد:"

#: ../../tutorial/floatingpoint.rst:142
msgid ""
">>> round(math.pi, ndigits=2) == round(22 / 7, ndigits=2)\n"
"True"
msgstr ""
">>> round(math.pi, ndigits=2) == round(22 / 7, ndigits=2)\n"
"True"

#: ../../tutorial/floatingpoint.rst:147
msgid ""
"Binary floating-point arithmetic holds many surprises like this.  The "
"problem with \"0.1\" is explained in precise detail below, in the "
"\"Representation Error\" section.  See `Examples of Floating Point Problems "
"<https://jvns.ca/blog/2023/01/13/examples-of-floating-point-problems/>`_ for"
" a pleasant summary of how binary floating point works and the kinds of "
"problems commonly encountered in practice.  Also see `The Perils of Floating"
" Point <http://www.indowsway.com/floatingpoint.htm>`_ for a more complete "
"account of other common surprises."
msgstr ""
"محاسبات ممیز شناور دودویی شگفتی‌های زیادی از این دست را در خود دارد.  مشکل "
"\"0.1\" با جزئیات دقیق در زیر، در بخش \"خطای نمایش\" توضیح داده شده است.  "
"برای یک خلاصه دلپذیر از نحوه عملکرد ممیز شناور باینری و انواع مشکلاتی که "
"معمولا در عمل با آن مواجه می شوید، به `Examples of Floating Point Problems "
"<https://jvns.ca/blog/2023/01/13/examples-of-floating-point-problems/>`_ "
"مراجعه کنید.  همچنین `The Perils of Floating Point "
"<http://www.indowsway.com/floatingpoint.htm>`_ را برای توضیح کامل تر از سایر"
" شگفتی های رایج ببینید."

#: ../../tutorial/floatingpoint.rst:156
msgid ""
"As that says near the end, \"there are no easy answers.\"  Still, don't be "
"unduly wary of floating point!  The errors in Python float operations are "
"inherited from the floating-point hardware, and on most machines are on the "
"order of no more than 1 part in 2\\*\\*53 per operation.  That's more than "
"adequate for most tasks, but you do need to keep in mind that it's not "
"decimal arithmetic and that every float operation can suffer a new rounding "
"error."
msgstr ""
"همانطور که نزدیک به پایان می گوید، \"هیچ پاسخ آسانی وجود ندارد.\"  با این "
"حال، بی جهت نسبت به ممیز شناور محتاط نباشید!  خطاها در عملیات شناور پایتون "
"از سخت افزار ممیز شناور به ارث برده می شوند و در اکثر ماشین ها به ترتیب بیش "
"از 1 قسمت در 2\\*\\*53 در هر عملیات نیست.  این برای بیشتر کارها بیش از "
"اندازه کافی است، اما باید به خاطر داشته باشید که حساب اعشاری نیست و هر "
"عملیات شناور ممکن است با یک خطای گرد کردن جدید مواجه شود."

#: ../../tutorial/floatingpoint.rst:163
msgid ""
"While pathological cases do exist, for most casual use of floating-point "
"arithmetic you'll see the result you expect in the end if you simply round "
"the display of your final results to the number of decimal digits you "
"expect. :func:`str` usually suffices, and for finer control see the "
":meth:`str.format` method's format specifiers in :ref:`formatstrings`."
msgstr ""
"در حالی که موارد پاتولوژیک وجود دارد، برای اکثر استفاده‌های معمولی از "
"محاسبات ممیز شناور، اگر به سادگی نمایش نتایج نهایی خود را به تعداد ارقام "
"اعشاری مورد انتظارتان گرد کنید، در پایان نتیجه‌ای را خواهید دید که انتظار "
"دارید. :func:`str` معمولاً کافی است و برای کنترل دقیق تر، مشخص کننده های "
"قالب روش :meth:`str.format` را در :ref:`formatstrings` ببینید."

#: ../../tutorial/floatingpoint.rst:169
msgid ""
"For use cases which require exact decimal representation, try using the "
":mod:`decimal` module which implements decimal arithmetic suitable for "
"accounting applications and high-precision applications."
msgstr ""
"برای موارد استفاده که نیاز به نمایش اعشاری دقیق دارند، سعی کنید از ماژول "
":mod:`decimal` استفاده کنید که محاسبات اعشاری را مناسب برای برنامه های "
"حسابداری و برنامه های کاربردی با دقت بالا پیاده سازی می کند."

#: ../../tutorial/floatingpoint.rst:173
msgid ""
"Another form of exact arithmetic is supported by the :mod:`fractions` module"
" which implements arithmetic based on rational numbers (so the numbers like "
"1/3 can be represented exactly)."
msgstr ""
"شکل دیگری از محاسبات دقیق توسط ماژول :mod:`fractions` پشتیبانی می شود که "
"محاسبات را بر اساس اعداد گویا پیاده سازی می کند (بنابراین اعدادی مانند 1/3 "
"را می توان دقیقاً نشان داد)."

#: ../../tutorial/floatingpoint.rst:177
msgid ""
"If you are a heavy user of floating-point operations you should take a look "
"at the NumPy package and many other packages for mathematical and "
"statistical operations supplied by the SciPy project. See "
"<https://scipy.org>."
msgstr ""
"اگر کاربر سنگین عملیات ممیز شناور هستید، باید به بسته NumPy و بسیاری از بسته"
" های دیگر برای عملیات ریاضی و آماری ارائه شده توسط پروژه SciPy نگاهی "
"بیندازید. به <https://scipy.org> مراجعه کنید."

#: ../../tutorial/floatingpoint.rst:181
msgid ""
"Python provides tools that may help on those rare occasions when you really "
"*do* want to know the exact value of a float.  The "
":meth:`float.as_integer_ratio` method expresses the value of a float as a "
"fraction:"
msgstr ""
"پایتون ابزارهایی را ارائه می دهد که ممکن است در موارد نادری که واقعاً *do* "
"می خواهید ارزش دقیق یک شناور را بدانید، به شما کمک می کند.  روش "
":meth:`float.as_integer_ratio` مقدار یک شناور را به صورت کسری بیان می کند:"

#: ../../tutorial/floatingpoint.rst:186
msgid ""
">>> x = 3.14159\n"
">>> x.as_integer_ratio()\n"
"(3537115888337719, 1125899906842624)"
msgstr ""
">>> x = 3.14159\n"
">>> x.as_integer_ratio()\n"
"(3537115888337719, 1125899906842624)"

#: ../../tutorial/floatingpoint.rst:192
msgid ""
"Since the ratio is exact, it can be used to losslessly recreate the original"
" value:"
msgstr ""
"از آنجایی که نسبت دقیق است، می توان از آن برای بازآفرینی بدون ضرر مقدار اصلی"
" استفاده کرد:"

#: ../../tutorial/floatingpoint.rst:195
msgid ""
">>> x == 3537115888337719 / 1125899906842624\n"
"True"
msgstr ""
">>> x == 3537115888337719 / 1125899906842624\n"
"True"

#: ../../tutorial/floatingpoint.rst:200
msgid ""
"The :meth:`float.hex` method expresses a float in hexadecimal (base 16), "
"again giving the exact value stored by your computer:"
msgstr ""
"روش :meth:`float.hex` یک شناور در هگزادسیمال (پایه 16) را بیان می کند، که "
"مجدداً مقدار دقیق ذخیره شده توسط رایانه شما را نشان می دهد:"

#: ../../tutorial/floatingpoint.rst:203
msgid ""
">>> x.hex()\n"
"'0x1.921f9f01b866ep+1'"
msgstr ""
">>> x.hex()\n"
"'0x1.921f9f01b866ep+1'"

#: ../../tutorial/floatingpoint.rst:208
msgid ""
"This precise hexadecimal representation can be used to reconstruct the float"
" value exactly:"
msgstr ""
"این نمایش هگزادسیمال دقیق را می توان برای بازسازی مقدار شناور دقیقاً مورد "
"استفاده قرار داد:"

#: ../../tutorial/floatingpoint.rst:211
msgid ""
">>> x == float.fromhex('0x1.921f9f01b866ep+1')\n"
"True"
msgstr ""
">>> x == float.fromhex('0x1.921f9f01b866ep+1')\n"
"True"

#: ../../tutorial/floatingpoint.rst:216
msgid ""
"Since the representation is exact, it is useful for reliably porting values "
"across different versions of Python (platform independence) and exchanging "
"data with other languages that support the same format (such as Java and "
"C99)."
msgstr ""
"از آنجایی که نمایش دقیق است، برای انتقال مطمئن مقادیر در نسخه‌های مختلف "
"پایتون (استقلال پلتفرم) و تبادل داده با زبان‌های دیگری که از فرمت یکسانی "
"پشتیبانی می‌کنند (مانند جاوا و C99) مفید است."

#: ../../tutorial/floatingpoint.rst:220
msgid ""
"Another helpful tool is the :func:`sum` function which helps mitigate loss-"
"of-precision during summation.  It uses extended precision for intermediate "
"rounding steps as values are added onto a running total. That can make a "
"difference in overall accuracy so that the errors do not accumulate to the "
"point where they affect the final total:"
msgstr ""
"یکی دیگر از ابزارهای مفید تابع :func:`sum` است که به کاهش افت دقت در هنگام "
"جمع بندی کمک می کند.  از دقت گسترده‌ای برای مراحل گرد کردن میانی استفاده "
"می‌کند، زیرا مقادیر به مجموع در حال اجرا اضافه می‌شوند. این می تواند در دقت "
"کلی تفاوت ایجاد کند به طوری که خطاها تا جایی جمع نمی شوند که بر کل نهایی "
"تأثیر بگذارند:"

#: ../../tutorial/floatingpoint.rst:226
msgid ""
">>> 0.1 + 0.1 + 0.1 + 0.1 + 0.1 + 0.1 + 0.1 + 0.1 + 0.1 + 0.1 == 1.0\n"
"False\n"
">>> sum([0.1] * 10) == 1.0\n"
"True"
msgstr ""
">>> 0.1 + 0.1 + 0.1 + 0.1 + 0.1 + 0.1 + 0.1 + 0.1 + 0.1 + 0.1 == 1.0\n"
"False\n"
">>> sum([0.1] * 10) == 1.0\n"
"True"

#: ../../tutorial/floatingpoint.rst:233
msgid ""
"The :func:`math.fsum` goes further and tracks all of the \"lost digits\" as "
"values are added onto a running total so that the result has only a single "
"rounding.  This is slower than :func:`sum` but will be more accurate in "
"uncommon cases where large magnitude inputs mostly cancel each other out "
"leaving a final sum near zero:"
msgstr ""
":func:`math.fsum` فراتر می رود و تمام «ارقام گمشده» را ردیابی می کند زیرا "
"مقادیر به مجموع در حال اجرا اضافه می شوند به طوری که نتیجه فقط یک گرد کردن "
"دارد.  این سرعت کندتر از :func:`sum` است، اما در موارد غیرمعمول که ورودی‌های"
" قدر بزرگ عمدتاً یکدیگر را خنثی می‌کنند و جمع نهایی نزدیک به صفر می‌شوند، "
"دقیق‌تر خواهد بود:"

#: ../../tutorial/floatingpoint.rst:239
msgid ""
">>> arr = [-0.10430216751806065, -266310978.67179024, 143401161448607.16,\n"
"...        -143401161400469.7, 266262841.31058735, -0.003244936839808227]\n"
">>> float(sum(map(Fraction, arr)))   # Exact summation with single rounding\n"
"8.042173697819788e-13\n"
">>> math.fsum(arr)                   # Single rounding\n"
"8.042173697819788e-13\n"
">>> sum(arr)                         # Multiple roundings in extended precision\n"
"8.042178034628478e-13\n"
">>> total = 0.0\n"
">>> for x in arr:\n"
"...     total += x                   # Multiple roundings in standard precision\n"
"...\n"
">>> total                            # Straight addition has no correct digits!\n"
"-0.0051575902860057365"
msgstr ""
">>> arr = [-0.10430216751806065, -266310978.67179024, 143401161448607.16,\n"
"...        -143401161400469.7, 266262841.31058735, -0.003244936839808227]\n"
">>> float(sum(map(Fraction, arr)))   # Exact summation with single rounding\n"
"8.042173697819788e-13\n"
">>> math.fsum(arr)                   # Single rounding\n"
"8.042173697819788e-13\n"
">>> sum(arr)                         # Multiple roundings in extended precision\n"
"8.042178034628478e-13\n"
">>> total = 0.0\n"
">>> for x in arr:\n"
"...     total += x                   # Multiple roundings in standard precision\n"
"...\n"
">>> total                            # Straight addition has no correct digits!\n"
"-0.0051575902860057365"

#: ../../tutorial/floatingpoint.rst:260
msgid "Representation Error"
msgstr "خطای نمایش"

#: ../../tutorial/floatingpoint.rst:262
msgid ""
"This section explains the \"0.1\" example in detail, and shows how you can "
"perform an exact analysis of cases like this yourself.  Basic familiarity "
"with binary floating-point representation is assumed."
msgstr ""
"این بخش مثال \"0.1\" را با جزئیات توضیح می دهد و نشان می دهد که چگونه می "
"توانید تجزیه و تحلیل دقیق مواردی مانند این را خودتان انجام دهید.  آشنایی "
"اولیه با نمایش ممیز شناور باینری فرض شده است."

#: ../../tutorial/floatingpoint.rst:266
msgid ""
":dfn:`Representation error` refers to the fact that some (most, actually) "
"decimal fractions cannot be represented exactly as binary (base 2) "
"fractions. This is the chief reason why Python (or Perl, C, C++, Java, "
"Fortran, and many others) often won't display the exact decimal number you "
"expect."
msgstr ""
":dfn: «خطای نمایش» به این واقعیت اشاره دارد که برخی (بیشترین, در واقع) "
"کسرهای اعشاری را نمی توان دقیقاً به صورت کسرهای باینری (مبنای 2) نشان داد. "
"این دلیل اصلی این است که چرا پایتون (یا Perl, C, C++, Java, Fortran و بسیاری"
" دیگر) اغلب عدد اعشاری دقیقی را که شما انتظار دارید نمایش نمی‌دهد."

#: ../../tutorial/floatingpoint.rst:271
msgid ""
"Why is that?  1/10 is not exactly representable as a binary fraction.  Since"
" at least 2000, almost all machines use IEEE 754 binary floating-point "
"arithmetic, and almost all platforms map Python floats to IEEE 754 binary64 "
"\"double precision\" values.  IEEE 754 binary64 values contain 53 bits of "
"precision, so on input the computer strives to convert 0.1 to the closest "
"fraction it can of the form *J*/2**\\ *N* where *J* is an integer containing"
" exactly 53 bits. Rewriting ::"
msgstr ""
"چرا اینطور است؟  1/10 دقیقاً به عنوان یک کسر باینری قابل نمایش نیست.  حداقل "
"از سال 2000، تقریباً همه ماشین‌ها از محاسبات ممیز شناور باینری IEEE 754 "
"استفاده می‌کنند و تقریباً همه پلتفرم‌ها شناورهای Python را به مقادیر «دقت "
"مضاعف» IEEE 754 باینری 64 نگاشت می‌کنند.  مقادیر باینری 64 IEEE 754 حاوی 53 "
"بیت دقت است، بنابراین در ورودی کامپیوتر تلاش می کند تا 0.1 را به نزدیکترین "
"کسر تبدیل کند به شکل *J*/2**\\ *N* where *J* یک عدد صحیح حاوی دقیقاً 53 بیت "
"است. بازنویسی ::"

#: ../../tutorial/floatingpoint.rst:280
msgid "1 / 10 ~= J / (2**N)"
msgstr "1/10 ~= J / (2**N)"

#: ../../tutorial/floatingpoint.rst:282
msgid "as ::"
msgstr "به عنوان ::"

#: ../../tutorial/floatingpoint.rst:284
msgid "J ~= 2**N / 10"
msgstr "J ~= 2**N / 10"

#: ../../tutorial/floatingpoint.rst:286
msgid ""
"and recalling that *J* has exactly 53 bits (is ``>= 2**52`` but ``< "
"2**53``), the best value for *N* is 56:"
msgstr ""
"و با یادآوری اینکه *J* دقیقاً 53 بیت دارد (``>= 2**52`` است اما ``< "
"2**53``), بهترین مقدار برای *N* 56 است:"

#: ../../tutorial/floatingpoint.rst:289
msgid ""
">>> 2**52 <=  2**56 // 10  < 2**53\n"
"True"
msgstr ""
">>> 2**52 <=  2**56 // 10  < 2**53\n"
"True"

#: ../../tutorial/floatingpoint.rst:294
msgid ""
"That is, 56 is the only value for *N* that leaves *J* with exactly 53 bits."
"  The best possible value for *J* is then that quotient rounded:"
msgstr ""
"یعنی 56 تنها مقدار *N* است که دقیقاً 53 بیت برای *J* باقی می گذارد.  بهترین "
"مقدار ممکن برای *J* این است که ضریب گرد شود:"

#: ../../tutorial/floatingpoint.rst:297
msgid ""
">>> q, r = divmod(2**56, 10)\n"
">>> r\n"
"6"
msgstr ""
">>> q, r = divmod(2**56, 10)\n"
">>> r\n"
"6"

#: ../../tutorial/floatingpoint.rst:303
msgid ""
"Since the remainder is more than half of 10, the best approximation is "
"obtained by rounding up:"
msgstr ""
"از آنجایی که باقیمانده بیش از نیمی از 10 است، بهترین تقریب با گرد کردن به "
"دست می آید:"

#: ../../tutorial/floatingpoint.rst:306
msgid ""
">>> q+1\n"
"7205759403792794"
msgstr ""
">>> q+1\n"
"7205759403792794"

#: ../../tutorial/floatingpoint.rst:313
msgid ""
"Therefore the best possible approximation to 1/10 in IEEE 754 double "
"precision is::"
msgstr "بنابراین بهترین تقریب ممکن به 1/10 در IEEE 754 دقت دوگانه این است:"

#: ../../tutorial/floatingpoint.rst:316
msgid "7205759403792794 / 2 ** 56"
msgstr "7205759403792794 / 2 ** 56"

#: ../../tutorial/floatingpoint.rst:318
msgid ""
"Dividing both the numerator and denominator by two reduces the fraction to::"
msgstr "تقسیم صورت و مخرج بر دو کسر را به:"

#: ../../tutorial/floatingpoint.rst:320
msgid "3602879701896397 / 2 ** 55"
msgstr "3602879701896397 / 2 ** 55"

#: ../../tutorial/floatingpoint.rst:322
msgid ""
"Note that since we rounded up, this is actually a little bit larger than "
"1/10; if we had not rounded up, the quotient would have been a little bit "
"smaller than 1/10.  But in no case can it be *exactly* 1/10!"
msgstr ""
"توجه داشته باشید که از آنجایی که ما گرد کردیم، این مقدار در واقع کمی بزرگتر "
"از 1/10 است. اگر به بالا گرد نمی کردیم، ضریب کمی کوچکتر از 1/10 بود.  اما به"
" هیچ وجه نمی تواند *exactly* 1/10 باشد!"

#: ../../tutorial/floatingpoint.rst:326
msgid ""
"So the computer never \"sees\" 1/10:  what it sees is the exact fraction "
"given above, the best IEEE 754 double approximation it can get:"
msgstr ""
"بنابراین کامپیوتر هرگز 1/10 را \"نمی‌بیند\": چیزی که می‌بیند کسر دقیقی است "
"که در بالا داده شده است، بهترین تقریب IEEE 754 که می‌تواند به دست آورد:"

#: ../../tutorial/floatingpoint.rst:329
msgid ""
">>> 0.1 * 2 ** 55\n"
"3602879701896397.0"
msgstr ""
">>> 0.1 * 2 ** 55\n"
"3602879701896397.0"

#: ../../tutorial/floatingpoint.rst:334
msgid ""
"If we multiply that fraction by 10\\*\\*55, we can see the value out to 55 "
"decimal digits:"
msgstr ""
"اگر آن کسر را در 10\\*\\*55 ضرب کنیم، می‌توانیم مقدار آن را تا 55 رقم اعشاری"
" ببینیم:"

#: ../../tutorial/floatingpoint.rst:337
msgid ""
">>> 3602879701896397 * 10 ** 55 // 2 ** 55\n"
"1000000000000000055511151231257827021181583404541015625"
msgstr ""
">>> 3602879701896397 * 10 ** 55 // 2 ** 55\n"
"1000000000000000055511151231257827021181583404541015625"

#: ../../tutorial/floatingpoint.rst:342
msgid ""
"meaning that the exact number stored in the computer is equal to the decimal"
" value 0.1000000000000000055511151231257827021181583404541015625. Instead of"
" displaying the full decimal value, many languages (including older versions"
" of Python), round the result to 17 significant digits:"
msgstr ""
"به این معنی که عدد دقیق ذخیره شده در کامپیوتر برابر با مقدار اعشاری "
"0.100000000000000055511151231257827021181583404541015625 است. به جای نمایش "
"مقدار اعشاری کامل، بسیاری از زبان ها (از جمله نسخه های قدیمی پایتون), نتیجه "
"را به 17 رقم قابل توجه گرد می کنند:"

#: ../../tutorial/floatingpoint.rst:347
msgid ""
">>> format(0.1, '.17f')\n"
"'0.10000000000000001'"
msgstr ""
">>> format(0.1, '.17f')\n"
"'0.10000000000000001'"

#: ../../tutorial/floatingpoint.rst:352
msgid ""
"The :mod:`fractions` and :mod:`decimal` modules make these calculations "
"easy:"
msgstr ""
"ماژول های :mod:`fractions` و :mod:`decimal` این محاسبات را آسان می کنند:"

#: ../../tutorial/floatingpoint.rst:355
msgid ""
">>> from decimal import Decimal\n"
">>> from fractions import Fraction\n"
"\n"
">>> Fraction.from_float(0.1)\n"
"Fraction(3602879701896397, 36028797018963968)\n"
"\n"
">>> (0.1).as_integer_ratio()\n"
"(3602879701896397, 36028797018963968)\n"
"\n"
">>> Decimal.from_float(0.1)\n"
"Decimal('0.1000000000000000055511151231257827021181583404541015625')\n"
"\n"
">>> format(Decimal.from_float(0.1), '.17')\n"
"'0.10000000000000001'"
msgstr ""
">>> from decimal import Decimal\n"
">>> from fractions import Fraction\n"
"\n"
">>> Fraction.from_float(0.1)\n"
"Fraction(3602879701896397, 36028797018963968)\n"
"\n"
">>> (0.1).as_integer_ratio()\n"
"(3602879701896397, 36028797018963968)\n"
"\n"
">>> Decimal.from_float(0.1)\n"
"Decimal('0.1000000000000000055511151231257827021181583404541015625')\n"
"\n"
">>> format(Decimal.from_float(0.1), '.17')\n"
"'0.10000000000000001'"
