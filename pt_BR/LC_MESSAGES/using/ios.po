# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2024, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-05-11 02:33+0000\n"
"PO-Revision-Date: 2024-05-11 01:08+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2024\n"
"Language-Team: Portuguese (Brazil) (https://app.transifex.com/python-doc/"
"teams/5390/pt_BR/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: pt_BR\n"
"Plural-Forms: nplurals=3; plural=(n == 0 || n == 1) ? 0 : n != 0 && n % "
"1000000 == 0 ? 1 : 2;\n"

#: ../../using/ios.rst:5
msgid "Using Python on iOS"
msgstr "Usando Python no iOS"

#: ../../using/ios.rst:0
msgid "Authors"
msgstr "Autores"

#: ../../using/ios.rst:8
msgid "Russell Keith-Magee (2024-03)"
msgstr "Russell Keith-Magee (2024-03)"

#: ../../using/ios.rst:10
msgid ""
"Python on iOS is unlike Python on desktop platforms. On a desktop platform, "
"Python is generally installed as a system resource that can be used by any "
"user of that computer. Users then interact with Python by running a :program:"
"`python` executable and entering commands at an interactive prompt, or by "
"running a Python script."
msgstr ""
"Python no iOS é diferente do Python em plataformas de desktop. Em uma "
"plataforma desktop, o Python geralmente é instalado como um recurso do "
"sistema que pode ser usado por qualquer usuário daquele computador. Os "
"usuários então interagem com o Python executando um executável :program:"
"`python` e inserindo comandos em um prompt interativo ou executando um "
"script Python."

#: ../../using/ios.rst:16
msgid ""
"On iOS, there is no concept of installing as a system resource. The only "
"unit of software distribution is an \"app\". There is also no console where "
"you could run a :program:`python` executable, or interact with a Python REPL."
msgstr ""
"No iOS, não existe o conceito de instalação como recurso do sistema. A única "
"unidade de distribuição de software é uma aplicação, ou \"app\". Também não "
"há console onde você possa executar um executável :program:`python` ou "
"interagir com um REPL do Python."

#: ../../using/ios.rst:20
msgid ""
"As a result, the only way you can use Python on iOS is in embedded mode - "
"that is, by writing a native iOS application, and embedding a Python "
"interpreter using ``libPython``, and invoking Python code using the :ref:"
"`Python embedding API <embedding>`. The full Python interpreter, the "
"standard library, and all your Python code is then packaged as a standalone "
"bundle that can be distributed via the iOS App Store."
msgstr ""
"Como resultado, a única maneira de usar Python no iOS é no modo incorporado "
"-- ou seja, escrevendo uma aplicação iOS nativo e incorporando um "
"interpretador Python usando ``libPython`` e invocando o código Python "
"usando :ref:`API de incorporação do Python <embedding>`. O interpretador "
"Python completo, a biblioteca padrão e todo o seu código Python são então "
"empacotados como um pacote independente que pode ser distribuído pela iOS "
"App Store."

#: ../../using/ios.rst:27
msgid ""
"If you're looking to experiment for the first time with writing an iOS app "
"in Python, projects such as `BeeWare <https://beeware.org>`__ and `Kivy "
"<https://kivy.org>`__ will provide a much more approachable user experience. "
"These projects manage the complexities associated with getting an iOS "
"project running, so you only need to deal with the Python code itself."
msgstr ""
"Se você deseja experimentar pela primeira vez escrever uma aplicação iOS em "
"Python, projetos como `BeeWare <https://beeware.org>`__ e `Kivy <https://"
"kivy.org>`__ irão fornecer uma experiência de usuário muito mais acessível. "
"Esses projetos gerenciam as complexidades associadas à execução de um "
"projeto iOS, portanto, você só precisa lidar com o próprio código Python."

#: ../../using/ios.rst:34
msgid "Python at runtime on iOS"
msgstr "Python em tempo de execução no iOS"

#: ../../using/ios.rst:37
msgid "Platform identification"
msgstr "Identificação da plataforma"

#: ../../using/ios.rst:39
msgid ""
"When executing on iOS, ``sys.platform`` will report as ``ios``. This value "
"will be returned on an iPhone or iPad, regardless of whether the app is "
"running on the simulator or a physical device."
msgstr ""
"Ao executar no iOS, ``sys.platform`` reportará como ``ios``. Este valor será "
"retornado em um iPhone ou iPad, independentemente da aplicação estar "
"execitando no simulador ou em um dispositivo físico."

#: ../../using/ios.rst:43
msgid ""
"Information about the specific runtime environment, including the iOS "
"version, device model, and whether the device is a simulator, can be "
"obtained using :func:`platform.ios_ver()`. :func:`platform.system()` will "
"report ``iOS`` or ``iPadOS``, depending on the device."
msgstr ""
"Informações sobre o ambiente de execução específico, incluindo a versão do "
"iOS, modelo do dispositivo e se o dispositivo é um simulador, podem ser "
"obtidas usando :func:`platform.ios_ver()`. :func:`platform.system()` "
"reportará ``iOS`` ou ``iPadOS``, dependendo do dispositivo."

#: ../../using/ios.rst:48
msgid ""
":func:`os.uname()` reports kernel-level details; it will report a name of "
"``Darwin``."
msgstr ""
":func:`os.uname()` reporta detalhes em nível de kernel; ele reportará o nome "
"``Darwin``."

#: ../../using/ios.rst:52
msgid "Standard library availability"
msgstr "Disponibilidade da biblioteca padrão"

#: ../../using/ios.rst:54
msgid ""
"The Python standard library has some notable omissions and restrictions on "
"iOS. See the :ref:`API availability guide for iOS <iOS-availability>` for "
"details."
msgstr ""
"A biblioteca padrão do Python tem algumas omissões e restrições notáveis no "
"iOS. Consulte o :ref:`guia de disponibilidade de API para iOS <iOS-"
"availability>` para obter detalhes."

#: ../../using/ios.rst:59
msgid "Binary extension modules"
msgstr "Módulos de extensão binária"

#: ../../using/ios.rst:61
msgid ""
"One notable difference about iOS as a platform is that App Store "
"distribution imposes hard requirements on the packaging of an application. "
"One of these requirements governs how binary extension modules are "
"distributed."
msgstr ""
"Uma diferença notável sobre o iOS como plataforma é que a distribuição da "
"App Store impõe requisitos rígidos ao empacotamento de uma aplicação. Um "
"desses requisitos rege como os módulos de extensão binária são distribuídos."

#: ../../using/ios.rst:65
msgid ""
"The iOS App Store requires that *all* binary modules in an iOS app must be "
"dynamic libraries, contained in a framework with appropriate metadata, "
"stored in the ``Frameworks`` folder of the packaged app. There can be only a "
"single binary per framework, and there can be no executable binary material "
"outside the ``Frameworks`` folder."
msgstr ""
"A iOS App Store exige que *todos* os módulos binários em uma aplicação iOS "
"sejam bibliotecas dinâmicas, contidas em um framework com metadados "
"apropriados, armazenados na pasta ``Frameworks`` da aplicação empacotada. "
"Pode haver apenas um único binário por framework, e não pode haver nenhum "
"material binário executável fora da pasta ``Frameworks``."

#: ../../using/ios.rst:71
msgid ""
"This conflicts with the usual Python approach for distributing binaries, "
"which allows a binary extension module to be loaded from any location on "
"``sys.path``. To ensure compliance with App Store policies, an iOS project "
"must post-process any Python packages, converting ``.so`` binary modules "
"into individual standalone frameworks with appropriate metadata and signing. "
"For details on how to perform this post-processing, see the guide for :ref:"
"`adding Python to your project <adding-ios>`."
msgstr ""
"Isto entra em conflito com a abordagem usual do Python para distribuição de "
"binários, que permite que um módulo de extensão binária seja carregado de "
"qualquer local em ``sys.path``. Para garantir a conformidade com as "
"políticas da App Store, um projeto iOS deve pós-processar quaisquer pacotes "
"Python, convertendo módulos binários ``.so`` em estruturas independentes "
"individuais com metadados e assinatura apropriados. Para obter detalhes "
"sobre como realizar esse pós-processamento, consulte o guia para :ref:"
"`adicionar Python ao seu projeto <adding-ios>`."

#: ../../using/ios.rst:79
msgid ""
"To help Python discover binaries in their new location, the original ``.so`` "
"file on ``sys.path`` is replaced with a ``.fwork`` file. This file is a text "
"file containing the location of the framework binary, relative to the app "
"bundle. To allow the framework to resolve back to the original location, the "
"framework must contain a ``.origin`` file that contains the location of the "
"``.fwork`` file, relative to the app bundle."
msgstr ""
"Para ajudar o Python a descobrir binários em seu novo local, o arquivo ``."
"so`` original em ``sys.path`` é substituído por um arquivo ``.fwork``. Este "
"arquivo é um arquivo texto que contém a localização do binário do framework, "
"relativo ao pacote de aplicativos. Para permitir que o framework retorne ao "
"local original, o framework deve conter um arquivo ``.origin`` que contém a "
"localização do arquivo ``.fwork``, relativo ao pacote do aplicativo."

#: ../../using/ios.rst:86
msgid ""
"For example, consider the case of an import ``from foo.bar import _whiz``, "
"where ``_whiz`` is implemented with the binary module ``sources/foo/bar/"
"_whiz.abi3.so``, with ``sources`` being the location registered on ``sys."
"path``, relative to the application bundle. This module *must* be "
"distributed as ``Frameworks/foo.bar._whiz.framework/foo.bar._whiz`` "
"(creating the framework name from the full import path of the module), with "
"an ``Info.plist`` file in the ``.framework`` directory identifying the "
"binary as a framework. The ``foo.bar._whiz`` module would be represented in "
"the original location with a ``sources/foo/bar/_whiz.abi3.fwork`` marker "
"file, containing the path ``Frameworks/foo.bar._whiz/foo.bar._whiz``. The "
"framework would also contain ``Frameworks/foo.bar._whiz.framework/foo.bar."
"_whiz.origin``, containing the path to the ``.fwork`` file."
msgstr ""

#: ../../using/ios.rst:99
msgid ""
"When running on iOS, the Python interpreter will install an :class:"
"`~importlib.machinery.AppleFrameworkLoader` that is able to read and import "
"``.fwork`` files. Once imported, the ``__file__`` attribute of the binary "
"module will report as the location of the ``.fwork`` file. However, the :"
"class:`~importlib.machinery.ModuleSpec` for the loaded module will report "
"the ``origin`` as the location of the binary in the framework folder."
msgstr ""

#: ../../using/ios.rst:107
msgid "Compiler stub binaries"
msgstr ""

#: ../../using/ios.rst:109
msgid ""
"Xcode doesn't expose explicit compilers for iOS; instead, it uses an "
"``xcrun`` script that resolves to a full compiler path (e.g., ``xcrun --sdk "
"iphoneos clang`` to get the ``clang`` for an iPhone device). However, using "
"this script poses two problems:"
msgstr ""

#: ../../using/ios.rst:114
msgid ""
"The output of ``xcrun`` includes paths that are machine specific, resulting "
"in a sysconfig module that cannot be shared between users; and"
msgstr ""

#: ../../using/ios.rst:117
msgid ""
"It results in ``CC``/``CPP``/``LD``/``AR`` definitions that include spaces. "
"There is a lot of C ecosystem tooling that assumes that you can split a "
"command line at the first space to get the path to the compiler executable; "
"this isn't the case when using ``xcrun``."
msgstr ""

#: ../../using/ios.rst:122
msgid ""
"To avoid these problems, Python provided stubs for these tools. These stubs "
"are shell script wrappers around the underingly ``xcrun`` tools, distributed "
"in a ``bin`` folder distributed alongside the compiled iOS framework. These "
"scripts are relocatable, and will always resolve to the appropriate local "
"system paths. By including these scripts in the bin folder that accompanies "
"a framework, the contents of the ``sysconfig`` module becomes useful for end-"
"users to compile their own modules. When compiling third-party Python "
"modules for iOS, you should ensure these stub binaries are on your path."
msgstr ""

#: ../../using/ios.rst:132
msgid "Installing Python on iOS"
msgstr ""

#: ../../using/ios.rst:135
msgid "Tools for building iOS apps"
msgstr ""

#: ../../using/ios.rst:137
msgid ""
"Building for iOS requires the use of Apple's Xcode tooling. It is strongly "
"recommended that you use the most recent stable release of Xcode. This will "
"require the use of the most (or second-most) recently released macOS "
"version, as Apple does not maintain Xcode for older macOS versions. The "
"Xcode Command Line Tools are not sufficient for iOS development; you need a "
"*full* Xcode install."
msgstr ""

#: ../../using/ios.rst:144
msgid ""
"If you want to run your code on the iOS simulator, you'll also need to "
"install an iOS Simulator Platform. You should be prompted to select an iOS "
"Simulator Platform when you first run Xcode. Alternatively, you can add an "
"iOS Simulator Platform by selecting from the Platforms tab of the Xcode "
"Settings panel."
msgstr ""

#: ../../using/ios.rst:152
msgid "Adding Python to an iOS project"
msgstr ""

#: ../../using/ios.rst:154
msgid ""
"Python can be added to any iOS project, using either Swift or Objective C. "
"The following examples will use Objective C; if you are using Swift, you may "
"find a library like `PythonKit <https://github.com/pvieito/PythonKit>`__ to "
"be helpful."
msgstr ""

#: ../../using/ios.rst:159
msgid "To add Python to an iOS Xcode project:"
msgstr ""

#: ../../using/ios.rst:161
msgid ""
"Build or obtain a Python ``XCFramework``. See the instructions in :source:"
"`iOS/README.rst` (in the CPython source distribution) for details on how to "
"build a Python ``XCFramework``. At a minimum, you will need a build that "
"supports ``arm64-apple-ios``, plus one of either ``arm64-apple-ios-"
"simulator`` or ``x86_64-apple-ios-simulator``."
msgstr ""

#: ../../using/ios.rst:167
msgid ""
"Drag the ``XCframework`` into your iOS project. In the following "
"instructions, we'll assume you've dropped the ``XCframework`` into the root "
"of your project; however, you can use any other location that you want by "
"adjusting paths as needed."
msgstr ""

#: ../../using/ios.rst:172
msgid ""
"Drag the ``iOS/Resources/dylib-Info-template.plist`` file into your project, "
"and ensure it is associated with the app target."
msgstr ""

#: ../../using/ios.rst:175
msgid ""
"Add your application code as a folder in your Xcode project. In the "
"following instructions, we'll assume that your user code is in a folder "
"named ``app`` in the root of your project; you can use any other location by "
"adjusting paths as needed. Ensure that this folder is associated with your "
"app target."
msgstr ""

#: ../../using/ios.rst:181
msgid ""
"Select the app target by selecting the root node of your Xcode project, then "
"the target name in the sidebar that appears."
msgstr ""

#: ../../using/ios.rst:184
msgid ""
"In the \"General\" settings, under \"Frameworks, Libraries and Embedded "
"Content\", add ``Python.xcframework``, with \"Embed & Sign\" selected."
msgstr ""

#: ../../using/ios.rst:187
msgid "In the \"Build Settings\" tab, modify the following:"
msgstr ""

#: ../../using/ios.rst:189
msgid "Build Options"
msgstr ""

#: ../../using/ios.rst:191
msgid "User Script Sandboxing: No"
msgstr ""

#: ../../using/ios.rst:192
msgid "Enable Testability: Yes"
msgstr ""

#: ../../using/ios.rst:194
msgid "Search Paths"
msgstr ""

#: ../../using/ios.rst:196
msgid "Framework Search Paths: ``$(PROJECT_DIR)``"
msgstr ""

#: ../../using/ios.rst:197
msgid ""
"Header Search Paths: ``\"$(BUILT_PRODUCTS_DIR)/Python.framework/Headers\"``"
msgstr ""

#: ../../using/ios.rst:199
msgid "Apple Clang - Warnings - All languages"
msgstr ""

#: ../../using/ios.rst:201
msgid "Quoted Include In Framework Header: No"
msgstr ""

#: ../../using/ios.rst:203
msgid ""
"Add a build step that copies the Python standard library into your app. In "
"the \"Build Phases\" tab, add a new \"Run Script\" build step *before* the "
"\"Embed Frameworks\" step, but *after* the \"Copy Bundle Resources\" step. "
"Name the step \"Install Target Specific Python Standard Library\", disable "
"the \"Based on dependency analysis\" checkbox, and set the script content to:"
msgstr ""

#: ../../using/ios.rst:222
msgid ""
"Note that the name of the simulator \"slice\" in the XCframework may be "
"different, depending the CPU architectures your ``XCFramework`` supports."
msgstr ""

#: ../../using/ios.rst:225
msgid ""
"Add a second build step that processes the binary extension modules in the "
"standard library into \"Framework\" format. Add a \"Run Script\" build step "
"*directly after* the one you added in step 8, named \"Prepare Python Binary "
"Modules\". It should also have \"Based on dependency analysis\" unchecked, "
"with the following script content:"
msgstr ""

#: ../../using/ios.rst:281
msgid ""
"Add Objective C code to initialize and use a Python interpreter in embedded "
"mode. You should ensure that:"
msgstr ""

#: ../../using/ios.rst:284
msgid ":c:member:`UTF-8 mode <PyPreConfig.utf8_mode>` is *enabled*;"
msgstr ""

#: ../../using/ios.rst:285
msgid ":c:member:`Buffered stdio <PyConfig.buffered_stdio>` is *disabled*;"
msgstr ""

#: ../../using/ios.rst:286
msgid ":c:member:`Writing bytecode <PyConfig.write_bytecode>` is *disabled*;"
msgstr ""

#: ../../using/ios.rst:287
msgid ""
":c:member:`Signal handlers <PyConfig.install_signal_handlers>` are *enabled*;"
msgstr ""

#: ../../using/ios.rst:288
msgid ""
"``PYTHONHOME`` for the interpreter is configured to point at the ``python`` "
"subfolder of your app's bundle; and"
msgstr ""

#: ../../using/ios.rst:290
msgid "The ``PYTHONPATH`` for the interpreter includes:"
msgstr ""

#: ../../using/ios.rst:292
msgid "the ``python/lib/python3.X`` subfolder of your app's bundle,"
msgstr ""

#: ../../using/ios.rst:293
msgid ""
"the ``python/lib/python3.X/lib-dynload`` subfolder of your app's bundle, and"
msgstr ""

#: ../../using/ios.rst:294
msgid "the ``app`` subfolder of your app's bundle"
msgstr ""

#: ../../using/ios.rst:296
msgid ""
"Your app's bundle location can be determined using ``[[NSBundle mainBundle] "
"resourcePath]``."
msgstr ""

#: ../../using/ios.rst:299
msgid ""
"Steps 8, 9 and 10 of these instructions assume that you have a single folder "
"of pure Python application code, named ``app``. If you have third-party "
"binary modules in your app, some additional steps will be required:"
msgstr ""

#: ../../using/ios.rst:303
msgid ""
"You need to ensure that any folders containing third-party binaries are "
"either associated with the app target, or copied in as part of step 8. Step "
"8 should also purge any binaries that are not appropriate for the platform a "
"specific build is targetting (i.e., delete any device binaries if you're "
"building app app targeting the simulator)."
msgstr ""

#: ../../using/ios.rst:309
msgid ""
"Any folders that contain third-party binaries must be processed into "
"framework form by step 9. The invocation of ``install_dylib`` that processes "
"the ``lib-dynload`` folder can be copied and adapted for this purpose."
msgstr ""

#: ../../using/ios.rst:313
msgid ""
"If you're using a separate folder for third-party packages, ensure that "
"folder is included as part of the ``PYTHONPATH`` configuration in step 10."
msgstr ""
