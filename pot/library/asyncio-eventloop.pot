# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-01-10 14:49+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../library/asyncio-eventloop.rst:8
msgid "Event Loop"
msgstr ""

#: ../../library/asyncio-eventloop.rst:10
msgid ""
"**Source code:** :source:`Lib/asyncio/events.py`, :source:`Lib/asyncio/"
"base_events.py`"
msgstr ""

#: ../../library/asyncio-eventloop.rst:16
msgid "Preface"
msgstr ""

#: ../../library/asyncio-eventloop.rst:17
msgid ""
"The event loop is the core of every asyncio application. Event loops run "
"asynchronous tasks and callbacks, perform network IO operations, and run "
"subprocesses."
msgstr ""

#: ../../library/asyncio-eventloop.rst:21
msgid ""
"Application developers should typically use the high-level asyncio "
"functions, such as :func:`asyncio.run`, and should rarely need to reference "
"the loop object or call its methods.  This section is intended mostly for "
"authors of lower-level code, libraries, and frameworks, who need finer "
"control over the event loop behavior."
msgstr ""

#: ../../library/asyncio-eventloop.rst:28
msgid "Obtaining the Event Loop"
msgstr ""

#: ../../library/asyncio-eventloop.rst:29
msgid ""
"The following low-level functions can be used to get, set, or create an "
"event loop:"
msgstr ""

#: ../../library/asyncio-eventloop.rst:34
msgid "Return the running event loop in the current OS thread."
msgstr ""

#: ../../library/asyncio-eventloop.rst:36
msgid "Raise a :exc:`RuntimeError` if there is no running event loop."
msgstr ""

#: ../../library/asyncio-eventloop.rst:38
msgid "This function can only be called from a coroutine or a callback."
msgstr ""

#: ../../library/asyncio-eventloop.rst:44
msgid "Get the current event loop."
msgstr ""

#: ../../library/asyncio-eventloop.rst:46
msgid ""
"When called from a coroutine or a callback (e.g. scheduled with call_soon or "
"similar API), this function will always return the running event loop."
msgstr ""

#: ../../library/asyncio-eventloop.rst:50
msgid ""
"If there is no running event loop set, the function will return the result "
"of the ``get_event_loop_policy().get_event_loop()`` call."
msgstr ""

#: ../../library/asyncio-eventloop.rst:53
msgid ""
"Because this function has rather complex behavior (especially when custom "
"event loop policies are in use), using the :func:`get_running_loop` function "
"is preferred to :func:`get_event_loop` in coroutines and callbacks."
msgstr ""

#: ../../library/asyncio-eventloop.rst:58
msgid ""
"As noted above, consider using the higher-level :func:`asyncio.run` "
"function, instead of using these lower level functions to manually create "
"and close an event loop."
msgstr ""

#: ../../library/asyncio-eventloop.rst:62
msgid ""
"Deprecation warning is emitted if there is no current event loop. In some "
"future Python release this will become an error."
msgstr ""

#: ../../library/asyncio-eventloop.rst:68
msgid "Set *loop* as the current event loop for the current OS thread."
msgstr ""

#: ../../library/asyncio-eventloop.rst:72
msgid "Create and return a new event loop object."
msgstr ""

#: ../../library/asyncio-eventloop.rst:74
msgid ""
"Note that the behaviour of :func:`get_event_loop`, :func:`set_event_loop`, "
"and :func:`new_event_loop` functions can be altered by :ref:`setting a "
"custom event loop policy <asyncio-policies>`."
msgstr ""

#: ../../library/asyncio-eventloop.rst:80
msgid "Contents"
msgstr ""

#: ../../library/asyncio-eventloop.rst:81
msgid "This documentation page contains the following sections:"
msgstr ""

#: ../../library/asyncio-eventloop.rst:83
msgid ""
"The `Event Loop Methods`_ section is the reference documentation of the "
"event loop APIs;"
msgstr ""

#: ../../library/asyncio-eventloop.rst:86
msgid ""
"The `Callback Handles`_ section documents the :class:`Handle` and :class:"
"`TimerHandle` instances which are returned from scheduling methods such as :"
"meth:`loop.call_soon` and :meth:`loop.call_later`;"
msgstr ""

#: ../../library/asyncio-eventloop.rst:90
msgid ""
"The `Server Objects`_ section documents types returned from event loop "
"methods like :meth:`loop.create_server`;"
msgstr ""

#: ../../library/asyncio-eventloop.rst:93
msgid ""
"The `Event Loop Implementations`_ section documents the :class:"
"`SelectorEventLoop` and :class:`ProactorEventLoop` classes;"
msgstr ""

#: ../../library/asyncio-eventloop.rst:96
msgid ""
"The `Examples`_ section showcases how to work with some event loop APIs."
msgstr ""

#: ../../library/asyncio-eventloop.rst:103
msgid "Event Loop Methods"
msgstr ""

#: ../../library/asyncio-eventloop.rst:105
msgid "Event loops have **low-level** APIs for the following:"
msgstr ""

#: ../../library/asyncio-eventloop.rst:113
msgid "Running and stopping the loop"
msgstr ""

#: ../../library/asyncio-eventloop.rst:117
msgid "Run until the *future* (an instance of :class:`Future`) has completed."
msgstr ""

#: ../../library/asyncio-eventloop.rst:120
msgid ""
"If the argument is a :ref:`coroutine object <coroutine>` it is implicitly "
"scheduled to run as a :class:`asyncio.Task`."
msgstr ""

#: ../../library/asyncio-eventloop.rst:123
msgid "Return the Future's result or raise its exception."
msgstr ""

#: ../../library/asyncio-eventloop.rst:127
msgid "Run the event loop until :meth:`stop` is called."
msgstr ""

#: ../../library/asyncio-eventloop.rst:129
msgid ""
"If :meth:`stop` is called before :meth:`run_forever` is called, the loop "
"will poll the I/O selector once with a timeout of zero, run all callbacks "
"scheduled in response to I/O events (and those that were already scheduled), "
"and then exit."
msgstr ""

#: ../../library/asyncio-eventloop.rst:134
msgid ""
"If :meth:`stop` is called while :meth:`run_forever` is running, the loop "
"will run the current batch of callbacks and then exit. Note that new "
"callbacks scheduled by callbacks will not run in this case; instead, they "
"will run the next time :meth:`run_forever` or :meth:`run_until_complete` is "
"called."
msgstr ""

#: ../../library/asyncio-eventloop.rst:142
msgid "Stop the event loop."
msgstr ""

#: ../../library/asyncio-eventloop.rst:146
msgid "Return ``True`` if the event loop is currently running."
msgstr ""

#: ../../library/asyncio-eventloop.rst:150
msgid "Return ``True`` if the event loop was closed."
msgstr ""

#: ../../library/asyncio-eventloop.rst:154
msgid "Close the event loop."
msgstr ""

#: ../../library/asyncio-eventloop.rst:156
msgid ""
"The loop must not be running when this function is called. Any pending "
"callbacks will be discarded."
msgstr ""

#: ../../library/asyncio-eventloop.rst:159
msgid ""
"This method clears all queues and shuts down the executor, but does not wait "
"for the executor to finish."
msgstr ""

#: ../../library/asyncio-eventloop.rst:162
msgid ""
"This method is idempotent and irreversible.  No other methods should be "
"called after the event loop is closed."
msgstr ""

#: ../../library/asyncio-eventloop.rst:167
msgid ""
"Schedule all currently open :term:`asynchronous generator` objects to close "
"with an :meth:`~agen.aclose` call.  After calling this method, the event "
"loop will issue a warning if a new asynchronous generator is iterated. This "
"should be used to reliably finalize all scheduled asynchronous generators."
msgstr ""

#: ../../library/asyncio-eventloop.rst:173
msgid ""
"Note that there is no need to call this function when :func:`asyncio.run` is "
"used."
msgstr ""

#: ../../library/asyncio-eventloop.rst:176
#: ../../library/asyncio-eventloop.rst:1262
#: ../../library/asyncio-eventloop.rst:1680
msgid "Example::"
msgstr ""

#: ../../library/asyncio-eventloop.rst:178
msgid ""
"try:\n"
"    loop.run_forever()\n"
"finally:\n"
"    loop.run_until_complete(loop.shutdown_asyncgens())\n"
"    loop.close()"
msgstr ""

#: ../../library/asyncio-eventloop.rst:188
msgid ""
"Schedule the closure of the default executor and wait for it to join all of "
"the threads in the :class:`~concurrent.futures.ThreadPoolExecutor`. Once "
"this method has been called, using the default executor with :meth:`loop."
"run_in_executor` will raise a :exc:`RuntimeError`."
msgstr ""

#: ../../library/asyncio-eventloop.rst:194
msgid ""
"The *timeout* parameter specifies the amount of time (in :class:`float` "
"seconds) the executor will be given to finish joining. With the default, "
"``None``, the executor is allowed an unlimited amount of time."
msgstr ""

#: ../../library/asyncio-eventloop.rst:199
msgid ""
"If the *timeout* is reached, a :exc:`RuntimeWarning` is emitted and the "
"default executor is terminated without waiting for its threads to finish "
"joining."
msgstr ""

#: ../../library/asyncio-eventloop.rst:205
msgid ""
"Do not call this method when using :func:`asyncio.run`, as the latter "
"handles default executor shutdown automatically."
msgstr ""

#: ../../library/asyncio-eventloop.rst:210
msgid "Added the *timeout* parameter."
msgstr ""

#: ../../library/asyncio-eventloop.rst:214
msgid "Scheduling callbacks"
msgstr ""

#: ../../library/asyncio-eventloop.rst:218
msgid ""
"Schedule the *callback* :term:`callback` to be called with *args* arguments "
"at the next iteration of the event loop."
msgstr ""

#: ../../library/asyncio-eventloop.rst:221
msgid ""
"Return an instance of :class:`asyncio.Handle`, which can be used later to "
"cancel the callback."
msgstr ""

#: ../../library/asyncio-eventloop.rst:224
msgid ""
"Callbacks are called in the order in which they are registered. Each "
"callback will be called exactly once."
msgstr ""

#: ../../library/asyncio-eventloop.rst:227
msgid ""
"The optional keyword-only *context* argument specifies a custom :class:"
"`contextvars.Context` for the *callback* to run in. Callbacks use the "
"current context when no *context* is provided."
msgstr ""

#: ../../library/asyncio-eventloop.rst:231
msgid "Unlike :meth:`call_soon_threadsafe`, this method is not thread-safe."
msgstr ""

#: ../../library/asyncio-eventloop.rst:235
msgid ""
"A thread-safe variant of :meth:`call_soon`. When scheduling callbacks from "
"another thread, this function *must* be used, since :meth:`call_soon` is not "
"thread-safe."
msgstr ""

#: ../../library/asyncio-eventloop.rst:239
msgid ""
"This function is safe to be called from a reentrant context or signal "
"handler, however, it is not safe or fruitful to use the returned handle in "
"such contexts."
msgstr ""

#: ../../library/asyncio-eventloop.rst:242
msgid ""
"Raises :exc:`RuntimeError` if called on a loop that's been closed. This can "
"happen on a secondary thread when the main application is shutting down."
msgstr ""

#: ../../library/asyncio-eventloop.rst:246
msgid ""
"See the :ref:`concurrency and multithreading <asyncio-multithreading>` "
"section of the documentation."
msgstr ""

#: ../../library/asyncio-eventloop.rst:249
#: ../../library/asyncio-eventloop.rst:299
#: ../../library/asyncio-eventloop.rst:319
msgid ""
"The *context* keyword-only parameter was added. See :pep:`567` for more "
"details."
msgstr ""

#: ../../library/asyncio-eventloop.rst:257
msgid ""
"Most :mod:`asyncio` scheduling functions don't allow passing keyword "
"arguments.  To do that, use :func:`functools.partial`::"
msgstr ""

#: ../../library/asyncio-eventloop.rst:260
msgid ""
"# will schedule \"print(\"Hello\", flush=True)\"\n"
"loop.call_soon(\n"
"    functools.partial(print, \"Hello\", flush=True))"
msgstr ""

#: ../../library/asyncio-eventloop.rst:264
msgid ""
"Using partial objects is usually more convenient than using lambdas, as "
"asyncio can render partial objects better in debug and error messages."
msgstr ""

#: ../../library/asyncio-eventloop.rst:272
msgid "Scheduling delayed callbacks"
msgstr ""

#: ../../library/asyncio-eventloop.rst:274
msgid ""
"Event loop provides mechanisms to schedule callback functions to be called "
"at some point in the future.  Event loop uses monotonic clocks to track time."
msgstr ""

#: ../../library/asyncio-eventloop.rst:281
msgid ""
"Schedule *callback* to be called after the given *delay* number of seconds "
"(can be either an int or a float)."
msgstr ""

#: ../../library/asyncio-eventloop.rst:284
#: ../../library/asyncio-eventloop.rst:316
msgid ""
"An instance of :class:`asyncio.TimerHandle` is returned which can be used to "
"cancel the callback."
msgstr ""

#: ../../library/asyncio-eventloop.rst:287
msgid ""
"*callback* will be called exactly once.  If two callbacks are scheduled for "
"exactly the same time, the order in which they are called is undefined."
msgstr ""

#: ../../library/asyncio-eventloop.rst:291
msgid ""
"The optional positional *args* will be passed to the callback when it is "
"called. If you want the callback to be called with keyword arguments use :"
"func:`functools.partial`."
msgstr ""

#: ../../library/asyncio-eventloop.rst:295
msgid ""
"An optional keyword-only *context* argument allows specifying a custom :"
"class:`contextvars.Context` for the *callback* to run in. The current "
"context is used when no *context* is provided."
msgstr ""

#: ../../library/asyncio-eventloop.rst:303
msgid ""
"In Python 3.7 and earlier with the default event loop implementation, the "
"*delay* could not exceed one day. This has been fixed in Python 3.8."
msgstr ""

#: ../../library/asyncio-eventloop.rst:310
msgid ""
"Schedule *callback* to be called at the given absolute timestamp *when* (an "
"int or a float), using the same time reference as :meth:`loop.time`."
msgstr ""

#: ../../library/asyncio-eventloop.rst:314
msgid "This method's behavior is the same as :meth:`call_later`."
msgstr ""

#: ../../library/asyncio-eventloop.rst:323
msgid ""
"In Python 3.7 and earlier with the default event loop implementation, the "
"difference between *when* and the current time could not exceed one day.  "
"This has been fixed in Python 3.8."
msgstr ""

#: ../../library/asyncio-eventloop.rst:330
msgid ""
"Return the current time, as a :class:`float` value, according to the event "
"loop's internal monotonic clock."
msgstr ""

#: ../../library/asyncio-eventloop.rst:334
msgid ""
"In Python 3.7 and earlier timeouts (relative *delay* or absolute *when*) "
"should not exceed one day.  This has been fixed in Python 3.8."
msgstr ""

#: ../../library/asyncio-eventloop.rst:340
msgid "The :func:`asyncio.sleep` function."
msgstr ""

#: ../../library/asyncio-eventloop.rst:344
msgid "Creating Futures and Tasks"
msgstr ""

#: ../../library/asyncio-eventloop.rst:348
msgid "Create an :class:`asyncio.Future` object attached to the event loop."
msgstr ""

#: ../../library/asyncio-eventloop.rst:350
msgid ""
"This is the preferred way to create Futures in asyncio. This lets third-"
"party event loops provide alternative implementations of the Future object "
"(with better performance or instrumentation)."
msgstr ""

#: ../../library/asyncio-eventloop.rst:358
msgid ""
"Schedule the execution of :ref:`coroutine <coroutine>` *coro*. Return a :"
"class:`Task` object."
msgstr ""

#: ../../library/asyncio-eventloop.rst:361
msgid ""
"Third-party event loops can use their own subclass of :class:`Task` for "
"interoperability. In this case, the result type is a subclass of :class:"
"`Task`."
msgstr ""

#: ../../library/asyncio-eventloop.rst:365
msgid ""
"If the *name* argument is provided and not ``None``, it is set as the name "
"of the task using :meth:`Task.set_name`."
msgstr ""

#: ../../library/asyncio-eventloop.rst:368
msgid ""
"An optional keyword-only *context* argument allows specifying a custom :"
"class:`contextvars.Context` for the *coro* to run in. The current context "
"copy is created when no *context* is provided."
msgstr ""

#: ../../library/asyncio-eventloop.rst:372
msgid "Added the *name* parameter."
msgstr ""

#: ../../library/asyncio-eventloop.rst:375
msgid "Added the *context* parameter."
msgstr ""

#: ../../library/asyncio-eventloop.rst:380
msgid "Set a task factory that will be used by :meth:`loop.create_task`."
msgstr ""

#: ../../library/asyncio-eventloop.rst:383
msgid ""
"If *factory* is ``None`` the default task factory will be set. Otherwise, "
"*factory* must be a *callable* with the signature matching ``(loop, coro, "
"context=None)``, where *loop* is a reference to the active event loop, and "
"*coro* is a coroutine object.  The callable must return a :class:`asyncio."
"Future`-compatible object."
msgstr ""

#: ../../library/asyncio-eventloop.rst:391
msgid "Return a task factory or ``None`` if the default one is in use."
msgstr ""

#: ../../library/asyncio-eventloop.rst:395
msgid "Opening network connections"
msgstr ""

#: ../../library/asyncio-eventloop.rst:406
msgid ""
"Open a streaming transport connection to a given address specified by *host* "
"and *port*."
msgstr ""

#: ../../library/asyncio-eventloop.rst:409
msgid ""
"The socket family can be either :py:const:`~socket.AF_INET` or :py:const:"
"`~socket.AF_INET6` depending on *host* (or the *family* argument, if "
"provided)."
msgstr ""

#: ../../library/asyncio-eventloop.rst:413
msgid "The socket type will be :py:const:`~socket.SOCK_STREAM`."
msgstr ""

#: ../../library/asyncio-eventloop.rst:415
#: ../../library/asyncio-eventloop.rst:1173
#: ../../library/asyncio-eventloop.rst:1189
msgid ""
"*protocol_factory* must be a callable returning an :ref:`asyncio protocol "
"<asyncio-protocol>` implementation."
msgstr ""

#: ../../library/asyncio-eventloop.rst:418
msgid ""
"This method will try to establish the connection in the background. When "
"successful, it returns a ``(transport, protocol)`` pair."
msgstr ""

#: ../../library/asyncio-eventloop.rst:421
msgid "The chronological synopsis of the underlying operation is as follows:"
msgstr ""

#: ../../library/asyncio-eventloop.rst:423
msgid ""
"The connection is established and a :ref:`transport <asyncio-transport>` is "
"created for it."
msgstr ""

#: ../../library/asyncio-eventloop.rst:426
msgid ""
"*protocol_factory* is called without arguments and is expected to return a :"
"ref:`protocol <asyncio-protocol>` instance."
msgstr ""

#: ../../library/asyncio-eventloop.rst:429
msgid ""
"The protocol instance is coupled with the transport by calling its :meth:"
"`~BaseProtocol.connection_made` method."
msgstr ""

#: ../../library/asyncio-eventloop.rst:432
msgid "A ``(transport, protocol)`` tuple is returned on success."
msgstr ""

#: ../../library/asyncio-eventloop.rst:434
msgid ""
"The created transport is an implementation-dependent bidirectional stream."
msgstr ""

#: ../../library/asyncio-eventloop.rst:437
#: ../../library/asyncio-eventloop.rst:569
msgid "Other arguments:"
msgstr ""

#: ../../library/asyncio-eventloop.rst:439
msgid ""
"*ssl*: if given and not false, a SSL/TLS transport is created (by default a "
"plain TCP transport is created).  If *ssl* is a :class:`ssl.SSLContext` "
"object, this context is used to create the transport; if *ssl* is :const:"
"`True`, a default context returned from :func:`ssl.create_default_context` "
"is used."
msgstr ""

#: ../../library/asyncio-eventloop.rst:445
msgid ":ref:`SSL/TLS security considerations <ssl-security>`"
msgstr ""

#: ../../library/asyncio-eventloop.rst:447
msgid ""
"*server_hostname* sets or overrides the hostname that the target server's "
"certificate will be matched against.  Should only be passed if *ssl* is not "
"``None``.  By default the value of the *host* argument is used.  If *host* "
"is empty, there is no default and you must pass a value for "
"*server_hostname*.  If *server_hostname* is an empty string, hostname "
"matching is disabled (which is a serious security risk, allowing for "
"potential man-in-the-middle attacks)."
msgstr ""

#: ../../library/asyncio-eventloop.rst:455
msgid ""
"*family*, *proto*, *flags* are the optional address family, protocol and "
"flags to be passed through to getaddrinfo() for *host* resolution. If given, "
"these should all be integers from the corresponding :mod:`socket` module "
"constants."
msgstr ""

#: ../../library/asyncio-eventloop.rst:460
msgid ""
"*happy_eyeballs_delay*, if given, enables Happy Eyeballs for this "
"connection. It should be a floating-point number representing the amount of "
"time in seconds to wait for a connection attempt to complete, before "
"starting the next attempt in parallel. This is the \"Connection Attempt "
"Delay\" as defined in :rfc:`8305`. A sensible default value recommended by "
"the RFC is ``0.25`` (250 milliseconds)."
msgstr ""

#: ../../library/asyncio-eventloop.rst:468
msgid ""
"*interleave* controls address reordering when a host name resolves to "
"multiple IP addresses. If ``0`` or unspecified, no reordering is done, and "
"addresses are tried in the order returned by :meth:`getaddrinfo`. If a "
"positive integer is specified, the addresses are interleaved by address "
"family, and the given integer is interpreted as \"First Address Family "
"Count\" as defined in :rfc:`8305`. The default is ``0`` if "
"*happy_eyeballs_delay* is not specified, and ``1`` if it is."
msgstr ""

#: ../../library/asyncio-eventloop.rst:477
msgid ""
"*sock*, if given, should be an existing, already connected :class:`socket."
"socket` object to be used by the transport. If *sock* is given, none of "
"*host*, *port*, *family*, *proto*, *flags*, *happy_eyeballs_delay*, "
"*interleave* and *local_addr* should be specified."
msgstr ""

#: ../../library/asyncio-eventloop.rst:485
#: ../../library/asyncio-eventloop.rst:600
#: ../../library/asyncio-eventloop.rst:828
msgid ""
"The *sock* argument transfers ownership of the socket to the transport "
"created. To close the socket, call the transport's :meth:`~asyncio."
"BaseTransport.close` method."
msgstr ""

#: ../../library/asyncio-eventloop.rst:489
msgid ""
"*local_addr*, if given, is a ``(local_host, local_port)`` tuple used to bind "
"the socket locally.  The *local_host* and *local_port* are looked up using "
"``getaddrinfo()``, similarly to *host* and *port*."
msgstr ""

#: ../../library/asyncio-eventloop.rst:493
#: ../../library/asyncio-eventloop.rst:922
msgid ""
"*ssl_handshake_timeout* is (for a TLS connection) the time in seconds to "
"wait for the TLS handshake to complete before aborting the connection. "
"``60.0`` seconds if ``None`` (default)."
msgstr ""

#: ../../library/asyncio-eventloop.rst:497
#: ../../library/asyncio-eventloop.rst:745
#: ../../library/asyncio-eventloop.rst:839
#: ../../library/asyncio-eventloop.rst:926
msgid ""
"*ssl_shutdown_timeout* is the time in seconds to wait for the SSL shutdown "
"to complete before aborting the connection. ``30.0`` seconds if ``None`` "
"(default)."
msgstr ""

#: ../../library/asyncio-eventloop.rst:501
msgid ""
"*all_errors* determines what exceptions are raised when a connection cannot "
"be created. By default, only a single ``Exception`` is raised: the first "
"exception if there is only one or all errors have same message, or a single "
"``OSError`` with the error messages combined. When ``all_errors`` is "
"``True``, an ``ExceptionGroup`` will be raised containing all exceptions "
"(even if there is only one)."
msgstr ""

#: ../../library/asyncio-eventloop.rst:511
#: ../../library/asyncio-eventloop.rst:757
msgid "Added support for SSL/TLS in :class:`ProactorEventLoop`."
msgstr ""

#: ../../library/asyncio-eventloop.rst:515
msgid ""
"The socket option :ref:`socket.TCP_NODELAY <socket-unix-constants>` is set "
"by default for all TCP connections."
msgstr ""

#: ../../library/asyncio-eventloop.rst:520
#: ../../library/asyncio-eventloop.rst:849
msgid "Added the *ssl_handshake_timeout* parameter."
msgstr ""

#: ../../library/asyncio-eventloop.rst:524
msgid "Added the *happy_eyeballs_delay* and *interleave* parameters."
msgstr ""

#: ../../library/asyncio-eventloop.rst:526
msgid ""
"Happy Eyeballs Algorithm: Success with Dual-Stack Hosts. When a server's "
"IPv4 path and protocol are working, but the server's IPv6 path and protocol "
"are not working, a dual-stack client application experiences significant "
"connection delay compared to an IPv4-only client.  This is undesirable "
"because it causes the dual-stack client to have a worse user experience.  "
"This document specifies requirements for algorithms that reduce this user-"
"visible delay and provides an algorithm."
msgstr ""

#: ../../library/asyncio-eventloop.rst:535
msgid "For more information: https://datatracker.ietf.org/doc/html/rfc6555"
msgstr ""

#: ../../library/asyncio-eventloop.rst:539
#: ../../library/asyncio-eventloop.rst:663
#: ../../library/asyncio-eventloop.rst:771
#: ../../library/asyncio-eventloop.rst:806
#: ../../library/asyncio-eventloop.rst:853
#: ../../library/asyncio-eventloop.rst:934
msgid "Added the *ssl_shutdown_timeout* parameter."
msgstr ""

#: ../../library/asyncio-eventloop.rst:541
msgid "*all_errors* was added."
msgstr ""

#: ../../library/asyncio-eventloop.rst:546
msgid ""
"The :func:`open_connection` function is a high-level alternative API.  It "
"returns a pair of (:class:`StreamReader`, :class:`StreamWriter`) that can be "
"used directly in async/await code."
msgstr ""

#: ../../library/asyncio-eventloop.rst:556
msgid "Create a datagram connection."
msgstr ""

#: ../../library/asyncio-eventloop.rst:558
msgid ""
"The socket family can be either :py:const:`~socket.AF_INET`, :py:const:"
"`~socket.AF_INET6`, or :py:const:`~socket.AF_UNIX`, depending on *host* (or "
"the *family* argument, if provided)."
msgstr ""

#: ../../library/asyncio-eventloop.rst:562
msgid "The socket type will be :py:const:`~socket.SOCK_DGRAM`."
msgstr ""

#: ../../library/asyncio-eventloop.rst:564
#: ../../library/asyncio-eventloop.rst:688
#: ../../library/asyncio-eventloop.rst:820
msgid ""
"*protocol_factory* must be a callable returning a :ref:`protocol <asyncio-"
"protocol>` implementation."
msgstr ""

#: ../../library/asyncio-eventloop.rst:567
#: ../../library/asyncio-eventloop.rst:645
msgid "A tuple of ``(transport, protocol)`` is returned on success."
msgstr ""

#: ../../library/asyncio-eventloop.rst:571
msgid ""
"*local_addr*, if given, is a ``(local_host, local_port)`` tuple used to bind "
"the socket locally.  The *local_host* and *local_port* are looked up using :"
"meth:`getaddrinfo`."
msgstr ""

#: ../../library/asyncio-eventloop.rst:575
msgid ""
"*remote_addr*, if given, is a ``(remote_host, remote_port)`` tuple used to "
"connect the socket to a remote address.  The *remote_host* and *remote_port* "
"are looked up using :meth:`getaddrinfo`."
msgstr ""

#: ../../library/asyncio-eventloop.rst:579
msgid ""
"*family*, *proto*, *flags* are the optional address family, protocol and "
"flags to be passed through to :meth:`getaddrinfo` for *host* resolution. If "
"given, these should all be integers from the corresponding :mod:`socket` "
"module constants."
msgstr ""

#: ../../library/asyncio-eventloop.rst:584
msgid ""
"*reuse_port* tells the kernel to allow this endpoint to be bound to the same "
"port as other existing endpoints are bound to, so long as they all set this "
"flag when being created. This option is not supported on Windows and some "
"Unixes. If the :ref:`socket.SO_REUSEPORT <socket-unix-constants>` constant "
"is not defined then this capability is unsupported."
msgstr ""

#: ../../library/asyncio-eventloop.rst:590
msgid ""
"*allow_broadcast* tells the kernel to allow this endpoint to send messages "
"to the broadcast address."
msgstr ""

#: ../../library/asyncio-eventloop.rst:593
msgid ""
"*sock* can optionally be specified in order to use a preexisting, already "
"connected, :class:`socket.socket` object to be used by the transport. If "
"specified, *local_addr* and *remote_addr* should be omitted (must be :const:"
"`None`)."
msgstr ""

#: ../../library/asyncio-eventloop.rst:604
msgid ""
"See :ref:`UDP echo client protocol <asyncio-udp-echo-client-protocol>` and :"
"ref:`UDP echo server protocol <asyncio-udp-echo-server-protocol>` examples."
msgstr ""

#: ../../library/asyncio-eventloop.rst:607
msgid ""
"The *family*, *proto*, *flags*, *reuse_address*, *reuse_port*, "
"*allow_broadcast*, and *sock* parameters were added."
msgstr ""

#: ../../library/asyncio-eventloop.rst:611
msgid "Added support for Windows."
msgstr ""

#: ../../library/asyncio-eventloop.rst:614
msgid ""
"The *reuse_address* parameter is no longer supported, as using :ref:`socket."
"SO_REUSEADDR <socket-unix-constants>` poses a significant security concern "
"for UDP. Explicitly passing ``reuse_address=True`` will raise an exception."
msgstr ""

#: ../../library/asyncio-eventloop.rst:620
msgid ""
"When multiple processes with differing UIDs assign sockets to an identical "
"UDP socket address with ``SO_REUSEADDR``, incoming packets can become "
"randomly distributed among the sockets."
msgstr ""

#: ../../library/asyncio-eventloop.rst:624
msgid ""
"For supported platforms, *reuse_port* can be used as a replacement for "
"similar functionality. With *reuse_port*, :ref:`socket.SO_REUSEPORT <socket-"
"unix-constants>` is used instead, which specifically prevents processes with "
"differing UIDs from assigning sockets to the same socket address."
msgstr ""

#: ../../library/asyncio-eventloop.rst:631
msgid ""
"The *reuse_address* parameter, disabled since Python 3.8.1, 3.7.6 and "
"3.6.10, has been entirely removed."
msgstr ""

#: ../../library/asyncio-eventloop.rst:640
msgid "Create a Unix connection."
msgstr ""

#: ../../library/asyncio-eventloop.rst:642
msgid ""
"The socket family will be :py:const:`~socket.AF_UNIX`; socket type will be :"
"py:const:`~socket.SOCK_STREAM`."
msgstr ""

#: ../../library/asyncio-eventloop.rst:647
msgid ""
"*path* is the name of a Unix domain socket and is required, unless a *sock* "
"parameter is specified.  Abstract Unix sockets, :class:`str`, :class:"
"`bytes`, and :class:`~pathlib.Path` paths are supported."
msgstr ""

#: ../../library/asyncio-eventloop.rst:652
msgid ""
"See the documentation of the :meth:`loop.create_connection` method for "
"information about arguments to this method."
msgstr ""

#: ../../library/asyncio-eventloop.rst:655
#: ../../library/asyncio-eventloop.rst:797
#: ../../library/asyncio-eventloop.rst:1242
#: ../../library/asyncio-eventloop.rst:1750
#: ../../library/asyncio-eventloop.rst:1757
msgid "Availability"
msgstr ""

#: ../../library/asyncio-eventloop.rst:657
msgid ""
"Added the *ssl_handshake_timeout* parameter. The *path* parameter can now be "
"a :term:`path-like object`."
msgstr ""

#: ../../library/asyncio-eventloop.rst:667
msgid "Creating network servers"
msgstr ""

#: ../../library/asyncio-eventloop.rst:681
msgid ""
"Create a TCP server (socket type :const:`~socket.SOCK_STREAM`) listening on "
"*port* of the *host* address."
msgstr ""

#: ../../library/asyncio-eventloop.rst:684
msgid "Returns a :class:`Server` object."
msgstr ""

#: ../../library/asyncio-eventloop.rst:686
msgid "Arguments:"
msgstr ""

#: ../../library/asyncio-eventloop.rst:691
msgid ""
"The *host* parameter can be set to several types which determine where the "
"server would be listening:"
msgstr ""

#: ../../library/asyncio-eventloop.rst:694
msgid ""
"If *host* is a string, the TCP server is bound to a single network interface "
"specified by *host*."
msgstr ""

#: ../../library/asyncio-eventloop.rst:697
msgid ""
"If *host* is a sequence of strings, the TCP server is bound to all network "
"interfaces specified by the sequence."
msgstr ""

#: ../../library/asyncio-eventloop.rst:700
msgid ""
"If *host* is an empty string or ``None``, all interfaces are assumed and a "
"list of multiple sockets will be returned (most likely one for IPv4 and "
"another one for IPv6)."
msgstr ""

#: ../../library/asyncio-eventloop.rst:704
msgid ""
"The *port* parameter can be set to specify which port the server should "
"listen on. If ``0`` or ``None`` (the default), a random unused port will be "
"selected (note that if *host* resolves to multiple network interfaces, a "
"different random port will be selected for each interface)."
msgstr ""

#: ../../library/asyncio-eventloop.rst:709
msgid ""
"*family* can be set to either :const:`socket.AF_INET` or :const:`~socket."
"AF_INET6` to force the socket to use IPv4 or IPv6. If not set, the *family* "
"will be determined from host name (defaults to :const:`~socket.AF_UNSPEC`)."
msgstr ""

#: ../../library/asyncio-eventloop.rst:714
msgid "*flags* is a bitmask for :meth:`getaddrinfo`."
msgstr ""

#: ../../library/asyncio-eventloop.rst:716
msgid ""
"*sock* can optionally be specified in order to use a preexisting socket "
"object. If specified, *host* and *port* must not be specified."
msgstr ""

#: ../../library/asyncio-eventloop.rst:721
msgid ""
"The *sock* argument transfers ownership of the socket to the server created. "
"To close the socket, call the server's :meth:`~asyncio.Server.close` method."
msgstr ""

#: ../../library/asyncio-eventloop.rst:725
msgid ""
"*backlog* is the maximum number of queued connections passed to :meth:"
"`~socket.socket.listen` (defaults to 100)."
msgstr ""

#: ../../library/asyncio-eventloop.rst:728
msgid ""
"*ssl* can be set to an :class:`~ssl.SSLContext` instance to enable TLS over "
"the accepted connections."
msgstr ""

#: ../../library/asyncio-eventloop.rst:731
msgid ""
"*reuse_address* tells the kernel to reuse a local socket in ``TIME_WAIT`` "
"state, without waiting for its natural timeout to expire. If not specified "
"will automatically be set to ``True`` on Unix."
msgstr ""

#: ../../library/asyncio-eventloop.rst:736
msgid ""
"*reuse_port* tells the kernel to allow this endpoint to be bound to the same "
"port as other existing endpoints are bound to, so long as they all set this "
"flag when being created. This option is not supported on Windows."
msgstr ""

#: ../../library/asyncio-eventloop.rst:741
msgid ""
"*ssl_handshake_timeout* is (for a TLS server) the time in seconds to wait "
"for the TLS handshake to complete before aborting the connection. ``60.0`` "
"seconds if ``None`` (default)."
msgstr ""

#: ../../library/asyncio-eventloop.rst:749
msgid ""
"*start_serving* set to ``True`` (the default) causes the created server to "
"start accepting connections immediately.  When set to ``False``, the user "
"should await on :meth:`Server.start_serving` or :meth:`Server.serve_forever` "
"to make the server to start accepting connections."
msgstr ""

#: ../../library/asyncio-eventloop.rst:761
msgid "The *host* parameter can be a sequence of strings."
msgstr ""

#: ../../library/asyncio-eventloop.rst:765
msgid ""
"Added *ssl_handshake_timeout* and *start_serving* parameters. The socket "
"option :ref:`socket.TCP_NODELAY <socket-unix-constants>` is set by default "
"for all TCP connections."
msgstr ""

#: ../../library/asyncio-eventloop.rst:775
msgid ""
"The :func:`start_server` function is a higher-level alternative API that "
"returns a pair of :class:`StreamReader` and :class:`StreamWriter` that can "
"be used in an async/await code."
msgstr ""

#: ../../library/asyncio-eventloop.rst:786
msgid ""
"Similar to :meth:`loop.create_server` but works with the :py:const:`~socket."
"AF_UNIX` socket family."
msgstr ""

#: ../../library/asyncio-eventloop.rst:789
msgid ""
"*path* is the name of a Unix domain socket, and is required, unless a *sock* "
"argument is provided.  Abstract Unix sockets, :class:`str`, :class:`bytes`, "
"and :class:`~pathlib.Path` paths are supported."
msgstr ""

#: ../../library/asyncio-eventloop.rst:794
msgid ""
"See the documentation of the :meth:`loop.create_server` method for "
"information about arguments to this method."
msgstr ""

#: ../../library/asyncio-eventloop.rst:801
msgid ""
"Added the *ssl_handshake_timeout* and *start_serving* parameters. The *path* "
"parameter can now be a :class:`~pathlib.Path` object."
msgstr ""

#: ../../library/asyncio-eventloop.rst:813
msgid "Wrap an already accepted connection into a transport/protocol pair."
msgstr ""

#: ../../library/asyncio-eventloop.rst:815
msgid ""
"This method can be used by servers that accept connections outside of "
"asyncio but that use asyncio to handle them."
msgstr ""

#: ../../library/asyncio-eventloop.rst:818
#: ../../library/asyncio-eventloop.rst:908
msgid "Parameters:"
msgstr ""

#: ../../library/asyncio-eventloop.rst:823
msgid ""
"*sock* is a preexisting socket object returned from :meth:`socket.accept "
"<socket.socket.accept>`."
msgstr ""

#: ../../library/asyncio-eventloop.rst:832
msgid ""
"*ssl* can be set to an :class:`~ssl.SSLContext` to enable SSL over the "
"accepted connections."
msgstr ""

#: ../../library/asyncio-eventloop.rst:835
msgid ""
"*ssl_handshake_timeout* is (for an SSL connection) the time in seconds to "
"wait for the SSL handshake to complete before aborting the connection. "
"``60.0`` seconds if ``None`` (default)."
msgstr ""

#: ../../library/asyncio-eventloop.rst:843
msgid "Returns a ``(transport, protocol)`` pair."
msgstr ""

#: ../../library/asyncio-eventloop.rst:857
msgid "Transferring files"
msgstr ""

#: ../../library/asyncio-eventloop.rst:862
msgid ""
"Send a *file* over a *transport*.  Return the total number of bytes sent."
msgstr ""

#: ../../library/asyncio-eventloop.rst:865
msgid "The method uses high-performance :meth:`os.sendfile` if available."
msgstr ""

#: ../../library/asyncio-eventloop.rst:867
msgid "*file* must be a regular file object opened in binary mode."
msgstr ""

#: ../../library/asyncio-eventloop.rst:869
#: ../../library/asyncio-eventloop.rst:1120
msgid ""
"*offset* tells from where to start reading the file. If specified, *count* "
"is the total number of bytes to transmit as opposed to sending the file "
"until EOF is reached. File position is always updated, even when this method "
"raises an error, and :meth:`file.tell() <io.IOBase.tell>` can be used to "
"obtain the actual number of bytes sent."
msgstr ""

#: ../../library/asyncio-eventloop.rst:876
msgid ""
"*fallback* set to ``True`` makes asyncio to manually read and send the file "
"when the platform does not support the sendfile system call (e.g. Windows or "
"SSL socket on Unix)."
msgstr ""

#: ../../library/asyncio-eventloop.rst:880
msgid ""
"Raise :exc:`SendfileNotAvailableError` if the system does not support the "
"*sendfile* syscall and *fallback* is ``False``."
msgstr ""

#: ../../library/asyncio-eventloop.rst:887
msgid "TLS Upgrade"
msgstr ""

#: ../../library/asyncio-eventloop.rst:894
msgid "Upgrade an existing transport-based connection to TLS."
msgstr ""

#: ../../library/asyncio-eventloop.rst:896
msgid ""
"Create a TLS coder/decoder instance and insert it between the *transport* "
"and the *protocol*. The coder/decoder implements both *transport*-facing "
"protocol and *protocol*-facing transport."
msgstr ""

#: ../../library/asyncio-eventloop.rst:900
msgid ""
"Return the created two-interface instance. After *await*, the *protocol* "
"must stop using the original *transport* and communicate with the returned "
"object only because the coder caches *protocol*-side data and sporadically "
"exchanges extra TLS session packets with *transport*."
msgstr ""

#: ../../library/asyncio-eventloop.rst:905
msgid ""
"In some situations (e.g. when the passed transport is already closing) this "
"may return ``None``."
msgstr ""

#: ../../library/asyncio-eventloop.rst:910
msgid ""
"*transport* and *protocol* instances that methods like :meth:`~loop."
"create_server` and :meth:`~loop.create_connection` return."
msgstr ""

#: ../../library/asyncio-eventloop.rst:914
msgid "*sslcontext*: a configured instance of :class:`~ssl.SSLContext`."
msgstr ""

#: ../../library/asyncio-eventloop.rst:916
msgid ""
"*server_side* pass ``True`` when a server-side connection is being upgraded "
"(like the one created by :meth:`~loop.create_server`)."
msgstr ""

#: ../../library/asyncio-eventloop.rst:919
msgid ""
"*server_hostname*: sets or overrides the host name that the target server's "
"certificate will be matched against."
msgstr ""

#: ../../library/asyncio-eventloop.rst:939
msgid "Watching file descriptors"
msgstr ""

#: ../../library/asyncio-eventloop.rst:943
msgid ""
"Start monitoring the *fd* file descriptor for read availability and invoke "
"*callback* with the specified arguments once *fd* is available for reading."
msgstr ""

#: ../../library/asyncio-eventloop.rst:947
#: ../../library/asyncio-eventloop.rst:961
msgid ""
"Any preexisting callback registered for *fd* is cancelled and replaced by "
"*callback*."
msgstr ""

#: ../../library/asyncio-eventloop.rst:952
msgid ""
"Stop monitoring the *fd* file descriptor for read availability. Returns "
"``True`` if *fd* was previously being monitored for reads."
msgstr ""

#: ../../library/asyncio-eventloop.rst:957
msgid ""
"Start monitoring the *fd* file descriptor for write availability and invoke "
"*callback* with the specified arguments once *fd* is available for writing."
msgstr ""

#: ../../library/asyncio-eventloop.rst:964
#: ../../library/asyncio-eventloop.rst:1229
msgid ""
"Use :func:`functools.partial` :ref:`to pass keyword arguments <asyncio-pass-"
"keywords>` to *callback*."
msgstr ""

#: ../../library/asyncio-eventloop.rst:969
msgid ""
"Stop monitoring the *fd* file descriptor for write availability. Returns "
"``True`` if *fd* was previously being monitored for writes."
msgstr ""

#: ../../library/asyncio-eventloop.rst:972
msgid ""
"See also :ref:`Platform Support <asyncio-platform-support>` section for some "
"limitations of these methods."
msgstr ""

#: ../../library/asyncio-eventloop.rst:977
msgid "Working with socket objects directly"
msgstr ""

#: ../../library/asyncio-eventloop.rst:979
msgid ""
"In general, protocol implementations that use transport-based APIs such as :"
"meth:`loop.create_connection` and :meth:`loop.create_server` are faster than "
"implementations that work with sockets directly. However, there are some use "
"cases when performance is not critical, and working with :class:`~socket."
"socket` objects directly is more convenient."
msgstr ""

#: ../../library/asyncio-eventloop.rst:988
msgid ""
"Receive up to *nbytes* from *sock*.  Asynchronous version of :meth:`socket."
"recv() <socket.socket.recv>`."
msgstr ""

#: ../../library/asyncio-eventloop.rst:991
msgid "Return the received data as a bytes object."
msgstr ""

#: ../../library/asyncio-eventloop.rst:993
#: ../../library/asyncio-eventloop.rst:1007
#: ../../library/asyncio-eventloop.rst:1018
#: ../../library/asyncio-eventloop.rst:1030
#: ../../library/asyncio-eventloop.rst:1045
#: ../../library/asyncio-eventloop.rst:1060
#: ../../library/asyncio-eventloop.rst:1070
#: ../../library/asyncio-eventloop.rst:1096
#: ../../library/asyncio-eventloop.rst:1134
msgid "*sock* must be a non-blocking socket."
msgstr ""

#: ../../library/asyncio-eventloop.rst:995
msgid ""
"Even though this method was always documented as a coroutine method, "
"releases before Python 3.7 returned a :class:`Future`. Since Python 3.7 this "
"is an ``async def`` method."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1002
msgid ""
"Receive data from *sock* into the *buf* buffer.  Modeled after the blocking :"
"meth:`socket.recv_into() <socket.socket.recv_into>` method."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1005
msgid "Return the number of bytes written to the buffer."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1013
msgid ""
"Receive a datagram of up to *bufsize* from *sock*.  Asynchronous version of :"
"meth:`socket.recvfrom() <socket.socket.recvfrom>`."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1016
msgid "Return a tuple of (received data, remote address)."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1024
msgid ""
"Receive a datagram of up to *nbytes* from *sock* into *buf*. Asynchronous "
"version of :meth:`socket.recvfrom_into() <socket.socket.recvfrom_into>`."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1028
msgid "Return a tuple of (number of bytes received, remote address)."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1036
msgid ""
"Send *data* to the *sock* socket. Asynchronous version of :meth:`socket."
"sendall() <socket.socket.sendall>`."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1039
msgid ""
"This method continues to send to the socket until either all data in *data* "
"has been sent or an error occurs.  ``None`` is returned on success.  On "
"error, an exception is raised. Additionally, there is no way to determine "
"how much data, if any, was successfully processed by the receiving end of "
"the connection."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1047
#: ../../library/asyncio-eventloop.rst:1098
msgid ""
"Even though the method was always documented as a coroutine method, before "
"Python 3.7 it returned a :class:`Future`. Since Python 3.7, this is an "
"``async def`` method."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1054
msgid ""
"Send a datagram from *sock* to *address*. Asynchronous version of :meth:"
"`socket.sendto() <socket.socket.sendto>`."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1058
msgid "Return the number of bytes sent."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1066
msgid "Connect *sock* to a remote socket at *address*."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1068
msgid ""
"Asynchronous version of :meth:`socket.connect() <socket.socket.connect>`."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1072
msgid ""
"``address`` no longer needs to be resolved.  ``sock_connect`` will try to "
"check if the *address* is already resolved by calling :func:`socket."
"inet_pton`.  If not, :meth:`loop.getaddrinfo` will be used to resolve the "
"*address*."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1081
msgid ""
":meth:`loop.create_connection` and  :func:`asyncio.open_connection() "
"<open_connection>`."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1087
msgid ""
"Accept a connection.  Modeled after the blocking :meth:`socket.accept() "
"<socket.socket.accept>` method."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1090
msgid ""
"The socket must be bound to an address and listening for connections. The "
"return value is a pair ``(conn, address)`` where *conn* is a *new* socket "
"object usable to send and receive data on the connection, and *address* is "
"the address bound to the socket on the other end of the connection."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1105
msgid ":meth:`loop.create_server` and :func:`start_server`."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1110
msgid ""
"Send a file using high-performance :mod:`os.sendfile` if possible. Return "
"the total number of bytes sent."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1113
msgid ""
"Asynchronous version of :meth:`socket.sendfile() <socket.socket.sendfile>`."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1115
msgid ""
"*sock* must be a non-blocking :const:`socket.SOCK_STREAM` :class:`~socket."
"socket`."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1118
msgid "*file* must be a regular file object open in binary mode."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1127
msgid ""
"*fallback*, when set to ``True``, makes asyncio manually read and send the "
"file when the platform does not support the sendfile syscall (e.g. Windows "
"or SSL socket on Unix)."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1131
msgid ""
"Raise :exc:`SendfileNotAvailableError` if the system does not support "
"*sendfile* syscall and *fallback* is ``False``."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1140
msgid "DNS"
msgstr ""

#: ../../library/asyncio-eventloop.rst:1145
msgid "Asynchronous version of :meth:`socket.getaddrinfo`."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1149
msgid "Asynchronous version of :meth:`socket.getnameinfo`."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1152
msgid ""
"Both *getaddrinfo* and *getnameinfo* internally utilize their synchronous "
"versions through the loop's default thread pool executor. When this executor "
"is saturated, these methods may experience delays, which higher-level "
"networking libraries may report as increased timeouts. To mitigate this, "
"consider using a custom executor for other user tasks, or setting a default "
"executor with a larger number of workers."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1159
msgid ""
"Both *getaddrinfo* and *getnameinfo* methods were always documented to "
"return a coroutine, but prior to Python 3.7 they were, in fact, returning :"
"class:`asyncio.Future` objects.  Starting with Python 3.7 both methods are "
"coroutines."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1167
msgid "Working with pipes"
msgstr ""

#: ../../library/asyncio-eventloop.rst:1171
msgid "Register the read end of *pipe* in the event loop."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1176
msgid "*pipe* is a :term:`file-like object <file object>`."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1178
msgid ""
"Return pair ``(transport, protocol)``, where *transport* supports the :class:"
"`ReadTransport` interface and *protocol* is an object instantiated by the "
"*protocol_factory*."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1182
#: ../../library/asyncio-eventloop.rst:1198
msgid ""
"With :class:`SelectorEventLoop` event loop, the *pipe* is set to non-"
"blocking mode."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1187
msgid "Register the write end of *pipe* in the event loop."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1192
msgid "*pipe* is :term:`file-like object <file object>`."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1194
msgid ""
"Return pair ``(transport, protocol)``, where *transport* supports :class:"
"`WriteTransport` interface and *protocol* is an object instantiated by the "
"*protocol_factory*."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1203
msgid ""
":class:`SelectorEventLoop` does not support the above methods on Windows.  "
"Use :class:`ProactorEventLoop` instead for Windows."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1208
msgid ""
"The :meth:`loop.subprocess_exec` and :meth:`loop.subprocess_shell` methods."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1213
msgid "Unix signals"
msgstr ""

#: ../../library/asyncio-eventloop.rst:1219
msgid "Set *callback* as the handler for the *signum* signal."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1221
msgid ""
"The callback will be invoked by *loop*, along with other queued callbacks "
"and runnable coroutines of that event loop. Unlike signal handlers "
"registered using :func:`signal.signal`, a callback registered with this "
"function is allowed to interact with the event loop."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1226
msgid ""
"Raise :exc:`ValueError` if the signal number is invalid or uncatchable. "
"Raise :exc:`RuntimeError` if there is a problem setting up the handler."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1232
msgid ""
"Like :func:`signal.signal`, this function must be invoked in the main thread."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1237
msgid "Remove the handler for the *sig* signal."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1239
msgid ""
"Return ``True`` if the signal handler was removed, or ``False`` if no "
"handler was set for the given signal."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1246
msgid "The :mod:`signal` module."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1250
msgid "Executing code in thread or process pools"
msgstr ""

#: ../../library/asyncio-eventloop.rst:1254
msgid "Arrange for *func* to be called in the specified executor."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1256
msgid ""
"The *executor* argument should be an :class:`concurrent.futures.Executor` "
"instance. The default executor is used if *executor* is ``None``. The "
"default executor can be set by :meth:`loop.set_default_executor`, otherwise, "
"a :class:`concurrent.futures.ThreadPoolExecutor` will be lazy-initialized "
"and used by :func:`run_in_executor` if needed."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1264
msgid ""
"import asyncio\n"
"import concurrent.futures\n"
"\n"
"def blocking_io():\n"
"    # File operations (such as logging) can block the\n"
"    # event loop: run them in a thread pool.\n"
"    with open('/dev/urandom', 'rb') as f:\n"
"        return f.read(100)\n"
"\n"
"def cpu_bound():\n"
"    # CPU-bound operations will block the event loop:\n"
"    # in general it is preferable to run them in a\n"
"    # process pool.\n"
"    return sum(i * i for i in range(10 ** 7))\n"
"\n"
"async def main():\n"
"    loop = asyncio.get_running_loop()\n"
"\n"
"    ## Options:\n"
"\n"
"    # 1. Run in the default loop's executor:\n"
"    result = await loop.run_in_executor(\n"
"        None, blocking_io)\n"
"    print('default thread pool', result)\n"
"\n"
"    # 2. Run in a custom thread pool:\n"
"    with concurrent.futures.ThreadPoolExecutor() as pool:\n"
"        result = await loop.run_in_executor(\n"
"            pool, blocking_io)\n"
"        print('custom thread pool', result)\n"
"\n"
"    # 3. Run in a custom process pool:\n"
"    with concurrent.futures.ProcessPoolExecutor() as pool:\n"
"        result = await loop.run_in_executor(\n"
"            pool, cpu_bound)\n"
"        print('custom process pool', result)\n"
"\n"
"if __name__ == '__main__':\n"
"    asyncio.run(main())"
msgstr ""

#: ../../library/asyncio-eventloop.rst:1304
msgid ""
"Note that the entry point guard (``if __name__ == '__main__'``) is required "
"for option 3 due to the peculiarities of :mod:`multiprocessing`, which is "
"used by :class:`~concurrent.futures.ProcessPoolExecutor`. See :ref:`Safe "
"importing of main module <multiprocessing-safe-main-import>`."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1309
msgid "This method returns a :class:`asyncio.Future` object."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1311
msgid ""
"Use :func:`functools.partial` :ref:`to pass keyword arguments <asyncio-pass-"
"keywords>` to *func*."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1314
msgid ""
":meth:`loop.run_in_executor` no longer configures the ``max_workers`` of the "
"thread pool executor it creates, instead leaving it up to the thread pool "
"executor (:class:`~concurrent.futures.ThreadPoolExecutor`) to set the "
"default."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1323
msgid ""
"Set *executor* as the default executor used by :meth:`run_in_executor`. "
"*executor* must be an instance of :class:`~concurrent.futures."
"ThreadPoolExecutor`."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1327
msgid ""
"*executor* must be an instance of :class:`~concurrent.futures."
"ThreadPoolExecutor`."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1333
msgid "Error Handling API"
msgstr ""

#: ../../library/asyncio-eventloop.rst:1335
msgid "Allows customizing how exceptions are handled in the event loop."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1339
msgid "Set *handler* as the new event loop exception handler."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1341
msgid ""
"If *handler* is ``None``, the default exception handler will be set.  "
"Otherwise, *handler* must be a callable with the signature matching ``(loop, "
"context)``, where ``loop`` is a reference to the active event loop, and "
"``context`` is a ``dict`` object containing the details of the exception "
"(see :meth:`call_exception_handler` documentation for details about context)."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1349
msgid ""
"If the handler is called on behalf of a :class:`~asyncio.Task` or :class:"
"`~asyncio.Handle`, it is run in the :class:`contextvars.Context` of that "
"task or callback handle."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1355
msgid ""
"The handler may be called in the :class:`~contextvars.Context` of the task "
"or handle where the exception originated."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1360
msgid ""
"Return the current exception handler, or ``None`` if no custom exception "
"handler was set."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1367
msgid "Default exception handler."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1369
msgid ""
"This is called when an exception occurs and no exception handler is set. "
"This can be called by a custom exception handler that wants to defer to the "
"default handler behavior."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1373
msgid ""
"*context* parameter has the same meaning as in :meth:"
"`call_exception_handler`."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1378
msgid "Call the current event loop exception handler."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1380
msgid ""
"*context* is a ``dict`` object containing the following keys (new keys may "
"be introduced in future Python versions):"
msgstr ""

#: ../../library/asyncio-eventloop.rst:1383
msgid "'message': Error message;"
msgstr ""

#: ../../library/asyncio-eventloop.rst:1384
msgid "'exception' (optional): Exception object;"
msgstr ""

#: ../../library/asyncio-eventloop.rst:1385
msgid "'future' (optional): :class:`asyncio.Future` instance;"
msgstr ""

#: ../../library/asyncio-eventloop.rst:1386
msgid "'task' (optional): :class:`asyncio.Task` instance;"
msgstr ""

#: ../../library/asyncio-eventloop.rst:1387
msgid "'handle' (optional): :class:`asyncio.Handle` instance;"
msgstr ""

#: ../../library/asyncio-eventloop.rst:1388
msgid "'protocol' (optional): :ref:`Protocol <asyncio-protocol>` instance;"
msgstr ""

#: ../../library/asyncio-eventloop.rst:1389
msgid "'transport' (optional): :ref:`Transport <asyncio-transport>` instance;"
msgstr ""

#: ../../library/asyncio-eventloop.rst:1390
msgid "'socket' (optional): :class:`socket.socket` instance;"
msgstr ""

#: ../../library/asyncio-eventloop.rst:1391
msgid "'asyncgen' (optional): Asynchronous generator that caused"
msgstr ""

#: ../../library/asyncio-eventloop.rst:1392
msgid "the exception."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1396
msgid ""
"This method should not be overloaded in subclassed event loops.  For custom "
"exception handling, use the :meth:`set_exception_handler` method."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1401
msgid "Enabling debug mode"
msgstr ""

#: ../../library/asyncio-eventloop.rst:1405
msgid "Get the debug mode (:class:`bool`) of the event loop."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1407
msgid ""
"The default value is ``True`` if the environment variable :envvar:"
"`PYTHONASYNCIODEBUG` is set to a non-empty string, ``False`` otherwise."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1413
msgid "Set the debug mode of the event loop."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1417
msgid ""
"The new :ref:`Python Development Mode <devmode>` can now also be used to "
"enable the debug mode."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1422
msgid ""
"This attribute can be used to set the minimum execution duration in seconds "
"that is considered \"slow\". When debug mode is enabled, \"slow\" callbacks "
"are logged."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1426
msgid "Default value is 100 milliseconds."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1430
msgid "The :ref:`debug mode of asyncio <asyncio-debug-mode>`."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1434
msgid "Running Subprocesses"
msgstr ""

#: ../../library/asyncio-eventloop.rst:1436
msgid ""
"Methods described in this subsections are low-level.  In regular async/await "
"code consider using the high-level :func:`asyncio.create_subprocess_shell` "
"and :func:`asyncio.create_subprocess_exec` convenience functions instead."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1443
msgid ""
"On Windows, the default event loop :class:`ProactorEventLoop` supports "
"subprocesses, whereas :class:`SelectorEventLoop` does not. See :ref:"
"`Subprocess Support on Windows <asyncio-windows-subprocess>` for details."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1454
msgid ""
"Create a subprocess from one or more string arguments specified by *args*."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1457
msgid "*args* must be a list of strings represented by:"
msgstr ""

#: ../../library/asyncio-eventloop.rst:1459
msgid ":class:`str`;"
msgstr ""

#: ../../library/asyncio-eventloop.rst:1460
msgid ""
"or :class:`bytes`, encoded to the :ref:`filesystem encoding <filesystem-"
"encoding>`."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1463
msgid ""
"The first string specifies the program executable, and the remaining strings "
"specify the arguments.  Together, string arguments form the ``argv`` of the "
"program."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1467
msgid ""
"This is similar to the standard library :class:`subprocess.Popen` class "
"called with ``shell=False`` and the list of strings passed as the first "
"argument; however, where :class:`~subprocess.Popen` takes a single argument "
"which is list of strings, *subprocess_exec* takes multiple string arguments."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1473
msgid ""
"The *protocol_factory* must be a callable returning a subclass of the :class:"
"`asyncio.SubprocessProtocol` class."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1476
msgid "Other parameters:"
msgstr ""

#: ../../library/asyncio-eventloop.rst:1478
msgid "*stdin* can be any of these:"
msgstr ""

#: ../../library/asyncio-eventloop.rst:1480
#: ../../library/asyncio-eventloop.rst:1491
#: ../../library/asyncio-eventloop.rst:1501
msgid "a file-like object"
msgstr ""

#: ../../library/asyncio-eventloop.rst:1481
msgid ""
"an existing file descriptor (a positive integer), for example those created "
"with :meth:`os.pipe`"
msgstr ""

#: ../../library/asyncio-eventloop.rst:1482
#: ../../library/asyncio-eventloop.rst:1492
#: ../../library/asyncio-eventloop.rst:1502
msgid ""
"the :const:`subprocess.PIPE` constant (default) which will create a new pipe "
"and connect it,"
msgstr ""

#: ../../library/asyncio-eventloop.rst:1484
#: ../../library/asyncio-eventloop.rst:1494
#: ../../library/asyncio-eventloop.rst:1504
msgid ""
"the value ``None`` which will make the subprocess inherit the file "
"descriptor from this process"
msgstr ""

#: ../../library/asyncio-eventloop.rst:1486
#: ../../library/asyncio-eventloop.rst:1496
#: ../../library/asyncio-eventloop.rst:1506
msgid ""
"the :const:`subprocess.DEVNULL` constant which indicates that the special :"
"data:`os.devnull` file will be used"
msgstr ""

#: ../../library/asyncio-eventloop.rst:1489
msgid "*stdout* can be any of these:"
msgstr ""

#: ../../library/asyncio-eventloop.rst:1499
msgid "*stderr* can be any of these:"
msgstr ""

#: ../../library/asyncio-eventloop.rst:1508
msgid ""
"the :const:`subprocess.STDOUT` constant which will connect the standard "
"error stream to the process' standard output stream"
msgstr ""

#: ../../library/asyncio-eventloop.rst:1511
msgid ""
"All other keyword arguments are passed to :class:`subprocess.Popen` without "
"interpretation, except for *bufsize*, *universal_newlines*, *shell*, *text*, "
"*encoding* and *errors*, which should not be specified at all."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1516
msgid ""
"The ``asyncio`` subprocess API does not support decoding the streams as "
"text. :func:`bytes.decode` can be used to convert the bytes returned from "
"the stream to text."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1520
msgid ""
"If a file-like object passed as *stdin*, *stdout* or *stderr* represents a "
"pipe, then the other side of this pipe should be registered with :meth:"
"`~loop.connect_write_pipe` or :meth:`~loop.connect_read_pipe` for use with "
"the event loop."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1525
msgid ""
"See the constructor of the :class:`subprocess.Popen` class for documentation "
"on other arguments."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1528
msgid ""
"Returns a pair of ``(transport, protocol)``, where *transport* conforms to "
"the :class:`asyncio.SubprocessTransport` base class and *protocol* is an "
"object instantiated by the *protocol_factory*."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1536
msgid ""
"Create a subprocess from *cmd*, which can be a :class:`str` or a :class:"
"`bytes` string encoded to the :ref:`filesystem encoding <filesystem-"
"encoding>`, using the platform's \"shell\" syntax."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1541
msgid ""
"This is similar to the standard library :class:`subprocess.Popen` class "
"called with ``shell=True``."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1544
msgid ""
"The *protocol_factory* must be a callable returning a subclass of the :class:"
"`SubprocessProtocol` class."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1547
msgid ""
"See :meth:`~loop.subprocess_exec` for more details about the remaining "
"arguments."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1550
msgid ""
"Returns a pair of ``(transport, protocol)``, where *transport* conforms to "
"the :class:`SubprocessTransport` base class and *protocol* is an object "
"instantiated by the *protocol_factory*."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1555
msgid ""
"It is the application's responsibility to ensure that all whitespace and "
"special characters are quoted appropriately to avoid `shell injection "
"<https://en.wikipedia.org/wiki/Shell_injection#Shell_injection>`_ "
"vulnerabilities. The :func:`shlex.quote` function can be used to properly "
"escape whitespace and special characters in strings that are going to be "
"used to construct shell commands."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1564
msgid "Callback Handles"
msgstr ""

#: ../../library/asyncio-eventloop.rst:1568
msgid ""
"A callback wrapper object returned by :meth:`loop.call_soon`, :meth:`loop."
"call_soon_threadsafe`."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1573
msgid ""
"Return the :class:`contextvars.Context` object associated with the handle."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1580
msgid ""
"Cancel the callback.  If the callback has already been canceled or executed, "
"this method has no effect."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1585
msgid "Return ``True`` if the callback was cancelled."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1591
msgid ""
"A callback wrapper object returned by :meth:`loop.call_later`, and :meth:"
"`loop.call_at`."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1594
msgid "This class is a subclass of :class:`Handle`."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1598
msgid "Return a scheduled callback time as :class:`float` seconds."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1600
msgid ""
"The time is an absolute timestamp, using the same time reference as :meth:"
"`loop.time`."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1607
msgid "Server Objects"
msgstr ""

#: ../../library/asyncio-eventloop.rst:1609
msgid ""
"Server objects are created by :meth:`loop.create_server`, :meth:`loop."
"create_unix_server`, :func:`start_server`, and :func:`start_unix_server` "
"functions."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1613
msgid "Do not instantiate the :class:`Server` class directly."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1617
msgid ""
"*Server* objects are asynchronous context managers.  When used in an ``async "
"with`` statement, it's guaranteed that the Server object is closed and not "
"accepting new connections when the ``async with`` statement is completed::"
msgstr ""

#: ../../library/asyncio-eventloop.rst:1622
msgid ""
"srv = await loop.create_server(...)\n"
"\n"
"async with srv:\n"
"    # some code\n"
"\n"
"# At this point, srv is closed and no longer accepts new connections."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1630
msgid "Server object is an asynchronous context manager since Python 3.7."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1633
msgid ""
"This class was exposed publicly as ``asyncio.Server`` in Python 3.9.11, "
"3.10.3 and 3.11."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1638
msgid ""
"Stop serving: close listening sockets and set the :attr:`sockets` attribute "
"to ``None``."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1641
msgid ""
"The sockets that represent existing incoming client connections are left "
"open."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1644
msgid ""
"The server is closed asynchronously; use the :meth:`wait_closed` coroutine "
"to wait until the server is closed (and no more connections are active)."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1650
msgid "Return the event loop associated with the server object."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1656
msgid "Start accepting connections."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1658
msgid ""
"This method is idempotent, so it can be called when the server is already "
"serving."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1661
msgid ""
"The *start_serving* keyword-only parameter to :meth:`loop.create_server` "
"and :meth:`asyncio.start_server` allows creating a Server object that is not "
"accepting connections initially.  In this case ``Server.start_serving()``, "
"or :meth:`Server.serve_forever` can be used to make the Server start "
"accepting connections."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1672
msgid ""
"Start accepting connections until the coroutine is cancelled. Cancellation "
"of ``serve_forever`` task causes the server to be closed."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1676
msgid ""
"This method can be called if the server is already accepting connections.  "
"Only one ``serve_forever`` task can exist per one *Server* object."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1682
msgid ""
"async def client_connected(reader, writer):\n"
"    # Communicate with the client with\n"
"    # reader/writer streams.  For example:\n"
"    await reader.readline()\n"
"\n"
"async def main(host, port):\n"
"    srv = await asyncio.start_server(\n"
"        client_connected, host, port)\n"
"    await srv.serve_forever()\n"
"\n"
"asyncio.run(main('127.0.0.1', 0))"
msgstr ""

#: ../../library/asyncio-eventloop.rst:1698
msgid "Return ``True`` if the server is accepting new connections."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1704
msgid ""
"Wait until the :meth:`close` method completes and all active connections "
"have finished."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1709
msgid ""
"List of socket-like objects, ``asyncio.trsock.TransportSocket``, which the "
"server is listening on."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1712
msgid ""
"Prior to Python 3.7 ``Server.sockets`` used to return an internal list of "
"server sockets directly.  In 3.7 a copy of that list is returned."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1722
msgid "Event Loop Implementations"
msgstr ""

#: ../../library/asyncio-eventloop.rst:1724
msgid ""
"asyncio ships with two different event loop implementations: :class:"
"`SelectorEventLoop` and :class:`ProactorEventLoop`."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1727
msgid ""
"By default asyncio is configured to use :class:`SelectorEventLoop` on Unix "
"and :class:`ProactorEventLoop` on Windows."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1733
msgid "An event loop based on the :mod:`selectors` module."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1735
msgid ""
"Uses the most efficient *selector* available for the given platform.  It is "
"also possible to manually configure the exact selector implementation to be "
"used::"
msgstr ""

#: ../../library/asyncio-eventloop.rst:1739
msgid ""
"import asyncio\n"
"import selectors\n"
"\n"
"class MyPolicy(asyncio.DefaultEventLoopPolicy):\n"
"   def new_event_loop(self):\n"
"      selector = selectors.SelectSelector()\n"
"      return asyncio.SelectorEventLoop(selector)\n"
"\n"
"asyncio.set_event_loop_policy(MyPolicy())"
msgstr ""

#: ../../library/asyncio-eventloop.rst:1755
msgid "An event loop for Windows that uses \"I/O Completion Ports\" (IOCP)."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1761
msgid ""
"`MSDN documentation on I/O Completion Ports <https://learn.microsoft.com/"
"windows/win32/fileio/i-o-completion-ports>`_."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1767
msgid "Abstract base class for asyncio-compliant event loops."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1769
msgid ""
"The :ref:`asyncio-event-loop-methods` section lists all methods that an "
"alternative implementation of ``AbstractEventLoop`` should have defined."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1775
msgid "Examples"
msgstr ""

#: ../../library/asyncio-eventloop.rst:1777
msgid ""
"Note that all examples in this section **purposefully** show how to use the "
"low-level event loop APIs, such as :meth:`loop.run_forever` and :meth:`loop."
"call_soon`.  Modern asyncio applications rarely need to be written this way; "
"consider using the high-level functions like :func:`asyncio.run`."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1787
msgid "Hello World with call_soon()"
msgstr ""

#: ../../library/asyncio-eventloop.rst:1789
msgid ""
"An example using the :meth:`loop.call_soon` method to schedule a callback. "
"The callback displays ``\"Hello World\"`` and then stops the event loop::"
msgstr ""

#: ../../library/asyncio-eventloop.rst:1793
msgid ""
"import asyncio\n"
"\n"
"def hello_world(loop):\n"
"    \"\"\"A callback to print 'Hello World' and stop the event loop\"\"\"\n"
"    print('Hello World')\n"
"    loop.stop()\n"
"\n"
"loop = asyncio.new_event_loop()\n"
"\n"
"# Schedule a call to hello_world()\n"
"loop.call_soon(hello_world, loop)\n"
"\n"
"# Blocking call interrupted by loop.stop()\n"
"try:\n"
"    loop.run_forever()\n"
"finally:\n"
"    loop.close()"
msgstr ""

#: ../../library/asyncio-eventloop.rst:1813
msgid ""
"A similar :ref:`Hello World <coroutine>` example created with a coroutine "
"and the :func:`run` function."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1820
msgid "Display the current date with call_later()"
msgstr ""

#: ../../library/asyncio-eventloop.rst:1822
msgid ""
"An example of a callback displaying the current date every second. The "
"callback uses the :meth:`loop.call_later` method to reschedule itself after "
"5 seconds, and then stops the event loop::"
msgstr ""

#: ../../library/asyncio-eventloop.rst:1826
msgid ""
"import asyncio\n"
"import datetime\n"
"\n"
"def display_date(end_time, loop):\n"
"    print(datetime.datetime.now())\n"
"    if (loop.time() + 1.0) < end_time:\n"
"        loop.call_later(1, display_date, end_time, loop)\n"
"    else:\n"
"        loop.stop()\n"
"\n"
"loop = asyncio.new_event_loop()\n"
"\n"
"# Schedule the first call to display_date()\n"
"end_time = loop.time() + 5.0\n"
"loop.call_soon(display_date, end_time, loop)\n"
"\n"
"# Blocking call interrupted by loop.stop()\n"
"try:\n"
"    loop.run_forever()\n"
"finally:\n"
"    loop.close()"
msgstr ""

#: ../../library/asyncio-eventloop.rst:1850
msgid ""
"A similar :ref:`current date <asyncio_example_sleep>` example created with a "
"coroutine and the :func:`run` function."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1857
msgid "Watch a file descriptor for read events"
msgstr ""

#: ../../library/asyncio-eventloop.rst:1859
msgid ""
"Wait until a file descriptor received some data using the :meth:`loop."
"add_reader` method and then close the event loop::"
msgstr ""

#: ../../library/asyncio-eventloop.rst:1862
msgid ""
"import asyncio\n"
"from socket import socketpair\n"
"\n"
"# Create a pair of connected file descriptors\n"
"rsock, wsock = socketpair()\n"
"\n"
"loop = asyncio.new_event_loop()\n"
"\n"
"def reader():\n"
"    data = rsock.recv(100)\n"
"    print(\"Received:\", data.decode())\n"
"\n"
"    # We are done: unregister the file descriptor\n"
"    loop.remove_reader(rsock)\n"
"\n"
"    # Stop the event loop\n"
"    loop.stop()\n"
"\n"
"# Register the file descriptor for read event\n"
"loop.add_reader(rsock, reader)\n"
"\n"
"# Simulate the reception of data from the network\n"
"loop.call_soon(wsock.send, 'abc'.encode())\n"
"\n"
"try:\n"
"    # Run the event loop\n"
"    loop.run_forever()\n"
"finally:\n"
"    # We are done. Close sockets and the event loop.\n"
"    rsock.close()\n"
"    wsock.close()\n"
"    loop.close()"
msgstr ""

#: ../../library/asyncio-eventloop.rst:1897
msgid ""
"A similar :ref:`example <asyncio_example_create_connection>` using "
"transports, protocols, and the :meth:`loop.create_connection` method."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1901
msgid ""
"Another similar :ref:`example <asyncio_example_create_connection-streams>` "
"using the high-level :func:`asyncio.open_connection` function and streams."
msgstr ""

#: ../../library/asyncio-eventloop.rst:1909
msgid "Set signal handlers for SIGINT and SIGTERM"
msgstr ""

#: ../../library/asyncio-eventloop.rst:1911
msgid "(This ``signals`` example only works on Unix.)"
msgstr ""

#: ../../library/asyncio-eventloop.rst:1913
msgid ""
"Register handlers for signals :const:`~signal.SIGINT` and :const:`~signal."
"SIGTERM` using the :meth:`loop.add_signal_handler` method::"
msgstr ""

#: ../../library/asyncio-eventloop.rst:1916
msgid ""
"import asyncio\n"
"import functools\n"
"import os\n"
"import signal\n"
"\n"
"def ask_exit(signame, loop):\n"
"    print(\"got signal %s: exit\" % signame)\n"
"    loop.stop()\n"
"\n"
"async def main():\n"
"    loop = asyncio.get_running_loop()\n"
"\n"
"    for signame in {'SIGINT', 'SIGTERM'}:\n"
"        loop.add_signal_handler(\n"
"            getattr(signal, signame),\n"
"            functools.partial(ask_exit, signame, loop))\n"
"\n"
"    await asyncio.sleep(3600)\n"
"\n"
"print(\"Event loop running for 1 hour, press Ctrl+C to interrupt.\")\n"
"print(f\"pid {os.getpid()}: send SIGINT or SIGTERM to exit.\")\n"
"\n"
"asyncio.run(main())"
msgstr ""
