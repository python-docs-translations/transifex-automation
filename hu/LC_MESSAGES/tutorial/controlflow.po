# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2023, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# gbtami <gbtami@gmail.com>, 2019
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-06-02 14:49+0000\n"
"PO-Revision-Date: 2019-09-01 02:42+0000\n"
"Last-Translator: gbtami <gbtami@gmail.com>, 2019\n"
"Language-Team: Hungarian (https://app.transifex.com/python-doc/teams/5390/hu/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: hu\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:5
msgid "More Control Flow Tools"
msgstr "További vezérlő utasítások"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:7
msgid ""
"Besides the :keyword:`while` statement just introduced, Python uses the "
"usual flow control statements known from other languages, with some twists."
msgstr ""

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:14
msgid ":keyword:`!if` Statements"
msgstr ""

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:16
msgid ""
"Perhaps the most well-known statement type is the :keyword:`if` statement.  "
"For example::"
msgstr ""
"Talán a legjobban ismert utasítástípus az :keyword:`if` utasítás. Példa::"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:33
msgid ""
"There can be zero or more :keyword:`elif` parts, and the :keyword:`else` "
"part is optional.  The keyword ':keyword:`!elif`' is short for 'else if', "
"and is useful to avoid excessive indentation.  An  :keyword:`!if` ... "
":keyword:`!elif` ... :keyword:`!elif` ... sequence is a substitute for the "
"``switch`` or ``case`` statements found in other languages."
msgstr ""

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:43
msgid ":keyword:`!for` Statements"
msgstr ""

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:48
msgid ""
"The :keyword:`for` statement in Python differs a bit from what you may be "
"used to in C or Pascal.  Rather than always iterating over an arithmetic "
"progression of numbers (like in Pascal), or giving the user the ability to "
"define both the iteration step and halting condition (as C), Python's "
":keyword:`!for` statement iterates over the items of any sequence (a list or"
" a string), in the order that they appear in the sequence.  For example (no "
"pun intended):"
msgstr ""

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:69
msgid ""
"If you need to modify the sequence you are iterating over while inside the "
"loop (for example to duplicate selected items), it is recommended that you "
"first make a copy.  Iterating over a sequence does not implicitly make a "
"copy.  The slice notation makes this especially convenient::"
msgstr ""
"Ha szükséges megváltoztatnod egy listát amelyen végigmész a for-ciklussal "
"(például, hogy megduplázz bizonyos kiválasztott elemeket), akkor a lista "
"másolatát használd a for-ciklusban.  A for ciklus nem hoz létre önmagától "
"egy másolatot. A szelet (slice) jelölési móddal viszont ezt kényelmesen "
"megteheted::"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:81
msgid ""
"With ``for w in words:``, the example would attempt to create an infinite "
"list, inserting ``defenestrate`` over and over again."
msgstr ""
"A ``for s in szavak`` használatával a példa egy végtelen listát próbálna "
"létrehozni újra és újra hozzáfűzve a ``defenestrate`` szót."

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:88
msgid "The :func:`range` Function"
msgstr "A :func:`range` függvény"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:90
msgid ""
"If you do need to iterate over a sequence of numbers, the built-in function "
":func:`range` comes in handy.  It generates arithmetic progressions::"
msgstr ""
"Ha egy számsorozaton kell végighaladnunk, a :func:`range` beépített függvény"
" lehet szolgálatunkra.  Ez egy számtani sorozatot állít elő::"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:102
msgid ""
"The given end point is never part of the generated sequence; ``range(10)`` "
"generates 10 values, the legal indices for items of a sequence of length 10."
"  It is possible to let the range start at another number, or to specify a "
"different increment (even negative; sometimes this is called the 'step')::"
msgstr ""
"A megadott végpont sohasem része a listának; ``range(10)`` 10 értéket hoz "
"létre, pontosan egy tízelemű sorozat indexeit.  Lehetőség van rá, hogy a "
"sorozat más számmal kezdődjön, vagy hogy más lépésközt adjunk meg (akár "
"negatívat is)::"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:116
msgid ""
"To iterate over the indices of a sequence, you can combine :func:`range` and"
" :func:`len` as follows::"
msgstr ""
"Ha egy sorozat indexein akarunk végighaladni, használjuk a  :func:`range` és"
" :func:`len` függvényeket a következőképpen::"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:129
msgid ""
"In most such cases, however, it is convenient to use the :func:`enumerate` "
"function, see :ref:`tut-loopidioms`."
msgstr ""

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:132
msgid "A strange thing happens if you just print a range::"
msgstr ""

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:137
msgid ""
"In many ways the object returned by :func:`range` behaves as if it is a "
"list, but in fact it isn't. It is an object which returns the successive "
"items of the desired sequence when you iterate over it, but it doesn't "
"really make the list, thus saving space."
msgstr ""

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:142
msgid ""
"We say such an object is *iterable*, that is, suitable as a target for "
"functions and constructs that expect something from which they can obtain "
"successive items until the supply is exhausted. We have seen that the "
":keyword:`for` statement is such an *iterator*. The function :func:`list` is"
" another; it creates lists from iterables::"
msgstr ""

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:152
msgid ""
"Later we will see more functions that return iterables and take iterables as"
" argument."
msgstr ""

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:158
msgid ""
":keyword:`!break` and :keyword:`!continue` Statements, and :keyword:`!else` "
"Clauses on Loops"
msgstr ""

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:160
msgid ""
"The :keyword:`break` statement, like in C, breaks out of the innermost "
"enclosing :keyword:`for` or :keyword:`while` loop."
msgstr ""

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:163
msgid ""
"Loop statements may have an :keyword:`!else` clause; it is executed when the"
" loop terminates through exhaustion of the list (with :keyword:`for`) or "
"when the condition becomes false (with :keyword:`while`), but not when the "
"loop is terminated by a :keyword:`break` statement.  This is exemplified by "
"the following loop, which searches for prime numbers::"
msgstr ""

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:187
msgid ""
"(Yes, this is the correct code.  Look closely: the ``else`` clause belongs "
"to the :keyword:`for` loop, **not** the :keyword:`if` statement.)"
msgstr ""
"(Igen, ez a helyes kód. Nézd meg alaposan: az ``else`` ág a :keyword:`for` "
"ciklushoz, és **nem** az :keyword:`if` utasításhoz tartozik.)"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:190
msgid ""
"When used with a loop, the ``else`` clause has more in common with the "
"``else`` clause of a :keyword:`try` statement than it does that of "
":keyword:`if` statements: a :keyword:`!try` statement's ``else`` clause runs"
" when no exception occurs, and a loop's ``else`` clause runs when no "
"``break`` occurs. For more on the :keyword:`!try` statement and exceptions, "
"see :ref:`tut-handling`."
msgstr ""

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:197
msgid ""
"The :keyword:`continue` statement, also borrowed from C, continues with the "
"next iteration of the loop::"
msgstr ""
"A :keyword:`continue` utasítás, amely szintén a C-ből származik, a következő"
" iterációval folytatja a ciklust::"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:217
msgid ":keyword:`!pass` Statements"
msgstr ""

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:219
msgid ""
"The :keyword:`pass` statement does nothing. It can be used when a statement "
"is required syntactically but the program requires no action. For example::"
msgstr ""
"A :keyword:`pass` utasítás nem csinál semmit. Akkor használható, ha "
"szintaktikailag szükség van egy utasításra, de a programban nem kell semmit "
"sem csinálni. Például::"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:226
msgid "This is commonly used for creating minimal classes::"
msgstr "Gyakran használjuk arra, hogy minimális osztályt hozzunk létre::"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:232
msgid ""
"Another place :keyword:`pass` can be used is as a place-holder for a "
"function or conditional body when you are working on new code, allowing you "
"to keep thinking at a more abstract level.  The :keyword:`!pass` is silently"
" ignored::"
msgstr ""

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:243
msgid "Defining Functions"
msgstr "Függvények definiálása"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:245
msgid ""
"We can create a function that writes the Fibonacci series to an arbitrary "
"boundary::"
msgstr ""
"Létrehozhatunk egy függvényt, amely egy megadott értékig írja ki a Fibonacci"
"--sorozatot::"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:265
msgid ""
"The keyword :keyword:`def` introduces a function *definition*.  It must be "
"followed by the function name and the parenthesized list of formal "
"parameters. The statements that form the body of the function start at the "
"next line, and must be indented."
msgstr ""
"A :keyword:`def` kulcsszó a függvény *definícióját* jelzi. Ezt egy "
"függvénynévnek, majd zárójelben a paraméterek listájának kell követnie. Az "
"utasítások -- amelyek a definíció testét alkotják -- a következő sorban "
"kezdődnek, és behúzással kell kezdeni azokat."

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:270
msgid ""
"The first statement of the function body can optionally be a string literal;"
" this string literal is the function's documentation string, or "
":dfn:`docstring`. (More about docstrings can be found in the section "
":ref:`tut-docstrings`.) There are tools which use docstrings to "
"automatically produce online or printed documentation, or to let the user "
"interactively browse through code; it's good practice to include docstrings "
"in code that you write, so make a habit of it."
msgstr ""
"A függvény testének első utasítása lehet egy literális karakterlánc is; ez a"
" karakterlánc a függvény dokumentációs karakterlánca, angolul röviden "
":dfn:`docstring`. (Bővebben a docstring-ről a következő fejezetben: "
":ref:`tut-docstrings`.) Vannak eszközök, amelyek a :dfn:`docstring`-et "
"használják ahhoz, hogy az online vagy a nyomtatott dokumentációt "
"automatikusan elkészítsék, vagy hogy a felhasználót segítsék a kódban "
"történő interaktív böngészéshez. Jó szokás, hogy a docstringet beleírjuk a "
"kódba,  kérünk téged hogy te is szokjál rá."

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:277
msgid ""
"The *execution* of a function introduces a new symbol table used for the "
"local variables of the function.  More precisely, all variable assignments "
"in a function store the value in the local symbol table; whereas variable "
"references first look in the local symbol table, then in the local symbol "
"tables of enclosing functions, then in the global symbol table, and finally "
"in the table of built-in names. Thus, global variables and variables of "
"enclosing functions cannot be directly assigned a value within a function "
"(unless, for global variables, named in a :keyword:`global` statement, or, "
"for variables of enclosing functions, named in a :keyword:`nonlocal` "
"statement), although they may be referenced."
msgstr ""

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:288
msgid ""
"The actual parameters (arguments) to a function call are introduced in the "
"local symbol table of the called function when it is called; thus, arguments"
" are passed using *call by value* (where the *value* is always an object "
"*reference*, not the value of the object). [#]_ When a function calls "
"another function, a new local symbol table is created for that call."
msgstr ""
"A függvényhívás aktuális paraméterei (argumentumai) bekerülnek a hívott "
"függvény helyi szimbólumtáblájába amikor azt meghívjuk,  így az argumentumok"
" mindig *értékeket* adnak át (ahol az *érték* mindig az objektumra történő "
"*hivatkozás*, nem az objektum értéke).  [#]_ Ha a függvény egy másik "
"függvényt hív, akkor  az új híváshoz egy új helyi szimbólumtábla jön létre."

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:294
msgid ""
"A function definition introduces the function name in the current symbol "
"table. The value of the function name has a type that is recognized by the "
"interpreter as a user-defined function.  This value can be assigned to "
"another name which can then also be used as a function.  This serves as a "
"general renaming mechanism::"
msgstr ""
"A függvénydefiníció a függvény nevét beírja az aktuális szimbólumtáblába. A "
"függvénynév értékének van egy típusa, amelyet a fordító a felhasználó által "
"definiált függvényként ismer fel.  Ezt az értéket társíthatjuk egy másik "
"változóhoz, amely ekkor szintén függvényként használható. Ez egy általános "
"átnevezési eljárásként szolgál::"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:306
msgid ""
"Coming from other languages, you might object that ``fib`` is not a function"
" but a procedure since it doesn't return a value.  In fact, even functions "
"without a :keyword:`return` statement do return a value, albeit a rather "
"boring one.  This value is called ``None`` (it's a built-in name).  Writing "
"the value ``None`` is normally suppressed by the interpreter if it would be "
"the only value written. You can see it if you really want to using "
":func:`print`::"
msgstr ""
"Más nyelvektől jőve kifogásolhatja valaki, hogy a ``fib`` nem függvény, "
"hanem eljárás, mivel nem tér vissza semmilyen értékkel. Valójában azok a "
"függvények is, amelyekben nincs :keyword:`return` utasítás, visszaadnak egy "
"értéket, bár egy elég unalmasat. Ez az érték a ``None`` (egy beépített név)."
"  A ``None`` érték kiírását általában elnyomja az értelmező,  ha csak ezt az"
" értéket kell kiírnia.  Erről meggyőződhetünk, ha akarunk a :func:`print` "
"függvény használatával::"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:317
msgid ""
"It is simple to write a function that returns a list of the numbers of the "
"Fibonacci series, instead of printing it::"
msgstr ""
"Könnyen írhatunk olyan függvényt, amely visszatér a Fibonacci-sorozat "
"értékeit tartalmazó listával ahelyett, hogy kiíratná azokat::"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:333
msgid "This example, as usual, demonstrates some new Python features:"
msgstr "Ez a példa néhány új vonását mutatja a Pythonnak:"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:335
msgid ""
"The :keyword:`return` statement returns with a value from a function. "
":keyword:`!return` without an expression argument returns ``None``. Falling "
"off the end of a function also returns ``None``."
msgstr ""

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:339
msgid ""
"The statement ``result.append(a)`` calls a *method* of the list object "
"``result``.  A method is a function that 'belongs' to an object and is named"
" ``obj.methodname``, where ``obj`` is some object (this may be an "
"expression), and ``methodname`` is the name of a method that is defined by "
"the object's type. Different types define different methods.  Methods of "
"different types may have the same name without causing ambiguity.  (It is "
"possible to define your own object types and methods, using *classes*, see "
":ref:`tut-classes`) The method :meth:`append` shown in the example is "
"defined for list objects; it adds a new element at the end of the list.  In "
"this example it is equivalent to ``result = result + [a]``, but more "
"efficient."
msgstr ""
"A ``eredmeny.append(b)`` utasítás meghívja az ``eredmeny`` listaobjektum egy"
" metódusát.  A metódus egy olyan függvény, amely egy objektumhoz tartozik, "
"``obj.metódusnév`` alakban írjuk, ahol az ``obj`` valamelyik objektum (lehet"
" egy kifejezés), és a ``metódusnév`` egy olyan metódus neve, amelyet az "
"objektumtípus definiál.  Különböző típusoknak különböző metódusai vannak.  "
"Különböző típusoknak lehet azonos nevű metódusa mindenféle kétértelműség "
"veszélye nélkül. (Lehetőség van rá, hogy definiáljunk saját objektumokat és "
"metódusokat *osztályok* használatával, lásd :ref:`tut-classes`)"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:354
msgid "More on Defining Functions"
msgstr "A függvények definiálásáról bővebben"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:356
msgid ""
"It is also possible to define functions with a variable number of arguments."
" There are three forms, which can be combined."
msgstr ""
"Lehetőségünk van függvényeket definiálni változó számú argumentummal. Ennek "
"három formája van, amelyek variálhatók."

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:363
msgid "Default Argument Values"
msgstr "Alapértelmezett  (default) argumentumértékek"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:365
msgid ""
"The most useful form is to specify a default value for one or more "
"arguments. This creates a function that can be called with fewer arguments "
"than it is defined to allow.  For example::"
msgstr ""
"A leghasznosabb alak az, ha  egy vagy több argumentumnak is meghatározott "
"alapértéket adunk meg (azaz egy olyan értéket, amit ez az argumentum "
"felvesz, ha nem adunk értéket neki). Ez így egy olyan függvényt hoz létre, "
"amelyet kevesebb argumentummal is meghívhatunk, mint amennyivel "
"definiáltuk::"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:381
msgid "This function can be called in several ways:"
msgstr "Ez a függvény többféle módon hívható meg:"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:383
msgid ""
"giving only the mandatory argument: ``ask_ok('Do you really want to "
"quit?')``"
msgstr ""
"megadhatjuk csak a kötelező argumentumot: ``ask_ok('Valóban ki akarsz "
"lépni?')``"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:385
msgid ""
"giving one of the optional arguments: ``ask_ok('OK to overwrite the file?', "
"2)``"
msgstr ""
"csak egy elhagyható argumentumot adunk meg: ``ask_ok('Felülírhatom a "
"fájlt?', 2)``."

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:387
msgid ""
"or even giving all arguments: ``ask_ok('OK to overwrite the file?', 2, 'Come"
" on, only yes or no!')``"
msgstr ""
"minden argumentumot megadunk: ``ask_ok('Felülírhatom a fájlt?', 2, 'igen-nel"
" vagy nem-mel válaszolj!')``."

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:390
msgid ""
"This example also introduces the :keyword:`in` keyword. This tests whether "
"or not a sequence contains a certain value."
msgstr ""
"Az előző program egyben példa az :keyword:`in` kulcsszó használatára is. Így"
" tesztelhetjük, hogy a sorozat vajon tartalmaz-e egy adott értéket, vagy "
"nem."

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:393
msgid ""
"The default values are evaluated at the point of function definition in the "
"*defining* scope, so that ::"
msgstr ""
"Az alapértékeket a fordító akkor határozza meg, amikor  a függvény "
"definíciójával először találkozik,  emiatt ezek kiszámítása csak egyszer "
"történik meg! Így például a következő program::"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:404
msgid "will print ``5``."
msgstr "``5``-öt ír ki."

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:406
msgid ""
"**Important warning:**  The default value is evaluated only once. This makes"
" a difference when the default is a mutable object such as a list, "
"dictionary, or instances of most classes.  For example, the following "
"function accumulates the arguments passed to it on subsequent calls::"
msgstr ""
"**Fontos figyelmeztetés:**  Az alapértékeket a fordító **csak egyszer** "
"határozza meg!  Emiatt különbség van, ha az alapérték megváltoztatható "
"objektum, mint amilyen a lista, szótár vagy a legtöbb példányosodott "
"osztály.  Például az alábbi függvény összegyűjti az egymás utáni hívások "
"során neki adott paramétereket::"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:419
msgid "This will print ::"
msgstr "A program kimenete::"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:425
msgid ""
"If you don't want the default to be shared between subsequent calls, you can"
" write the function like this instead::"
msgstr ""
"Ha nem akarod az alapértékeket láthatóvá tenni az egymást követő hívások "
"számára, akkor inkább ehhez hasonlóan írd a függvényt::"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:438
msgid "Keyword Arguments"
msgstr "Kulcsszavas argumentumok"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:440
msgid ""
"Functions can also be called using :term:`keyword arguments <keyword "
"argument>` of the form ``kwarg=value``.  For instance, the following "
"function::"
msgstr ""
"A függvényeket akár ``kulcsszó=érték`` formában megadott, úgynevezett "
"kulcsszavas argumentumok használatával is meghívhatunk. Például a következő "
"függvény::"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:449
msgid ""
"accepts one required argument (``voltage``) and three optional arguments "
"(``state``, ``action``, and ``type``).  This function can be called in any "
"of the following ways::"
msgstr "meghívható az összes alábbi módon::"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:460
msgid "but all the following calls would be invalid::"
msgstr "de a következő hívások mind érvénytelenek::"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:467
msgid ""
"In a function call, keyword arguments must follow positional arguments. All "
"the keyword arguments passed must match one of the arguments accepted by the"
" function (e.g. ``actor`` is not a valid argument for the ``parrot`` "
"function), and their order is not important.  This also includes non-"
"optional arguments (e.g. ``parrot(voltage=1000)`` is valid too). No argument"
" may receive a value more than once. Here's an example that fails due to "
"this restriction::"
msgstr ""
"A függvényhívások esetén a kulcsszavas argumentumoknak a hely szerintiek "
"után kell állniuk. Minden kulcsszavas argumentumnak olyannak kell lennie, "
"amely egyezik a függvény által elfogadott valamelyik argumentummal (pl. az "
"``actor`` nem érvényes argumentum a ``parrot`` függvény számára), és a "
"sorrendjük lényegtelen. Akár lehetnek kötelező argumentumok is (pl. "
"``parrot(voltage=1000)`` is érvényes). Egy hívás során nem kaphat egy "
"argumentum egynél több alkalommal értéket.  Itt van egy példa, amely nem "
"hajtódik végre emiatt a megkötés miatt::"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:483
msgid ""
"When a final formal parameter of the form ``**name`` is present, it receives"
" a dictionary (see :ref:`typesmapping`) containing all keyword arguments "
"except for those corresponding to a formal parameter.  This may be combined "
"with a formal parameter of the form ``*name`` (described in the next "
"subsection) which receives a :ref:`tuple <tut-tuples>` containing the "
"positional arguments beyond the formal parameter list.  (``*name`` must "
"occur before ``**name``.) For example, if we define a function like this::"
msgstr ""

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:500
msgid "It could be called like this::"
msgstr "Ez meghívható így is::"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:508
msgid "and of course it would print:"
msgstr "és természetesen ezt fogja kiírni:"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:521
msgid ""
"Note that the order in which the keyword arguments are printed is guaranteed"
" to match the order in which they were provided in the function call."
msgstr ""
"Megjegyzendő, hogy a ``kulcsszavak`` nevű szótár tartalmának kinyomtatása "
"előtt a ``kulcsok`` változóba a ``kulcsszavak`` szótár kulcsszavainak "
"rendezett listáját raktuk; ha nem ezt tesszük, akkor az a sorrend, ahogy az "
"argumentumokat kiiratjuk határozatlan lenne."

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:528
msgid "Arbitrary Argument Lists"
msgstr "Tetszőleges hosszúságú argumentumlisták"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:533
msgid ""
"Finally, the least frequently used option is to specify that a function can "
"be called with an arbitrary number of arguments.  These arguments will be "
"wrapped up in a tuple (see :ref:`tut-tuples`).  Before the variable number "
"of arguments, zero or more normal arguments may occur. ::"
msgstr ""
"Végül itt a legritkábban használt lehetőség, amikor egy függvénynek "
"tetszőleges számú argumentuma lehet. Ezeket az argumentumokat egy tuple-ba "
"helyezi el a Python.  A változó számosságú argumentum előtt akárhány (akár "
"egy sem) egyszerű argumentum is előfordulhat. ::"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:542
msgid ""
"Normally, these ``variadic`` arguments will be last in the list of formal "
"parameters, because they scoop up all remaining input arguments that are "
"passed to the function. Any formal parameters which occur after the "
"``*args`` parameter are 'keyword-only' arguments, meaning that they can only"
" be used as keywords rather than positional arguments. ::"
msgstr ""
"Normális esetben ezek az úgynevezett ``variadikus`` argumentumoknak kell a "
"formális paraméterek legvégén állniuk, mivel ezek gyűjtik össze az összes "
"maradék bemenő argumentumot, amelyet a függvénynek megadtunk. Minden "
"formális paraméter, amely az ``*args`` paraméter után áll, csak kulcsszóval "
"hívható meg, nem lehet hely szerinti argumentumként meghívni. ::"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:559
msgid "Unpacking Argument Lists"
msgstr "Argumentumlista kicsomagolása"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:561
msgid ""
"The reverse situation occurs when the arguments are already in a list or "
"tuple but need to be unpacked for a function call requiring separate "
"positional arguments.  For instance, the built-in :func:`range` function "
"expects separate *start* and *stop* arguments.  If they are not available "
"separately, write the function call with the  ``*`` operator to unpack the "
"arguments out of a list or tuple::"
msgstr ""

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:577
msgid ""
"In the same fashion, dictionaries can deliver keyword arguments with the "
"``**`` operator::"
msgstr ""

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:593
msgid "Lambda Expressions"
msgstr "Lambda-formák"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:595
msgid ""
"Small anonymous functions can be created with the :keyword:`lambda` keyword."
" This function returns the sum of its two arguments: ``lambda a, b: a+b``. "
"Lambda functions can be used wherever function objects are required.  They "
"are syntactically restricted to a single expression.  Semantically, they are"
" just syntactic sugar for a normal function definition.  Like nested "
"function definitions, lambda functions can reference variables from the "
"containing scope::"
msgstr ""
"A :keyword:`lambda` kulcsszóval rövid névtelen függvényeket lehet "
"létrehozni. Íme egy függvény, amely a két argumentumának összegével tér "
"vissza: ``lambda a, b: a+b``.  A lambda-formákat mindenhol használhatjuk, "
"ahol függvényobjektumok szerepelhetnek.  Szintaktikailag egyetlen kifejezés "
"szerepelhet bennük. Értelmét  tekintve hab a normális függvények tortáján. A"
" beágyazott függvényekhez hasonlóan látja az őt meghívó környezet minden "
"változóját.  ::"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:612
msgid ""
"The above example uses a lambda expression to return a function.  Another "
"use is to pass a small function as an argument::"
msgstr ""
"A fenti példa arra használja a lambda-kifejezést, hogy egy függvényt adjon "
"vissza. Ezen kívül lehetőséget biztosít, hogy egy függvényt adhassunk át "
"argumentumként::"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:624
msgid "Documentation Strings"
msgstr "A dokumentációs karakterláncok"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:631
msgid ""
"Here are some conventions about the content and formatting of documentation "
"strings."
msgstr ""
"A dokumentációs karakterláncok tartalmával és formájával kapcsolatban egy "
"kialakult és bevált szokásról beszélhetünk."

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:634
msgid ""
"The first line should always be a short, concise summary of the object's "
"purpose.  For brevity, it should not explicitly state the object's name or "
"type, since these are available by other means (except if the name happens "
"to be a verb describing a function's operation).  This line should begin "
"with a capital letter and end with a period."
msgstr ""
"Az első sor mindig az objektum céljának rövid, tömör összegzése. Rövidsége "
"miatt nem kell tartalmaznia az objektum nevét vagy típusát, hiszen ezek az "
"adatok más úton is kinyerhetők (kivéve, ha az objektum neve a függvény "
"működését leíró ige). A szöveg nagybetűvel kezdődik és ponttal végződik."

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:640
msgid ""
"If there are more lines in the documentation string, the second line should "
"be blank, visually separating the summary from the rest of the description."
"  The following lines should be one or more paragraphs describing the "
"object's calling conventions, its side effects, etc."
msgstr ""
"Ha a dokumentációs karakterlánc (``docstring``) több sorból áll, a második "
"sor üres lesz -- ezzel vizuálisan elkülönítjük az összefoglalót a leírás "
"további részétől. Az üres sort egy vagy több rész követheti, ahol leírjuk az"
" objektum hívásának módját, a mellékhatásokat stb."

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:645
msgid ""
"The Python parser does not strip indentation from multi-line string literals"
" in Python, so tools that process documentation have to strip indentation if"
" desired.  This is done using the following convention. The first non-blank "
"line *after* the first line of the string determines the amount of "
"indentation for the entire documentation string.  (We can't use the first "
"line since it is generally adjacent to the string's opening quotes so its "
"indentation is not apparent in the string literal.)  Whitespace "
"\"equivalent\" to this indentation is then stripped from the start of all "
"lines of the string.  Lines that are indented less should not occur, but if "
"they occur all their leading whitespace should be stripped.  Equivalence of "
"whitespace should be tested after expansion of tabs (to 8 spaces, normally)."
msgstr ""
"Maga a Python értelmező nem szedi le a helyközöket a többsoros literális "
"karakterláncból -- ha ezek kiszűrése szükséges, akkor ehhez külön "
"szövegfeldolgozó programot kellene használni. Ezt a problémát a következő "
"konvenció használatával kezeljük. Az első sor  *után* a legelső nem üres "
"sorban megjelenő szöveg behúzási távolsága határozza meg az egész "
"dokumentációs szöveg behúzását. (A legelső sort azért nem használjuk erre a "
"célra, mert a szöveg első betűje általában szorosan követi a karakterláncot "
"nyitó macskakörmöt, ennek eltolása nem  lenne nyilvánvaló dolog.) A "
"``docstring`` -- fejrészt követő minden első sorának elejéről levágunk pont "
"ennyi helyközt. Ha ennél kevesebb helyközt tartalmaz valamely sor -- bár "
"ilyennek nem kéne lennie -- csak a helyközök törlődnek, karakter nem vész "
"el. A behúzások egyenlőségét ajánlott mindig a tabulátorokat kibontva "
"ellenőrizni  (általában 1 tabulátort 8 helyközzel helyettesítünk)."

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:657
msgid "Here is an example of a multi-line docstring::"
msgstr "Itt van egy példa a többsoros docstring-re::"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:675
msgid "Function Annotations"
msgstr ""

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:683
msgid ""
":ref:`Function annotations <function>` are completely optional metadata "
"information about the types used by user-defined functions (see :pep:`3107` "
"and :pep:`484` for more information)."
msgstr ""

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:687
msgid ""
":term:`Annotations <function annotation>` are stored in the "
":attr:`__annotations__` attribute of the function as a dictionary and have "
"no effect on any other part of the function.  Parameter annotations are "
"defined by a colon after the parameter name, followed by an expression "
"evaluating to the value of the annotation.  Return annotations are defined "
"by a literal ``->``, followed by an expression, between the parameter list "
"and the colon denoting the end of the :keyword:`def` statement.  The "
"following example has a positional argument, a keyword argument, and the "
"return value annotated::"
msgstr ""

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:709
msgid "Intermezzo: Coding Style"
msgstr "Intermezzo: kódolási stílus"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:714
msgid ""
"Now that you are about to write longer, more complex pieces of Python, it is"
" a good time to talk about *coding style*.  Most languages can be written "
"(or more concise, *formatted*) in different styles; some are more readable "
"than others. Making it easy for others to read your code is always a good "
"idea, and adopting a nice coding style helps tremendously for that."
msgstr ""
"Most már egy hosszabb és összetettebb Python kódot szeretnél írni, itt az "
"idő, hogy beszéljünk a *kódolási stílusról*. A legtöbb nyelven többféle "
"módon lehet írni (pontosabban *formázni*); némelyik sokkal olvashatóbb mint "
"másikak. Az, hogy a kódunkat mások számára is olvashatóvá tegyük mindig jó "
"ötlet, és egy helyes kódolási stílus elfogadása sokat segít ebben."

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:720
msgid ""
"For Python, :pep:`8` has emerged as the style guide that most projects "
"adhere to; it promotes a very readable and eye-pleasing coding style.  Every"
" Python developer should read it at some point; here are the most important "
"points extracted for you:"
msgstr ""
"A Python számára a :pep:`8` vált a stílus útmutatójává, amelyet a legtöbb "
"projekt követ; egy nagyon olvasható és szemnek kellemes kódolási stílust "
"javasol. Minden Python-fejlesztőnek el kellene olvasnia valamikor. Itt "
"találod a legfontosabb pontjait:"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:725
msgid "Use 4-space indentation, and no tabs."
msgstr "Használj 4-szóköz behúzást, de tabulátorokat ne!"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:727
msgid ""
"4 spaces are a good compromise between small indentation (allows greater "
"nesting depth) and large indentation (easier to read).  Tabs introduce "
"confusion, and are best left out."
msgstr ""
"A 4 szóköz jó középút a kis behúzás (amely nagyobb egymásbaágyazási "
"mélységet enged meg) és a nagy behúzás (egyszerűbb olvasni) között. A "
"tabulátorok keveredést okozhatnak, így jobb, ha elkerüljük."

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:731
msgid "Wrap lines so that they don't exceed 79 characters."
msgstr "Törjük úgy a sorokat, hogy ne lépjék túl a 79 karakter hosszúságot!"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:733
msgid ""
"This helps users with small displays and makes it possible to have several "
"code files side-by-side on larger displays."
msgstr ""
"Ez segíti azokat a felhasználókat, akiknek kisebb a kijelzőjük, és lehetővé "
"teszi, hogy több programfájlt jelenítsünk meg egymás mellett nagyobb "
"kijelzőn."

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:736
msgid ""
"Use blank lines to separate functions and classes, and larger blocks of code"
" inside functions."
msgstr ""
"Használj üres sorokat, hogy elválaszd a függvényeket és az osztályokat, "
"valamint a nagyobb blokkokat egy függvényen belül!"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:739
msgid "When possible, put comments on a line of their own."
msgstr "Ha lehet a megjegyzéseket a saját sorába írd!"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:741
msgid "Use docstrings."
msgstr "Használj dokumentációs karakterláncokat!"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:743
msgid ""
"Use spaces around operators and after commas, but not directly inside "
"bracketing constructs: ``a = f(1, 2) + g(3, 4)``."
msgstr ""
"Használj szóközöket a műveleti jelek körül és a vesszők után ``a = f(1, 2) +"
" g(3, 4)``!"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:746
msgid ""
"Name your classes and functions consistently; the convention is to use "
"``UpperCamelCase`` for classes and ``lowercase_with_underscores`` for "
"functions and methods.  Always use ``self`` as the name for the first method"
" argument (see :ref:`tut-firstclasses` for more on classes and methods)."
msgstr ""

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:751
msgid ""
"Don't use fancy encodings if your code is meant to be used in international "
"environments.  Python's default, UTF-8, or even plain ASCII work best in any"
" case."
msgstr ""
"Ne használj különleges kódolásokat, ha a kódodat várhatóan nemzetközi "
"környezetben is használni fogják! A Python alapértelmezett UTF-8 kódolása, "
"vagy az ASCII minden esetben jól működik."

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:755
msgid ""
"Likewise, don't use non-ASCII characters in identifiers if there is only the"
" slightest chance people speaking a different language will read or maintain"
" the code."
msgstr ""
"Szintén ne használj nem-ASCII karaktert az azonosítókban, ha csak a "
"legkisebb esélye is van, hogy más nyelvet beszélő emberek fogják olvasni "
"vagy karbantartani a kódot!"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:761
msgid "Footnotes"
msgstr "Lábjegyzet"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:762
msgid ""
"Actually, *call by object reference* would be a better description, since if"
" a mutable object is passed, the caller will see any changes the callee "
"makes to it (items inserted into a list)."
msgstr ""
"Valójában az *objektumhivatkozással történő hívás* jobb elnevezés lenne, "
"mivel, ha egy megváltoztatható objektumot adunk át, a hívó látni fogja az "
"összes változást, amit a hívott függvény végez (elem beszúrása listába)."
