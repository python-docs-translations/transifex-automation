# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2024, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Daniil Kolesnikov, 2024
# Rafael Fontenelle <rffontenelle@gmail.com>, 2024
# Илья Панфилов, 2024
# Roustam Khamidoulline, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-10-04 17:06+0000\n"
"PO-Revision-Date: 2020-05-30 11:55+0000\n"
"Last-Translator: Roustam Khamidoulline, 2024\n"
"Language-Team: Russian (https://app.transifex.com/python-doc/teams/5390/"
"ru/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ru\n"
"Plural-Forms: nplurals=4; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && "
"n%10<=4 && (n%100<12 || n%100>14) ? 1 : n%10==0 || (n%10>=5 && n%10<=9) || "
"(n%100>=11 && n%100<=14)? 2 : 3);\n"

#: ../../library/argparse.rst:2
msgid ""
":mod:`argparse` --- Parser for command-line options, arguments and sub-"
"commands"
msgstr ""

#: ../../library/argparse.rst:12
msgid "**Source code:** :source:`Lib/argparse.py`"
msgstr "**Исходный код:** :source:`Lib/argparse.py`"

#: ../../library/argparse.rstNone
msgid "Tutorial"
msgstr "Руководство"

#: ../../library/argparse.rst:18
msgid ""
"This page contains the API reference information. For a more gentle "
"introduction to Python command-line parsing, have a look at the :ref:"
"`argparse tutorial <argparse-tutorial>`."
msgstr ""
"Эта страница содержит справочную информацию по API. Для более подробного "
"ознакомления с синтаксическим анализом командной строки Python ознакомьтесь "
"с :ref:`учебником по argparse <argparse-tutorial>`."

#: ../../library/argparse.rst:22
msgid ""
"The :mod:`argparse` module makes it easy to write user-friendly command-line "
"interfaces. The program defines what arguments it requires, and :mod:"
"`argparse` will figure out how to parse those out of :data:`sys.argv`.  The :"
"mod:`argparse` module also automatically generates help and usage messages "
"and issues errors when users give the program invalid arguments."
msgstr ""

#: ../../library/argparse.rst:30
msgid "Example"
msgstr "Пример"

#: ../../library/argparse.rst:32
msgid ""
"The following code is a Python program that takes a list of integers and "
"produces either the sum or the max::"
msgstr ""
"Следующий код представляет собой программу Python, которая принимает список "
"целых чисел и выдает либо сумму, либо максимальное значение:"

#: ../../library/argparse.rst:47
msgid ""
"Assuming the Python code above is saved into a file called ``prog.py``, it "
"can be run at the command line and provides useful help messages:"
msgstr ""

#: ../../library/argparse.rst:64
msgid ""
"When run with the appropriate arguments, it prints either the sum or the max "
"of the command-line integers:"
msgstr ""
"При запуске с соответствующими аргументами он печатает либо сумму, либо "
"максимальное число целых чисел командной строки:"

#: ../../library/argparse.rst:75
msgid "If invalid arguments are passed in, it will issue an error:"
msgstr ""

#: ../../library/argparse.rst:83
msgid "The following sections walk you through this example."
msgstr "Следующие разделы познакомят вас с этим примером."

#: ../../library/argparse.rst:87
msgid "Creating a parser"
msgstr "Создание анализатора"

#: ../../library/argparse.rst:89
msgid ""
"The first step in using the :mod:`argparse` is creating an :class:"
"`ArgumentParser` object::"
msgstr ""
"Первым шагом в использовании :mod:`argparse` является создание объекта :"
"class:`ArgumentParser`::"

#: ../../library/argparse.rst:94
msgid ""
"The :class:`ArgumentParser` object will hold all the information necessary "
"to parse the command line into Python data types."
msgstr ""
"Объект :class:`ArgumentParser` будет содержать всю информацию, необходимую "
"для анализа командной строки на типы данных Python."

#: ../../library/argparse.rst:99
msgid "Adding arguments"
msgstr "Добавление аргументов"

#: ../../library/argparse.rst:101
msgid ""
"Filling an :class:`ArgumentParser` with information about program arguments "
"is done by making calls to the :meth:`~ArgumentParser.add_argument` method. "
"Generally, these calls tell the :class:`ArgumentParser` how to take the "
"strings on the command line and turn them into objects.  This information is "
"stored and used when :meth:`~ArgumentParser.parse_args` is called. For "
"example::"
msgstr ""
"Заполнение :class:`ArgumentParser` информацией об аргументах программы "
"осуществляется путем вызова метода :meth:`~ArgumentParser.add_argument`. "
"Обычно эти вызовы сообщают :class:`ArgumentParser`, как брать строки "
"командной строки и превращать их в объекты. Эта информация сохраняется и "
"используется при вызове :meth:`~ArgumentParser.parse_args`. Например::"

#: ../../library/argparse.rst:113
msgid ""
"Later, calling :meth:`~ArgumentParser.parse_args` will return an object with "
"two attributes, ``integers`` and ``accumulate``.  The ``integers`` attribute "
"will be a list of one or more ints, and the ``accumulate`` attribute will be "
"either the :func:`sum` function, if ``--sum`` was specified at the command "
"line, or the :func:`max` function if it was not."
msgstr ""

#: ../../library/argparse.rst:121
msgid "Parsing arguments"
msgstr "Анализ аргументов"

#: ../../library/argparse.rst:123
msgid ""
":class:`ArgumentParser` parses arguments through the :meth:`~ArgumentParser."
"parse_args` method.  This will inspect the command line, convert each "
"argument to the appropriate type and then invoke the appropriate action. In "
"most cases, this means a simple :class:`Namespace` object will be built up "
"from attributes parsed out of the command line::"
msgstr ""
":class:`ArgumentParser` анализирует аргументы с помощью метода :meth:"
"`~ArgumentParser.parse_args`. Это проверит командную строку, преобразует "
"каждый аргумент в соответствующий тип и затем вызовет соответствующее "
"действие. В большинстве случаев это означает, что простой объект :class:"
"`Namespace` будет построен из атрибутов, проанализированных из командной "
"строки::"

#: ../../library/argparse.rst:132
msgid ""
"In a script, :meth:`~ArgumentParser.parse_args` will typically be called "
"with no arguments, and the :class:`ArgumentParser` will automatically "
"determine the command-line arguments from :data:`sys.argv`."
msgstr ""
"В сценарии :meth:`~ArgumentParser.parse_args` обычно вызывается без "
"аргументов, а :class:`ArgumentParser` автоматически определяет аргументы "
"командной строки из :data:`sys.argv`."

#: ../../library/argparse.rst:138
msgid "ArgumentParser objects"
msgstr "Объекты ArgumentParser"

#: ../../library/argparse.rst:147
msgid ""
"Create a new :class:`ArgumentParser` object. All parameters should be passed "
"as keyword arguments. Each parameter has its own more detailed description "
"below, but in short they are:"
msgstr ""
"Создайте новый объект :class:`ArgumentParser`. Все параметры должны "
"передаваться как аргументы ключевого слова. Каждый параметр имеет свое более "
"подробное описание ниже, а вкратце они таковы:"

#: ../../library/argparse.rst:151
msgid "prog_ - The name of the program (default: ``sys.argv[0]``)"
msgstr ""

#: ../../library/argparse.rst:153
msgid ""
"usage_ - The string describing the program usage (default: generated from "
"arguments added to parser)"
msgstr ""
"Usage_ — строка, описывающая использование программы (по умолчанию: "
"генерируется из аргументов, добавленных в парсер)"

#: ../../library/argparse.rst:156
msgid "description_ - Text to display before the argument help (default: none)"
msgstr ""

#: ../../library/argparse.rst:158
msgid "epilog_ - Text to display after the argument help (default: none)"
msgstr ""

#: ../../library/argparse.rst:160
msgid ""
"parents_ - A list of :class:`ArgumentParser` objects whose arguments should "
"also be included"
msgstr ""
"Родители_ — список объектов :class:`ArgumentParser`, аргументы которых также "
"должны быть включены."

#: ../../library/argparse.rst:163
msgid "formatter_class_ - A class for customizing the help output"
msgstr "formatter_class_ — класс для настройки вывода справки."

#: ../../library/argparse.rst:165
msgid ""
"prefix_chars_ - The set of characters that prefix optional arguments "
"(default: '-')"
msgstr "formatter_class_ — класс для настройки вывода справки."

#: ../../library/argparse.rst:168
msgid ""
"fromfile_prefix_chars_ - The set of characters that prefix files from which "
"additional arguments should be read (default: ``None``)"
msgstr ""
"fromfile_prefix_chars_ — набор символов, которые префиксируют файлы, из "
"которых следует считывать дополнительные аргументы (по умолчанию: ``None``)"

#: ../../library/argparse.rst:171
msgid ""
"argument_default_ - The global default value for arguments (default: "
"``None``)"
msgstr ""
"аргумент_default_ — глобальное значение по умолчанию для аргументов (по "
"умолчанию: ``Нет``)"

#: ../../library/argparse.rst:174
msgid ""
"conflict_handler_ - The strategy for resolving conflicting optionals "
"(usually unnecessary)"
msgstr ""
"аргумент_default_ — глобальное значение по умолчанию для аргументов (по "
"умолчанию: ``Нет``)"

#: ../../library/argparse.rst:177
msgid ""
"add_help_ - Add a ``-h/--help`` option to the parser (default: ``True``)"
msgstr ""
"add_help_ — добавить в парсер параметр ``-h/--help`` (по умолчанию: ``True``)"

#: ../../library/argparse.rst:179
msgid ""
"allow_abbrev_ - Allows long options to be abbreviated if the abbreviation is "
"unambiguous. (default: ``True``)"
msgstr ""
"allow_abbrev_ — позволяет сокращать длинные параметры, если сокращение "
"однозначно. (по умолчанию: ``True``)"

#: ../../library/argparse.rst:182
msgid "*allow_abbrev* parameter was added."
msgstr "Добавлен параметр *allow_abbrev*."

#: ../../library/argparse.rst:185
msgid ""
"In previous versions, *allow_abbrev* also disabled grouping of short flags "
"such as ``-vv`` to mean ``-v -v``."
msgstr ""
"В предыдущих версиях *allow_abbrev* также отключал группировку коротких "
"флагов, таких как ``-vv``, чтобы означать ``-v -v``."

#: ../../library/argparse.rst:189 ../../library/argparse.rst:687
msgid "The following sections describe how each of these are used."
msgstr "В следующих разделах описано, как используется каждый из них."

#: ../../library/argparse.rst:193
msgid "prog"
msgstr "prog"

#: ../../library/argparse.rst:195
msgid ""
"By default, :class:`ArgumentParser` objects use ``sys.argv[0]`` to determine "
"how to display the name of the program in help messages.  This default is "
"almost always desirable because it will make the help messages match how the "
"program was invoked on the command line.  For example, consider a file named "
"``myprogram.py`` with the following code::"
msgstr ""
"По умолчанию объекты :class:`ArgumentParser` используют ``sys.argv[0]``, "
"чтобы определить, как отображать имя программы в справочных сообщениях. Это "
"значение по умолчанию почти всегда желательно, поскольку оно позволяет "
"справочным сообщениям соответствовать тому, как программа была вызвана из "
"командной строки. Например, рассмотрим файл с именем myprogram.py со "
"следующим кодом:"

#: ../../library/argparse.rst:206
msgid ""
"The help for this program will display ``myprogram.py`` as the program name "
"(regardless of where the program was invoked from):"
msgstr ""
"В справке по этой программе в качестве имени программы будет отображаться "
"``myprogram.py`` (независимо от того, откуда программа была вызвана):"

#: ../../library/argparse.rst:225
msgid ""
"To change this default behavior, another value can be supplied using the "
"``prog=`` argument to :class:`ArgumentParser`::"
msgstr ""
"Чтобы изменить это поведение по умолчанию, можно указать другое значение, "
"используя аргумент ``prog=`` для :class:`ArgumentParser`::"

#: ../../library/argparse.rst:235
msgid ""
"Note that the program name, whether determined from ``sys.argv[0]`` or from "
"the ``prog=`` argument, is available to help messages using the ``%(prog)s`` "
"format specifier."
msgstr ""
"Обратите внимание, что имя программы, определенное из ``sys.argv[0]`` или из "
"аргумента ``prog=``, доступно для справочных сообщений с помощью `` %(прог)с "
"`` Спецификатор формата."

#: ../../library/argparse.rst:252
msgid "usage"
msgstr "использование"

#: ../../library/argparse.rst:254
msgid ""
"By default, :class:`ArgumentParser` calculates the usage message from the "
"arguments it contains::"
msgstr ""
"По умолчанию :class:`ArgumentParser` вычисляет сообщение об использовании на "
"основе содержащихся в нем аргументов::"

#: ../../library/argparse.rst:270
msgid ""
"The default message can be overridden with the ``usage=`` keyword argument::"
msgstr ""
"Сообщение по умолчанию можно переопределить с помощью аргумента ключевого "
"слова ``usage=``::"

#: ../../library/argparse.rst:285
msgid ""
"The ``%(prog)s`` format specifier is available to fill in the program name "
"in your usage messages."
msgstr ""
"`` %(прог)с `` Спецификатор формата доступен для заполнения имени программы "
"в сообщениях об использовании."

#: ../../library/argparse.rst:290
msgid "description"
msgstr "описание"

#: ../../library/argparse.rst:292
msgid ""
"Most calls to the :class:`ArgumentParser` constructor will use the "
"``description=`` keyword argument.  This argument gives a brief description "
"of what the program does and how it works.  In help messages, the "
"description is displayed between the command-line usage string and the help "
"messages for the various arguments::"
msgstr ""
"Большинство вызовов конструктора :class:`ArgumentParser` будут использовать "
"аргумент ключевого слова ``description=``. Этот аргумент дает краткое "
"описание того, что делает программа и как она работает. В справочных "
"сообщениях описание отображается между строкой использования командной "
"строки и справочными сообщениями для различных аргументов:"

#: ../../library/argparse.rst:307
msgid ""
"By default, the description will be line-wrapped so that it fits within the "
"given space.  To change this behavior, see the formatter_class_ argument."
msgstr ""
"По умолчанию описание будет перенесено по строкам, чтобы оно помещалось в "
"заданное пространство. Чтобы изменить это поведение, см. аргумент "
"formatter_class_."

#: ../../library/argparse.rst:312
msgid "epilog"
msgstr "эпилог"

#: ../../library/argparse.rst:314
msgid ""
"Some programs like to display additional description of the program after "
"the description of the arguments.  Such text can be specified using the "
"``epilog=`` argument to :class:`ArgumentParser`::"
msgstr ""
"Некоторые программы любят отображать дополнительное описание программы после "
"описания аргументов. Такой текст можно указать с помощью аргумента "
"``epilog=`` для :class:`ArgumentParser`::"

#: ../../library/argparse.rst:331
msgid ""
"As with the description_ argument, the ``epilog=`` text is by default line-"
"wrapped, but this behavior can be adjusted with the formatter_class_ "
"argument to :class:`ArgumentParser`."
msgstr ""
"Как и в случае с аргументомdescription_, текст ``epilog=`` по умолчанию "
"переносится на строки, но это поведение можно настроить с помощью аргумента "
"formatter_class_ на :class:`ArgumentParser`."

#: ../../library/argparse.rst:337
msgid "parents"
msgstr "родители"

#: ../../library/argparse.rst:339
msgid ""
"Sometimes, several parsers share a common set of arguments. Rather than "
"repeating the definitions of these arguments, a single parser with all the "
"shared arguments and passed to ``parents=`` argument to :class:"
"`ArgumentParser` can be used.  The ``parents=`` argument takes a list of :"
"class:`ArgumentParser` objects, collects all the positional and optional "
"actions from them, and adds these actions to the :class:`ArgumentParser` "
"object being constructed::"
msgstr ""
"Иногда несколько парсеров имеют общий набор аргументов. Вместо повторения "
"определений этих аргументов можно использовать один анализатор со всеми "
"общими аргументами и аргументом ``parents=`` в :class:`ArgumentParser`. "
"Аргумент ``parents=`` принимает список объектов :class:`ArgumentParser`, "
"собирает из них все позиционные и необязательные действия и добавляет эти "
"действия в конструируемый объект :class:`ArgumentParser`::"

#: ../../library/argparse.rst:359
msgid ""
"Note that most parent parsers will specify ``add_help=False``.  Otherwise, "
"the :class:`ArgumentParser` will see two ``-h/--help`` options (one in the "
"parent and one in the child) and raise an error."
msgstr ""
"Обратите внимание, что большинство родительских парсеров указывают "
"``add_help=False``. В противном случае :class:`ArgumentParser` увидит два "
"параметра ``-h/--help`` (один в родительском и один в дочернем) и выдаст "
"ошибку."

#: ../../library/argparse.rst:364
msgid ""
"You must fully initialize the parsers before passing them via ``parents=``. "
"If you change the parent parsers after the child parser, those changes will "
"not be reflected in the child."
msgstr ""
"Вы должны полностью инициализировать парсеры перед передачей их через "
"``parents=``. Если вы измените родительские парсеры после дочернего парсера, "
"эти изменения не будут отражены в дочернем."

#: ../../library/argparse.rst:370
msgid "formatter_class"
msgstr "formatter_class"

#: ../../library/argparse.rst:372
msgid ""
":class:`ArgumentParser` objects allow the help formatting to be customized "
"by specifying an alternate formatting class.  Currently, there are four such "
"classes:"
msgstr ""
"Объекты :class:`ArgumentParser` позволяют настраивать форматирование справки "
"путем указания альтернативного класса форматирования. На данный момент "
"существует четыре таких класса:"

#: ../../library/argparse.rst:381
msgid ""
":class:`RawDescriptionHelpFormatter` and :class:`RawTextHelpFormatter` give "
"more control over how textual descriptions are displayed. By default, :class:"
"`ArgumentParser` objects line-wrap the description_ and epilog_ texts in "
"command-line help messages::"
msgstr ""
":class:`RawDescriptionHelpFormatter` и :class:`RawTextHelpFormatter` дают "
"больше контроля над тем, как отображаются текстовые описания. По умолчанию "
"объекты :class:`ArgumentParser` переносят тексты описания_ и эпилог_ в "
"справочных сообщениях командной строки::"

#: ../../library/argparse.rst:406
msgid ""
"Passing :class:`RawDescriptionHelpFormatter` as ``formatter_class=`` "
"indicates that description_ and epilog_ are already correctly formatted and "
"should not be line-wrapped::"
msgstr ""
"Передача :class:`RawDescriptionHelpFormatter` как ``formatter_class=`` "
"указывает, что описание_ и эпилог_ уже отформатированы правильно и их не "
"следует переносить по строкам::"

#: ../../library/argparse.rst:432
msgid ""
":class:`RawTextHelpFormatter` maintains whitespace for all sorts of help "
"text, including argument descriptions. However, multiple new lines are "
"replaced with one. If you wish to preserve multiple blank lines, add spaces "
"between the newlines."
msgstr ""
":class:`RawTextHelpFormatter` сохраняет пробелы для всех видов справочного "
"текста, включая описания аргументов. Однако несколько новых строк заменяются "
"одной. Если вы хотите сохранить несколько пустых строк, добавьте пробелы "
"между символами новой строки."

#: ../../library/argparse.rst:437
msgid ""
":class:`ArgumentDefaultsHelpFormatter` automatically adds information about "
"default values to each of the argument help messages::"
msgstr ""
":class:`ArgumentDefaultsHelpFormatter` автоматически добавляет информацию о "
"значениях по умолчанию в каждое из справочных сообщений по аргументам::"

#: ../../library/argparse.rst:455
msgid ""
":class:`MetavarTypeHelpFormatter` uses the name of the type_ argument for "
"each argument as the display name for its values (rather than using the "
"dest_ as the regular formatter does)::"
msgstr ""
":class:`MetavarTypeHelpFormatter` использует имя аргумента type_ для каждого "
"аргумента в качестве отображаемого имени для его значений (вместо "
"использования dest_, как это делает обычный форматтер)::"

#: ../../library/argparse.rst:476
msgid "prefix_chars"
msgstr "prefix_chars"

#: ../../library/argparse.rst:478
msgid ""
"Most command-line options will use ``-`` as the prefix, e.g. ``-f/--foo``. "
"Parsers that need to support different or additional prefix characters, e.g. "
"for options like ``+f`` or ``/foo``, may specify them using the "
"``prefix_chars=`` argument to the ArgumentParser constructor::"
msgstr ""
"Большинство параметров командной строки будут использовать ``-`` в качестве "
"префикса, например ``-f/--foo``. Парсеры, которым необходимо поддерживать "
"другие или дополнительные символы префикса, например, для таких параметров, "
"как ``+f`` или ``/foo``, могут указать их с помощью аргумента "
"``prefix_chars=`` конструктора ArgumentParser::"

#: ../../library/argparse.rst:490
msgid ""
"The ``prefix_chars=`` argument defaults to ``'-'``. Supplying a set of "
"characters that does not include ``-`` will cause ``-f/--foo`` options to be "
"disallowed."
msgstr ""
"Аргумент ``prefix_chars=`` по умолчанию имеет значение ``'-'``. "
"Предоставление набора символов, не включающего ``-``, приведет к запрещению "
"опций ``-f/--foo``."

#: ../../library/argparse.rst:496
msgid "fromfile_prefix_chars"
msgstr "fromfile_prefix_chars"

#: ../../library/argparse.rst:498
msgid ""
"Sometimes, for example when dealing with a particularly long argument lists, "
"it may make sense to keep the list of arguments in a file rather than typing "
"it out at the command line.  If the ``fromfile_prefix_chars=`` argument is "
"given to the :class:`ArgumentParser` constructor, then arguments that start "
"with any of the specified characters will be treated as files, and will be "
"replaced by the arguments they contain.  For example::"
msgstr ""

#: ../../library/argparse.rst:512
msgid ""
"Arguments read from a file must by default be one per line (but see also :"
"meth:`~ArgumentParser.convert_arg_line_to_args`) and are treated as if they "
"were in the same place as the original file referencing argument on the "
"command line.  So in the example above, the expression ``['-f', 'foo', "
"'@args.txt']`` is considered equivalent to the expression ``['-f', 'foo', '-"
"f', 'bar']``."
msgstr ""
"Аргументы, считываемые из файла, по умолчанию должны быть по одному на "
"строку (но см. также :meth:`~ArgumentParser.convert_arg_line_to_args`) и "
"обрабатываются так, как если бы они находились в том же месте, что и "
"исходный аргумент, ссылающийся на файл в командной строке. Таким образом, в "
"приведенном выше примере выражение ``['-f', 'foo', '@args.txt']`` считается "
"эквивалентным выражению ``['-f', 'foo', '-f ', 'бар']``."

#: ../../library/argparse.rst:518
msgid ""
"The ``fromfile_prefix_chars=`` argument defaults to ``None``, meaning that "
"arguments will never be treated as file references."
msgstr ""
"Аргумент fromfile_prefix_chars=`` по умолчанию имеет значение None, что "
"означает, что аргументы никогда не будут рассматриваться как ссылки на файлы."

#: ../../library/argparse.rst:523
msgid "argument_default"
msgstr "argument_default"

#: ../../library/argparse.rst:525
msgid ""
"Generally, argument defaults are specified either by passing a default to :"
"meth:`~ArgumentParser.add_argument` or by calling the :meth:`~ArgumentParser."
"set_defaults` methods with a specific set of name-value pairs.  Sometimes "
"however, it may be useful to specify a single parser-wide default for "
"arguments.  This can be accomplished by passing the ``argument_default=`` "
"keyword argument to :class:`ArgumentParser`.  For example, to globally "
"suppress attribute creation on :meth:`~ArgumentParser.parse_args` calls, we "
"supply ``argument_default=SUPPRESS``::"
msgstr ""
"Обычно значения аргументов по умолчанию указываются либо путем передачи "
"значения по умолчанию в :meth:`~ArgumentParser.add_argument`, либо путем "
"вызова методов :meth:`~ArgumentParser.set_defaults` с определенным набором "
"пар имя-значение. Однако иногда может оказаться полезным указать для "
"аргументов одно значение по умолчанию для всего синтаксического анализатора. "
"Этого можно добиться, передав аргумент ключевого слова ``argument_default=`` "
"в :class:`ArgumentParser`. Например, чтобы глобально подавить создание "
"атрибутов при вызовах :meth:`~ArgumentParser.parse_args`, мы предоставляем "
"``argument_default=SUPPRESS``::"

#: ../../library/argparse.rst:545
msgid "allow_abbrev"
msgstr "allow_abbrev"

#: ../../library/argparse.rst:547
msgid ""
"Normally, when you pass an argument list to the :meth:`~ArgumentParser."
"parse_args` method of an :class:`ArgumentParser`, it :ref:`recognizes "
"abbreviations <prefix-matching>` of long options."
msgstr ""
"Обычно, когда вы передаете список аргументов методу :meth:`~ArgumentParser."
"parse_args` :class:`ArgumentParser`, он :ref:`распознаёт сокращения <prefix-"
"matching>` длинных опций."

#: ../../library/argparse.rst:551
msgid "This feature can be disabled by setting ``allow_abbrev`` to ``False``::"
msgstr ""
"Эту функцию можно отключить, установив для ``allow_abbrev`` значение "
"``False``::"

#: ../../library/argparse.rst:564
msgid "conflict_handler"
msgstr "conflict_handler"

#: ../../library/argparse.rst:566
msgid ""
":class:`ArgumentParser` objects do not allow two actions with the same "
"option string.  By default, :class:`ArgumentParser` objects raise an "
"exception if an attempt is made to create an argument with an option string "
"that is already in use::"
msgstr ""
"Объекты :class:`ArgumentParser` не допускают двух действий с одной и той же "
"строкой параметров. По умолчанию объекты :class:`ArgumentParser` вызывают "
"исключение, если предпринимается попытка создать аргумент со строкой "
"параметра, которая уже используется::"

#: ../../library/argparse.rst:578
msgid ""
"Sometimes (e.g. when using parents_) it may be useful to simply override any "
"older arguments with the same option string.  To get this behavior, the "
"value ``'resolve'`` can be supplied to the ``conflict_handler=`` argument "
"of :class:`ArgumentParser`::"
msgstr ""
"Иногда (например, при использовании родителей_) может быть полезно просто "
"переопределить любые старые аргументы с той же строкой параметров. Чтобы "
"получить такое поведение, значение ``'resolve'`` может быть передано в "
"аргумент ``conflict_handler=`` :class:`ArgumentParser`::"

#: ../../library/argparse.rst:594
msgid ""
"Note that :class:`ArgumentParser` objects only remove an action if all of "
"its option strings are overridden.  So, in the example above, the old ``-f/--"
"foo`` action is retained as the ``-f`` action, because only the ``--foo`` "
"option string was overridden."
msgstr ""
"Обратите внимание, что объекты :class:`ArgumentParser` удаляют действие "
"только в том случае, если все его строки параметров переопределены. Итак, в "
"приведенном выше примере старое действие ``-f/--foo`` сохраняется как "
"действие ``-f``, поскольку была переопределена только строка параметра ``--"
"foo``."

#: ../../library/argparse.rst:601
msgid "add_help"
msgstr "add_help"

#: ../../library/argparse.rst:603
msgid ""
"By default, ArgumentParser objects add an option which simply displays the "
"parser's help message. For example, consider a file named ``myprogram.py`` "
"containing the following code::"
msgstr ""
"По умолчанию объекты ArgumentParser добавляют опцию, которая просто "
"отображает справочное сообщение синтаксического анализатора. Например, "
"рассмотрим файл с именем ``myprogram.py``, содержащий следующий код:"

#: ../../library/argparse.rst:612
msgid ""
"If ``-h`` or ``--help`` is supplied at the command line, the ArgumentParser "
"help will be printed:"
msgstr ""
"Если в командной строке указан ``-h`` или ``--help``, будет напечатана "
"справка ArgumentParser:"

#: ../../library/argparse.rst:624
msgid ""
"Occasionally, it may be useful to disable the addition of this help option. "
"This can be achieved by passing ``False`` as the ``add_help=`` argument to :"
"class:`ArgumentParser`::"
msgstr ""
"Иногда может быть полезно отключить добавление этой опции справки. Этого "
"можно добиться, передав False в качестве аргумента add_help=`` в :class:"
"`ArgumentParser`::"

#: ../../library/argparse.rst:636
msgid ""
"The help option is typically ``-h/--help``. The exception to this is if the "
"``prefix_chars=`` is specified and does not include ``-``, in which case ``-"
"h`` and ``--help`` are not valid options.  In this case, the first character "
"in ``prefix_chars`` is used to prefix the help options::"
msgstr ""
"Опцией справки обычно является ``-h/--help``. Исключением является случай, "
"когда указан ``prefix_chars=`` и он не включает ``-``, и в этом случае ``-"
"h`` и ``--help`` не являются допустимыми параметрами. В этом случае первый "
"символ в ``prefix_chars`` используется для префикса опций справки::"

#: ../../library/argparse.rst:651
msgid "The add_argument() method"
msgstr "Метод add_argument()"

#: ../../library/argparse.rst:657
msgid ""
"Define how a single command-line argument should be parsed.  Each parameter "
"has its own more detailed description below, but in short they are:"
msgstr ""
"Определите, как следует анализировать один аргумент командной строки. Каждый "
"параметр имеет свое более подробное описание ниже, а вкратце они таковы:"

#: ../../library/argparse.rst:660
msgid ""
"`name or flags`_ - Either a name or a list of option strings, e.g. ``foo`` "
"or ``-f, --foo``."
msgstr ""
"`name or flags`_ ​​— либо имя, либо список строк параметров, например ``foo`` "
"или ``-f, --foo``."

#: ../../library/argparse.rst:663
msgid ""
"action_ - The basic type of action to be taken when this argument is "
"encountered at the command line."
msgstr ""
"action_ — основной тип действия, которое необходимо предпринять, когда этот "
"аргумент встречается в командной строке."

#: ../../library/argparse.rst:666
msgid "nargs_ - The number of command-line arguments that should be consumed."
msgstr ""
"nargs_ — количество аргументов командной строки, которые следует "
"использовать."

#: ../../library/argparse.rst:668
msgid ""
"const_ - A constant value required by some action_ and nargs_ selections."
msgstr ""
"const_ — постоянное значение, необходимое для некоторых вариантов выбора "
"action_ и nargs_."

#: ../../library/argparse.rst:670
msgid ""
"default_ - The value produced if the argument is absent from the command "
"line."
msgstr ""

#: ../../library/argparse.rst:673
msgid ""
"type_ - The type to which the command-line argument should be converted."
msgstr ""
"type_ — тип, в который должен быть преобразован аргумент командной строки."

#: ../../library/argparse.rst:675
msgid "choices_ - A container of the allowable values for the argument."
msgstr ""

#: ../../library/argparse.rst:677
msgid ""
"required_ - Whether or not the command-line option may be omitted (optionals "
"only)."
msgstr ""
"required_ — можно ли опустить параметр командной строки (только "
"необязательно)."

#: ../../library/argparse.rst:680
msgid "help_ - A brief description of what the argument does."
msgstr "help_ — краткое описание того, что делает аргумент."

#: ../../library/argparse.rst:682
msgid "metavar_ - A name for the argument in usage messages."
msgstr "metavar_ — имя аргумента в сообщениях об использовании."

#: ../../library/argparse.rst:684
msgid ""
"dest_ - The name of the attribute to be added to the object returned by :"
"meth:`parse_args`."
msgstr ""
"dest_ — имя атрибута, добавляемого к объекту, возвращаемому :meth:"
"`parse_args`."

#: ../../library/argparse.rst:691
msgid "name or flags"
msgstr "имя или флаги"

#: ../../library/argparse.rst:693
msgid ""
"The :meth:`~ArgumentParser.add_argument` method must know whether an "
"optional argument, like ``-f`` or ``--foo``, or a positional argument, like "
"a list of filenames, is expected.  The first arguments passed to :meth:"
"`~ArgumentParser.add_argument` must therefore be either a series of flags, "
"or a simple argument name.  For example, an optional argument could be "
"created like::"
msgstr ""

#: ../../library/argparse.rst:702
msgid "while a positional argument could be created like::"
msgstr ""
"в то время как позиционный аргумент может быть создан следующим образом::"

#: ../../library/argparse.rst:706
msgid ""
"When :meth:`~ArgumentParser.parse_args` is called, optional arguments will "
"be identified by the ``-`` prefix, and the remaining arguments will be "
"assumed to be positional::"
msgstr ""
"При вызове :meth:`~ArgumentParser.parse_args` необязательные аргументы будут "
"обозначаться префиксом ``-``, а остальные аргументы будут считаться "
"позиционными::"

#: ../../library/argparse.rst:723
msgid "action"
msgstr "действие"

#: ../../library/argparse.rst:725
msgid ""
":class:`ArgumentParser` objects associate command-line arguments with "
"actions.  These actions can do just about anything with the command-line "
"arguments associated with them, though most actions simply add an attribute "
"to the object returned by :meth:`~ArgumentParser.parse_args`.  The "
"``action`` keyword argument specifies how the command-line arguments should "
"be handled. The supplied actions are:"
msgstr ""
"Объекты :class:`ArgumentParser` связывают аргументы командной строки с "
"действиями. Эти действия могут делать практически все что угодно с "
"связанными с ними аргументами командной строки, хотя большинство действий "
"просто добавляют атрибут к объекту, возвращаемому :meth:`~ArgumentParser."
"parse_args`. Аргумент ключевого слова ``action`` определяет, как следует "
"обрабатывать аргументы командной строки. Предоставленные действия:"

#: ../../library/argparse.rst:731
msgid ""
"``'store'`` - This just stores the argument's value.  This is the default "
"action. For example::"
msgstr ""
"``'store'`` - просто сохраняет значение аргумента. Это действие по "
"умолчанию. Например::"

#: ../../library/argparse.rst:739
msgid ""
"``'store_const'`` - This stores the value specified by the const_ keyword "
"argument.  The ``'store_const'`` action is most commonly used with optional "
"arguments that specify some sort of flag.  For example::"
msgstr ""

#: ../../library/argparse.rst:748
msgid ""
"``'store_true'`` and ``'store_false'`` - These are special cases of "
"``'store_const'`` used for storing the values ``True`` and ``False`` "
"respectively.  In addition, they create default values of ``False`` and "
"``True`` respectively.  For example::"
msgstr ""
"``'store_true'`` и ``'store_false'`` — это особые случаи ``'store_const'``, "
"используемые для хранения значений ``True`` и ``False`` соответственно. "
"Кроме того, они создают значения по умолчанию «False» и «True» "
"соответственно. Например::"

#: ../../library/argparse.rst:760
msgid ""
"``'append'`` - This stores a list, and appends each argument value to the "
"list.  This is useful to allow an option to be specified multiple times. "
"Example usage::"
msgstr ""

#: ../../library/argparse.rst:769
msgid ""
"``'append_const'`` - This stores a list, and appends the value specified by "
"the const_ keyword argument to the list.  (Note that the const_ keyword "
"argument defaults to ``None``.)  The ``'append_const'`` action is typically "
"useful when multiple arguments need to store constants to the same list. For "
"example::"
msgstr ""

#: ../../library/argparse.rst:781
msgid ""
"``'count'`` - This counts the number of times a keyword argument occurs. For "
"example, this is useful for increasing verbosity levels::"
msgstr ""
"``'count'`` — подсчитывает количество раз, когда встречается аргумент "
"ключевого слова. Например, это полезно для повышения уровня детализации:"

#: ../../library/argparse.rst:789
msgid "Note, the *default* will be ``None`` unless explicitly set to *0*."
msgstr ""
"Обратите внимание: *по умолчанию* будет «Нет», если явно не установлено "
"значение *0*."

#: ../../library/argparse.rst:791
msgid ""
"``'help'`` - This prints a complete help message for all the options in the "
"current parser and then exits. By default a help action is automatically "
"added to the parser. See :class:`ArgumentParser` for details of how the "
"output is created."
msgstr ""
"``'help'`` - выводит полное справочное сообщение для всех опций текущего "
"анализатора, а затем завершает работу. По умолчанию в анализатор "
"автоматически добавляется справочное действие. См. :class:`ArgumentParser` "
"для получения подробной информации о том, как создаются выходные данные."

#: ../../library/argparse.rst:796
msgid ""
"``'version'`` - This expects a ``version=`` keyword argument in the :meth:"
"`~ArgumentParser.add_argument` call, and prints version information and "
"exits when invoked::"
msgstr ""
"``'version'`` - ожидает ключевого аргумента ``version=`` в вызове :meth:"
"`~ArgumentParser.add_argument`, печатает информацию о версии и завершает "
"работу при вызове::"

#: ../../library/argparse.rst:806
msgid ""
"``'extend'`` - This stores a list, and extends each argument value to the "
"list. Example usage::"
msgstr ""
"``'extend'`` - сохраняет список и расширяет каждое значение аргумента до "
"списка. Пример использования::"

#: ../../library/argparse.rst:817
msgid ""
"You may also specify an arbitrary action by passing an Action subclass or "
"other object that implements the same interface.  The recommended way to do "
"this is to extend :class:`Action`, overriding the ``__call__`` method and "
"optionally the ``__init__`` method."
msgstr ""

#: ../../library/argparse.rst:822
msgid "An example of a custom action::"
msgstr "Пример специального действия:"

#: ../../library/argparse.rst:842
msgid "For more details, see :class:`Action`."
msgstr "Для получения более подробной информации см. :class:`Action`."

#: ../../library/argparse.rst:845
msgid "nargs"
msgstr "nargs"

#: ../../library/argparse.rst:847
msgid ""
"ArgumentParser objects usually associate a single command-line argument with "
"a single action to be taken.  The ``nargs`` keyword argument associates a "
"different number of command-line arguments with a single action.  The "
"supported values are:"
msgstr ""

#: ../../library/argparse.rst:852
msgid ""
"``N`` (an integer).  ``N`` arguments from the command line will be gathered "
"together into a list.  For example::"
msgstr ""
"``N`` (целое число). ``N`` аргументы из командной строки будут собраны в "
"список. Например::"

#: ../../library/argparse.rst:861
msgid ""
"Note that ``nargs=1`` produces a list of one item.  This is different from "
"the default, in which the item is produced by itself."
msgstr ""
"Обратите внимание, что ``nargs=1`` создает список из одного элемента. Это "
"отличается от значения по умолчанию, в котором элемент создается сам по себе."

#: ../../library/argparse.rst:866
msgid ""
"``'?'``. One argument will be consumed from the command line if possible, "
"and produced as a single item.  If no command-line argument is present, the "
"value from default_ will be produced.  Note that for optional arguments, "
"there is an additional case - the option string is present but not followed "
"by a command-line argument.  In this case the value from const_ will be "
"produced.  Some examples to illustrate this::"
msgstr ""
"``'?'``. Если возможно, один аргумент будет использован из командной строки "
"и создан как один элемент. Если аргумент командной строки отсутствует, будет "
"получено значение из default_. Обратите внимание, что для необязательных "
"аргументов существует дополнительный случай: строка параметра присутствует, "
"но за ней не следует аргумент командной строки. В этом случае будет получено "
"значение из const_. Несколько примеров, иллюстрирующих это:"

#: ../../library/argparse.rst:883
msgid ""
"One of the more common uses of ``nargs='?'`` is to allow optional input and "
"output files::"
msgstr ""
"Одним из наиболее распространенных вариантов использования ``nargs='?'`` "
"является разрешение дополнительных входных и выходных файлов::"

#: ../../library/argparse.rst:900
msgid ""
"``'*'``.  All command-line arguments present are gathered into a list.  Note "
"that it generally doesn't make much sense to have more than one positional "
"argument with ``nargs='*'``, but multiple optional arguments with "
"``nargs='*'`` is possible.  For example::"
msgstr ""
"``'*'``. Все имеющиеся аргументы командной строки собираются в список. "
"Обратите внимание, что обычно нет смысла иметь более одного позиционного "
"аргумента с ``nargs='*'``, но возможно несколько дополнительных аргументов с "
"``nargs='*'``. Например::"

#: ../../library/argparse.rst:914
msgid ""
"``'+'``. Just like ``'*'``, all command-line args present are gathered into "
"a list.  Additionally, an error message will be generated if there wasn't at "
"least one command-line argument present.  For example::"
msgstr ""
"``'+'``. Как и в случае с ``'*'``, все имеющиеся аргументы командной строки "
"собираются в список. Кроме того, будет сгенерировано сообщение об ошибке, "
"если не будет хотя бы одного аргумента командной строки. Например::"

#: ../../library/argparse.rst:928
msgid ""
"``argparse.REMAINDER``.  All the remaining command-line arguments are "
"gathered into a list.  This is commonly useful for command line utilities "
"that dispatch to other command line utilities::"
msgstr ""

#: ../../library/argparse.rst:939
msgid ""
"If the ``nargs`` keyword argument is not provided, the number of arguments "
"consumed is determined by the action_.  Generally this means a single "
"command-line argument will be consumed and a single item (not a list) will "
"be produced."
msgstr ""
"Если аргумент ключевого слова ``nargs`` не указан, количество используемых "
"аргументов определяется параметром action_. Обычно это означает, что будет "
"использован один аргумент командной строки и будет создан один элемент (не "
"список)."

#: ../../library/argparse.rst:945
msgid "const"
msgstr "const"

#: ../../library/argparse.rst:947
msgid ""
"The ``const`` argument of :meth:`~ArgumentParser.add_argument` is used to "
"hold constant values that are not read from the command line but are "
"required for the various :class:`ArgumentParser` actions.  The two most "
"common uses of it are:"
msgstr ""
"Аргумент ``const`` :meth:`~ArgumentParser.add_argument` используется для "
"хранения константных значений, которые не считываются из командной строки, "
"но необходимы для различных действий :class:`ArgumentParser`. Два наиболее "
"распространенных варианта его использования:"

#: ../../library/argparse.rst:951
msgid ""
"When :meth:`~ArgumentParser.add_argument` is called with "
"``action='store_const'`` or ``action='append_const'``.  These actions add "
"the ``const`` value to one of the attributes of the object returned by :meth:"
"`~ArgumentParser.parse_args`. See the action_ description for examples."
msgstr ""

#: ../../library/argparse.rst:956
msgid ""
"When :meth:`~ArgumentParser.add_argument` is called with option strings "
"(like ``-f`` or ``--foo``) and ``nargs='?'``.  This creates an optional "
"argument that can be followed by zero or one command-line arguments. When "
"parsing the command line, if the option string is encountered with no "
"command-line argument following it, the value of ``const`` will be assumed "
"instead. See the nargs_ description for examples."
msgstr ""

#: ../../library/argparse.rst:963
msgid ""
"With the ``'store_const'`` and ``'append_const'`` actions, the ``const`` "
"keyword argument must be given.  For other actions, it defaults to ``None``."
msgstr ""

#: ../../library/argparse.rst:968
msgid "default"
msgstr "значение по умолчанию"

#: ../../library/argparse.rst:970
msgid ""
"All optional arguments and some positional arguments may be omitted at the "
"command line.  The ``default`` keyword argument of :meth:`~ArgumentParser."
"add_argument`, whose value defaults to ``None``, specifies what value should "
"be used if the command-line argument is not present. For optional arguments, "
"the ``default`` value is used when the option string was not present at the "
"command line::"
msgstr ""
"Все необязательные аргументы и некоторые позиционные аргументы могут быть "
"опущены в командной строке. Аргумент ключевого слова ``default`` для :meth:"
"`~ArgumentParser.add_argument`, значение которого по умолчанию равно "
"``None``, определяет, какое значение следует использовать, если аргумент "
"командной строки отсутствует. Для необязательных аргументов значение «по "
"умолчанию» используется, когда строка параметра не присутствует в командной "
"строке:"

#: ../../library/argparse.rst:984
msgid ""
"If the ``default`` value is a string, the parser parses the value as if it "
"were a command-line argument.  In particular, the parser applies any type_ "
"conversion argument, if provided, before setting the attribute on the :class:"
"`Namespace` return value.  Otherwise, the parser uses the value as is::"
msgstr ""
"Если значение ``default`` является строкой, синтаксический анализатор "
"анализирует значение, как если бы оно было аргументом командной строки. В "
"частности, анализатор применяет любой аргумент преобразования type_, если он "
"предусмотрен, перед установкой атрибута в возвращаемом значении :class:"
"`Namespace`. В противном случае анализатор использует значение как есть::"

#: ../../library/argparse.rst:995
msgid ""
"For positional arguments with nargs_ equal to ``?`` or ``*``, the "
"``default`` value is used when no command-line argument was present::"
msgstr ""
"Для позиционных аргументов с nargs_, равным ``?`` или ``*``, значение "
"``default`` используется, когда аргумент командной строки не присутствует:"

#: ../../library/argparse.rst:1006
msgid ""
"Providing ``default=argparse.SUPPRESS`` causes no attribute to be added if "
"the command-line argument was not present::"
msgstr ""
"Предоставление ``default=argparse.SUPPRESS`` не приводит к добавлению "
"атрибута, если аргумент командной строки отсутствует::"

#: ../../library/argparse.rst:1018
msgid "type"
msgstr "тип"

#: ../../library/argparse.rst:1020
msgid ""
"By default, :class:`ArgumentParser` objects read command-line arguments in "
"as simple strings. However, quite often the command-line string should "
"instead be interpreted as another type, like a :class:`float` or :class:"
"`int`.  The ``type`` keyword argument of :meth:`~ArgumentParser."
"add_argument` allows any necessary type-checking and type conversions to be "
"performed.  Common built-in types and functions can be used directly as the "
"value of the ``type`` argument::"
msgstr ""

#: ../../library/argparse.rst:1033
msgid ""
"See the section on the default_ keyword argument for information on when the "
"``type`` argument is applied to default arguments."
msgstr ""

#: ../../library/argparse.rst:1036
msgid ""
"To ease the use of various types of files, the argparse module provides the "
"factory FileType which takes the ``mode=``, ``bufsize=``, ``encoding=`` and "
"``errors=`` arguments of the :func:`open` function.  For example, "
"``FileType('w')`` can be used to create a writable file::"
msgstr ""

#: ../../library/argparse.rst:1046
msgid ""
"``type=`` can take any callable that takes a single string argument and "
"returns the converted value::"
msgstr ""

#: ../../library/argparse.rst:1065
msgid ""
"The choices_ keyword argument may be more convenient for type checkers that "
"simply check against a range of values::"
msgstr ""

#: ../../library/argparse.rst:1076
msgid "See the choices_ section for more details."
msgstr ""

#: ../../library/argparse.rst:1080
msgid "choices"
msgstr "выбор"

#: ../../library/argparse.rst:1082
msgid ""
"Some command-line arguments should be selected from a restricted set of "
"values. These can be handled by passing a container object as the *choices* "
"keyword argument to :meth:`~ArgumentParser.add_argument`.  When the command "
"line is parsed, argument values will be checked, and an error message will "
"be displayed if the argument was not one of the acceptable values::"
msgstr ""

#: ../../library/argparse.rst:1097
msgid ""
"Note that inclusion in the *choices* container is checked after any type_ "
"conversions have been performed, so the type of the objects in the *choices* "
"container should match the type_ specified::"
msgstr ""

#: ../../library/argparse.rst:1109
msgid ""
"Any container can be passed as the *choices* value, so :class:`list` "
"objects, :class:`set` objects, and custom containers are all supported."
msgstr ""

#: ../../library/argparse.rst:1114
msgid "required"
msgstr "обязательное"

#: ../../library/argparse.rst:1116
msgid ""
"In general, the :mod:`argparse` module assumes that flags like ``-f`` and "
"``--bar`` indicate *optional* arguments, which can always be omitted at the "
"command line. To make an option *required*, ``True`` can be specified for "
"the ``required=`` keyword argument to :meth:`~ArgumentParser.add_argument`::"
msgstr ""
"В общем, модуль :mod:`argparse` предполагает, что такие флаги, как ``-f`` и "
"``--bar`` обозначают *необязательные* аргументы, которые всегда можно "
"опустить в командной строке. Чтобы сделать опцию *обязательной*, можно "
"указать ``True`` для аргумента ключевого слова ``required=`` для :meth:"
"`~ArgumentParser.add_argument`::"

#: ../../library/argparse.rst:1129
msgid ""
"As the example shows, if an option is marked as ``required``, :meth:"
"`~ArgumentParser.parse_args` will report an error if that option is not "
"present at the command line."
msgstr ""
"Как показано в примере, если параметр помечен как обязательный, :meth:"
"`~ArgumentParser.parse_args` сообщит об ошибке, если этот параметр "
"отсутствует в командной строке."

#: ../../library/argparse.rst:1135
msgid ""
"Required options are generally considered bad form because users expect "
"*options* to be *optional*, and thus they should be avoided when possible."
msgstr ""
"Обязательные параметры обычно считаются дурным тоном, поскольку пользователи "
"ожидают, что *опции* будут *необязательными*, и поэтому их следует избегать, "
"когда это возможно."

#: ../../library/argparse.rst:1140
msgid "help"
msgstr "помощь"

#: ../../library/argparse.rst:1142
msgid ""
"The ``help`` value is a string containing a brief description of the "
"argument. When a user requests help (usually by using ``-h`` or ``--help`` "
"at the command line), these ``help`` descriptions will be displayed with "
"each argument::"
msgstr ""
"Значение help представляет собой строку, содержащую краткое описание "
"аргумента. Когда пользователь запрашивает помощь (обычно используя ``-h`` "
"или ``--help`` в командной строке), эти описания ``help`` будут отображаться "
"с каждым аргументом:"

#: ../../library/argparse.rst:1162
msgid ""
"The ``help`` strings can include various format specifiers to avoid "
"repetition of things like the program name or the argument default_.  The "
"available specifiers include the program name, ``%(prog)s`` and most keyword "
"arguments to :meth:`~ArgumentParser.add_argument`, e.g. ``%(default)s``, "
"``%(type)s``, etc.::"
msgstr ""
"Строки ``help`` могут включать в себя различные спецификаторы формата, чтобы "
"избежать повторения таких вещей, как имя программы или аргумент default_. "
"Доступные спецификаторы включают имя программы, `` %(прог)с `` и большинство "
"ключевых аргументов для :meth:`~ArgumentParser.add_argument`, например `` "
"%(по умолчанию)с ``, `` %(тип)с `` и т. д.::"

#: ../../library/argparse.rst:1179
msgid ""
"As the help string supports %-formatting, if you want a literal ``%`` to "
"appear in the help string, you must escape it as ``%%``."
msgstr ""
"Поскольку строка справки поддерживает %-f При форматировании, если вы "
"хотите, чтобы в строке справки появлялся литерал ``%``, вы должны "
"экранировать его как ``%%``."

#: ../../library/argparse.rst:1182
msgid ""
":mod:`argparse` supports silencing the help entry for certain options, by "
"setting the ``help`` value to ``argparse.SUPPRESS``::"
msgstr ""
":mod:`argparse` поддерживает отключение звука записи справки для "
"определенных параметров, устанавливая значение ``help`` в ``argparse."
"SUPPRESS``::"

#: ../../library/argparse.rst:1195
msgid "metavar"
msgstr "metavar"

#: ../../library/argparse.rst:1197
msgid ""
"When :class:`ArgumentParser` generates help messages, it needs some way to "
"refer to each expected argument.  By default, ArgumentParser objects use the "
"dest_ value as the \"name\" of each object.  By default, for positional "
"argument actions, the dest_ value is used directly, and for optional "
"argument actions, the dest_ value is uppercased.  So, a single positional "
"argument with ``dest='bar'`` will be referred to as ``bar``. A single "
"optional argument ``--foo`` that should be followed by a single command-line "
"argument will be referred to as ``FOO``.  An example::"
msgstr ""
"Когда :class:`ArgumentParser` генерирует справочные сообщения, ему нужен "
"какой-то способ ссылки на каждый ожидаемый аргумент. По умолчанию объекты "
"ArgumentParser используют значение dest_ в качестве «имени» каждого объекта. "
"По умолчанию для действий с позиционным аргументом значение dest_ "
"используется напрямую, а для необязательных действий с аргументом значение "
"dest_ указывается в верхнем регистре. Таким образом, один позиционный "
"аргумент с ``dest='bar'`` будет называться ``bar``. Один необязательный "
"аргумент ``--foo``, за которым должен следовать один аргумент командной "
"строки, будет называться ``FOO``. Пример::"

#: ../../library/argparse.rst:1221
msgid "An alternative name can be specified with ``metavar``::"
msgstr "Альтернативное имя можно указать с помощью ``metavar``::"

#: ../../library/argparse.rst:1238
msgid ""
"Note that ``metavar`` only changes the *displayed* name - the name of the "
"attribute on the :meth:`~ArgumentParser.parse_args` object is still "
"determined by the dest_ value."
msgstr ""
"Обратите внимание, что ``metavar`` меняет только *отображаемое* имя — имя "
"атрибута в объекте :meth:`~ArgumentParser.parse_args` по-прежнему "
"определяется значением dest_."

#: ../../library/argparse.rst:1242
msgid ""
"Different values of ``nargs`` may cause the metavar to be used multiple "
"times. Providing a tuple to ``metavar`` specifies a different display for "
"each of the arguments::"
msgstr ""
"Различные значения ``nargs`` могут привести к многократному использованию "
"метавара. Предоставление кортежа для ``metavar`` задает разное отображение "
"для каждого из аргументов:"

#: ../../library/argparse.rst:1259
msgid "dest"
msgstr "dest"

#: ../../library/argparse.rst:1261
msgid ""
"Most :class:`ArgumentParser` actions add some value as an attribute of the "
"object returned by :meth:`~ArgumentParser.parse_args`.  The name of this "
"attribute is determined by the ``dest`` keyword argument of :meth:"
"`~ArgumentParser.add_argument`.  For positional argument actions, ``dest`` "
"is normally supplied as the first argument to :meth:`~ArgumentParser."
"add_argument`::"
msgstr ""
"Большинство действий :class:`ArgumentParser` добавляют некоторое значение в "
"качестве атрибута объекта, возвращаемого :meth:`~ArgumentParser.parse_args`. "
"Имя этого атрибута определяется аргументом ключевого слова ``dest`` :meth:"
"`~ArgumentParser.add_argument`. Для действий с позиционными аргументами "
"``dest`` обычно предоставляется в качестве первого аргумента :meth:"
"`~ArgumentParser.add_argument`::"

#: ../../library/argparse.rst:1273
msgid ""
"For optional argument actions, the value of ``dest`` is normally inferred "
"from the option strings.  :class:`ArgumentParser` generates the value of "
"``dest`` by taking the first long option string and stripping away the "
"initial ``--`` string.  If no long option strings were supplied, ``dest`` "
"will be derived from the first short option string by stripping the initial "
"``-`` character.  Any internal ``-`` characters will be converted to ``_`` "
"characters to make sure the string is a valid attribute name.  The examples "
"below illustrate this behavior::"
msgstr ""
"Для необязательных действий аргументов значение ``dest`` обычно выводится из "
"строк опций. :class:`ArgumentParser` генерирует значение ``dest``, беря "
"первую длинную строку опций и удаляя начальную строку ``--``. Если длинные "
"строки параметров не были предоставлены, ``dest`` будет получен из первой "
"короткой строки параметров путем удаления начального символа ``-``. Любые "
"внутренние символы ``-`` будут преобразованы в символы ``_``, чтобы "
"убедиться, что строка является допустимым именем атрибута. Примеры ниже "
"иллюстрируют такое поведение:"

#: ../../library/argparse.rst:1290
msgid "``dest`` allows a custom attribute name to be provided::"
msgstr "``dest`` позволяет указать имя пользовательского атрибута::"

#: ../../library/argparse.rst:1298
msgid "Action classes"
msgstr "Классы действий"

#: ../../library/argparse.rst:1300
msgid ""
"Action classes implement the Action API, a callable which returns a callable "
"which processes arguments from the command-line. Any object which follows "
"this API may be passed as the ``action`` parameter to :meth:`add_argument`."
msgstr ""

#: ../../library/argparse.rst:1309
msgid ""
"Action objects are used by an ArgumentParser to represent the information "
"needed to parse a single argument from one or more strings from the command "
"line. The Action class must accept the two positional arguments plus any "
"keyword arguments passed to :meth:`ArgumentParser.add_argument` except for "
"the ``action`` itself."
msgstr ""
"Объекты действий используются ArgumentParser для представления информации, "
"необходимой для анализа одного аргумента из одной или нескольких строк из "
"командной строки. Класс Action должен принимать два позиционных аргумента "
"плюс любые аргументы ключевого слова, передаваемые в :meth:`ArgumentParser."
"add_argument`, за исключением самого ``action``."

#: ../../library/argparse.rst:1315
msgid ""
"Instances of Action (or return value of any callable to the ``action`` "
"parameter) should have attributes \"dest\", \"option_strings\", \"default\", "
"\"type\", \"required\", \"help\", etc. defined. The easiest way to ensure "
"these attributes are defined is to call ``Action.__init__``."
msgstr ""
"Экземпляры Action (или возвращаемое значение любого вызываемого параметра "
"action) должны иметь определенные атрибуты «dest», «option_strings», "
"«default», «type», «required», «help» и т. д. Самый простой способ "
"убедиться, что эти атрибуты определены, — это вызвать Action.__init__."

#: ../../library/argparse.rst:1320
msgid ""
"Action instances should be callable, so subclasses must override the "
"``__call__`` method, which should accept four parameters:"
msgstr ""
"Экземпляры действий должны быть вызываемыми, поэтому подклассы должны "
"переопределять метод ``__call__``, который должен принимать четыре параметра:"

#: ../../library/argparse.rst:1323
msgid "``parser`` - The ArgumentParser object which contains this action."
msgstr "``parser`` — объект ArgumentParser, который содержит это действие."

#: ../../library/argparse.rst:1325
msgid ""
"``namespace`` - The :class:`Namespace` object that will be returned by :meth:"
"`~ArgumentParser.parse_args`.  Most actions add an attribute to this object "
"using :func:`setattr`."
msgstr ""
"``namespace`` — объект :class:`Namespace`, который будет возвращен :meth:"
"`~ArgumentParser.parse_args`. Большинство действий добавляют атрибут к этому "
"объекту, используя :func:`setattr`."

#: ../../library/argparse.rst:1329
msgid ""
"``values`` - The associated command-line arguments, with any type "
"conversions applied.  Type conversions are specified with the type_ keyword "
"argument to :meth:`~ArgumentParser.add_argument`."
msgstr ""
"``values`` — связанные аргументы командной строки с любыми примененными "
"преобразованиями типов. Преобразования типов задаются с помощью аргумента "
"ключевого слова type_ для :meth:`~ArgumentParser.add_argument`."

#: ../../library/argparse.rst:1333
msgid ""
"``option_string`` - The option string that was used to invoke this action. "
"The ``option_string`` argument is optional, and will be absent if the action "
"is associated with a positional argument."
msgstr ""
"``option_string`` — строка параметра, которая использовалась для вызова "
"этого действия. Аргумент ``option_string`` не является обязательным и будет "
"отсутствовать, если действие связано с позиционным аргументом."

#: ../../library/argparse.rst:1337
msgid ""
"The ``__call__`` method may perform arbitrary actions, but will typically "
"set attributes on the ``namespace`` based on ``dest`` and ``values``."
msgstr ""
"Метод ``__call__`` может выполнять произвольные действия, но обычно "
"устанавливает атрибуты в ``пространстве имен`` на основе ``dest`` и "
"``значений``."

#: ../../library/argparse.rst:1342
msgid "The parse_args() method"
msgstr "Метод parse_args()"

#: ../../library/argparse.rst:1346
msgid ""
"Convert argument strings to objects and assign them as attributes of the "
"namespace.  Return the populated namespace."
msgstr ""
"Преобразуйте строки аргументов в объекты и назначьте их как атрибуты "
"пространства имен. Верните заполненное пространство имен."

#: ../../library/argparse.rst:1349
msgid ""
"Previous calls to :meth:`add_argument` determine exactly what objects are "
"created and how they are assigned. See the documentation for :meth:"
"`add_argument` for details."
msgstr ""
"Предыдущие вызовы :meth:`add_argument` точно определяли, какие объекты "
"создаются и как они назначаются. Подробности смотрите в документации по :"
"meth:`add_argument`."

#: ../../library/argparse.rst:1353
msgid ""
"args_ - List of strings to parse.  The default is taken from :data:`sys."
"argv`."
msgstr ""
"args_ — список строк для анализа. Значение по умолчанию взято из :data:`sys."
"argv`."

#: ../../library/argparse.rst:1356
msgid ""
"namespace_ - An object to take the attributes.  The default is a new empty :"
"class:`Namespace` object."
msgstr ""
"namespace_ — объект, принимающий атрибуты. По умолчанию используется новый "
"пустой объект :class:`Namespace`."

#: ../../library/argparse.rst:1361
msgid "Option value syntax"
msgstr "Синтаксис значения параметра"

#: ../../library/argparse.rst:1363
msgid ""
"The :meth:`~ArgumentParser.parse_args` method supports several ways of "
"specifying the value of an option (if it takes one).  In the simplest case, "
"the option and its value are passed as two separate arguments::"
msgstr ""
"Метод :meth:`~ArgumentParser.parse_args` поддерживает несколько способов "
"указания значения опции (если оно принимается). В простейшем случае опция и "
"ее значение передаются как два отдельных аргумента:"

#: ../../library/argparse.rst:1375
msgid ""
"For long options (options with names longer than a single character), the "
"option and value can also be passed as a single command-line argument, using "
"``=`` to separate them::"
msgstr ""
"Для длинных опций (опций с именами длиннее одного символа) опция и значение "
"также могут быть переданы как один аргумент командной строки, используя "
"``=`` для их разделения:"

#: ../../library/argparse.rst:1382
msgid ""
"For short options (options only one character long), the option and its "
"value can be concatenated::"
msgstr ""
"Для коротких опций (опции длиной всего один символ) опция и ее значение "
"могут быть объединены:"

#: ../../library/argparse.rst:1388
msgid ""
"Several short options can be joined together, using only a single ``-`` "
"prefix, as long as only the last option (or none of them) requires a value::"
msgstr ""
"Несколько коротких опций можно объединить вместе, используя только один "
"префикс ``-``, при условии, что только последняя опция (или ни одна из них) "
"не требует значения::"

#: ../../library/argparse.rst:1400
msgid "Invalid arguments"
msgstr "Недопустимые аргументы"

#: ../../library/argparse.rst:1402
msgid ""
"While parsing the command line, :meth:`~ArgumentParser.parse_args` checks "
"for a variety of errors, including ambiguous options, invalid types, invalid "
"options, wrong number of positional arguments, etc.  When it encounters such "
"an error, it exits and prints the error along with a usage message::"
msgstr ""
"При анализе командной строки :meth:`~ArgumentParser.parse_args` проверяет "
"наличие множества ошибок, включая неоднозначные параметры, недопустимые "
"типы, недопустимые параметры, неправильное количество позиционных аргументов "
"и т. д. Когда он сталкивается с такой ошибкой, он завершает работу и "
"печатает ошибку вместе с сообщением об использовании::"

#: ../../library/argparse.rst:1428
msgid "Arguments containing ``-``"
msgstr "Аргументы, содержащие `-`"

#: ../../library/argparse.rst:1430
msgid ""
"The :meth:`~ArgumentParser.parse_args` method attempts to give errors "
"whenever the user has clearly made a mistake, but some situations are "
"inherently ambiguous.  For example, the command-line argument ``-1`` could "
"either be an attempt to specify an option or an attempt to provide a "
"positional argument. The :meth:`~ArgumentParser.parse_args` method is "
"cautious here: positional arguments may only begin with ``-`` if they look "
"like negative numbers and there are no options in the parser that look like "
"negative numbers::"
msgstr ""
"Метод :meth:`~ArgumentParser.parse_args` пытается выдавать ошибки всякий "
"раз, когда пользователь явно допустил ошибку, но некоторые ситуации по своей "
"сути неоднозначны. Например, аргумент командной строки ``-1`` может быть "
"либо попыткой указать параметр, либо попыткой предоставить позиционный "
"аргумент. Метод :meth:`~ArgumentParser.parse_args` здесь осторожен: "
"позиционные аргументы могут начинаться с ``-`` только в том случае, если они "
"выглядят как отрицательные числа и в анализаторе нет опций, которые выглядят "
"как отрицательные числа::"

#: ../../library/argparse.rst:1468
msgid ""
"If you have positional arguments that must begin with ``-`` and don't look "
"like negative numbers, you can insert the pseudo-argument ``'--'`` which "
"tells :meth:`~ArgumentParser.parse_args` that everything after that is a "
"positional argument::"
msgstr ""
"Если у вас есть позиционные аргументы, которые должны начинаться с ``-`` и "
"не выглядеть как отрицательные числа, вы можете вставить псевдоаргумент "
"``'--'``, который сообщает :meth:`~ArgumentParser.parse_args`, что все, что "
"после этого, является позиционным аргументом::"

#: ../../library/argparse.rst:1479
msgid "Argument abbreviations (prefix matching)"
msgstr "Сокращения аргументов (сопоставление префиксов)"

#: ../../library/argparse.rst:1481
msgid ""
"The :meth:`~ArgumentParser.parse_args` method :ref:`by default "
"<allow_abbrev>` allows long options to be abbreviated to a prefix, if the "
"abbreviation is unambiguous (the prefix matches a unique option)::"
msgstr ""
"Метод :meth:`~ArgumentParser.parse_args` :ref:`по умолчанию <allow_abbrev>` "
"позволяет сокращать длинные параметры до префикса, если аббревиатура "
"однозначна (префикс соответствует уникальному параметру)::"

#: ../../library/argparse.rst:1496
msgid ""
"An error is produced for arguments that could produce more than one options. "
"This feature can be disabled by setting :ref:`allow_abbrev` to ``False``."
msgstr ""
"Ошибка выдается для аргументов, которые могут возвращать более одного "
"параметра. Эту функцию можно отключить, установив для параметра :ref:"
"`allow_abbrev` значение ``False``."

#: ../../library/argparse.rst:1502
msgid "Beyond ``sys.argv``"
msgstr "За пределами ``sys.argv``"

#: ../../library/argparse.rst:1504
msgid ""
"Sometimes it may be useful to have an ArgumentParser parse arguments other "
"than those of :data:`sys.argv`.  This can be accomplished by passing a list "
"of strings to :meth:`~ArgumentParser.parse_args`.  This is useful for "
"testing at the interactive prompt::"
msgstr ""
"Иногда может быть полезно иметь аргументы анализа ArgumentParser, отличные "
"от аргументов :data:`sys.argv`. Это можно сделать, передав список строк в :"
"meth:`~ArgumentParser.parse_args`. Это полезно для тестирования в "
"интерактивной подсказке::"

#: ../../library/argparse.rst:1524
msgid "The Namespace object"
msgstr "Объект пространства имен"

#: ../../library/argparse.rst:1528
msgid ""
"Simple class used by default by :meth:`~ArgumentParser.parse_args` to create "
"an object holding attributes and return it."
msgstr ""
"Простой класс, используемый по умолчанию :meth:`~ArgumentParser.parse_args` "
"для создания объекта, содержащего атрибуты, и его возврата."

#: ../../library/argparse.rst:1531
msgid ""
"This class is deliberately simple, just an :class:`object` subclass with a "
"readable string representation. If you prefer to have dict-like view of the "
"attributes, you can use the standard Python idiom, :func:`vars`::"
msgstr ""
"Этот класс намеренно прост: это всего лишь подкласс :class:`object` с "
"читаемым строковым представлением. Если вы предпочитаете представление "
"атрибутов в виде словаря, вы можете использовать стандартную идиому Python: :"
"func:`vars`::"

#: ../../library/argparse.rst:1541
msgid ""
"It may also be useful to have an :class:`ArgumentParser` assign attributes "
"to an already existing object, rather than a new :class:`Namespace` object.  "
"This can be achieved by specifying the ``namespace=`` keyword argument::"
msgstr ""
"Также может быть полезно, чтобы :class:`ArgumentParser` назначал атрибуты "
"уже существующему объекту, а не новому :class:`Namespace` объекту. Этого "
"можно добиться, указав аргумент ключевого слова ``namespace=``::"

#: ../../library/argparse.rst:1557
msgid "Other utilities"
msgstr "Другие утилиты"

#: ../../library/argparse.rst:1560
msgid "Sub-commands"
msgstr "Подкоманды"

#: ../../library/argparse.rst:1567
msgid ""
"Many programs split up their functionality into a number of sub-commands, "
"for example, the ``svn`` program can invoke sub-commands like ``svn "
"checkout``, ``svn update``, and ``svn commit``.  Splitting up functionality "
"this way can be a particularly good idea when a program performs several "
"different functions which require different kinds of command-line "
"arguments. :class:`ArgumentParser` supports the creation of such sub-"
"commands with the :meth:`add_subparsers` method.  The :meth:`add_subparsers` "
"method is normally called with no arguments and returns a special action "
"object.  This object has a single method, :meth:`~ArgumentParser."
"add_parser`, which takes a command name and any :class:`ArgumentParser` "
"constructor arguments, and returns an :class:`ArgumentParser` object that "
"can be modified as usual."
msgstr ""

#: ../../library/argparse.rst:1579
msgid "Description of parameters:"
msgstr "Описание параметров:"

#: ../../library/argparse.rst:1581
msgid ""
"title - title for the sub-parser group in help output; by default "
"\"subcommands\" if description is provided, otherwise uses title for "
"positional arguments"
msgstr ""
"title - заголовок группы субпарсера в выводе справки; по умолчанию "
"«подкоманды», если указано описание, в противном случае для позиционных "
"аргументов используется заголовок."

#: ../../library/argparse.rst:1585
msgid ""
"description - description for the sub-parser group in help output, by "
"default ``None``"
msgstr ""
"описание - описание группы субпарсера в выводе справки, по умолчанию ``Нет``"

#: ../../library/argparse.rst:1588
msgid ""
"prog - usage information that will be displayed with sub-command help, by "
"default the name of the program and any positional arguments before the "
"subparser argument"
msgstr ""
"prog — информация об использовании, которая будет отображаться с помощью "
"подкоманды help, по умолчанию имя программы и любые позиционные аргументы "
"перед аргументом субпарсера."

#: ../../library/argparse.rst:1592
msgid ""
"parser_class - class which will be used to create sub-parser instances, by "
"default the class of the current parser (e.g. ArgumentParser)"
msgstr ""
"parser_class — класс, который будет использоваться для создания экземпляров "
"субпарсера, по умолчанию это класс текущего парсера (например, "
"ArgumentParser)"

#: ../../library/argparse.rst:1595
msgid ""
"action_ - the basic type of action to be taken when this argument is "
"encountered at the command line"
msgstr ""
"action_ — основной тип действия, которое необходимо предпринять, когда этот "
"аргумент встречается в командной строке."

#: ../../library/argparse.rst:1598
msgid ""
"dest_ - name of the attribute under which sub-command name will be stored; "
"by default ``None`` and no value is stored"
msgstr ""
"dest_ — имя атрибута, под которым будет храниться имя подкоманды; по "
"умолчанию ``None`` и никакое значение не сохраняется"

#: ../../library/argparse.rst:1601
msgid ""
"required_ - Whether or not a subcommand must be provided, by default "
"``False`` (added in 3.7)"
msgstr ""
"требуется_ - Должна ли быть предоставлена ​​подкоманда, по умолчанию ``False`` "
"(добавлено в версии 3.7)"

#: ../../library/argparse.rst:1604
msgid "help_ - help for sub-parser group in help output, by default ``None``"
msgstr ""
"help_ - справка для группы субпарсера в выводе справки, по умолчанию ``Нет``"

#: ../../library/argparse.rst:1606
msgid ""
"metavar_ - string presenting available sub-commands in help; by default it "
"is ``None`` and presents sub-commands in form {cmd1, cmd2, ..}"
msgstr ""
"метавар_ — строка, представляющая доступные подкоманды в справке; по "
"умолчанию это ``Нет`` и представляет подкоманды в виде {cmd1, cmd2, ..}"

#: ../../library/argparse.rst:1609
msgid "Some example usage::"
msgstr "Некоторые примеры использования::"

#: ../../library/argparse.rst:1630
msgid ""
"Note that the object returned by :meth:`parse_args` will only contain "
"attributes for the main parser and the subparser that was selected by the "
"command line (and not any other subparsers).  So in the example above, when "
"the ``a`` command is specified, only the ``foo`` and ``bar`` attributes are "
"present, and when the ``b`` command is specified, only the ``foo`` and "
"``baz`` attributes are present."
msgstr ""
"Обратите внимание, что объект, возвращаемый :meth:`parse_args`, будет "
"содержать только атрибуты основного синтаксического анализатора и "
"субпарсера, выбранного в командной строке (а не каких-либо других "
"субпарсеров). Таким образом, в приведенном выше примере, когда указана "
"команда ``a``, присутствуют только атрибуты ``foo`` и ``bar``, а когда "
"указана команда ``b``, только атрибут `` Атрибуты foo`` и ``baz`` "
"присутствуют."

#: ../../library/argparse.rst:1637
msgid ""
"Similarly, when a help message is requested from a subparser, only the help "
"for that particular parser will be printed.  The help message will not "
"include parent parser or sibling parser messages.  (A help message for each "
"subparser command, however, can be given by supplying the ``help=`` argument "
"to :meth:`add_parser` as above.)"
msgstr ""

#: ../../library/argparse.rst:1673
msgid ""
"The :meth:`add_subparsers` method also supports ``title`` and "
"``description`` keyword arguments.  When either is present, the subparser's "
"commands will appear in their own group in the help output.  For example::"
msgstr ""
"Метод :meth:`add_subparsers` также поддерживает ключевые аргументы ``title`` "
"и ``description``. Если любой из них присутствует, команды субпарсера "
"появятся в отдельной группе в выводе справки. Например::"

#: ../../library/argparse.rst:1694
msgid ""
"Furthermore, ``add_parser`` supports an additional ``aliases`` argument, "
"which allows multiple strings to refer to the same subparser. This example, "
"like ``svn``, aliases ``co`` as a shorthand for ``checkout``::"
msgstr ""

#: ../../library/argparse.rst:1705
msgid ""
"One particularly effective way of handling sub-commands is to combine the "
"use of the :meth:`add_subparsers` method with calls to :meth:`set_defaults` "
"so that each subparser knows which Python function it should execute.  For "
"example::"
msgstr ""
"Одним из особенно эффективных способов обработки подкоманд является "
"объединение использования метода :meth:`add_subparsers` с вызовами :meth:"
"`set_defaults`, чтобы каждый субпарсер знал, какую функцию Python он должен "
"выполнить. Например::"

#: ../../library/argparse.rst:1742
msgid ""
"This way, you can let :meth:`parse_args` do the job of calling the "
"appropriate function after argument parsing is complete.  Associating "
"functions with actions like this is typically the easiest way to handle the "
"different actions for each of your subparsers.  However, if it is necessary "
"to check the name of the subparser that was invoked, the ``dest`` keyword "
"argument to the :meth:`add_subparsers` call will work::"
msgstr ""
"Таким образом, вы можете позволить :meth:`parse_args` выполнить вызов "
"соответствующей функции после завершения анализа аргументов. Связывание "
"функций с подобными действиями обычно является самым простым способом "
"обработки различных действий для каждого из ваших субпарсеров. Однако, если "
"необходимо проверить имя вызванного субпарсера, будет работать аргумент "
"ключевого слова ``dest`` для вызова :meth:`add_subparsers`:"

#: ../../library/argparse.rst:1758
msgid "New *required* keyword argument."
msgstr "Новый *обязательный* аргумент ключевого слова."

#: ../../library/argparse.rst:1763
msgid "FileType objects"
msgstr "Объекты FileType"

#: ../../library/argparse.rst:1767
msgid ""
"The :class:`FileType` factory creates objects that can be passed to the type "
"argument of :meth:`ArgumentParser.add_argument`.  Arguments that have :class:"
"`FileType` objects as their type will open command-line arguments as files "
"with the requested modes, buffer sizes, encodings and error handling (see "
"the :func:`open` function for more details)::"
msgstr ""
"Фабрика :class:`FileType` создает объекты, которые можно передать в аргумент "
"типа :meth:`ArgumentParser.add_argument`. Аргументы, имеющие в качестве типа "
"объекты :class:`FileType`, откроют аргументы командной строки как файлы с "
"запрошенными режимами, размерами буфера, кодировками и обработкой ошибок "
"(более подробную информацию см. в функции :func:`open`)::"

#: ../../library/argparse.rst:1779
msgid ""
"FileType objects understand the pseudo-argument ``'-'`` and automatically "
"convert this into ``sys.stdin`` for readable :class:`FileType` objects and "
"``sys.stdout`` for writable :class:`FileType` objects::"
msgstr ""

#: ../../library/argparse.rst:1788
msgid "The *encodings* and *errors* keyword arguments."
msgstr ""

#: ../../library/argparse.rst:1793
msgid "Argument groups"
msgstr "Группы аргументов"

#: ../../library/argparse.rst:1797
msgid ""
"By default, :class:`ArgumentParser` groups command-line arguments into "
"\"positional arguments\" and \"optional arguments\" when displaying help "
"messages. When there is a better conceptual grouping of arguments than this "
"default one, appropriate groups can be created using the :meth:"
"`add_argument_group` method::"
msgstr ""

#: ../../library/argparse.rst:1814
msgid ""
"The :meth:`add_argument_group` method returns an argument group object which "
"has an :meth:`~ArgumentParser.add_argument` method just like a regular :"
"class:`ArgumentParser`.  When an argument is added to the group, the parser "
"treats it just like a normal argument, but displays the argument in a "
"separate group for help messages.  The :meth:`add_argument_group` method "
"accepts *title* and *description* arguments which can be used to customize "
"this display::"
msgstr ""
"Метод :meth:`add_argument_group` возвращает объект группы аргументов, "
"который имеет метод :meth:`~ArgumentParser.add_argument`, как и обычный :"
"class:`ArgumentParser`. Когда аргумент добавляется в группу, анализатор "
"обрабатывает его как обычный аргумент, но отображает аргумент в отдельной "
"группе для справочных сообщений. Метод :meth:`add_argument_group` принимает "
"аргументы *title* и *description*, которые можно использовать для настройки "
"этого отображения:"

#: ../../library/argparse.rst:1840
msgid ""
"Note that any arguments not in your user-defined groups will end up back in "
"the usual \"positional arguments\" and \"optional arguments\" sections."
msgstr ""
"Обратите внимание, что любые аргументы, не входящие в пользовательские "
"группы, вернутся в обычные разделы «позиционные аргументы» и «необязательные "
"аргументы»."

#: ../../library/argparse.rst:1845
msgid "Mutual exclusion"
msgstr "Взаимное исключение"

#: ../../library/argparse.rst:1849
msgid ""
"Create a mutually exclusive group. :mod:`argparse` will make sure that only "
"one of the arguments in the mutually exclusive group was present on the "
"command line::"
msgstr ""
"Создайте взаимоисключающую группу. :mod:`argparse` будет следить за тем, "
"чтобы в командной строке присутствовал только один из аргументов "
"взаимоисключающей группы::"

#: ../../library/argparse.rst:1865
msgid ""
"The :meth:`add_mutually_exclusive_group` method also accepts a *required* "
"argument, to indicate that at least one of the mutually exclusive arguments "
"is required::"
msgstr ""
"Метод :meth:`add_mutually_exclusive_group` также принимает *обязательный* "
"аргумент, указывающий, что требуется хотя бы один из взаимоисключающих "
"аргументов::"

#: ../../library/argparse.rst:1877
msgid ""
"Note that currently mutually exclusive argument groups do not support the "
"*title* and *description* arguments of :meth:`~ArgumentParser."
"add_argument_group`."
msgstr ""

#: ../../library/argparse.rst:1883
msgid "Parser defaults"
msgstr "Значения синтаксического анализатора по умолчанию"

#: ../../library/argparse.rst:1887
msgid ""
"Most of the time, the attributes of the object returned by :meth:"
"`parse_args` will be fully determined by inspecting the command-line "
"arguments and the argument actions.  :meth:`set_defaults` allows some "
"additional attributes that are determined without any inspection of the "
"command line to be added::"
msgstr ""
"В большинстве случаев атрибуты объекта, возвращаемого :meth:`parse_args`, "
"будут полностью определены путем проверки аргументов командной строки и "
"действий с аргументами. :meth:`set_defaults` позволяет добавлять некоторые "
"дополнительные атрибуты, которые определяются без какой-либо проверки "
"командной строки::"

#: ../../library/argparse.rst:1899
msgid ""
"Note that parser-level defaults always override argument-level defaults::"
msgstr ""
"Обратите внимание, что значения по умолчанию на уровне синтаксического "
"анализатора всегда переопределяют значения по умолчанию на уровне аргумента::"

#: ../../library/argparse.rst:1907
msgid ""
"Parser-level defaults can be particularly useful when working with multiple "
"parsers.  See the :meth:`~ArgumentParser.add_subparsers` method for an "
"example of this type."
msgstr ""
"Значения по умолчанию на уровне парсера могут быть особенно полезны при "
"работе с несколькими парсерами. Пример этого типа см. в методе :meth:"
"`~ArgumentParser.add_subparsers`."

#: ../../library/argparse.rst:1913
msgid ""
"Get the default value for a namespace attribute, as set by either :meth:"
"`~ArgumentParser.add_argument` or by :meth:`~ArgumentParser.set_defaults`::"
msgstr ""
"Получите значение по умолчанию для атрибута пространства имен, установленное "
"либо :meth:`~ArgumentParser.add_argument`, либо :meth:`~ArgumentParser."
"set_defaults`::"

#: ../../library/argparse.rst:1924
msgid "Printing help"
msgstr "Справка по печати"

#: ../../library/argparse.rst:1926
msgid ""
"In most typical applications, :meth:`~ArgumentParser.parse_args` will take "
"care of formatting and printing any usage or error messages.  However, "
"several formatting methods are available:"
msgstr ""
"В большинстве типичных приложений :meth:`~ArgumentParser.parse_args` "
"позаботится о форматировании и печати любых сообщений об использовании или "
"ошибках. Однако доступно несколько методов форматирования:"

#: ../../library/argparse.rst:1932
msgid ""
"Print a brief description of how the :class:`ArgumentParser` should be "
"invoked on the command line.  If *file* is ``None``, :data:`sys.stdout` is "
"assumed."
msgstr ""
"Выведите краткое описание того, как :class:`ArgumentParser` следует вызывать "
"из командной строки. Если *file* имеет значение ``None``, предполагается :"
"data:`sys.stdout`."

#: ../../library/argparse.rst:1938
msgid ""
"Print a help message, including the program usage and information about the "
"arguments registered with the :class:`ArgumentParser`.  If *file* is "
"``None``, :data:`sys.stdout` is assumed."
msgstr ""
"Распечатайте справочное сообщение, включая информацию об использовании "
"программы и информацию об аргументах, зарегистрированных в :class:"
"`ArgumentParser`. Если *file* имеет значение ``None``, предполагается :data:"
"`sys.stdout`."

#: ../../library/argparse.rst:1942
msgid ""
"There are also variants of these methods that simply return a string instead "
"of printing it:"
msgstr ""
"Существуют также варианты этих методов, которые просто возвращают строку, а "
"не печатают ее:"

#: ../../library/argparse.rst:1947
msgid ""
"Return a string containing a brief description of how the :class:"
"`ArgumentParser` should be invoked on the command line."
msgstr ""
"Возвращает строку, содержащую краткое описание того, как следует вызывать :"
"class:`ArgumentParser` в командной строке."

#: ../../library/argparse.rst:1952
msgid ""
"Return a string containing a help message, including the program usage and "
"information about the arguments registered with the :class:`ArgumentParser`."
msgstr ""
"Возвращает строку, содержащую справочное сообщение, включая использование "
"программы и информацию об аргументах, зарегистрированных в :class:"
"`ArgumentParser`."

#: ../../library/argparse.rst:1957
msgid "Partial parsing"
msgstr "Частичный синтаксический анализ"

#: ../../library/argparse.rst:1961
msgid ""
"Sometimes a script may only parse a few of the command-line arguments, "
"passing the remaining arguments on to another script or program. In these "
"cases, the :meth:`~ArgumentParser.parse_known_args` method can be useful.  "
"It works much like :meth:`~ArgumentParser.parse_args` except that it does "
"not produce an error when extra arguments are present.  Instead, it returns "
"a two item tuple containing the populated namespace and the list of "
"remaining argument strings."
msgstr ""
"Иногда сценарий может анализировать только несколько аргументов командной "
"строки, передавая оставшиеся аргументы другому сценарию или программе. В "
"этих случаях может оказаться полезным метод :meth:`~ArgumentParser."
"parse_known_args`. Он работает во многом аналогично :meth:`~ArgumentParser."
"parse_args`, за исключением того, что он не выдает ошибку при наличии "
"дополнительных аргументов. Вместо этого он возвращает кортеж из двух "
"элементов, содержащий заполненное пространство имен и список оставшихся "
"строк аргументов."

#: ../../library/argparse.rst:1977
msgid ""
":ref:`Prefix matching <prefix-matching>` rules apply to :meth:"
"`parse_known_args`. The parser may consume an option even if it's just a "
"prefix of one of its known options, instead of leaving it in the remaining "
"arguments list."
msgstr ""

#: ../../library/argparse.rst:1984
msgid "Customizing file parsing"
msgstr "Настройка анализа файлов"

#: ../../library/argparse.rst:1988
msgid ""
"Arguments that are read from a file (see the *fromfile_prefix_chars* keyword "
"argument to the :class:`ArgumentParser` constructor) are read one argument "
"per line. :meth:`convert_arg_line_to_args` can be overridden for fancier "
"reading."
msgstr ""
"Аргументы, считываемые из файла (см. аргумент ключевого слова "
"*fromfile_prefix_chars* конструктора :class:`ArgumentParser`), считываются "
"по одному аргументу в каждой строке. :meth:`convert_arg_line_to_args` можно "
"переопределить для более удобного чтения."

#: ../../library/argparse.rst:1993
msgid ""
"This method takes a single argument *arg_line* which is a string read from "
"the argument file.  It returns a list of arguments parsed from this string. "
"The method is called once per line read from the argument file, in order."
msgstr ""
"Этот метод принимает один аргумент *arg_line*, который представляет собой "
"строку, считанную из файла аргументов. Он возвращает список аргументов, "
"проанализированных из этой строки. Метод вызывается один раз для каждой "
"строки, считанной из файла аргументов, по порядку."

#: ../../library/argparse.rst:1997
msgid ""
"A useful override of this method is one that treats each space-separated "
"word as an argument.  The following example demonstrates how to do this::"
msgstr ""
"Полезным переопределением этого метода является то, что каждое слово, "
"разделенное пробелом, рассматривается как аргумент. Следующий пример "
"демонстрирует, как это сделать:"

#: ../../library/argparse.rst:2006
msgid "Exiting methods"
msgstr "Методы выхода"

#: ../../library/argparse.rst:2010
msgid ""
"This method terminates the program, exiting with the specified *status* and, "
"if given, it prints a *message* before that. The user can override this "
"method to handle these steps differently::"
msgstr ""

#: ../../library/argparse.rst:2022
msgid ""
"This method prints a usage message including the *message* to the standard "
"error and terminates the program with a status code of 2."
msgstr ""

#: ../../library/argparse.rst:2027
msgid "Intermixed parsing"
msgstr "Смешанный анализ"

#: ../../library/argparse.rst:2032
msgid ""
"A number of Unix commands allow the user to intermix optional arguments with "
"positional arguments.  The :meth:`~ArgumentParser.parse_intermixed_args` "
"and :meth:`~ArgumentParser.parse_known_intermixed_args` methods support this "
"parsing style."
msgstr ""
"Ряд команд Unix позволяют пользователю смешивать необязательные аргументы с "
"позиционными аргументами. Методы :meth:`~ArgumentParser."
"parse_intermixed_args` и :meth:`~ArgumentParser.parse_known_intermixed_args` "
"поддерживают этот стиль анализа."

#: ../../library/argparse.rst:2037
msgid ""
"These parsers do not support all the argparse features, and will raise "
"exceptions if unsupported features are used.  In particular, subparsers, "
"``argparse.REMAINDER``, and mutually exclusive groups that include both "
"optionals and positionals are not supported."
msgstr ""

#: ../../library/argparse.rst:2042
msgid ""
"The following example shows the difference between :meth:`~ArgumentParser."
"parse_known_args` and :meth:`~ArgumentParser.parse_intermixed_args`: the "
"former returns ``['2', '3']`` as unparsed arguments, while the latter "
"collects all the positionals into ``rest``.  ::"
msgstr ""
"В следующем примере показана разница между :meth:`~ArgumentParser."
"parse_known_args` и :meth:`~ArgumentParser.parse_intermixed_args`: первый "
"возвращает ``['2', '3']`` как неанализированные аргументы, а второй собирает "
"все позиции в ``rest``. ::"

#: ../../library/argparse.rst:2057
msgid ""
":meth:`~ArgumentParser.parse_known_intermixed_args` returns a two item tuple "
"containing the populated namespace and the list of remaining argument "
"strings. :meth:`~ArgumentParser.parse_intermixed_args` raises an error if "
"there are any remaining unparsed argument strings."
msgstr ""
":meth:`~ArgumentParser.parse_known_intermixed_args` возвращает кортеж из "
"двух элементов, содержащий заполненное пространство имен и список оставшихся "
"строк аргументов. :meth:`~ArgumentParser.parse_intermixed_args` выдает "
"ошибку, если остались непроанализированные строки аргументов."

#: ../../library/argparse.rst:2067
msgid "Upgrading optparse code"
msgstr "Обновление кода optparse"

#: ../../library/argparse.rst:2069
msgid ""
"Originally, the :mod:`argparse` module had attempted to maintain "
"compatibility with :mod:`optparse`.  However, :mod:`optparse` was difficult "
"to extend transparently, particularly with the changes required to support "
"the new ``nargs=`` specifiers and better usage messages.  When most "
"everything in :mod:`optparse` had either been copy-pasted over or monkey-"
"patched, it no longer seemed practical to try to maintain the backwards "
"compatibility."
msgstr ""
"Первоначально модуль :mod:`argparse` пытался поддерживать совместимость с :"
"mod:`optparse`. Однако :mod:`optparse` было трудно прозрачно расширить, "
"особенно с учетом изменений, необходимых для поддержки новых спецификаторов "
"nargs=`` и улучшенных сообщений об использовании. Когда большая часть всего "
"в :mod:`optparse` была либо скопирована, либо исправлена ​​обезьянами, попытки "
"поддерживать обратную совместимость уже не казались практичными."

#: ../../library/argparse.rst:2076
msgid ""
"The :mod:`argparse` module improves on the standard library :mod:`optparse` "
"module in a number of ways including:"
msgstr ""
"Модуль :mod:`argparse` улучшает модуль стандартной библиотеки :mod:"
"`optparse` во многих отношениях, включая:"

#: ../../library/argparse.rst:2079
msgid "Handling positional arguments."
msgstr "Обработка позиционных аргументов."

#: ../../library/argparse.rst:2080
msgid "Supporting sub-commands."
msgstr "Поддержка подкоманд."

#: ../../library/argparse.rst:2081
msgid "Allowing alternative option prefixes like ``+`` and ``/``."
msgstr "Разрешение альтернативных префиксов опций, таких как ``+`` и ``/``."

#: ../../library/argparse.rst:2082
msgid "Handling zero-or-more and one-or-more style arguments."
msgstr "Обработка аргументов стиля «ноль или более» и «один или более»."

#: ../../library/argparse.rst:2083
msgid "Producing more informative usage messages."
msgstr "Создание более информативных сообщений об использовании."

#: ../../library/argparse.rst:2084
msgid "Providing a much simpler interface for custom ``type`` and ``action``."
msgstr ""
"Предоставление гораздо более простого интерфейса для пользовательских типов "
"и действий."

#: ../../library/argparse.rst:2086
msgid "A partial upgrade path from :mod:`optparse` to :mod:`argparse`:"
msgstr "Частичный путь обновления с :mod:`optparse` до :mod:`argparse`:"

#: ../../library/argparse.rst:2088
msgid ""
"Replace all :meth:`optparse.OptionParser.add_option` calls with :meth:"
"`ArgumentParser.add_argument` calls."
msgstr ""
"Замените все вызовы :meth:`optparse.OptionParser.add_option` на вызовы :meth:"
"`ArgumentParser.add_argument`."

#: ../../library/argparse.rst:2091
msgid ""
"Replace ``(options, args) = parser.parse_args()`` with ``args = parser."
"parse_args()`` and add additional :meth:`ArgumentParser.add_argument` calls "
"for the positional arguments. Keep in mind that what was previously called "
"``options``, now in the :mod:`argparse` context is called ``args``."
msgstr ""
"Замените ``(options, args) = parser.parse_args()`` на ``args = parser."
"parse_args()`` и добавьте дополнительные вызовы :meth:`ArgumentParser."
"add_argument` для позиционных аргументов. Имейте в виду, что то, что раньше "
"называлось ``options``, теперь в контексте :mod:`argparse` называется "
"``args``."

#: ../../library/argparse.rst:2096
msgid ""
"Replace :meth:`optparse.OptionParser.disable_interspersed_args` by using :"
"meth:`~ArgumentParser.parse_intermixed_args` instead of :meth:"
"`~ArgumentParser.parse_args`."
msgstr ""
"Замените :meth:`optparse.OptionParser.disable_interspersed_args`, используя :"
"meth:`~ArgumentParser.parse_intermixed_args` вместо :meth:`~ArgumentParser."
"parse_args`."

#: ../../library/argparse.rst:2100
msgid ""
"Replace callback actions and the ``callback_*`` keyword arguments with "
"``type`` or ``action`` arguments."
msgstr ""
"Замените действия обратного вызова и аргументы ключевого слова "
"``callback_*`` на аргументы ``type`` или ``action``."

#: ../../library/argparse.rst:2103
msgid ""
"Replace string names for ``type`` keyword arguments with the corresponding "
"type objects (e.g. int, float, complex, etc)."
msgstr ""
"Замените имена строк для аргументов ключевого слова ``type`` "
"соответствующими объектами типа (например, int, float, complex и т. д.)."

#: ../../library/argparse.rst:2106
msgid ""
"Replace :class:`optparse.Values` with :class:`Namespace` and :exc:`optparse."
"OptionError` and :exc:`optparse.OptionValueError` with :exc:`ArgumentError`."
msgstr ""
"Замените :class:`optparse.Values` на :class:`Namespace` и :exc:`optparse."
"OptionError` и :exc:`optparse.OptionValueError` на :exc:`ArgumentError`."

#: ../../library/argparse.rst:2110
msgid ""
"Replace strings with implicit arguments such as ``%default`` or ``%prog`` "
"with the standard Python syntax to use dictionaries to format strings, that "
"is, ``%(default)s`` and ``%(prog)s``."
msgstr ""
"Замените строки неявными аргументами, такими как `` %д efault`` или `` %p "
"rog`` со стандартным синтаксисом Python для использования словарей для "
"форматирования строк, то есть `` %(по умолчанию)с `` и `` %(прог)с ``."

#: ../../library/argparse.rst:2114
msgid ""
"Replace the OptionParser constructor ``version`` argument with a call to "
"``parser.add_argument('--version', action='version', version='<the "
"version>')``."
msgstr ""
"Замените аргумент ``version`` конструктора OptionParser вызовом ``parser."
"add_argument('--version', action='version', version='<the version>')``."
