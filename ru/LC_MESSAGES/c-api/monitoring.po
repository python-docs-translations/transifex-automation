# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2024, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Roustam Khamidoulline, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-09-20 14:17+0000\n"
"PO-Revision-Date: 2024-05-11 01:07+0000\n"
"Last-Translator: Roustam Khamidoulline, 2024\n"
"Language-Team: Russian (https://app.transifex.com/python-doc/teams/5390/"
"ru/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ru\n"
"Plural-Forms: nplurals=4; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && "
"n%10<=4 && (n%100<12 || n%100>14) ? 1 : n%10==0 || (n%10>=5 && n%10<=9) || "
"(n%100>=11 && n%100<=14)? 2 : 3);\n"

#: ../../c-api/monitoring.rst:6
msgid "Monitoring C API"
msgstr "Мониторинг C API"

#: ../../c-api/monitoring.rst:8
msgid "Added in version 3.13."
msgstr "Добавлено в версии 3.13."

#: ../../c-api/monitoring.rst:10
msgid ""
"An extension may need to interact with the event monitoring system. "
"Subscribing to events and registering callbacks can be done via the Python "
"API exposed in :mod:`sys.monitoring`."
msgstr ""
"Расширению может потребоваться взаимодействие с системой мониторинга "
"событий. Подписку на события и регистрацию обратных вызовов можно выполнить "
"через API Python, представленный в :mod:`sys.monitoring`."

#: ../../c-api/monitoring.rst:15
msgid "Generating Execution Events"
msgstr "Генерация событий выполнения"

#: ../../c-api/monitoring.rst:17
msgid ""
"The functions below make it possible for an extension to fire monitoring "
"events as it emulates the execution of Python code. Each of these functions "
"accepts a ``PyMonitoringState`` struct which contains concise information "
"about the activation state of events, as well as the event arguments, which "
"include a ``PyObject*`` representing the code object, the instruction offset "
"and sometimes additional, event-specific arguments (see :mod:`sys."
"monitoring` for details about the signatures of the different event "
"callbacks). The ``codelike`` argument should be an instance of :class:`types."
"CodeType` or of a type that emulates it."
msgstr ""
"Приведенные ниже функции позволяют расширению запускать события мониторинга, "
"эмулируя выполнение кода Python. Каждая из этих функций принимает структуру "
"PyMonitoringState, которая содержит краткую информацию о состоянии активации "
"событий, а также аргументы событий, которые включают PyObject*, "
"представляющий объект кода, смещение инструкции и иногда дополнительные , "
"аргументы, специфичные для события (подробную информацию о сигнатурах "
"различных обратных вызовов событий см. в :mod:`sys.monitoring`). Аргумент "
"``codelike`` должен быть экземпляром :class:`types.CodeType` или типа, "
"который его имитирует."

#: ../../c-api/monitoring.rst:27
msgid ""
"The VM disables tracing when firing an event, so there is no need for user "
"code to do that."
msgstr ""
"Виртуальная машина отключает трассировку при запуске события, поэтому для "
"этого нет необходимости использовать пользовательский код."

#: ../../c-api/monitoring.rst:30
msgid ""
"Monitoring functions should not be called with an exception set, except "
"those listed below as working with the current exception."
msgstr ""
"Функции мониторинга не следует вызывать с набором исключений, за исключением "
"тех, которые перечислены ниже как работающие с текущим исключением."

#: ../../c-api/monitoring.rst:35
msgid ""
"Representation of the state of an event type. It is allocated by the user "
"while its contents are maintained by the monitoring API functions described "
"below."
msgstr ""
"Представление состояния типа события. Он выделяется пользователем, а его "
"содержимое поддерживается функциями API мониторинга, описанными ниже."

#: ../../c-api/monitoring.rst:39
msgid ""
"All of the functions below return 0 on success and -1 (with an exception "
"set) on error."
msgstr ""
"Все приведенные ниже функции возвращают 0 в случае успеха и -1 (с "
"установленным исключением) в случае ошибки."

#: ../../c-api/monitoring.rst:41
msgid "See :mod:`sys.monitoring` for descriptions of the events."
msgstr "См. :mod:`sys.monitoring` для описания событий."

#: ../../c-api/monitoring.rst:45
msgid "Fire a ``PY_START`` event."
msgstr "Вызовите событие ``PY_START``."

#: ../../c-api/monitoring.rst:50
msgid "Fire a ``PY_RESUME`` event."
msgstr "Вызовите событие PY_RESUME."

#: ../../c-api/monitoring.rst:55
msgid "Fire a ``PY_RETURN`` event."
msgstr "Вызовите событие PY_RETURN."

#: ../../c-api/monitoring.rst:60
msgid "Fire a ``PY_YIELD`` event."
msgstr "Запустите событие PY_YIELD."

#: ../../c-api/monitoring.rst:65
msgid "Fire a ``CALL`` event."
msgstr "Вызовите событие CALL."

#: ../../c-api/monitoring.rst:70
msgid "Fire a ``LINE`` event."
msgstr "Вызовите событие ``LINE``."

#: ../../c-api/monitoring.rst:75
msgid "Fire a ``JUMP`` event."
msgstr "Вызовите событие JUMP."

#: ../../c-api/monitoring.rst:80
msgid "Fire a ``BRANCH`` event."
msgstr "Вызовите событие BRANCH."

#: ../../c-api/monitoring.rst:85
msgid "Fire a ``C_RETURN`` event."
msgstr "Вызовите событие C_RETURN."

#: ../../c-api/monitoring.rst:90
msgid ""
"Fire a ``PY_THROW`` event with the current exception (as returned by :c:func:"
"`PyErr_GetRaisedException`)."
msgstr ""
"Вызовите событие PY_THROW с текущим исключением (возвращенным :c:func:"
"`PyErr_GetRaizedException`)."

#: ../../c-api/monitoring.rst:96
msgid ""
"Fire a ``RAISE`` event with the current exception (as returned by :c:func:"
"`PyErr_GetRaisedException`)."
msgstr ""
"Вызовите событие RAISE с текущим исключением (возвращенным :c:func:"
"`PyErr_GetRaizedException`)."

#: ../../c-api/monitoring.rst:102
msgid ""
"Fire a ``C_RAISE`` event with the current exception (as returned by :c:func:"
"`PyErr_GetRaisedException`)."
msgstr ""
"Вызовите событие C_RAISE с текущим исключением (возвращенным :c:func:"
"`PyErr_GetRaizedException`)."

#: ../../c-api/monitoring.rst:108
msgid ""
"Fire a ``RERAISE`` event with the current exception (as returned by :c:func:"
"`PyErr_GetRaisedException`)."
msgstr ""
"Вызовите событие RERAISE с текущим исключением (возвращенным :c:func:"
"`PyErr_GetRaizedException`)."

#: ../../c-api/monitoring.rst:114
msgid ""
"Fire an ``EXCEPTION_HANDLED`` event with the current exception (as returned "
"by :c:func:`PyErr_GetRaisedException`)."
msgstr ""
"Вызовите событие EXCEPTION_HANDLED с текущим исключением (возвращенным :c:"
"func:`PyErr_GetRaizedException`)."

#: ../../c-api/monitoring.rst:120
msgid ""
"Fire a ``PY_UNWIND`` event with the current exception (as returned by :c:"
"func:`PyErr_GetRaisedException`)."
msgstr ""
"Вызовите событие PY_UNWIND с текущим исключением (возвращенным :c:func:"
"`PyErr_GetRaizedException`)."

#: ../../c-api/monitoring.rst:126
msgid ""
"Fire a ``STOP_ITERATION`` event. If ``value`` is an instance of :exc:"
"`StopIteration`, it is used. Otherwise, a new :exc:`StopIteration` instance "
"is created with ``value`` as its argument."
msgstr ""
"Вызовите событие STOP_ITERATION. Если ``value`` является экземпляром :exc:"
"`StopIteration`, оно используется. В противном случае создается новый "
"экземпляр :exc:`StopIteration` с ``value`` в качестве аргумента."

#: ../../c-api/monitoring.rst:131
msgid "Managing the Monitoring State"
msgstr "Управление состоянием мониторинга"

#: ../../c-api/monitoring.rst:133
msgid ""
"Monitoring states can be managed with the help of monitoring scopes. A scope "
"would typically correspond to a python function."
msgstr ""
"Состояниями мониторинга можно управлять с помощью областей мониторинга. "
"Область обычно соответствует функции Python."
