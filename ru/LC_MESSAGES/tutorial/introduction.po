# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2023, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Kristina Mironova, 2019
# alex alev <alex.alev@bk.ru>, 2019
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-06-16 16:41+0000\n"
"PO-Revision-Date: 2019-09-01 02:41+0000\n"
"Last-Translator: alex alev <alex.alev@bk.ru>, 2019\n"
"Language-Team: Russian (https://app.transifex.com/python-doc/teams/5390/"
"ru/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ru\n"
"Plural-Forms: nplurals=4; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && "
"n%10<=4 && (n%100<12 || n%100>14) ? 1 : n%10==0 || (n%10>=5 && n%10<=9) || "
"(n%100>=11 && n%100<=14)? 2 : 3);\n"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/introduction.rst:5
msgid "An Informal Introduction to Python"
msgstr "Неофициальное знакомство с Python"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/introduction.rst:7
msgid ""
"In the following examples, input and output are distinguished by the "
"presence or absence of prompts (:term:`>>>` and :term:`...`): to repeat the "
"example, you must type everything after the prompt, when the prompt appears; "
"lines that do not begin with a prompt are output from the interpreter. Note "
"that a secondary prompt on a line by itself in an example means you must "
"type a blank line; this is used to end a multi-line command."
msgstr ""
"В следующих примерах, ввод и вывод будет отличаться появлением или "
"отсутствием приглашения  (:term:`>>>` and :term:`...`): чтобы повторить "
"пример, вы должны напечатать все, что следует после  приглашения, когда он "
"появляется; строки, которые не начинаются с приглашения, являются строками "
"вывода интерпретатора. Обратите внимание, что вторичное приглашение на "
"строке само по себе в примере означает, что вы должны сделать пропуск "
"строки; это используется в многострочных командах."

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/introduction.rst:16
msgid ""
"Many of the examples in this manual, even those entered at the interactive "
"prompt, include comments.  Comments in Python start with the hash character, "
"``#``, and extend to the end of the physical line.  A comment may appear at "
"the start of a line or following whitespace or code, but not within a string "
"literal.  A hash character within a string literal is just a hash character. "
"Since comments are to clarify code and are not interpreted by Python, they "
"may be omitted when typing in examples."
msgstr ""
"Многие примеры в этом руководстве, даже те, что введены в интерактивную "
"командную строку, включают комментарии. Комментарии в Python начинаются с "
"хеш символа ``#`` и распространяются на всю строку. Комментарий может "
"появиться в начале строки или после пробела или кода, но не внутри литерала "
"строки. Хеш символ внутри строкового литерала это всего лишь хеш символ. "
"Поскольку комментарии уточняют код и не интерпретируются Python, они могут "
"быть пропущены в примерах."

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/introduction.rst:24
msgid "Some examples::"
msgstr "Несколько примеров::"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/introduction.rst:35
msgid "Using Python as a Calculator"
msgstr "Использование Python как калькулятор"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/introduction.rst:37
msgid ""
"Let's try some simple Python commands.  Start the interpreter and wait for "
"the primary prompt, ``>>>``.  (It shouldn't take long.)"
msgstr ""
"Давайте попробуем несколько простых комманд Python. Запустите интерпретатор "
"и дождитесь первичного приглашения ``>>>``.  (Это не должно быть долго.)"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/introduction.rst:44
msgid "Numbers"
msgstr "Числа"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/introduction.rst:46
msgid ""
"The interpreter acts as a simple calculator: you can type an expression at "
"it and it will write the value.  Expression syntax is straightforward: the "
"operators ``+``, ``-``, ``*`` and ``/`` work just like in most other "
"languages (for example, Pascal or C); parentheses (``()``) can be used for "
"grouping. For example::"
msgstr ""
"Интерпретатор работает как простой калькулятор: вы можете ввести выражение в "
"нем и он напишет  значение. Синтаксис выражения прост: операторы ``+``, ``-"
"``, ``*`` и ``/`` работают как в большинстве других языков (например, "
"Паскаль или С); скобки (``()``) могут быть использованы для группировки. "
"Например:"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/introduction.rst:61
msgid ""
"The integer numbers (e.g. ``2``, ``4``, ``20``) have type :class:`int`, the "
"ones with a fractional part (e.g. ``5.0``, ``1.6``) have type :class:"
"`float`.  We will see more about numeric types later in the tutorial."
msgstr ""
"Целые числа (например ``2``, ``4``, ``20``) имеют тип :class:`int`, числа с "
"дробной частью (например ``5.0``, ``1.6``) имеют тип :class:`float`.  Позже "
"в учебники мы увидим больше о  числовых типах."

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/introduction.rst:65
msgid ""
"Division (``/``) always returns a float.  To do :term:`floor division` and "
"get an integer result (discarding any fractional result) you can use the ``//"
"`` operator; to calculate the remainder you can use ``%``::"
msgstr ""
"Деление (``/``) всегда возвращает число с плавающей точкой. Чтобы сделать :"
"term:`floor division` и получить целочисленный результат (отбрасывая любой "
"дробный результат) вы можете использовать оператор ``//``;  для расчета "
"остатка от деления вы можете использовать ``%``::"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/introduction.rst:79
msgid ""
"With Python, it is possible to use the ``**`` operator to calculate powers "
"[#]_::"
msgstr ""
"В Python возможно использовать оператор ``**`` для расчета степеней [#]_::"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/introduction.rst:86
msgid ""
"The equal sign (``=``) is used to assign a value to a variable. Afterwards, "
"no result is displayed before the next interactive prompt::"
msgstr ""
"Знак равенства (``=``) используется для присвоения значения переменной. "
"После этого, никакого результата не будет отображаться до следующего "
"приглашения интерактивной командной строки::"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/introduction.rst:94
msgid ""
"If a variable is not \"defined\" (assigned a value), trying to use it will "
"give you an error::"
msgstr ""
"Если переменная не \"определена\" (присвоено значение), попытка ее "
"использования приведет к ошибке::"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/introduction.rst:102
msgid ""
"There is full support for floating point; operators with mixed type operands "
"convert the integer operand to floating point::"
msgstr ""
"Числа с плавающей точкой полностью поддерживаются; операторы с операндами "
"смешанного типа конвертируют целочисленный операнд в число с плавающей "
"точкой::"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/introduction.rst:108
msgid ""
"In interactive mode, the last printed expression is assigned to the variable "
"``_``.  This means that when you are using Python as a desk calculator, it "
"is somewhat easier to continue calculations, for example::"
msgstr ""
"В интерактивном режиме, последнее отображенное выражение назначается "
"переменной ``_``. Это значит, что когда вы используете Python как настольный "
"калькулятор, несколько проще продолжать вычисления, например::"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/introduction.rst:121
msgid ""
"This variable should be treated as read-only by the user.  Don't explicitly "
"assign a value to it --- you would create an independent local variable with "
"the same name masking the built-in variable with its magic behavior."
msgstr ""
"Эта переменная должна рассматриваться пользователем только для чтения. Не "
"назначайте ей значения явно - вы создадите независимую локальную переменную "
"с таким же именем, маскируя встроенную переменную магическим способом."

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/introduction.rst:125
msgid ""
"In addition to :class:`int` and :class:`float`, Python supports other types "
"of numbers, such as :class:`~decimal.Decimal` and :class:`~fractions."
"Fraction`. Python also has built-in support for :ref:`complex numbers "
"<typesnumeric>`, and uses the ``j`` or ``J`` suffix to indicate the "
"imaginary part (e.g. ``3+5j``)."
msgstr ""
"В дополнение к  :class:`int` и :class:`float`, Python поддерживает другие "
"типы чисел, такие, как :class:`~decimal.Decimal` и :class:`~fractions."
"Fraction`. Python также имеет встроенную поддержку :ref:` комплексных чисел "
"<typesnumeric>`, и использует суффиксы ``j`` или ``J`` для отображения "
"мниных частей (например ``3+5j``)."

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/introduction.rst:135
msgid "Strings"
msgstr "Строки"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/introduction.rst:137
msgid ""
"Besides numbers, Python can also manipulate strings, which can be expressed "
"in several ways.  They can be enclosed in single quotes (``'...'``) or "
"double quotes (``\"...\"``) with the same result [#]_.  ``\\`` can be used "
"to escape quotes::"
msgstr ""
"Помимо чисел, Python также может работать со строками, которые могут быть "
"представлены несколькими способами. Они могут быть заключены в одинарные "
"кавычки (``'...'``) или двойные кавычки (``\"...\"``) с тем же результатом "
"[#]_. ``\\`` можно использовать для экранирования кавычек::"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/introduction.rst:155
msgid ""
"In the interactive interpreter, the output string is enclosed in quotes and "
"special characters are escaped with backslashes.  While this might sometimes "
"look different from the input (the enclosing quotes could change), the two "
"strings are equivalent.  The string is enclosed in double quotes if the "
"string contains a single quote and no double quotes, otherwise it is "
"enclosed in single quotes.  The :func:`print` function produces a more "
"readable output, by omitting the enclosing quotes and by printing escaped "
"and special characters::"
msgstr ""
"В интерактивном интерпретаторе строка вывода заключена в кавычки, а "
"специальные символы экранируются обратными косыми чертами. Хотя иногда это "
"может отличаться от ввода (заключительные кавычки могут меняться), две "
"строки эквивалентны. Строка заключена в двойные кавычки, если она содержит "
"одинарную кавычку и не содержит двойных кавычек, в противном случае она "
"заключена в одинарные кавычки. Функция: :func:`print` создает более читаемый "
"вывод, опуская заключительные кавычки и печатая экранированные и специальные "
"символы::"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/introduction.rst:175
msgid ""
"If you don't want characters prefaced by ``\\`` to be interpreted as special "
"characters, you can use *raw strings* by adding an ``r`` before the first "
"quote::"
msgstr ""
"Если вы не хотите символов с префиксом ``\\``, которые будут "
"интерпретированы как специальный символ, вы можете использовать *raw "
"strings* добавив ``r`` перед первой кавычкой::"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/introduction.rst:185
msgid ""
"String literals can span multiple lines.  One way is using triple-quotes: "
"``\"\"\"...\"\"\"`` or ``'''...'''``.  End of lines are automatically "
"included in the string, but it's possible to prevent this by adding a ``\\`` "
"at the end of the line.  The following example::"
msgstr ""
"Строковые литералы могут занимать несколько строк. Для этого используются "
"тройные кавычки: ``\"\"\"...\"\"\"`` или ``'''...'''``. Конец строк "
"автоматически включается в строку, но это можно предотвратить, добавив "
"``\\`` в конце строки. Следующий пример::"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/introduction.rst:196
msgid ""
"produces the following output (note that the initial newline is not "
"included):"
msgstr ""
"выдает следующий результат (обратите внимание, что начальные строки не "
"входят):"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/introduction.rst:204
msgid ""
"Strings can be concatenated (glued together) with the ``+`` operator, and "
"repeated with ``*``::"
msgstr ""
"Строки могут быть объединены (склеены) с оператором ``+`` и повторены с "
"помощью ``*``::"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/introduction.rst:211
msgid ""
"Two or more *string literals* (i.e. the ones enclosed between quotes) next "
"to each other are automatically concatenated. ::"
msgstr ""
"Два или более *строковых литералов* рядом друг с другом (т. е. те, которые "
"заключены между кавычками)  автоматически объединяются. ::"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/introduction.rst:217
msgid ""
"This feature is particularly useful when you want to break long strings::"
msgstr ""
"Эта возможность особенно полезна, когда вы хотите разбить длинную строку::"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/introduction.rst:224
msgid ""
"This only works with two literals though, not with variables or expressions::"
msgstr ""
"Это работает только со строковыми литералами, но не с переменными или "
"выражениями::"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/introduction.rst:238
msgid ""
"If you want to concatenate variables or a variable and a literal, use ``+``::"
msgstr ""
"Если вы хотите объединить переменные или переменную и литерал, используйте "
"``+``::"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/introduction.rst:243
msgid ""
"Strings can be *indexed* (subscripted), with the first character having "
"index 0. There is no separate character type; a character is simply a string "
"of size one::"
msgstr ""
"Строки могут быть * индексированы* (подписаны), причем первый символ имеет "
"индекс 0. Это не отдельный тип символа; символ - это просто строка размером "
"в единицу::"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/introduction.rst:253
msgid ""
"Indices may also be negative numbers, to start counting from the right::"
msgstr ""
"Индексы могут также иметь отрицательные значения и начинают отсчитываться "
"справа::"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/introduction.rst:262
msgid "Note that since -0 is the same as 0, negative indices start from -1."
msgstr ""
"Обратите внимание, что поскольку -0 равно 0, отрицательные индексы "
"начинаются с -1."

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/introduction.rst:264
msgid ""
"In addition to indexing, *slicing* is also supported.  While indexing is "
"used to obtain individual characters, *slicing* allows you to obtain "
"substring::"
msgstr ""
"В дополнению к индексированию, срезы также поддерживается. В то время как "
"индексирование используется для получения отдельных символов, срезы "
"ползволяют вам получить подстроку::"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/introduction.rst:272
msgid ""
"Note how the start is always included, and the end always excluded.  This "
"makes sure that ``s[:i] + s[i:]`` is always equal to ``s``::"
msgstr ""
"Обратите внимание, что начало всегда включено, а конец всегда исключен. Это "
"гарантирует, что ``s[:i] + s[i:]`` всегда равно ``s``::"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/introduction.rst:280
msgid ""
"Slice indices have useful defaults; an omitted first index defaults to zero, "
"an omitted second index defaults to the size of the string being sliced. ::"
msgstr ""
"Индексы среза имеют полезные значения по умолчанию; опущенный первый индекс "
"по умолчанию равен нулю, опущенный второй индекс по умолчанию равен размеру "
"срезаемой строки. ::"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/introduction.rst:290
msgid ""
"One way to remember how slices work is to think of the indices as pointing "
"*between* characters, with the left edge of the first character numbered 0. "
"Then the right edge of the last character of a string of *n* characters has "
"index *n*, for example::"
msgstr ""
"Один из способов запомнить как работают срезы - это думать о срезах, как об "
"указателе *между* символами, где левый край первого символа равен 0. Тогда "
"правый край последнего символа строки символов *n* имеет индекс *n*, "
"например::"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/introduction.rst:301
msgid ""
"The first row of numbers gives the position of the indices 0...6 in the "
"string; the second row gives the corresponding negative indices. The slice "
"from *i* to *j* consists of all characters between the edges labeled *i* and "
"*j*, respectively."
msgstr ""
"Первый ряд чисел обозначает положение индексов от 0...6 в строке; второй ряд "
"дает соответствующие отрицательные индексы. Срез от *i* до *j* содержит все "
"символы между краями помеченных  *i* и *j*, соответственно. "

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/introduction.rst:306
msgid ""
"For non-negative indices, the length of a slice is the difference of the "
"indices, if both are within bounds.  For example, the length of "
"``word[1:3]`` is 2."
msgstr ""
"Для неотрицательных индексов длина среза - это разность индексов, если оба "
"находятся в границах. Например, длина ``word[1:3]`` равна 2."

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/introduction.rst:310
msgid "Attempting to use an index that is too large will result in an error::"
msgstr ""
"Попытка использовать индекс, который является слишком большим, приведет к "
"ошибке::"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/introduction.rst:317
msgid ""
"However, out of range slice indexes are handled gracefully when used for "
"slicing::"
msgstr ""
"Однако, срез индексов вне диапазона изящно обрабатываетсяпри использовании::"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/introduction.rst:325
msgid ""
"Python strings cannot be changed --- they are :term:`immutable`. Therefore, "
"assigning to an indexed position in the string results in an error::"
msgstr ""
"Строки Python не могут быть изменены - они неизменяемы :term:`immutable`. "
"Таким образом, присвоение значения индексированному положению в строке "
"вызовет ошибку::"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/introduction.rst:337
msgid "If you need a different string, you should create a new one::"
msgstr "Если вам нужна другая строка, вам следует создать новую::"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/introduction.rst:344
msgid "The built-in function :func:`len` returns the length of a string::"
msgstr "Встроенная функция :func:`len` возвращает длину строки::"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/introduction.rst:355
msgid ":ref:`textseq`"
msgstr ":ref:`textseq`"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/introduction.rst:354
msgid ""
"Strings are examples of *sequence types*, and support the common operations "
"supported by such types."
msgstr ""
"Строки это пример типа последовательности и они поддерживают общие операции, "
"поддерживаемые для данного типа."

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/introduction.rst:359
msgid ":ref:`string-methods`"
msgstr ":ref:`string-methods`"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/introduction.rst:358
msgid ""
"Strings support a large number of methods for basic transformations and "
"searching."
msgstr ""
"Строки поддерживают большое количество методов для простых преобразований и "
"поиска."

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/introduction.rst:362
msgid ":ref:`f-strings`"
msgstr ":ref:`f-strings`"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/introduction.rst:362
msgid "String literals that have embedded expressions."
msgstr "Строковые литералы со встроенными выражениями."

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/introduction.rst:365
msgid ":ref:`formatstrings`"
msgstr ":ref:`formatstrings`"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/introduction.rst:365
msgid "Information about string formatting with :meth:`str.format`."
msgstr ""
"Информацию о форматировании строк с использованием метода :meth:`str.format`."

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/introduction.rst:368
msgid ":ref:`old-string-formatting`"
msgstr ":ref:`old-string-formatting`"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/introduction.rst:368
msgid ""
"The old formatting operations invoked when strings are the left operand of "
"the ``%`` operator are described in more detail here."
msgstr ""
"Старые операции форматирования, вызываемые, когда строки находятся слево от "
"операнда ``%``, описаны более подробно здесь."

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/introduction.rst:375
msgid "Lists"
msgstr "Списки"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/introduction.rst:377
msgid ""
"Python knows a number of *compound* data types, used to group together other "
"values.  The most versatile is the *list*, which can be written as a list of "
"comma-separated values (items) between square brackets.  Lists might contain "
"items of different types, but usually the items all have the same type. ::"
msgstr ""
"Python знает несколько *составных* типов данных, используемых, чтобы "
"сгруппировать другие значения. Самый универсальный это *список*, который "
"может быть записан как список разделенных запятой значений (элементов) в "
"квадратных скобках. Список может содержать в себе различные типы данных, но "
"обычно они имеют одинаковый тип.::"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/introduction.rst:386
msgid ""
"Like strings (and all other built-in :term:`sequence` types), lists can be "
"indexed and sliced::"
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/introduction.rst:396
msgid ""
"All slice operations return a new list containing the requested elements.  "
"This means that the following slice returns a new (shallow) copy of the "
"list::"
msgstr ""
"Все операции среза возвращают новый список, содержащий запрашиваемые "
"элементы. Это означает, что следующий срез вернет новую (уменьшенную) копию "
"списка.::"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/introduction.rst:402
msgid "Lists also support operations like concatenation::"
msgstr "Списки также поддерживают такие операции, как конкатенация::"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/introduction.rst:407
msgid ""
"Unlike strings, which are :term:`immutable`, lists are a :term:`mutable` "
"type, i.e. it is possible to change their content::"
msgstr ""
"В отличие от строк, которые являются неизменяемыми :term:`immutable`, списки "
"это изменяемый тип :term:`mutable`, это значит, что их содержимое можно "
"изменить.::"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/introduction.rst:417
msgid ""
"You can also add new items at the end of the list, by using the :meth:`~list."
"append` *method* (we will see more about methods later)::"
msgstr ""
"Вы можете также добавить новые элементы в конец списка, использую *метод* :"
"meth:`~list.append` (ты узнаем больше об этом методе позже)::"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/introduction.rst:425
msgid ""
"Assignment to slices is also possible, and this can even change the size of "
"the list or clear it entirely::"
msgstr ""
"Присвоение срезов также возможно, и это может как изменить размер списка, "
"так и полностью его очистить."

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/introduction.rst:444
msgid "The built-in function :func:`len` also applies to lists::"
msgstr "Встроенныя функция :func:`len` также применима к спискам::"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/introduction.rst:450
msgid ""
"It is possible to nest lists (create lists containing other lists), for "
"example::"
msgstr ""
"Можно создать вложенный список (создать список, содержащий другие списки), "
"например::"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/introduction.rst:466
msgid "First Steps Towards Programming"
msgstr "Первые шаги в программировании"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/introduction.rst:468
msgid ""
"Of course, we can use Python for more complicated tasks than adding two and "
"two together.  For instance, we can write an initial sub-sequence of the "
"`Fibonacci series <https://en.wikipedia.org/wiki/Fibonacci_number>`_ as "
"follows::"
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/introduction.rst:488
msgid "This example introduces several new features."
msgstr "Этот пример представляет несколько новых возможностей."

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/introduction.rst:490
msgid ""
"The first line contains a *multiple assignment*: the variables ``a`` and "
"``b`` simultaneously get the new values 0 and 1.  On the last line this is "
"used again, demonstrating that the expressions on the right-hand side are "
"all evaluated first before any of the assignments take place.  The right-"
"hand side expressions are evaluated  from the left to the right."
msgstr ""
"Первая строка содержит *множественное присваивание*: переменные ``a`` и "
"``b`` одновременно получают новые значения, 0 и 1.  На последней строке это "
"используется снова, демонстрируя, что выражения с правой стороны вычисляются "
"первыми, до того, как произойдет любое присваивание. Выражение с правой "
"стороны вычисляется слева направо."

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/introduction.rst:496
msgid ""
"The :keyword:`while` loop executes as long as the condition (here: ``a < "
"10``) remains true.  In Python, like in C, any non-zero integer value is "
"true; zero is false.  The condition may also be a string or list value, in "
"fact any sequence; anything with a non-zero length is true, empty sequences "
"are false.  The test used in the example is a simple comparison.  The "
"standard comparison operators are written the same as in C: ``<`` (less "
"than), ``>`` (greater than), ``==`` (equal to), ``<=`` (less than or equal "
"to), ``>=`` (greater than or equal to) and ``!=`` (not equal to)."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/introduction.rst:505
msgid ""
"The *body* of the loop is *indented*: indentation is Python's way of "
"grouping statements.  At the interactive prompt, you have to type a tab or "
"space(s) for each indented line.  In practice you will prepare more "
"complicated input for Python with a text editor; all decent text editors "
"have an auto-indent facility.  When a compound statement is entered "
"interactively, it must be followed by a blank line to indicate completion "
"(since the parser cannot guess when you have typed the last line).  Note "
"that each line within a basic block must be indented by the same amount."
msgstr ""
"*Тело* цикла  с *отступом*: Python использует отступы для группировки "
"выражений. В командной строке ввода вы должны ввести Таб или пробелы для "
"каждой строки с отступом. На практике вы будете подготавливать более сложный "
"ввод для Python с помощью текстового редактора; все приличные текстовые "
"редакторы имеет возможности автоматического отступа. Когда составной "
"оператор вводится интерактивно, за ним должна следовать пустая строка, чтобы "
"обозначить завершение (так как парсер не может знать когда вы напечатаете "
"последнюю строку). Обратите внимание, что каждая линия внутри основного "
"блока должна иметь одинаковый отступ."

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/introduction.rst:514
msgid ""
"The :func:`print` function writes the value of the argument(s) it is given. "
"It differs from just writing the expression you want to write (as we did "
"earlier in the calculator examples) in the way it handles multiple "
"arguments, floating point quantities, and strings.  Strings are printed "
"without quotes, and a space is inserted between items, so you can format "
"things nicely, like this::"
msgstr ""
"Функция :func:`print` выводит значения заданных аргументов. Она отличается "
"от того, что просто записывает выражения, которые вы хотите написать (как мы "
"делали раньше в примере с калькулятором) в том, как она обрабатывает "
"несколько аргументов, числа с плавающей точкой и строки. Строки выводятся "
"без кавычек, а также пробел между ними, так что вы можете отформатировать "
"строку подобно этой::"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/introduction.rst:525
msgid ""
"The keyword argument *end* can be used to avoid the newline after the "
"output, or end the output with a different string::"
msgstr ""
"Ключевой аргумент *end* может использоваться, чтобы избежать новой строки "
"после вывода, или закончить вывод другими строками::"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/introduction.rst:537
msgid "Footnotes"
msgstr "Сноски"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/introduction.rst:538
msgid ""
"Since ``**`` has higher precedence than ``-``, ``-3**2`` will be interpreted "
"as ``-(3**2)`` and thus result in ``-9``.  To avoid this and get ``9``, you "
"can use ``(-3)**2``."
msgstr ""
"Так как ``**`` имеет более высокий приоритет, чем ``-``, ``-3**2`` будет "
"интерпретировано как ``-(3**2)``  и даст результат ``-9``. Чтобы этого "
"избежать, и получить ``9``, вы можете использовать ``(-3)**2``."

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/introduction.rst:542
msgid ""
"Unlike other languages, special characters such as ``\\n`` have the same "
"meaning with both single (``'...'``) and double (``\"...\"``) quotes. The "
"only difference between the two is that within single quotes you don't need "
"to escape ``\"`` (but you have to escape ``\\'``) and vice versa."
msgstr ""
"В отличае от других языков, специальные символы как ``\\n`` имеют ожинаковое "
"значение как с одинарными (``'...'``), так и с двойными (``\"...\"``) "
"кавычками. Единственное отличие между ними - это то, что внутри одинарных "
"кавычек вам не нужно обходить ``\"`` (но вам нужно обходить ``\\'``) и "
"наоборот."
