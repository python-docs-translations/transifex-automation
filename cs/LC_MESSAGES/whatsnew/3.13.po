# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2024, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2024
# Jiri Daněk <j@dnk.cz>, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-07-26 14:15+0000\n"
"PO-Revision-Date: 2024-05-11 01:09+0000\n"
"Last-Translator: Jiri Daněk <j@dnk.cz>, 2024\n"
"Language-Team: Czech (https://app.transifex.com/python-doc/teams/5390/cs/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: cs\n"
"Plural-Forms: nplurals=4; plural=(n == 1 && n % 1 == 0) ? 0 : (n >= 2 && n "
"<= 4 && n % 1 == 0) ? 1: (n % 1 != 0 ) ? 2 : 3;\n"

#: ../../whatsnew/3.13.rst:4
msgid "What's New In Python 3.13"
msgstr ""

#: ../../whatsnew/3.13.rst:0
msgid "Editor"
msgstr ""

#: ../../whatsnew/3.13.rst:6
msgid "Thomas Wouters"
msgstr ""

#: ../../whatsnew/3.13.rst:48
msgid ""
"This article explains the new features in Python 3.13, compared to 3.12."
msgstr ""

#: ../../whatsnew/3.13.rst:50
msgid "For full details, see the :ref:`changelog <changelog>`."
msgstr "Všechny další detaily naleznete v :ref:`seznamu změn <changelog>`."

#: ../../whatsnew/3.13.rst:54
msgid ":pep:`719` -- Python 3.13 Release Schedule"
msgstr ""

#: ../../whatsnew/3.13.rst:58
msgid ""
"Prerelease users should be aware that this document is currently in draft "
"form. It will be updated substantially as Python 3.13 moves towards release, "
"so it's worth checking back even after reading earlier versions."
msgstr ""

#: ../../whatsnew/3.13.rst:64
msgid "Summary -- Release Highlights"
msgstr ""

#: ../../whatsnew/3.13.rst:69
msgid ""
"Python 3.13 beta is the pre-release of the next version of the Python "
"programming language, with a mix of changes to the language, the "
"implementation and the standard library. The biggest changes to the "
"implementation include a new interactive interpreter, and experimental "
"support for dropping the Global Interpreter Lock (:pep:`703`) and a Just-In-"
"Time compiler (:pep:`744`). The library changes contain removal of "
"deprecated APIs and modules, as well as the usual improvements in user-"
"friendliness and correctness."
msgstr ""

#: ../../whatsnew/3.13.rst:80
msgid "Interpreter improvements:"
msgstr ""

#: ../../whatsnew/3.13.rst:82
msgid ""
"A greatly improved :ref:`interactive interpreter <whatsnew313-better-"
"interactive-interpreter>` and :ref:`improved error messages <whatsnew313-"
"improved-error-messages>`."
msgstr ""

#: ../../whatsnew/3.13.rst:86
msgid ""
"Color support in the new :ref:`interactive interpreter <whatsnew313-better-"
"interactive-interpreter>`, as well as in :ref:`tracebacks <whatsnew313-"
"improved-error-messages>` and :ref:`doctest <whatsnew313-doctest>` output. "
"This can be disabled through the :envvar:`PYTHON_COLORS` and |NO_COLOR|_ "
"environment variables."
msgstr ""

#: ../../whatsnew/3.13.rst:92
msgid ""
":pep:`744`: A basic :ref:`JIT compiler <whatsnew313-jit-compiler>` was "
"added. It is currently disabled by default (though we may turn it on later). "
"Performance improvements are modest -- we expect to be improving this over "
"the next few releases."
msgstr ""

#: ../../whatsnew/3.13.rst:97
msgid ""
":pep:`667`: The :func:`locals` builtin now has :ref:`defined semantics "
"<whatsnew313-locals-semantics>` when mutating the returned mapping. Python "
"debuggers and similar tools may now more reliably update local variables in "
"optimized scopes even during concurrent code execution."
msgstr ""

#: ../../whatsnew/3.13.rst:103
msgid "New typing features:"
msgstr ""

#: ../../whatsnew/3.13.rst:105
msgid ""
":pep:`696`: Type parameters (:data:`typing.TypeVar`, :data:`typing."
"ParamSpec`, and :data:`typing.TypeVarTuple`) now support defaults."
msgstr ""

#: ../../whatsnew/3.13.rst:108
msgid ""
":pep:`702`: Support for marking deprecations in the type system using the "
"new :func:`warnings.deprecated` decorator."
msgstr ""

#: ../../whatsnew/3.13.rst:111
msgid ""
":pep:`742`: :data:`typing.TypeIs` was added, providing more intuitive type "
"narrowing behavior."
msgstr ""

#: ../../whatsnew/3.13.rst:114
msgid ""
":pep:`705`: :data:`typing.ReadOnly` was added, to mark an item of a :class:"
"`typing.TypedDict` as read-only for type checkers."
msgstr ""

#: ../../whatsnew/3.13.rst:117
msgid "Free-threading:"
msgstr ""

#: ../../whatsnew/3.13.rst:119
msgid ""
":pep:`703`: CPython 3.13 has experimental support for running with the :term:"
"`global interpreter lock` disabled when built with ``--disable-gil``. See :"
"ref:`Free-threaded CPython <free-threaded-cpython>` for more details."
msgstr ""

#: ../../whatsnew/3.13.rst:123
msgid "Platform support:"
msgstr ""

#: ../../whatsnew/3.13.rst:125
msgid ""
":pep:`730`: Apple's iOS is now an officially supported platform. Official "
"Android support (:pep:`738`) is in the works as well."
msgstr ""

#: ../../whatsnew/3.13.rst:128
msgid "Removed modules:"
msgstr ""

#: ../../whatsnew/3.13.rst:130
msgid ""
":ref:`PEP 594 <whatsnew313-pep594>`: The remaining 19 \"dead batteries\" "
"have been removed from the standard library: :mod:`!aifc`, :mod:`!audioop`, :"
"mod:`!cgi`, :mod:`!cgitb`, :mod:`!chunk`, :mod:`!crypt`, :mod:`!imghdr`, :"
"mod:`!mailcap`, :mod:`!msilib`, :mod:`!nis`, :mod:`!nntplib`, :mod:`!"
"ossaudiodev`, :mod:`!pipes`, :mod:`!sndhdr`, :mod:`!spwd`, :mod:`!sunau`, :"
"mod:`!telnetlib`, :mod:`!uu` and :mod:`!xdrlib`."
msgstr ""

#: ../../whatsnew/3.13.rst:137
msgid ""
"Also removed were the :mod:`!tkinter.tix` and :mod:`!lib2to3` modules, and "
"the ``2to3`` program."
msgstr ""

#: ../../whatsnew/3.13.rst:140
msgid "Release schedule changes:"
msgstr ""

#: ../../whatsnew/3.13.rst:142
msgid ":pep:`602` (\"Annual Release Cycle for Python\") has been updated:"
msgstr ""

#: ../../whatsnew/3.13.rst:144
msgid ""
"Python 3.9 - 3.12 have one and a half years of full support, followed by "
"three and a half years of security fixes."
msgstr ""

#: ../../whatsnew/3.13.rst:146
msgid ""
"Python 3.13 and later have two years of full support, followed by three "
"years of security fixes."
msgstr ""

#: ../../whatsnew/3.13.rst:150 ../../whatsnew/3.13.rst:1648
msgid "New Features"
msgstr "Nová funkcionalita"

#: ../../whatsnew/3.13.rst:155
msgid "A Better Interactive Interpreter"
msgstr ""

#: ../../whatsnew/3.13.rst:157
msgid ""
"On Unix-like systems like Linux or macOS as well as Windows, Python now uses "
"a new :term:`interactive` shell. When the user starts the :term:`REPL` from "
"an interactive terminal the interactive shell now supports the following new "
"features:"
msgstr ""

#: ../../whatsnew/3.13.rst:162
msgid "Colorized prompts."
msgstr ""

#: ../../whatsnew/3.13.rst:163
msgid "Multiline editing with history preservation."
msgstr ""

#: ../../whatsnew/3.13.rst:164
msgid ""
"Interactive help browsing using :kbd:`F1` with a separate command history."
msgstr ""

#: ../../whatsnew/3.13.rst:166
msgid ""
"History browsing using :kbd:`F2` that skips output as well as the :term:"
"`>>>` and :term:`...` prompts."
msgstr ""

#: ../../whatsnew/3.13.rst:168
msgid ""
"\"Paste mode\" with :kbd:`F3` that makes pasting larger blocks of code "
"easier (press :kbd:`F3` again to return to the regular prompt)."
msgstr ""

#: ../../whatsnew/3.13.rst:170
msgid ""
"The ability to issue REPL-specific commands like :kbd:`help`, :kbd:`exit`, "
"and :kbd:`quit` without the need to use call parentheses after the command "
"name."
msgstr ""

#: ../../whatsnew/3.13.rst:174
msgid ""
"If the new interactive shell is not desired, it can be disabled via the :"
"envvar:`PYTHON_BASIC_REPL` environment variable."
msgstr ""

#: ../../whatsnew/3.13.rst:177
msgid "The new shell requires :mod:`curses` on Unix-like systems."
msgstr ""

#: ../../whatsnew/3.13.rst:179
msgid "For more on interactive mode, see :ref:`tut-interac`."
msgstr ""

#: ../../whatsnew/3.13.rst:181
msgid ""
"(Contributed by Pablo Galindo Salgado, Łukasz Langa, and Lysandros Nikolaou "
"in :gh:`111201` based on code from the PyPy project. Windows support "
"contributed by Dino Viehland and Anthony Shaw.)"
msgstr ""

#: ../../whatsnew/3.13.rst:188
msgid "Improved Error Messages"
msgstr ""

#: ../../whatsnew/3.13.rst:190
msgid ""
"The interpreter now colorizes error messages when displaying tracebacks by "
"default. This feature can be controlled via the new :envvar:`PYTHON_COLORS` "
"environment variable as well as the canonical |NO_COLOR|_ and |FORCE_COLOR|_ "
"environment variables. See also :ref:`using-on-controlling-color`. "
"(Contributed by Pablo Galindo Salgado in :gh:`112730`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:204
msgid ""
"A common mistake is to write a script with the same name as a standard "
"library module. When this results in errors, we now display a more helpful "
"error message:"
msgstr ""

#: ../../whatsnew/3.13.rst:220
msgid ""
"Similarly, if a script has the same name as a third-party module it attempts "
"to import, and this results in errors, we also display a more helpful error "
"message:"
msgstr ""

#: ../../whatsnew/3.13.rst:236
msgid "(Contributed by Shantanu Jain in :gh:`95754`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:238
msgid ""
"When an incorrect keyword argument is passed to a function, the error "
"message now potentially suggests the correct keyword argument. (Contributed "
"by Pablo Galindo Salgado and Shantanu Jain in :gh:`107944`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:249
msgid ""
"Classes have a new :attr:`~class.__static_attributes__` attribute, populated "
"by the compiler, with a tuple of names of attributes of this class which are "
"accessed through ``self.X`` from any function in its body. (Contributed by "
"Irit Katriel in :gh:`115775`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:257
msgid "Defined mutation semantics for ``locals()``"
msgstr ""

#: ../../whatsnew/3.13.rst:259
msgid ""
"Historically, the expected result of mutating the return value of :func:"
"`locals` has been left to individual Python implementations to define."
msgstr ""

#: ../../whatsnew/3.13.rst:262
msgid ""
"Through :pep:`667`, Python 3.13 standardises the historical behaviour of "
"CPython for most code execution scopes, but changes :term:`optimized scopes "
"<optimized scope>` (functions, generators, coroutines, comprehensions, and "
"generator expressions) to explicitly return independent snapshots of the "
"currently assigned local variables, including locally referenced nonlocal "
"variables captured in closures."
msgstr ""

#: ../../whatsnew/3.13.rst:269
msgid ""
"This change to the semantics of :func:`locals` in optimized scopes also "
"affects the default behaviour of code execution functions that implicitly "
"target ``locals()`` if no explicit namespace is provided (such as :func:"
"`exec` and :func:`eval`). In previous versions, whether or not changes could "
"be accessed by calling ``locals()`` after calling the code execution "
"function was implementation dependent. In CPython specifically, such code "
"would typically appear to work as desired, but could sometimes fail in "
"optimized scopes based on other code (including debuggers and code execution "
"tracing tools) potentially resetting the shared snapshot in that scope. Now, "
"the code will always run against an independent snapshot of the local "
"variables in optimized scopes, and hence the changes will never be visible "
"in subsequent calls to ``locals()``. To access the changes made in these "
"cases, an explicit namespace reference must now be passed to the relevant "
"function. Alternatively, it may make sense to update affected code to use a "
"higher level code execution API that returns the resulting code execution "
"namespace (e.g. :func:`runpy.run_path` when executing Python files from "
"disk)."
msgstr ""

#: ../../whatsnew/3.13.rst:284
msgid ""
"To ensure debuggers and similar tools can reliably update local variables in "
"scopes affected by this change, :attr:`FrameType.f_locals <frame.f_locals>` "
"now returns a write-through proxy to the frame's local and locally "
"referenced nonlocal variables in these scopes, rather than returning an "
"inconsistently updated shared  ``dict`` instance with undefined runtime "
"semantics."
msgstr ""

#: ../../whatsnew/3.13.rst:290
msgid ""
"See :pep:`667` for more details, including related C API changes and "
"deprecations. Porting notes are also provided below for the affected :ref:"
"`Python APIs <pep667-porting-notes-py>` and :ref:`C APIs <pep667-porting-"
"notes-c>`."
msgstr ""

#: ../../whatsnew/3.13.rst:294
msgid ""
"(PEP and implementation contributed by Mark Shannon and Tian Gao in :gh:"
"`74929`. Documentation updates provided by Guido van Rossum and Alyssa "
"Coghlan.)"
msgstr ""

#: ../../whatsnew/3.13.rst:299
msgid "Incremental Garbage Collection"
msgstr ""

#: ../../whatsnew/3.13.rst:301
msgid ""
"The cycle garbage collector is now incremental. This means that maximum "
"pause times are reduced by an order of magnitude or more for larger heaps."
msgstr ""

#: ../../whatsnew/3.13.rst:306
msgid "Support For Mobile Platforms"
msgstr ""

#: ../../whatsnew/3.13.rst:308
msgid ""
"iOS is now a :pep:`11` supported platform. ``arm64-apple-ios`` (iPhone and "
"iPad devices released after 2013) and ``arm64-apple-ios-simulator`` (Xcode "
"iOS simulator running on Apple Silicon hardware) are now tier 3 platforms."
msgstr ""

#: ../../whatsnew/3.13.rst:313
msgid ""
"``x86_64-apple-ios-simulator`` (Xcode iOS simulator running on older x86_64 "
"hardware) is not a tier 3 supported platform, but will be supported on a "
"best-effort basis."
msgstr ""

#: ../../whatsnew/3.13.rst:317
msgid "See :pep:`730`: for more details."
msgstr ""

#: ../../whatsnew/3.13.rst:319
msgid ""
"(PEP written and implementation contributed by Russell Keith-Magee in :gh:"
"`114099`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:325
msgid "Experimental JIT Compiler"
msgstr ""

#: ../../whatsnew/3.13.rst:327
msgid ""
"When CPython is configured using the ``--enable-experimental-jit`` option, a "
"just-in-time compiler is added which may speed up some Python programs."
msgstr ""

#: ../../whatsnew/3.13.rst:330
msgid "The internal architecture is roughly as follows."
msgstr ""

#: ../../whatsnew/3.13.rst:332
msgid ""
"We start with specialized *Tier 1 bytecode*. See :ref:`What's new in 3.11 "
"<whatsnew311-pep659>` for details."
msgstr ""

#: ../../whatsnew/3.13.rst:335
msgid ""
"When the Tier 1 bytecode gets hot enough, it gets translated to a new, "
"purely internal *Tier 2 IR*, a.k.a. micro-ops (\"uops\")."
msgstr ""

#: ../../whatsnew/3.13.rst:338
msgid ""
"The Tier 2 IR uses the same stack-based VM as Tier 1, but the instruction "
"format is better suited to translation to machine code."
msgstr ""

#: ../../whatsnew/3.13.rst:341
msgid ""
"We have several optimization passes for Tier 2 IR, which are applied before "
"it is interpreted or translated to machine code."
msgstr ""

#: ../../whatsnew/3.13.rst:344
msgid ""
"There is a Tier 2 interpreter, but it is mostly intended for debugging the "
"earlier stages of the optimization pipeline. The Tier 2 interpreter can be "
"enabled by configuring Python with ``--enable-experimental-jit=interpreter``."
msgstr ""

#: ../../whatsnew/3.13.rst:349
msgid ""
"When the JIT is enabled, the optimized Tier 2 IR is translated to machine "
"code, which is then executed."
msgstr ""

#: ../../whatsnew/3.13.rst:352
msgid ""
"The machine code translation process uses a technique called *copy-and-"
"patch*. It has no runtime dependencies, but there is a new build-time "
"dependency on LLVM."
msgstr ""

#: ../../whatsnew/3.13.rst:356
msgid ""
"The ``--enable-experimental-jit`` flag has the following optional values:"
msgstr ""

#: ../../whatsnew/3.13.rst:358
msgid "``no`` (default) -- Disable the entire Tier 2 and JIT pipeline."
msgstr ""

#: ../../whatsnew/3.13.rst:360
msgid ""
"``yes`` (default if the flag is present without optional value) -- Enable "
"the JIT. To disable the JIT at runtime, pass the environment variable "
"``PYTHON_JIT=0``."
msgstr ""

#: ../../whatsnew/3.13.rst:364
msgid ""
"``yes-off`` -- Build the JIT but disable it by default. To enable the JIT at "
"runtime, pass the environment variable ``PYTHON_JIT=1``."
msgstr ""

#: ../../whatsnew/3.13.rst:368
msgid ""
"``interpreter`` -- Enable the Tier 2 interpreter but disable the JIT. The "
"interpreter can be disabled by running with ``PYTHON_JIT=0``."
msgstr ""

#: ../../whatsnew/3.13.rst:372
msgid ""
"(On Windows, use ``PCbuild/build.bat --experimental-jit`` to enable the JIT "
"or ``--experimental-jit-interpreter`` to enable the Tier 2 interpreter.)"
msgstr ""

#: ../../whatsnew/3.13.rst:375
msgid "See :pep:`744` for more details."
msgstr ""

#: ../../whatsnew/3.13.rst:377
msgid ""
"(JIT by Brandt Bucher, inspired by a paper by Haoran Xu and Fredrik "
"Kjolstad. Tier 2 IR by Mark Shannon and Guido van Rossum. Tier 2 optimizer "
"by Ken Jin.)"
msgstr ""

#: ../../whatsnew/3.13.rst:384
msgid "Free-threaded CPython"
msgstr ""

#: ../../whatsnew/3.13.rst:386
msgid ""
"CPython will run with the :term:`global interpreter lock` (GIL) disabled "
"when configured using the ``--disable-gil`` option at build time. This is an "
"experimental feature and therefore isn't used by default. Users need to "
"either compile their own interpreter, or install one of the experimental "
"builds that are marked as *free-threaded*. See :pep:`703` \"Making the "
"Global Interpreter Lock Optional in CPython\" for more detail."
msgstr ""

#: ../../whatsnew/3.13.rst:393
msgid ""
"Free-threaded execution allows for full utilization of the available "
"processing power by running threads in parallel on available CPU cores. "
"While not all software will benefit from this automatically, programs "
"designed with threading in mind will run faster on multicore hardware."
msgstr ""

#: ../../whatsnew/3.13.rst:398
msgid ""
"Work is still ongoing: expect some bugs and a substantial single-threaded "
"performance hit."
msgstr ""

#: ../../whatsnew/3.13.rst:401
msgid ""
"The free-threaded build still supports optionally running with the GIL "
"enabled at runtime using the environment variable :envvar:`PYTHON_GIL` or "
"the command line option :option:`-X gil`."
msgstr ""

#: ../../whatsnew/3.13.rst:405
msgid ""
"To check if the current interpreter is configured with ``--disable-gil``, "
"use ``sysconfig.get_config_var(\"Py_GIL_DISABLED\")``. To check if the :term:"
"`GIL` is actually disabled in the running process, the :func:`!sys."
"_is_gil_enabled` function can be used."
msgstr ""

#: ../../whatsnew/3.13.rst:410
msgid ""
"C-API extension modules need to be built specifically for the free-threaded "
"build. Extensions that support running with the :term:`GIL` disabled should "
"use the :c:data:`Py_mod_gil` slot. Extensions using single-phase init should "
"use :c:func:`PyUnstable_Module_SetGIL` to indicate whether they support "
"running with the GIL disabled. Importing C extensions that don't use these "
"mechanisms will cause the GIL to be enabled, unless the GIL was explicitly "
"disabled with the :envvar:`PYTHON_GIL` environment variable or the :option:`-"
"X gil=0` option."
msgstr ""

#: ../../whatsnew/3.13.rst:419
msgid ""
"pip 24.1b1 or newer is required to install packages with C extensions in the "
"free-threaded build."
msgstr ""

#: ../../whatsnew/3.13.rst:423
msgid "Other Language Changes"
msgstr "Ostatní změny v jazyku"

#: ../../whatsnew/3.13.rst:425
msgid ""
"The :func:`exec` and :func:`eval` built-ins now accept their ``globals`` and "
"``locals`` namespace arguments as keywords. (Contributed by Raphael "
"Gaschignard in :gh:`105879`)"
msgstr ""

#: ../../whatsnew/3.13.rst:429
msgid ""
"Allow the *count* argument of :meth:`str.replace` to be a keyword. "
"(Contributed by Hugo van Kemenade in :gh:`106487`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:432
msgid ""
"Compiler now strip indents from docstrings. This will reduce the size of :"
"term:`bytecode cache <bytecode>` (e.g. ``.pyc`` file). For example, cache "
"file size for ``sqlalchemy.orm.session`` in SQLAlchemy 2.0 is reduced by "
"about 5%. This change will affect tools using docstrings, like :mod:"
"`doctest`. (Contributed by Inada Naoki in :gh:`81283`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:439
msgid ""
"The :func:`compile` built-in can now accept a new flag, ``ast."
"PyCF_OPTIMIZED_AST``, which is similar to ``ast.PyCF_ONLY_AST`` except that "
"the returned ``AST`` is optimized according to the value of the ``optimize`` "
"argument. (Contributed by Irit Katriel in :gh:`108113`)."
msgstr ""

#: ../../whatsnew/3.13.rst:445
msgid ""
":mod:`multiprocessing`, :mod:`concurrent.futures`, :mod:`compileall`: "
"Replace :func:`os.cpu_count` with :func:`os.process_cpu_count` to select the "
"default number of worker threads and processes. Get the CPU affinity if "
"supported. (Contributed by Victor Stinner in :gh:`109649`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:451
msgid ""
":func:`os.path.realpath` now resolves MS-DOS style file names even if the "
"file is not accessible. (Contributed by Moonsik Park in :gh:`82367`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:455
msgid ""
"Fixed a bug where a :keyword:`global` declaration in an :keyword:`except` "
"block is rejected when the global is used in the :keyword:`else` block. "
"(Contributed by Irit Katriel in :gh:`111123`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:459
msgid ""
"Many functions now emit a warning if a boolean value is passed as a file "
"descriptor argument. This can help catch some errors earlier. (Contributed "
"by Serhiy Storchaka in :gh:`82626`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:464
msgid ""
"Added a new environment variable :envvar:`PYTHON_FROZEN_MODULES`. It "
"determines whether or not frozen modules are ignored by the import "
"machinery, equivalent of the :option:`-X frozen_modules <-X>` command-line "
"option. (Contributed by Yilei Yang in :gh:`111374`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:469
msgid ""
"Add :ref:`support for the perf profiler <perf_profiling>` working without "
"frame pointers through the new environment variable :envvar:"
"`PYTHON_PERF_JIT_SUPPORT` and command-line option :option:`-X perf_jit <-X>` "
"(Contributed by Pablo Galindo in :gh:`118518`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:474
msgid ""
"The new :envvar:`PYTHON_HISTORY` environment variable can be used to change "
"the location of a ``.python_history`` file. (Contributed by Levi Sabah, "
"Zackery Spytz and Hugo van Kemenade in :gh:`73965`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:479
msgid ""
"Add :exc:`PythonFinalizationError` exception. This exception derived from :"
"exc:`RuntimeError` is raised when an operation is blocked during the :term:"
"`Python finalization <interpreter shutdown>`."
msgstr ""

#: ../../whatsnew/3.13.rst:483
msgid ""
"The following functions now raise PythonFinalizationError, instead of :exc:"
"`RuntimeError`:"
msgstr ""

#: ../../whatsnew/3.13.rst:486
msgid ":func:`_thread.start_new_thread`."
msgstr ""

#: ../../whatsnew/3.13.rst:487
msgid ":class:`subprocess.Popen`."
msgstr ""

#: ../../whatsnew/3.13.rst:488
msgid ":func:`os.fork`."
msgstr ""

#: ../../whatsnew/3.13.rst:489
msgid ":func:`os.forkpty`."
msgstr ""

#: ../../whatsnew/3.13.rst:491
msgid "(Contributed by Victor Stinner in :gh:`114570`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:493
msgid ""
"Added :attr:`!name` and :attr:`!mode` attributes for compressed and archived "
"file-like objects in modules :mod:`bz2`, :mod:`lzma`, :mod:`tarfile` and :"
"mod:`zipfile`. (Contributed by Serhiy Storchaka in :gh:`115961`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:498
msgid ""
"Allow controlling Expat >=2.6.0 reparse deferral (:cve:`2023-52425`) by "
"adding five new methods:"
msgstr ""

#: ../../whatsnew/3.13.rst:501
msgid ":meth:`xml.etree.ElementTree.XMLParser.flush`"
msgstr ""

#: ../../whatsnew/3.13.rst:502
msgid ":meth:`xml.etree.ElementTree.XMLPullParser.flush`"
msgstr ""

#: ../../whatsnew/3.13.rst:503
msgid ":meth:`xml.parsers.expat.xmlparser.GetReparseDeferralEnabled`"
msgstr ""

#: ../../whatsnew/3.13.rst:504
msgid ":meth:`xml.parsers.expat.xmlparser.SetReparseDeferralEnabled`"
msgstr ""

#: ../../whatsnew/3.13.rst:505
msgid ":meth:`!xml.sax.expatreader.ExpatParser.flush`"
msgstr ""

#: ../../whatsnew/3.13.rst:507
msgid "(Contributed by Sebastian Pipping in :gh:`115623`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:509
msgid ""
"The :func:`ssl.create_default_context` API now includes :data:`ssl."
"VERIFY_X509_PARTIAL_CHAIN` and :data:`ssl.VERIFY_X509_STRICT` in its default "
"flags."
msgstr ""

#: ../../whatsnew/3.13.rst:515
msgid ""
":data:`ssl.VERIFY_X509_STRICT` may reject pre-:rfc:`5280` or malformed "
"certificates that the underlying OpenSSL implementation otherwise would "
"accept. While disabling this is not recommended, you can do so using::"
msgstr ""

#: ../../whatsnew/3.13.rst:522
msgid "(Contributed by William Woodruff in :gh:`112389`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:524
msgid ""
"The :class:`configparser.ConfigParser` now accepts unnamed sections before "
"named ones if configured to do so. (Contributed by Pedro Sousa Lacerda in :"
"gh:`66449`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:528
msgid ""
":ref:`annotation scope <annotation-scopes>` within class scopes can now "
"contain lambdas and comprehensions. Comprehensions that are located within "
"class scopes are not inlined into their parent scope. (Contributed by Jelle "
"Zijlstra in :gh:`109118` and :gh:`118160`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:533
msgid ""
"Classes have a new :attr:`!__firstlineno__` attribute, populated by the "
"compiler, with the line number of the first line of the class definition. "
"(Contributed by Serhiy Storchaka in :gh:`118465`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:538
msgid ""
"``from __future__ import ...`` statements are now just normal relative "
"imports if dots are present before the module name. (Contributed by Jeremiah "
"Gabriel Pascual in :gh:`118216`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:544
msgid "New Modules"
msgstr "Nové moduly"

#: ../../whatsnew/3.13.rst:546
msgid "None."
msgstr ""

#: ../../whatsnew/3.13.rst:550
msgid "Improved Modules"
msgstr "Vylepšené moduly"

#: ../../whatsnew/3.13.rst:553
msgid "argparse"
msgstr ""

#: ../../whatsnew/3.13.rst:555
msgid ""
"Add parameter *deprecated* in methods :meth:`~argparse.ArgumentParser."
"add_argument` and :meth:`!add_parser` which allows to deprecate command-line "
"options, positional arguments and subcommands. (Contributed by Serhiy "
"Storchaka in :gh:`83648`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:562
msgid "array"
msgstr ""

#: ../../whatsnew/3.13.rst:564
msgid ""
"Add ``'w'`` type code (``Py_UCS4``) that can be used for Unicode strings. It "
"can be used instead of ``'u'`` type code, which is deprecated. (Contributed "
"by Inada Naoki in :gh:`80480`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:568
msgid ""
"Add ``clear()`` method in order to implement ``MutableSequence``. "
"(Contributed by Mike Zimin in :gh:`114894`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:572
msgid "ast"
msgstr "ast"

#: ../../whatsnew/3.13.rst:574
msgid ""
"The constructors of node types in the :mod:`ast` module are now stricter in "
"the arguments they accept, and have more intuitive behaviour when arguments "
"are omitted."
msgstr ""

#: ../../whatsnew/3.13.rst:578
msgid ""
"If an optional field on an AST node is not included as an argument when "
"constructing an instance, the field will now be set to ``None``. Similarly, "
"if a list field is omitted, that field will now be set to an empty list, and "
"if a :class:`!ast.expr_context` field is omitted, it defaults to :class:"
"`Load() <ast.Load>`. (Previously, in all cases, the attribute would be "
"missing on the newly constructed AST node instance.)"
msgstr ""

#: ../../whatsnew/3.13.rst:586
msgid ""
"If other arguments are omitted, a :exc:`DeprecationWarning` is emitted. This "
"will cause an exception in Python 3.15. Similarly, passing a keyword "
"argument that does not map to a field on the AST node is now deprecated, and "
"will raise an exception in Python 3.15."
msgstr ""

#: ../../whatsnew/3.13.rst:591
msgid ""
"These changes do not apply to user-defined subclasses of :class:`ast.AST`, "
"unless the class opts in to the new behavior by setting the attribute :attr:"
"`ast.AST._field_types`."
msgstr ""

#: ../../whatsnew/3.13.rst:595
msgid ""
"(Contributed by Jelle Zijlstra in :gh:`105858`, :gh:`117486`, and :gh:"
"`118851`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:597
msgid ""
":func:`ast.parse` now accepts an optional argument *optimize* which is "
"passed on to the :func:`compile` built-in. This makes it possible to obtain "
"an optimized AST. (Contributed by Irit Katriel in :gh:`108113`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:603
msgid "asyncio"
msgstr "asyncio"

#: ../../whatsnew/3.13.rst:605
msgid ""
":meth:`asyncio.loop.create_unix_server` will now automatically remove the "
"Unix socket when the server is closed. (Contributed by Pierre Ossman in :gh:"
"`111246`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:609
msgid ""
":meth:`asyncio.DatagramTransport.sendto` will now send zero-length datagrams "
"if called with an empty bytes object. The transport flow control also now "
"accounts for the datagram header when calculating the buffer size. "
"(Contributed by Jamie Phan in :gh:`115199`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:615
msgid ""
"Add :meth:`asyncio.Server.close_clients` and :meth:`asyncio.Server."
"abort_clients` methods which allow to more forcefully close an asyncio "
"server. (Contributed by Pierre Ossman in :gh:`113538`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:620
msgid ""
":func:`asyncio.as_completed` now returns an object that is both an :term:"
"`asynchronous iterator` and a plain :term:`iterator` of awaitables. The "
"awaitables yielded by asynchronous iteration include original task or future "
"objects that were passed in, making it easier to associate results with the "
"tasks being completed. (Contributed by Justin Arthur in :gh:`77714`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:627
msgid ""
"When :func:`asyncio.TaskGroup.create_task` is called on an inactive :class:"
"`asyncio.TaskGroup`, the given coroutine will be closed (which prevents a :"
"exc:`RuntimeWarning` about the given coroutine being never awaited). "
"(Contributed by Arthur Tacca and Jason Zhang in :gh:`115957`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:633
msgid ""
"Improved behavior of :class:`asyncio.TaskGroup` when an external "
"cancellation collides with an internal cancellation. For example, when two "
"task groups are nested and both experience an exception in a child task "
"simultaneously, it was possible that the outer task group would hang, "
"because its internal cancellation was swallowed by the inner task group."
msgstr ""

#: ../../whatsnew/3.13.rst:639
msgid ""
"In the case where a task group is cancelled externally and also must raise "
"an :exc:`ExceptionGroup`, it will now call the parent task's :meth:`~asyncio."
"Task.cancel` method.  This ensures that a :exc:`asyncio.CancelledError` will "
"be raised at the next :keyword:`await`, so the cancellation is not lost."
msgstr ""

#: ../../whatsnew/3.13.rst:645
msgid ""
"An added benefit of these changes is that task groups now preserve the "
"cancellation count (:meth:`asyncio.Task.cancelling`)."
msgstr ""

#: ../../whatsnew/3.13.rst:648
msgid ""
"In order to handle some corner cases, :meth:`asyncio.Task.uncancel` may now "
"reset the undocumented ``_must_cancel`` flag when the cancellation count "
"reaches zero."
msgstr ""

#: ../../whatsnew/3.13.rst:652
msgid "(Inspired by an issue reported by Arthur Tacca in :gh:`116720`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:654
msgid ""
"Add :meth:`asyncio.Queue.shutdown` (along with :exc:`asyncio.QueueShutDown`) "
"for queue termination. (Contributed by Laurie Opperman and Yves Duprat in :"
"gh:`104228`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:658
msgid ""
"Accept a tuple of separators in :meth:`asyncio.StreamReader.readuntil`, "
"stopping when one of them is encountered. (Contributed by Bruce Merry in :gh:"
"`81322`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:663
msgid "base64"
msgstr ""

#: ../../whatsnew/3.13.rst:665
msgid ""
"Add :func:`base64.z85encode` and :func:`base64.z85decode` functions which "
"allow encoding and decoding Z85 data. See `Z85  specification <https://rfc."
"zeromq.org/spec/32/>`_ for more information. (Contributed by Matan Perelman "
"in :gh:`75299`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:671
msgid "copy"
msgstr ""

#: ../../whatsnew/3.13.rst:673
msgid ""
"Add :func:`copy.replace` function which allows to create a modified copy of "
"an object, which is especially useful for immutable objects. It supports "
"named tuples created with the factory function :func:`collections."
"namedtuple`, :class:`~dataclasses.dataclass` instances, various :mod:"
"`datetime` objects, :class:`~inspect.Signature` objects, :class:`~inspect."
"Parameter` objects, :ref:`code object <code-objects>`, and any user classes "
"which define the :meth:`!__replace__` method. (Contributed by Serhiy "
"Storchaka in :gh:`108751`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:683
msgid "dbm"
msgstr ""

#: ../../whatsnew/3.13.rst:685
msgid ""
"Add :meth:`dbm.gnu.gdbm.clear` and :meth:`dbm.ndbm.ndbm.clear`  methods that "
"remove all items from the database. (Contributed by Donghee Na in :gh:"
"`107122`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:689
msgid ""
"Add new :mod:`dbm.sqlite3` backend, and make it the default :mod:`!dbm` "
"backend. (Contributed by Raymond Hettinger and Erlend E. Aasland in :gh:"
"`100414`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:693
msgid "dis"
msgstr ""

#: ../../whatsnew/3.13.rst:695
msgid ""
"Change the output of :mod:`dis` module functions to show logical labels for "
"jump targets and exception handlers, rather than offsets. The offsets can be "
"added with the new ``-O`` command line option or the ``show_offsets`` "
"parameter. (Contributed by Irit Katriel in :gh:`112137`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:701
msgid ""
":meth:`~dis.get_instructions` no longer represents cache entries as separate "
"instructions. Instead, it returns them as part of the :class:`~dis."
"Instruction`, in the new *cache_info* field. The *show_caches* argument to :"
"meth:`~dis.get_instructions` is deprecated and no longer has any effect. "
"(Contributed by Irit Katriel in :gh:`112962`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:711
msgid "doctest"
msgstr ""

#: ../../whatsnew/3.13.rst:713
msgid ""
"Color is added to the output by default. This can be controlled via the new :"
"envvar:`PYTHON_COLORS` environment variable as well as the canonical |"
"NO_COLOR|_ and |FORCE_COLOR|_ environment variables. See also :ref:`using-on-"
"controlling-color`. (Contributed by Hugo van Kemenade in :gh:`117225`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:719
msgid ""
"The :meth:`doctest.DocTestRunner.run` method now counts the number of "
"skipped tests. Add :attr:`doctest.DocTestRunner.skips` and :attr:`doctest."
"TestResults.skipped` attributes. (Contributed by Victor Stinner in :gh:"
"`108794`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:725
msgid "email"
msgstr ""

#: ../../whatsnew/3.13.rst:727
msgid ""
":func:`email.utils.getaddresses` and :func:`email.utils.parseaddr` now "
"return ``('', '')`` 2-tuples in more situations where invalid email "
"addresses are encountered instead of potentially inaccurate values. Add "
"optional *strict* parameter to these two functions: use ``strict=False`` to "
"get the old behavior, accept malformed inputs. ``getattr(email.utils, "
"'supports_strict_parsing', False)`` can be used to check if the *strict* "
"parameter is available. (Contributed by Thomas Dwyer and Victor Stinner for :"
"gh:`102988` to improve the :cve:`2023-27043` fix.)"
msgstr ""

#: ../../whatsnew/3.13.rst:738
msgid "fractions"
msgstr ""

#: ../../whatsnew/3.13.rst:740
msgid ""
"Formatting for objects of type :class:`fractions.Fraction` now supports the "
"standard format specification mini-language rules for fill, alignment, sign "
"handling, minimum width and grouping. (Contributed by Mark Dickinson in :gh:"
"`111320`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:746
msgid "gc"
msgstr "gc"

#: ../../whatsnew/3.13.rst:748
msgid ""
"The cyclic garbage collector is now incremental, which changes the meanings "
"of the results of :meth:`gc.get_threshold` and :meth:`gc.set_threshold` as "
"well as :meth:`gc.get_count` and :meth:`gc.get_stats`."
msgstr ""

#: ../../whatsnew/3.13.rst:752
msgid ""
":meth:`gc.get_threshold` returns a three-item tuple for backwards "
"compatibility. The first value is the threshold for young collections, as "
"before; the second value determines the rate at which the old collection is "
"scanned (the default is 10, and higher values mean that the old collection "
"is scanned more slowly). The third value is meaningless and is always zero."
msgstr ""

#: ../../whatsnew/3.13.rst:757
msgid ":meth:`gc.set_threshold` ignores any items after the second."
msgstr ""

#: ../../whatsnew/3.13.rst:758
msgid ""
":meth:`gc.get_count` and :meth:`gc.get_stats` return the same format of "
"results as before. The only difference is that instead of the results "
"referring to the young, aging and old generations, the results refer to the "
"young generation and the aging and collecting spaces of the old generation."
msgstr ""

#: ../../whatsnew/3.13.rst:764
msgid ""
"In summary, code that attempted to manipulate the behavior of the cycle GC "
"may not work exactly as intended, but it is very unlikely to be harmful. All "
"other code will work just fine."
msgstr ""

#: ../../whatsnew/3.13.rst:769
msgid "glob"
msgstr ""

#: ../../whatsnew/3.13.rst:771
msgid ""
"Add :func:`glob.translate` function that converts a path specification with "
"shell-style wildcards to a regular expression. (Contributed by Barney Gale "
"in :gh:`72904`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:776 ../../whatsnew/3.13.rst:1366
msgid "importlib"
msgstr "importlib"

#: ../../whatsnew/3.13.rst:778
msgid ""
"Previously deprecated :mod:`importlib.resources` functions are un-deprecated:"
msgstr ""

#: ../../whatsnew/3.13.rst:780
msgid ":func:`~importlib.resources.is_resource()`"
msgstr ""

#: ../../whatsnew/3.13.rst:781
msgid ":func:`~importlib.resources.open_binary()`"
msgstr ""

#: ../../whatsnew/3.13.rst:782
msgid ":func:`~importlib.resources.open_text()`"
msgstr ""

#: ../../whatsnew/3.13.rst:783
msgid ":func:`~importlib.resources.path()`"
msgstr ""

#: ../../whatsnew/3.13.rst:784
msgid ":func:`~importlib.resources.read_binary()`"
msgstr ""

#: ../../whatsnew/3.13.rst:785
msgid ":func:`~importlib.resources.read_text()`"
msgstr ""

#: ../../whatsnew/3.13.rst:787
msgid ""
"All now allow for a directory (or tree) of resources, using multiple "
"positional arguments."
msgstr ""

#: ../../whatsnew/3.13.rst:790
msgid ""
"For text-reading functions, the *encoding* and *errors* must now be given as "
"keyword arguments."
msgstr ""

#: ../../whatsnew/3.13.rst:793
msgid ""
"The :func:`~importlib.resources.contents()` remains deprecated in favor of "
"the full-featured :class:`~importlib.resources.abc.Traversable` API. "
"However, there is now no plan to remove it."
msgstr ""

#: ../../whatsnew/3.13.rst:797
msgid "(Contributed by Petr Viktorin in :gh:`106532`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:800
msgid "io"
msgstr ""

#: ../../whatsnew/3.13.rst:802
msgid ""
"The :class:`io.IOBase` finalizer now logs the ``close()`` method errors "
"with :data:`sys.unraisablehook`. Previously, errors were ignored silently by "
"default, and only logged in :ref:`Python Development Mode <devmode>` or on :"
"ref:`Python built on debug mode <debug-build>`. (Contributed by Victor "
"Stinner in :gh:`62948`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:809
msgid "ipaddress"
msgstr ""

#: ../../whatsnew/3.13.rst:811
msgid ""
"Add the :attr:`ipaddress.IPv4Address.ipv6_mapped` property, which returns "
"the IPv4-mapped IPv6 address. (Contributed by Charles Machalow in :gh:"
"`109466`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:813
msgid ""
"Fix ``is_global`` and ``is_private`` behavior in :class:`~ipaddress."
"IPv4Address`, :class:`~ipaddress.IPv6Address`, :class:`~ipaddress."
"IPv4Network` and :class:`~ipaddress.IPv6Network`."
msgstr ""

#: ../../whatsnew/3.13.rst:820
msgid "itertools"
msgstr ""

#: ../../whatsnew/3.13.rst:822
msgid ""
"Added a ``strict`` option to :func:`itertools.batched`. This raises a :exc:"
"`ValueError` if the final batch is shorter than the specified batch size. "
"(Contributed by Raymond Hettinger in :gh:`113202`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:828
msgid "marshal"
msgstr ""

#: ../../whatsnew/3.13.rst:830
msgid ""
"Add the *allow_code* parameter in module functions. Passing "
"``allow_code=False`` prevents serialization and de-serialization of code "
"objects which are incompatible between Python versions. (Contributed by "
"Serhiy Storchaka in :gh:`113626`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:836
msgid "math"
msgstr "math"

#: ../../whatsnew/3.13.rst:838
msgid ""
"A new function :func:`~math.fma` for fused multiply-add operations has been "
"added. This function computes ``x * y + z`` with only a single round, and so "
"avoids any intermediate loss of precision. It wraps the ``fma()`` function "
"provided by C99, and follows the specification of the IEEE 754 "
"\"fusedMultiplyAdd\" operation for special cases. (Contributed by Mark "
"Dickinson and Victor Stinner in :gh:`73468`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:846
msgid "mimetypes"
msgstr ""

#: ../../whatsnew/3.13.rst:848
msgid ""
"Add the :func:`~mimetypes.guess_file_type` function which works with file "
"path. Passing file path instead of URL in :func:`~mimetypes.guess_type` is :"
"term:`soft deprecated`. (Contributed by Serhiy Storchaka in :gh:`66543`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:853
msgid "mmap"
msgstr ""

#: ../../whatsnew/3.13.rst:855
msgid ""
"The :class:`mmap.mmap` class now has an :meth:`~mmap.mmap.seekable` method "
"that can be used when a seekable file-like object is required. The :meth:"
"`~mmap.mmap.seek` method now returns the new absolute position. (Contributed "
"by Donghee Na and Sylvie Liberman in :gh:`111835`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:859
msgid ""
":class:`mmap.mmap` now has a *trackfd* parameter on Unix; if it is "
"``False``, the file descriptor specified by *fileno* will not be duplicated. "
"(Contributed by Zackery Spytz and Petr Viktorin in :gh:`78502`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:862
msgid ""
":class:`mmap.mmap` is now protected from crashing on Windows when the mapped "
"memory is inaccessible due to file system errors or access violations. "
"(Contributed by Jannis Weigend in :gh:`118209`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:867
msgid "opcode"
msgstr ""

#: ../../whatsnew/3.13.rst:869
msgid ""
"Move ``opcode.ENABLE_SPECIALIZATION`` to ``_opcode.ENABLE_SPECIALIZATION``. "
"This field was added in 3.12, it was never documented and is not intended "
"for external usage. (Contributed by Irit Katriel in :gh:`105481`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:873
msgid ""
"Removed ``opcode.is_pseudo``, ``opcode.MIN_PSEUDO_OPCODE`` and ``opcode."
"MAX_PSEUDO_OPCODE``, which were added in 3.12, were never documented or "
"exposed through ``dis``, and were not intended to be used externally."
msgstr ""

#: ../../whatsnew/3.13.rst:879
msgid "os"
msgstr "os"

#: ../../whatsnew/3.13.rst:881
msgid ""
"Add :func:`os.process_cpu_count` function to get the number of logical CPUs "
"usable by the calling thread of the current process. (Contributed by Victor "
"Stinner in :gh:`109649`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:885
msgid ""
"Add a low level interface for Linux's timer notification file descriptors "
"via :func:`os.timerfd_create`, :func:`os.timerfd_settime`, :func:`os."
"timerfd_settime_ns`, :func:`os.timerfd_gettime`, and :func:`os."
"timerfd_gettime_ns`, :const:`os.TFD_NONBLOCK`, :const:`os.TFD_CLOEXEC`, :"
"const:`os.TFD_TIMER_ABSTIME`, and :const:`os.TFD_TIMER_CANCEL_ON_SET` "
"(Contributed by Masaru Tsuchiyama in :gh:`108277`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:893
msgid ""
":func:`os.cpu_count` and :func:`os.process_cpu_count` can be overridden "
"through the new environment variable :envvar:`PYTHON_CPU_COUNT` or the new "
"command-line option :option:`-X cpu_count <-X>`. This option is useful for "
"users who need to limit CPU resources of a container system without having "
"to modify the container (application code). (Contributed by Donghee Na in :"
"gh:`109595`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:899
msgid ""
"Add support of :func:`os.lchmod` and the *follow_symlinks* argument in :func:"
"`os.chmod` on Windows. Note that the default value of *follow_symlinks* in :"
"func:`!os.lchmod` is ``False`` on Windows. (Contributed by Serhiy Storchaka "
"in :gh:`59616`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:905
msgid ""
"Add support of :func:`os.fchmod` and a file descriptor in :func:`os.chmod` "
"on Windows. (Contributed by Serhiy Storchaka in :gh:`113191`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:909
msgid ""
":func:`os.posix_spawn` now accepts ``env=None``, which makes the newly "
"spawned process use the current process environment. (Contributed by Jakub "
"Kulik in :gh:`113119`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:913
msgid ""
":func:`os.posix_spawn` gains an :attr:`os.POSIX_SPAWN_CLOSEFROM` attribute "
"for use in ``file_actions=`` on platforms that support :c:func:`!"
"posix_spawn_file_actions_addclosefrom_np`. (Contributed by Jakub Kulik in :"
"gh:`113117`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:918
msgid ""
":func:`os.mkdir` and :func:`os.makedirs` on Windows now support passing a "
"*mode* value of ``0o700`` to apply access control to the new directory. This "
"implicitly affects :func:`tempfile.mkdtemp` and is a mitigation for :cve:"
"`2024-4030`. Other values for *mode* continue to be ignored. (Contributed by "
"Steve Dower in :gh:`118486`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:925
msgid "os.path"
msgstr ""

#: ../../whatsnew/3.13.rst:927
msgid ""
"Add :func:`os.path.isreserved` to check if a path is reserved on the current "
"system. This function is only available on Windows. (Contributed by Barney "
"Gale in :gh:`88569`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:930
msgid ""
"On Windows, :func:`os.path.isabs` no longer considers paths starting with "
"exactly one (back)slash to be absolute. (Contributed by Barney Gale and Jon "
"Foster in :gh:`44626`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:934
msgid ""
"Add support of *dir_fd* and *follow_symlinks* keyword arguments in :func:"
"`shutil.chown`. (Contributed by Berker Peksag and Tahia K in :gh:`62308`)"
msgstr ""

#: ../../whatsnew/3.13.rst:939 ../../whatsnew/3.13.rst:1390
msgid "pathlib"
msgstr "pathlib"

#: ../../whatsnew/3.13.rst:941
msgid ""
"Add :exc:`pathlib.UnsupportedOperation`, which is raised instead of :exc:"
"`NotImplementedError` when a path operation isn't supported. (Contributed by "
"Barney Gale in :gh:`89812`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:945
msgid ""
"Add :meth:`pathlib.Path.from_uri`, a new constructor to create a :class:"
"`pathlib.Path` object from a 'file' URI (``file://``). (Contributed by "
"Barney Gale in :gh:`107465`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:949
msgid ""
"Add :meth:`pathlib.PurePath.full_match` for matching paths with shell-style "
"wildcards, including the recursive wildcard \"``**``\". (Contributed by "
"Barney Gale in :gh:`73435`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:953
msgid ""
"Add :attr:`pathlib.PurePath.parser` class attribute that stores the "
"implementation of :mod:`os.path` used for low-level path parsing and "
"joining: either ``posixpath`` or ``ntpath``."
msgstr ""

#: ../../whatsnew/3.13.rst:957
msgid ""
"Add *recurse_symlinks* keyword-only argument to :meth:`pathlib.Path.glob` "
"and :meth:`~pathlib.Path.rglob`. (Contributed by Barney Gale in :gh:`77609`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:961
msgid ""
"Add *follow_symlinks* keyword-only argument to :meth:`~pathlib.Path."
"is_file`, :meth:`~pathlib.Path.is_dir`, :meth:`~pathlib.Path.owner`, :meth:"
"`~pathlib.Path.group`. (Contributed by Barney Gale in :gh:`105793`, and "
"Kamil Turek in :gh:`107962`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:967
msgid ""
"Return files and directories from :meth:`pathlib.Path.glob` and :meth:"
"`~pathlib.Path.rglob` when given a pattern that ends with \"``**``\". In "
"earlier versions, only directories were returned. (Contributed by Barney "
"Gale in :gh:`70303`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:973
msgid "pdb"
msgstr ""

#: ../../whatsnew/3.13.rst:975
msgid ""
"Add ability to move between chained exceptions during post mortem debugging "
"in :func:`~pdb.pm` using the new ``exceptions [exc_number]`` command for "
"Pdb. (Contributed by Matthias Bussonnier in :gh:`106676`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:979
msgid ""
"Expressions/statements whose prefix is a pdb command are now correctly "
"identified and executed. (Contributed by Tian Gao in :gh:`108464`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:983
msgid ""
"``sys.path[0]`` will no longer be replaced by the directory of the script "
"being debugged when ``sys.flags.safe_path`` is set (via the :option:`-P` "
"command line option or :envvar:`PYTHONSAFEPATH` environment variable). "
"(Contributed by Tian Gao and Christian Walther in :gh:`111762`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:988
msgid ""
":mod:`zipapp` is supported as a debugging target. (Contributed by Tian Gao "
"in :gh:`118501`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:991
msgid ""
"``breakpoint()`` and ``pdb.set_trace()`` now enter the debugger immediately "
"rather than on the next line of code to be executed. This change prevents "
"the debugger from breaking outside of the context when ``breakpoint()`` is "
"positioned at the end of the context. (Contributed by Tian Gao in :gh:"
"`118579`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:998
msgid "queue"
msgstr ""

#: ../../whatsnew/3.13.rst:1000
msgid ""
"Add :meth:`queue.Queue.shutdown` (along with :exc:`queue.ShutDown`) for "
"queue termination. (Contributed by Laurie Opperman and Yves Duprat in :gh:"
"`104750`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:1005
msgid "random"
msgstr "random"

#: ../../whatsnew/3.13.rst:1007
msgid ""
"Add a :ref:`command-line interface <random-cli>`. (Contributed by Hugo van "
"Kemenade in :gh:`118131`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:1011 ../../whatsnew/3.13.rst:1396
msgid "re"
msgstr ""

#: ../../whatsnew/3.13.rst:1012
msgid ""
"Rename :exc:`!re.error` to :exc:`re.PatternError` for improved clarity. :exc:"
"`!re.error` is kept for backward compatibility."
msgstr ""

#: ../../whatsnew/3.13.rst:1016
msgid "site"
msgstr ""

#: ../../whatsnew/3.13.rst:1018
msgid ""
":file:`.pth` files are now decoded by UTF-8 first, and then by the :term:"
"`locale encoding` if the UTF-8 decoding fails. (Contributed by Inada Naoki "
"in :gh:`117802`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:1023
msgid "sqlite3"
msgstr ""

#: ../../whatsnew/3.13.rst:1025
msgid ""
"A :exc:`ResourceWarning` is now emitted if a :class:`sqlite3.Connection` "
"object is not :meth:`closed <sqlite3.Connection.close>` explicitly. "
"(Contributed by Erlend E. Aasland in :gh:`105539`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:1029
msgid ""
"Add *filter* keyword-only parameter to :meth:`sqlite3.Connection.iterdump` "
"for filtering database objects to dump. (Contributed by Mariusz Felisiak in :"
"gh:`91602`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:1034
msgid "statistics"
msgstr ""

#: ../../whatsnew/3.13.rst:1036
msgid ""
"Add :func:`statistics.kde` for kernel density estimation. This makes it "
"possible to estimate a continuous probability density function from a fixed "
"number of discrete samples.  Also added :func:`statistics.kde_random` for "
"sampling from the estimated probability density function. (Contributed by "
"Raymond Hettinger in :gh:`115863`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:1045
msgid "subprocess"
msgstr ""

#: ../../whatsnew/3.13.rst:1047
msgid ""
"The :mod:`subprocess` module now uses the :func:`os.posix_spawn` function in "
"more situations.  Notably in the default case of ``close_fds=True`` on more "
"recent versions of platforms including Linux, FreeBSD, and Solaris where the "
"C library provides :c:func:`!posix_spawn_file_actions_addclosefrom_np`. On "
"Linux this should perform similar to our existing Linux :c:func:`!vfork` "
"based code.  A private control knob :attr:`!subprocess._USE_POSIX_SPAWN` can "
"be set to ``False`` if you need to force :mod:`subprocess` not to ever use :"
"func:`os.posix_spawn`.  Please report your reason and platform details in "
"the CPython issue tracker if you set this so that we can improve our API "
"selection logic for everyone. (Contributed by Jakub Kulik in :gh:`113117`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:1060
msgid "sys"
msgstr "sys"

#: ../../whatsnew/3.13.rst:1062
msgid ""
"Add the :func:`sys._is_interned` function to test if the string was "
"interned. This function is not guaranteed to exist in all implementations of "
"Python. (Contributed by Serhiy Storchaka in :gh:`78573`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:1067
msgid "tempfile"
msgstr ""

#: ../../whatsnew/3.13.rst:1069
msgid ""
"On Windows, the default mode ``0o700`` used by :func:`tempfile.mkdtemp` now "
"limits access to the new directory due to changes to :func:`os.mkdir`. This "
"is a mitigation for :cve:`2024-4030`. (Contributed by Steve Dower in :gh:"
"`118486`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:1075
msgid "time"
msgstr "time"

#: ../../whatsnew/3.13.rst:1077
msgid ""
"On Windows, :func:`time.monotonic()` now uses the "
"``QueryPerformanceCounter()`` clock to have a resolution better than 1 us, "
"instead of the ``GetTickCount64()`` clock which has a resolution of 15.6 ms. "
"(Contributed by Victor Stinner in :gh:`88494`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:1082
msgid ""
"On Windows, :func:`time.time()` now uses the "
"``GetSystemTimePreciseAsFileTime()`` clock to have a resolution better than "
"1 μs, instead of the ``GetSystemTimeAsFileTime()`` clock which has a "
"resolution of 15.6 ms. (Contributed by Victor Stinner in :gh:`63207`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:1090
msgid "tkinter"
msgstr ""

#: ../../whatsnew/3.13.rst:1092
msgid ""
"Add :mod:`tkinter` widget methods: :meth:`!tk_busy_hold`, :meth:`!"
"tk_busy_configure`, :meth:`!tk_busy_cget`, :meth:`!tk_busy_forget`, :meth:`!"
"tk_busy_current`, and :meth:`!tk_busy_status`. (Contributed by Miguel, "
"klappnase and Serhiy Storchaka in :gh:`72684`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:1098
msgid ""
"The :mod:`tkinter` widget method :meth:`!wm_attributes` now accepts the "
"attribute name without the minus prefix to get window attributes, e.g. ``w."
"wm_attributes('alpha')`` and allows to specify attributes and values to set "
"as keyword arguments, e.g. ``w.wm_attributes(alpha=0.5)``. Add new optional "
"keyword-only parameter *return_python_dict*: calling ``w."
"wm_attributes(return_python_dict=True)`` returns the attributes as a dict "
"instead of a tuple. (Contributed by Serhiy Storchaka in :gh:`43457`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:1107
msgid ""
"Add new optional keyword-only parameter *return_ints* in the :meth:`!Text."
"count` method. Passing ``return_ints=True`` makes it always returning the "
"single count as an integer instead of a 1-tuple or ``None``. (Contributed by "
"Serhiy Storchaka in :gh:`97928`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:1113
msgid ""
"Add support of the \"vsapi\" element type in the :meth:`~tkinter.ttk.Style."
"element_create` method of :class:`tkinter.ttk.Style`. (Contributed by Serhiy "
"Storchaka in :gh:`68166`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:1118
msgid ""
"Add the :meth:`!after_info` method for Tkinter widgets. (Contributed by "
"Cheryl Sabella in :gh:`77020`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:1121
msgid ""
"Add the :class:`!PhotoImage` method :meth:`!copy_replace` to copy a region "
"from one image to other image, possibly with pixel zooming and/or "
"subsampling. Add *from_coords* parameter to :class:`!PhotoImage` methods :"
"meth:`!copy()`, :meth:`!zoom()` and :meth:`!subsample()`. Add *zoom* and "
"*subsample* parameters to :class:`!PhotoImage` method :meth:`!copy()`. "
"(Contributed by Serhiy Storchaka in :gh:`118225`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:1130
msgid ""
"Add the :class:`!PhotoImage` methods :meth:`!read` to read an image from a "
"file and :meth:`!data` to get the image data. Add *background* and "
"*grayscale* parameters to :class:`!PhotoImage` method :meth:`!write`. "
"(Contributed by Serhiy Storchaka in :gh:`118271`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:1137
msgid "traceback"
msgstr ""

#: ../../whatsnew/3.13.rst:1139
msgid ""
"Add *show_group* parameter to :func:`traceback.TracebackException."
"format_exception_only` to format the nested exceptions of a :exc:"
"`BaseExceptionGroup` instance, recursively. (Contributed by Irit Katriel in :"
"gh:`105292`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:1143
msgid ""
"Add the field *exc_type_str* to :class:`~traceback.TracebackException`, "
"which holds a string display of the *exc_type*. Deprecate the field "
"*exc_type* which holds the type object itself. Add parameter *save_exc_type* "
"(default ``True``) to indicate whether ``exc_type`` should be saved. "
"(Contributed by Irit Katriel in :gh:`112332`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:1150
msgid "types"
msgstr ""

#: ../../whatsnew/3.13.rst:1152
msgid ""
":class:`~types.SimpleNamespace` constructor now allows specifying initial "
"values of attributes as a positional argument which must be a mapping or an "
"iterable of key-value pairs. (Contributed by Serhiy Storchaka in :gh:"
"`108191`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:1158 ../../whatsnew/3.13.rst:1412
msgid "typing"
msgstr "typing"

#: ../../whatsnew/3.13.rst:1160
msgid ""
"Add :func:`typing.get_protocol_members` to return the set of members "
"defining a :class:`typing.Protocol`. Add :func:`typing.is_protocol` to check "
"whether a class is a :class:`typing.Protocol`. (Contributed by Jelle "
"Zijlstra in :gh:`104873`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:1165
msgid ""
"Add :data:`typing.ReadOnly`, a special typing construct to mark an item of "
"a :class:`typing.TypedDict` as read-only for type checkers. See :pep:`705` "
"for more details."
msgstr ""

#: ../../whatsnew/3.13.rst:1169
msgid ""
"Add :data:`typing.NoDefault`, a sentinel object used to represent the "
"defaults of some parameters in the :mod:`typing` module. (Contributed by "
"Jelle Zijlstra in :gh:`116126`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:1174
msgid "unicodedata"
msgstr "unicodedata"

#: ../../whatsnew/3.13.rst:1176
msgid ""
"The Unicode database has been updated to version 15.1.0. (Contributed by "
"James Gerity in :gh:`109559`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:1180
msgid "venv"
msgstr "venv"

#: ../../whatsnew/3.13.rst:1182
msgid ""
"Add support for adding source control management (SCM) ignore files to a "
"virtual environment's directory. By default, Git is supported. This is "
"implemented as opt-in via the API which can be extended to support other "
"SCMs (:class:`venv.EnvBuilder` and :func:`venv.create`), and opt-out via the "
"CLI (using ``--without-scm-ignore-files``). (Contributed by Brett Cannon in :"
"gh:`108125`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:1190
msgid "warnings"
msgstr ""

#: ../../whatsnew/3.13.rst:1192
msgid ""
"The new :func:`warnings.deprecated` decorator provides a way to communicate "
"deprecations to :term:`static type checkers <static type checker>` and to "
"warn on usage of deprecated classes and functions. A runtime deprecation "
"warning may also be emitted when a decorated function or class is used at "
"runtime. See :pep:`702`. (Contributed by Jelle Zijlstra in :gh:`104003`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:1199
msgid "xml.etree.ElementTree"
msgstr ""

#: ../../whatsnew/3.13.rst:1201
msgid ""
"Add the :meth:`!close` method for the iterator returned by :func:`~xml.etree."
"ElementTree.iterparse` for explicit cleaning up. (Contributed by Serhiy "
"Storchaka in :gh:`69893`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:1206
msgid "zipimport"
msgstr ""

#: ../../whatsnew/3.13.rst:1208
msgid ""
"Gains support for ZIP64 format files.  Everybody loves huge code right? "
"(Contributed by Tim Hatch in :gh:`94146`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:1214
msgid "Optimizations"
msgstr "Optimalizace"

#: ../../whatsnew/3.13.rst:1216
msgid ""
":func:`textwrap.indent` is now ~30% faster than before for large input. "
"(Contributed by Inada Naoki in :gh:`107369`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:1219
msgid ""
"The :mod:`subprocess` module uses :func:`os.posix_spawn` in more situations "
"including the default where ``close_fds=True`` on many modern platforms.  "
"This should provide a noteworthy performance increase launching processes on "
"FreeBSD and Solaris.  See the :ref:`subprocess <whatsnew313-subprocess>` "
"section above for details. (Contributed by Jakub Kulik in :gh:`113117`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:1226
msgid ""
"Several standard library modules have had their import times significantly "
"improved. For example, the import time of the :mod:`typing` module has been "
"reduced by around a third by removing dependencies on :mod:`re` and :mod:"
"`contextlib`. Other modules to enjoy import-time speedups include :mod:"
"`importlib.metadata`, :mod:`threading`, :mod:`enum`, :mod:`functools` and :"
"mod:`email.utils`. (Contributed by Alex Waygood, Shantanu Jain, Adam Turner, "
"Daniel Hollas and others in :gh:`109653`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:1236
msgid "Removed Modules And APIs"
msgstr ""

#: ../../whatsnew/3.13.rst:1241
msgid "PEP 594: dead batteries (and other module removals)"
msgstr ""

#: ../../whatsnew/3.13.rst:1243
msgid ""
":pep:`594` removed 19 modules from the standard library, deprecated in "
"Python 3.11:"
msgstr ""

#: ../../whatsnew/3.13.rst:1246
msgid ":mod:`!aifc`. (Contributed by Victor Stinner in :gh:`104773`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:1249
msgid ":mod:`!audioop`. (Contributed by Victor Stinner in :gh:`104773`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:1252
msgid ":mod:`!chunk`. (Contributed by Victor Stinner in :gh:`104773`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:1255
msgid ":mod:`!cgi` and :mod:`!cgitb`."
msgstr ""

#: ../../whatsnew/3.13.rst:1257
msgid ""
"``cgi.FieldStorage`` can typically be replaced with :func:`urllib.parse."
"parse_qsl` for ``GET`` and ``HEAD`` requests, and the :mod:`email.message` "
"module or :pypi:`multipart` PyPI project for ``POST`` and ``PUT``."
msgstr ""

#: ../../whatsnew/3.13.rst:1262
msgid ""
"``cgi.parse()`` can be replaced by calling :func:`urllib.parse.parse_qs` "
"directly on the desired query string, except for ``multipart/form-data`` "
"input, which can be handled as described for ``cgi.parse_multipart()``."
msgstr ""

#: ../../whatsnew/3.13.rst:1266
msgid ""
"``cgi.parse_header()`` can be replaced with the functionality in the :mod:"
"`email` package, which implements the same MIME RFCs. For example, with :"
"class:`email.message.EmailMessage`::"
msgstr ""

#: ../../whatsnew/3.13.rst:1275
msgid ""
"``cgi.parse_multipart()`` can be replaced with the functionality in the :mod:"
"`email` package (e.g. :class:`email.message.EmailMessage` and :class:`email."
"message.Message`) which implements the same MIME RFCs, or with the :pypi:"
"`multipart` PyPI project."
msgstr ""

#: ../../whatsnew/3.13.rst:1280 ../../whatsnew/3.13.rst:1298
msgid "(Contributed by Victor Stinner in :gh:`104773`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:1282
msgid ""
":mod:`!crypt` module and its private :mod:`!_crypt` extension. The :mod:"
"`hashlib` module is a potential replacement for certain use cases. "
"Otherwise, the following PyPI projects can be used:"
msgstr ""

#: ../../whatsnew/3.13.rst:1286
msgid ""
":pypi:`bcrypt`: Modern password hashing for your software and your servers."
msgstr ""

#: ../../whatsnew/3.13.rst:1288
msgid ""
":pypi:`passlib`: Comprehensive password hashing framework supporting over 30 "
"schemes."
msgstr ""

#: ../../whatsnew/3.13.rst:1290
msgid ":pypi:`argon2-cffi`: The secure Argon2 password hashing algorithm."
msgstr ""

#: ../../whatsnew/3.13.rst:1292
msgid ""
":pypi:`legacycrypt`: :mod:`ctypes` wrapper to the POSIX crypt library call "
"and associated functionality."
msgstr ""

#: ../../whatsnew/3.13.rst:1294
msgid ""
":pypi:`crypt_r`: Fork of the :mod:`!crypt` module, wrapper to the :manpage:"
"`crypt_r(3)` library call and associated functionality."
msgstr ""

#: ../../whatsnew/3.13.rst:1300
msgid ""
":mod:`!imghdr`: use the projects :pypi:`filetype`, :pypi:`puremagic`, or :"
"pypi:`python-magic` instead. The ``puremagic.what()`` function can be used "
"to replace the ``imghdr.what()`` function for all file formats that were "
"supported by ``imghdr``. (Contributed by Victor Stinner in :gh:`104773`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:1307
msgid ""
":mod:`!mailcap`. The :mod:`mimetypes` module provides an alternative. "
"(Contributed by Victor Stinner in :gh:`104773`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:1311
msgid ":mod:`!msilib`. (Contributed by Zachary Ware in :gh:`104773`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:1314
msgid ":mod:`!nis`. (Contributed by Victor Stinner in :gh:`104773`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:1317
msgid ""
":mod:`!nntplib`: the :pypi:`nntplib` PyPI project can be used instead. "
"(Contributed by Victor Stinner in :gh:`104773`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:1321
msgid ""
":mod:`!ossaudiodev`: use the `pygame project <https://www.pygame.org/>`_ for "
"audio playback. (Contributed by Victor Stinner in :gh:`104780`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:1325
msgid ""
":mod:`!pipes`: use the :mod:`subprocess` module instead. (Contributed by "
"Victor Stinner in :gh:`104773`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:1328
msgid ""
":mod:`!sndhdr`: use the projects :pypi:`filetype`, :pypi:`puremagic`, or :"
"pypi:`python-magic` instead. (Contributed by Victor Stinner in :gh:`104773`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:1332
msgid ""
":mod:`!spwd`: the :pypi:`python-pam` project can be used instead. "
"(Contributed by Victor Stinner in :gh:`104773`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:1336
msgid ":mod:`!sunau`. (Contributed by Victor Stinner in :gh:`104773`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:1339
msgid ""
":mod:`!telnetlib`, use the projects :pypi:`telnetlib3` or :pypi:`Exscript` "
"instead. (Contributed by Victor Stinner in :gh:`104773`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:1343
msgid ""
":mod:`!uu`: the :mod:`base64` module is a modern alternative. (Contributed "
"by Victor Stinner in :gh:`104773`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:1346
msgid ":mod:`!xdrlib`. (Contributed by Victor Stinner in :gh:`104773`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:1349
msgid ""
"Remove the ``2to3`` program and the :mod:`!lib2to3` module, deprecated in "
"Python 3.11. (Contributed by Victor Stinner in :gh:`104780`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:1353
msgid ""
"Remove the :mod:`!tkinter.tix` module, deprecated in Python 3.6.  The third-"
"party Tix library which the module wrapped is unmaintained. (Contributed by "
"Zachary Ware in :gh:`75552`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:1358
msgid "configparser"
msgstr ""

#: ../../whatsnew/3.13.rst:1360
msgid ""
"Remove the undocumented :class:`!configparser.LegacyInterpolation` class, "
"deprecated in the docstring since Python 3.2, and with a deprecation warning "
"since Python 3.11. (Contributed by Hugo van Kemenade in :gh:`104886`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:1368
msgid ""
"Remove deprecated :meth:`~object.__getitem__` access for :class:`!importlib."
"metadata.EntryPoint` objects. (Contributed by Jason R. Coombs in :gh:"
"`113175`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:1373
msgid "locale"
msgstr ""

#: ../../whatsnew/3.13.rst:1375
msgid ""
"Remove ``locale.resetlocale()`` function deprecated in Python 3.11: use "
"``locale.setlocale(locale.LC_ALL, \"\")`` instead. (Contributed by Victor "
"Stinner in :gh:`104783`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:1380
msgid "logging"
msgstr ""

#: ../../whatsnew/3.13.rst:1382
msgid ""
":mod:`logging`: Remove undocumented and untested ``Logger.warn()`` and "
"``LoggerAdapter.warn()`` methods and ``logging.warn()`` function. Deprecated "
"since Python 3.3, they were aliases to the :meth:`logging.Logger.warning` "
"method, :meth:`!logging.LoggerAdapter.warning` method and :func:`logging."
"warning` function. (Contributed by Victor Stinner in :gh:`105376`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:1392
msgid ""
"Remove support for using :class:`pathlib.Path` objects as context managers. "
"This functionality was deprecated and made a no-op in Python 3.9."
msgstr ""

#: ../../whatsnew/3.13.rst:1398
msgid ""
"Remove undocumented, never working, and deprecated ``re.template`` function "
"and ``re.TEMPLATE`` flag (and ``re.T`` alias). (Contributed by Serhiy "
"Storchaka and Nikita Sobolev in :gh:`105687`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:1404
msgid "turtle"
msgstr ""

#: ../../whatsnew/3.13.rst:1406
msgid ""
"Remove the :meth:`!turtle.RawTurtle.settiltangle` method, deprecated in docs "
"since Python 3.1 and with a deprecation warning since Python 3.11. "
"(Contributed by Hugo van Kemenade in :gh:`104876`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:1414
msgid ""
"Namespaces ``typing.io`` and ``typing.re``, deprecated in Python 3.8, are "
"now removed. The items in those namespaces can be imported directly from :"
"mod:`typing`. (Contributed by Sebastian Rittau in :gh:`92871`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:1418
msgid ""
"Remove support for the keyword-argument method of creating :class:`typing."
"TypedDict` types, deprecated in Python 3.11. (Contributed by Tomas Roun in :"
"gh:`104786`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:1423
msgid "unittest"
msgstr ""

#: ../../whatsnew/3.13.rst:1425
msgid ""
"Remove the following :mod:`unittest` functions, deprecated in Python 3.11:"
msgstr ""

#: ../../whatsnew/3.13.rst:1427
msgid ":func:`!unittest.findTestCases`"
msgstr ""

#: ../../whatsnew/3.13.rst:1428
msgid ":func:`!unittest.makeSuite`"
msgstr ""

#: ../../whatsnew/3.13.rst:1429
msgid ":func:`!unittest.getTestCaseNames`"
msgstr ""

#: ../../whatsnew/3.13.rst:1431
msgid "Use :class:`~unittest.TestLoader` methods instead:"
msgstr ""

#: ../../whatsnew/3.13.rst:1433
msgid ":meth:`unittest.TestLoader.loadTestsFromModule`"
msgstr ""

#: ../../whatsnew/3.13.rst:1434
msgid ":meth:`unittest.TestLoader.loadTestsFromTestCase`"
msgstr ""

#: ../../whatsnew/3.13.rst:1435
msgid ":meth:`unittest.TestLoader.getTestCaseNames`"
msgstr ""

#: ../../whatsnew/3.13.rst:1437
msgid "(Contributed by Hugo van Kemenade in :gh:`104835`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:1439
msgid ""
"Remove the untested and undocumented :meth:`!unittest.TestProgram.usageExit` "
"method, deprecated in Python 3.11. (Contributed by Hugo van Kemenade in :gh:"
"`104992`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:1444
msgid "urllib"
msgstr ""

#: ../../whatsnew/3.13.rst:1446
msgid ""
"Remove *cafile*, *capath* and *cadefault* parameters of the :func:`urllib."
"request.urlopen` function, deprecated in Python 3.6: pass the *context* "
"parameter instead. Use :meth:`ssl.SSLContext.load_cert_chain` to load "
"specific certificates, or let :func:`ssl.create_default_context` select the "
"system's trusted CA certificates for you. (Contributed by Victor Stinner in :"
"gh:`105382`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:1455
msgid "webbrowser"
msgstr ""

#: ../../whatsnew/3.13.rst:1457
msgid ""
"Remove the untested and undocumented :mod:`webbrowser` :class:`!MacOSX` "
"class, deprecated in Python 3.11. Use the :class:`!MacOSXOSAScript` class "
"(introduced in Python 3.2) instead. (Contributed by Hugo van Kemenade in :gh:"
"`104804`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:1462
msgid ""
"Remove deprecated ``webbrowser.MacOSXOSAScript._name`` attribute. Use :attr:"
"`webbrowser.MacOSXOSAScript.name <webbrowser.controller.name>` attribute "
"instead. (Contributed by Nikita Sobolev in :gh:`105546`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:1468
msgid "New Deprecations"
msgstr ""

#: ../../whatsnew/3.13.rst:1470
msgid ""
"Removed chained :class:`classmethod` descriptors (introduced in :gh:"
"`63272`).  This can no longer be used to wrap other descriptors such as :"
"class:`property`.  The core design of this feature was flawed and caused a "
"number of downstream problems.  To \"pass-through\" a :class:`classmethod`, "
"consider using the :attr:`!__wrapped__` attribute that was added in Python "
"3.10.  (Contributed by Raymond Hettinger in :gh:`89519`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:1478
msgid ""
":mod:`array`: :mod:`array`'s ``'u'`` format code, deprecated in docs since "
"Python 3.3, emits :exc:`DeprecationWarning` since 3.13 and will be removed "
"in Python 3.16. Use the ``'w'`` format code instead. (Contributed by Hugo "
"van Kemenade in :gh:`80480`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:1484
msgid ""
":mod:`ctypes`: Deprecate undocumented :func:`!ctypes.SetPointerType` and :"
"func:`!ctypes.ARRAY` functions. Replace ``ctypes.ARRAY(item_type, size)`` "
"with ``item_type * size``. (Contributed by Victor Stinner in :gh:`105733`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:1489
msgid ""
":mod:`decimal`: Deprecate non-standard format specifier \"N\" for :class:"
"`decimal.Decimal`. It was not documented and only supported in the C "
"implementation. (Contributed by Serhiy Storchaka in :gh:`89902`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:1494
msgid ""
":mod:`dis`: The ``dis.HAVE_ARGUMENT`` separator is deprecated. Check "
"membership in :data:`~dis.hasarg` instead. (Contributed by Irit Katriel in :"
"gh:`109319`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:1498
msgid ""
":ref:`frame-objects`: Calling :meth:`frame.clear` on a suspended frame "
"raises :exc:`RuntimeError` (as has always been the case for an executing "
"frame). (Contributed by Irit Katriel in :gh:`79932`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:1503
msgid ""
":mod:`getopt` and :mod:`optparse` modules: They are now :term:`soft "
"deprecated`: the :mod:`argparse` module should be used for new projects. "
"Previously, the :mod:`optparse` module was already deprecated, its removal "
"was not scheduled, and no warnings was emitted: so there is no change in "
"practice. (Contributed by Victor Stinner in :gh:`106535`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:1510
msgid ""
":mod:`gettext`: Emit deprecation warning for non-integer numbers in :mod:"
"`gettext` functions and methods that consider plural forms even if the "
"translation was not found. (Contributed by Serhiy Storchaka in :gh:`88434`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:1515
msgid ""
":mod:`glob`: The undocumented :func:`!glob.glob0` and :func:`!glob.glob1` "
"functions are deprecated. Use :func:`glob.glob` and pass a directory to its "
"*root_dir* argument instead. (Contributed by Barney Gale in :gh:`117337`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:1520
msgid ""
":mod:`http.server`: :class:`http.server.CGIHTTPRequestHandler` now emits a :"
"exc:`DeprecationWarning` as it will be removed in 3.15.  Process-based CGI "
"HTTP servers have been out of favor for a very long time.  This code was "
"outdated, unmaintained, and rarely used.  It has a high potential for both "
"security and functionality bugs.  This includes removal of the ``--cgi`` "
"flag to the ``python -m http.server`` command line in 3.15."
msgstr ""

#: ../../whatsnew/3.13.rst:1527
msgid ""
":mod:`mimetypes`: Passing file path instead of URL in :func:`~mimetypes."
"guess_type` is :term:`soft deprecated`. Use :func:`~mimetypes."
"guess_file_type` instead. (Contributed by Serhiy Storchaka in :gh:`66543`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:1531
msgid ""
":mod:`re`: Passing optional arguments *maxsplit*, *count* and *flags* in "
"module-level functions :func:`re.split`, :func:`re.sub` and :func:`re.subn` "
"as positional arguments is now deprecated. In future Python versions these "
"parameters will be :ref:`keyword-only <keyword-only_parameter>`. "
"(Contributed by Serhiy Storchaka in :gh:`56166`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:1537
#: ../../deprecations/pending-removal-in-3.15.rst:16
msgid ""
":mod:`pathlib`: :meth:`pathlib.PurePath.is_reserved` is deprecated and "
"scheduled for removal in Python 3.15. Use :func:`os.path.isreserved` to "
"detect reserved paths on Windows."
msgstr ""

#: ../../whatsnew/3.13.rst:1542
#: ../../deprecations/pending-removal-in-3.15.rst:21
msgid ""
":mod:`platform`: :func:`~platform.java_ver` is deprecated and will be "
"removed in 3.15. It was largely untested, had a confusing API, and was only "
"useful for Jython support. (Contributed by Nikita Sobolev in :gh:`116349`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:1548
msgid ""
":mod:`pydoc`: Deprecate undocumented :func:`!pydoc.ispackage` function. "
"(Contributed by Zackery Spytz in :gh:`64020`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:1551
msgid ""
":mod:`sqlite3`: Passing more than one positional argument to :func:`sqlite3."
"connect` and the :class:`sqlite3.Connection` constructor is deprecated. The "
"remaining parameters will become keyword-only in Python 3.15."
msgstr ""

#: ../../whatsnew/3.13.rst:1555
msgid ""
"Deprecate passing name, number of arguments, and the callable as keyword "
"arguments for the following :class:`sqlite3.Connection` APIs:"
msgstr ""

#: ../../whatsnew/3.13.rst:1558
msgid ":meth:`~sqlite3.Connection.create_function`"
msgstr ""

#: ../../whatsnew/3.13.rst:1559
msgid ":meth:`~sqlite3.Connection.create_aggregate`"
msgstr ""

#: ../../whatsnew/3.13.rst:1561
msgid ""
"Deprecate passing the callback callable by keyword for the following :class:"
"`sqlite3.Connection` APIs:"
msgstr ""

#: ../../whatsnew/3.13.rst:1564
msgid ":meth:`~sqlite3.Connection.set_authorizer`"
msgstr ""

#: ../../whatsnew/3.13.rst:1565
msgid ":meth:`~sqlite3.Connection.set_progress_handler`"
msgstr ""

#: ../../whatsnew/3.13.rst:1566
msgid ":meth:`~sqlite3.Connection.set_trace_callback`"
msgstr ""

#: ../../whatsnew/3.13.rst:1568
msgid "The affected parameters will become positional-only in Python 3.15."
msgstr ""

#: ../../whatsnew/3.13.rst:1570
msgid "(Contributed by Erlend E. Aasland in :gh:`107948` and :gh:`108278`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:1572
msgid ""
":mod:`sys`: :func:`sys._enablelegacywindowsfsencoding` function. Replace it "
"with the :envvar:`PYTHONLEGACYWINDOWSFSENCODING` environment variable. "
"(Contributed by Inada Naoki in :gh:`73427`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:1576
msgid ""
":mod:`tarfile`: The undocumented and unused ``tarfile`` attribute of :class:"
"`tarfile.TarFile` is deprecated and scheduled for removal in Python 3.16."
msgstr ""

#: ../../whatsnew/3.13.rst:1580
msgid ""
":mod:`traceback`: The field *exc_type* of :class:`traceback."
"TracebackException` is deprecated. Use *exc_type_str* instead."
msgstr ""

#: ../../whatsnew/3.13.rst:1583
msgid ":mod:`typing`:"
msgstr ""

#: ../../whatsnew/3.13.rst:1585
msgid ""
"Creating a :class:`typing.NamedTuple` class using keyword arguments to "
"denote the fields (``NT = NamedTuple(\"NT\", x=int, y=int)``) is deprecated, "
"and will be disallowed in Python 3.15. Use the class-based syntax or the "
"functional syntax instead. (Contributed by Alex Waygood in :gh:`105566`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:1590
msgid ""
"When using the functional syntax to create a :class:`typing.NamedTuple` "
"class or a :class:`typing.TypedDict` class, failing to pass a value to the "
"'fields' parameter (``NT = NamedTuple(\"NT\")`` or ``TD = "
"TypedDict(\"TD\")``) is deprecated. Passing ``None`` to the 'fields' "
"parameter (``NT = NamedTuple(\"NT\", None)`` or ``TD = TypedDict(\"TD\", "
"None)``) is also deprecated. Both will be disallowed in Python 3.15. To "
"create a NamedTuple class with 0 fields, use ``class NT(NamedTuple): pass`` "
"or ``NT = NamedTuple(\"NT\", [])``. To create a TypedDict class with 0 "
"fields, use ``class TD(TypedDict): pass`` or ``TD = TypedDict(\"TD\", {})``. "
"(Contributed by Alex Waygood in :gh:`105566` and :gh:`105570`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:1601
msgid ""
":func:`typing.no_type_check_decorator` is deprecated, and scheduled for "
"removal in Python 3.15. After eight years in the :mod:`typing` module, it "
"has yet to be supported by any major type checkers. (Contributed by Alex "
"Waygood in :gh:`106309`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:1606
msgid ""
":data:`typing.AnyStr` is deprecated. In Python 3.16, it will be removed from "
"``typing.__all__``, and a :exc:`DeprecationWarning` will be emitted when it "
"is imported or accessed. It will be removed entirely in Python 3.18. Use the "
"new :ref:`type parameter syntax <type-params>` instead. (Contributed by "
"Michael The in :gh:`107116`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:1612
msgid ""
":ref:`user-defined-funcs`: Assignment to a function's :attr:`~function."
"__code__` attribute where the new code object's type does not match the "
"function's type, is deprecated. The different types are: plain function, "
"generator, async generator and coroutine. (Contributed by Irit Katriel in :"
"gh:`81137`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:1619
#: ../../deprecations/pending-removal-in-3.15.rst:54
msgid ""
":mod:`wave`: Deprecate the ``getmark()``, ``setmark()`` and ``getmarkers()`` "
"methods of the :class:`wave.Wave_read` and :class:`wave.Wave_write` classes. "
"They will be removed in Python 3.15. (Contributed by Victor Stinner in :gh:"
"`105096`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:2241
#: ../../deprecations/pending-removal-in-3.14.rst:2
msgid "Pending Removal in Python 3.14"
msgstr ""

#: ../../deprecations/pending-removal-in-3.14.rst:4
msgid ""
":mod:`argparse`: The *type*, *choices*, and *metavar* parameters of :class:`!"
"argparse.BooleanOptionalAction` are deprecated and will be removed in 3.14. "
"(Contributed by Nikita Sobolev in :gh:`92248`.)"
msgstr ""

#: ../../deprecations/pending-removal-in-3.14.rst:9
msgid ""
":mod:`ast`: The following features have been deprecated in documentation "
"since Python 3.8, now cause a :exc:`DeprecationWarning` to be emitted at "
"runtime when they are accessed or used, and will be removed in Python 3.14:"
msgstr ""

#: ../../deprecations/pending-removal-in-3.14.rst:13
msgid ":class:`!ast.Num`"
msgstr ""

#: ../../deprecations/pending-removal-in-3.14.rst:14
msgid ":class:`!ast.Str`"
msgstr ""

#: ../../deprecations/pending-removal-in-3.14.rst:15
msgid ":class:`!ast.Bytes`"
msgstr ""

#: ../../deprecations/pending-removal-in-3.14.rst:16
msgid ":class:`!ast.NameConstant`"
msgstr ""

#: ../../deprecations/pending-removal-in-3.14.rst:17
msgid ":class:`!ast.Ellipsis`"
msgstr ""

#: ../../deprecations/pending-removal-in-3.14.rst:19
msgid ""
"Use :class:`ast.Constant` instead. (Contributed by Serhiy Storchaka in :gh:"
"`90953`.)"
msgstr ""

#: ../../deprecations/pending-removal-in-3.14.rst:22
msgid ":mod:`asyncio`:"
msgstr ""

#: ../../deprecations/pending-removal-in-3.14.rst:24
msgid ""
"The child watcher classes :class:`~asyncio.MultiLoopChildWatcher`, :class:"
"`~asyncio.FastChildWatcher`, :class:`~asyncio.AbstractChildWatcher` and :"
"class:`~asyncio.SafeChildWatcher` are deprecated and will be removed in "
"Python 3.14. (Contributed by Kumar Aditya in :gh:`94597`.)"
msgstr ""

#: ../../deprecations/pending-removal-in-3.14.rst:30
msgid ""
":func:`asyncio.set_child_watcher`, :func:`asyncio.get_child_watcher`, :meth:"
"`asyncio.AbstractEventLoopPolicy.set_child_watcher` and :meth:`asyncio."
"AbstractEventLoopPolicy.get_child_watcher` are deprecated and will be "
"removed in Python 3.14. (Contributed by Kumar Aditya in :gh:`94597`.)"
msgstr ""

#: ../../deprecations/pending-removal-in-3.14.rst:36
msgid ""
"The :meth:`~asyncio.get_event_loop` method of the default event loop policy "
"now emits a :exc:`DeprecationWarning` if there is no current event loop set "
"and it decides to create one. (Contributed by Serhiy Storchaka and Guido van "
"Rossum in :gh:`100160`.)"
msgstr ""

#: ../../deprecations/pending-removal-in-3.14.rst:41
msgid ""
":mod:`collections.abc`: Deprecated :class:`~collections.abc.ByteString`. "
"Prefer :class:`!Sequence` or :class:`~collections.abc.Buffer`. For use in "
"typing, prefer a union, like ``bytes | bytearray``, or :class:`collections."
"abc.Buffer`. (Contributed by Shantanu Jain in :gh:`91896`.)"
msgstr ""

#: ../../deprecations/pending-removal-in-3.14.rst:47
msgid ""
":mod:`email`: Deprecated the *isdst* parameter in :func:`email.utils."
"localtime`. (Contributed by Alan Williams in :gh:`72346`.)"
msgstr ""

#: ../../deprecations/pending-removal-in-3.14.rst:50
msgid ""
":mod:`importlib`: ``__package__`` and ``__cached__`` will cease to be set or "
"taken into consideration by the import system (:gh:`97879`)."
msgstr ""

#: ../../deprecations/pending-removal-in-3.14.rst:53
msgid ":mod:`importlib.abc` deprecated classes:"
msgstr ""

#: ../../deprecations/pending-removal-in-3.14.rst:55
msgid ":class:`!importlib.abc.ResourceReader`"
msgstr ""

#: ../../deprecations/pending-removal-in-3.14.rst:56
msgid ":class:`!importlib.abc.Traversable`"
msgstr ""

#: ../../deprecations/pending-removal-in-3.14.rst:57
msgid ":class:`!importlib.abc.TraversableResources`"
msgstr ""

#: ../../deprecations/pending-removal-in-3.14.rst:59
msgid "Use :mod:`importlib.resources.abc` classes instead:"
msgstr ""

#: ../../deprecations/pending-removal-in-3.14.rst:61
msgid ":class:`importlib.resources.abc.Traversable`"
msgstr ""

#: ../../deprecations/pending-removal-in-3.14.rst:62
msgid ":class:`importlib.resources.abc.TraversableResources`"
msgstr ""

#: ../../deprecations/pending-removal-in-3.14.rst:64
msgid "(Contributed by Jason R. Coombs and Hugo van Kemenade in :gh:`93963`.)"
msgstr ""

#: ../../deprecations/pending-removal-in-3.14.rst:66
msgid ""
":mod:`itertools` had undocumented, inefficient, historically buggy, and "
"inconsistent support for copy, deepcopy, and pickle operations. This will be "
"removed in 3.14 for a significant reduction in code volume and maintenance "
"burden. (Contributed by Raymond Hettinger in :gh:`101588`.)"
msgstr ""

#: ../../deprecations/pending-removal-in-3.14.rst:72
msgid ""
":mod:`multiprocessing`: The default start method will change to a safer one "
"on Linux, BSDs, and other non-macOS POSIX platforms where ``'fork'`` is "
"currently the default (:gh:`84559`). Adding a runtime warning about this was "
"deemed too disruptive as the majority of code is not expected to care. Use "
"the :func:`~multiprocessing.get_context` or :func:`~multiprocessing."
"set_start_method` APIs to explicitly specify when your code *requires* "
"``'fork'``.  See :ref:`multiprocessing-start-methods`."
msgstr ""

#: ../../deprecations/pending-removal-in-3.14.rst:80
msgid ""
":mod:`pathlib`: :meth:`~pathlib.PurePath.is_relative_to` and :meth:`~pathlib."
"PurePath.relative_to`: passing additional arguments is deprecated."
msgstr ""

#: ../../deprecations/pending-removal-in-3.14.rst:84
msgid ""
":mod:`pkgutil`: :func:`~pkgutil.find_loader` and :func:`~pkgutil.get_loader` "
"now raise :exc:`DeprecationWarning`; use :func:`importlib.util.find_spec` "
"instead. (Contributed by Nikita Sobolev in :gh:`97850`.)"
msgstr ""

#: ../../deprecations/pending-removal-in-3.14.rst:89
msgid ":mod:`pty`:"
msgstr ""

#: ../../deprecations/pending-removal-in-3.14.rst:91
msgid "``master_open()``: use :func:`pty.openpty`."
msgstr ""

#: ../../deprecations/pending-removal-in-3.14.rst:92
msgid "``slave_open()``: use :func:`pty.openpty`."
msgstr ""

#: ../../deprecations/pending-removal-in-3.14.rst:94
msgid ":mod:`sqlite3`:"
msgstr ""

#: ../../deprecations/pending-removal-in-3.14.rst:96
msgid ":data:`~sqlite3.version` and :data:`~sqlite3.version_info`."
msgstr ""

#: ../../deprecations/pending-removal-in-3.14.rst:98
msgid ""
":meth:`~sqlite3.Cursor.execute` and :meth:`~sqlite3.Cursor.executemany` if :"
"ref:`named placeholders <sqlite3-placeholders>` are used and *parameters* is "
"a sequence instead of a :class:`dict`."
msgstr ""

#: ../../deprecations/pending-removal-in-3.14.rst:102
msgid ""
"date and datetime adapter, date and timestamp converter: see the :mod:"
"`sqlite3` documentation for suggested replacement recipes."
msgstr ""

#: ../../deprecations/pending-removal-in-3.14.rst:105
msgid ""
":class:`types.CodeType`: Accessing :attr:`~codeobject.co_lnotab` was "
"deprecated in :pep:`626` since 3.10 and was planned to be removed in 3.12, "
"but it only got a proper :exc:`DeprecationWarning` in 3.12. May be removed "
"in 3.14. (Contributed by Nikita Sobolev in :gh:`101866`.)"
msgstr ""

#: ../../deprecations/pending-removal-in-3.14.rst:112
msgid ""
":mod:`typing`: :class:`~typing.ByteString`, deprecated since Python 3.9, now "
"causes a :exc:`DeprecationWarning` to be emitted when it is used."
msgstr ""

#: ../../deprecations/pending-removal-in-3.14.rst:115
msgid ""
":mod:`urllib`: :class:`!urllib.parse.Quoter` is deprecated: it was not "
"intended to be a public API. (Contributed by Gregory P. Smith in :gh:"
"`88168`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:2285
#: ../../deprecations/pending-removal-in-3.15.rst:2
msgid "Pending Removal in Python 3.15"
msgstr ""

#: ../../deprecations/pending-removal-in-3.15.rst:4
msgid ""
":class:`http.server.CGIHTTPRequestHandler` will be removed along with its "
"related ``--cgi`` flag to ``python -m http.server``.  It was obsolete and "
"rarely used.  No direct replacement exists.  *Anything* is better than CGI "
"to interface a web server with a request handler."
msgstr ""

#: ../../deprecations/pending-removal-in-3.15.rst:9
msgid ""
":class:`locale`: :func:`locale.getdefaultlocale` was deprecated in Python "
"3.11 and originally planned for removal in Python 3.13 (:gh:`90817`), but "
"removal has been postponed to Python 3.15. Use :func:`locale.setlocale()`, :"
"func:`locale.getencoding()` and :func:`locale.getlocale()` instead. "
"(Contributed by Hugo van Kemenade in :gh:`111187`.)"
msgstr ""

#: ../../deprecations/pending-removal-in-3.15.rst:27
msgid ""
":mod:`threading`: Passing any arguments to :func:`threading.RLock` is now "
"deprecated. C version allows any numbers of args and kwargs, but they are "
"just ignored. Python version does not allow any arguments. All arguments "
"will be removed from :func:`threading.RLock` in Python 3.15. (Contributed by "
"Nikita Sobolev in :gh:`102029`.)"
msgstr ""

#: ../../deprecations/pending-removal-in-3.15.rst:34
msgid ":class:`typing.NamedTuple`:"
msgstr ""

#: ../../deprecations/pending-removal-in-3.15.rst:36
msgid ""
"The undocumented keyword argument syntax for creating :class:`!NamedTuple` "
"classes (``NT = NamedTuple(\"NT\", x=int)``) is deprecated, and will be "
"disallowed in 3.15. Use the class-based syntax or the functional syntax "
"instead."
msgstr ""

#: ../../deprecations/pending-removal-in-3.15.rst:40
msgid ""
"When using the functional syntax to create a :class:`!NamedTuple` class, "
"failing to pass a value to the *fields* parameter (``NT = "
"NamedTuple(\"NT\")``) is deprecated. Passing ``None`` to the *fields* "
"parameter (``NT = NamedTuple(\"NT\", None)``) is also deprecated. Both will "
"be disallowed in Python 3.15. To create a :class:`!NamedTuple` class with 0 "
"fields, use ``class NT(NamedTuple): pass`` or ``NT = NamedTuple(\"NT\", "
"[])``."
msgstr ""

#: ../../deprecations/pending-removal-in-3.15.rst:47
msgid ""
":class:`typing.TypedDict`: When using the functional syntax to create a :"
"class:`!TypedDict` class, failing to pass a value to the *fields* parameter "
"(``TD = TypedDict(\"TD\")``) is deprecated. Passing ``None`` to the *fields* "
"parameter (``TD = TypedDict(\"TD\", None)``) is also deprecated. Both will "
"be disallowed in Python 3.15. To create a :class:`!TypedDict` class with 0 "
"fields, use ``class TD(TypedDict): pass`` or ``TD = TypedDict(\"TD\", {})``."
msgstr ""

#: ../../deprecations/pending-removal-in-3.16.rst:2
msgid "Pending Removal in Python 3.16"
msgstr ""

#: ../../deprecations/pending-removal-in-3.16.rst:4
msgid ""
":class:`array.array` ``'u'`` type (:c:type:`wchar_t`): use the ``'w'`` type "
"instead (``Py_UCS4``)."
msgstr ""

#: ../../whatsnew/3.13.rst:2306
#: ../../deprecations/pending-removal-in-future.rst:2
msgid "Pending Removal in Future Versions"
msgstr ""

#: ../../deprecations/pending-removal-in-future.rst:4
msgid ""
"The following APIs will be removed in the future, although there is "
"currently no date scheduled for their removal."
msgstr ""

#: ../../deprecations/pending-removal-in-future.rst:7
msgid ""
":mod:`argparse`: Nesting argument groups and nesting mutually exclusive "
"groups are deprecated."
msgstr ""

#: ../../deprecations/pending-removal-in-future.rst:10
msgid ":mod:`array`'s ``'u'`` format code (:gh:`57281`)"
msgstr ""

#: ../../deprecations/pending-removal-in-future.rst:12
msgid ":mod:`builtins`:"
msgstr ""

#: ../../deprecations/pending-removal-in-future.rst:14
msgid "``~bool``, bitwise inversion on bool."
msgstr ""

#: ../../deprecations/pending-removal-in-future.rst:15
msgid "``bool(NotImplemented)``."
msgstr ""

#: ../../deprecations/pending-removal-in-future.rst:16
msgid ""
"Generators: ``throw(type, exc, tb)`` and ``athrow(type, exc, tb)`` signature "
"is deprecated: use ``throw(exc)`` and ``athrow(exc)`` instead, the single "
"argument signature."
msgstr ""

#: ../../deprecations/pending-removal-in-future.rst:19
msgid ""
"Currently Python accepts numeric literals immediately followed by keywords, "
"for example ``0in x``, ``1or x``, ``0if 1else 2``.  It allows confusing and "
"ambiguous expressions like ``[0x1for x in y]`` (which can be interpreted as "
"``[0x1 for x in y]`` or ``[0x1f or x in y]``).  A syntax warning is raised "
"if the numeric literal is immediately followed by one of keywords :keyword:"
"`and`, :keyword:`else`, :keyword:`for`, :keyword:`if`, :keyword:`in`, :"
"keyword:`is` and :keyword:`or`.  In a future release it will be changed to a "
"syntax error. (:gh:`87999`)"
msgstr ""

#: ../../deprecations/pending-removal-in-future.rst:27
msgid ""
"Support for ``__index__()`` and ``__int__()`` method returning non-int type: "
"these methods will be required to return an instance of a strict subclass "
"of :class:`int`."
msgstr ""

#: ../../deprecations/pending-removal-in-future.rst:30
msgid ""
"Support for ``__float__()`` method returning a strict subclass of :class:"
"`float`: these methods will be required to return an instance of :class:"
"`float`."
msgstr ""

#: ../../deprecations/pending-removal-in-future.rst:33
msgid ""
"Support for ``__complex__()`` method returning a strict subclass of :class:"
"`complex`: these methods will be required to return an instance of :class:"
"`complex`."
msgstr ""

#: ../../deprecations/pending-removal-in-future.rst:36
msgid "Delegation of ``int()`` to ``__trunc__()`` method."
msgstr ""

#: ../../deprecations/pending-removal-in-future.rst:38
msgid ""
":mod:`calendar`: ``calendar.January`` and ``calendar.February`` constants "
"are deprecated and replaced by :data:`calendar.JANUARY` and :data:`calendar."
"FEBRUARY`. (Contributed by Prince Roshan in :gh:`103636`.)"
msgstr ""

#: ../../deprecations/pending-removal-in-future.rst:43
msgid ""
":attr:`codeobject.co_lnotab`: use the :meth:`codeobject.co_lines` method "
"instead."
msgstr ""

#: ../../deprecations/pending-removal-in-future.rst:46
msgid ":mod:`datetime`:"
msgstr ""

#: ../../deprecations/pending-removal-in-future.rst:48
msgid ""
":meth:`~datetime.datetime.utcnow`: use ``datetime.datetime.now(tz=datetime."
"UTC)``."
msgstr ""

#: ../../deprecations/pending-removal-in-future.rst:50
msgid ""
":meth:`~datetime.datetime.utcfromtimestamp`: use ``datetime.datetime."
"fromtimestamp(timestamp, tz=datetime.UTC)``."
msgstr ""

#: ../../deprecations/pending-removal-in-future.rst:53
msgid ":mod:`gettext`: Plural value must be an integer."
msgstr ""

#: ../../deprecations/pending-removal-in-future.rst:55
msgid ":mod:`importlib`:"
msgstr ""

#: ../../deprecations/pending-removal-in-future.rst:57
msgid "``load_module()`` method: use ``exec_module()`` instead."
msgstr ""

#: ../../deprecations/pending-removal-in-future.rst:58
msgid ""
":func:`~importlib.util.cache_from_source` *debug_override* parameter is "
"deprecated: use the *optimization* parameter instead."
msgstr ""

#: ../../deprecations/pending-removal-in-future.rst:61
msgid ":mod:`importlib.metadata`:"
msgstr ""

#: ../../deprecations/pending-removal-in-future.rst:63
msgid "``EntryPoints`` tuple interface."
msgstr ""

#: ../../deprecations/pending-removal-in-future.rst:64
msgid "Implicit ``None`` on return values."
msgstr ""

#: ../../deprecations/pending-removal-in-future.rst:66
msgid ""
":mod:`mailbox`: Use of StringIO input and text mode is deprecated, use "
"BytesIO and binary mode instead."
msgstr ""

#: ../../deprecations/pending-removal-in-future.rst:69
msgid ""
":mod:`os`: Calling :func:`os.register_at_fork` in multi-threaded process."
msgstr ""

#: ../../deprecations/pending-removal-in-future.rst:71
msgid ""
":class:`!pydoc.ErrorDuringImport`: A tuple value for *exc_info* parameter is "
"deprecated, use an exception instance."
msgstr ""

#: ../../deprecations/pending-removal-in-future.rst:74
msgid ""
":mod:`re`: More strict rules are now applied for numerical group references "
"and group names in regular expressions.  Only sequence of ASCII digits is "
"now accepted as a numerical reference.  The group name in bytes patterns and "
"replacement strings can now only contain ASCII letters and digits and "
"underscore. (Contributed by Serhiy Storchaka in :gh:`91760`.)"
msgstr ""

#: ../../deprecations/pending-removal-in-future.rst:81
msgid ""
":mod:`!sre_compile`, :mod:`!sre_constants` and :mod:`!sre_parse` modules."
msgstr ""

#: ../../deprecations/pending-removal-in-future.rst:83
msgid ""
":mod:`shutil`: :func:`~shutil.rmtree`'s *onerror* parameter is deprecated in "
"Python 3.12; use the *onexc* parameter instead."
msgstr ""

#: ../../deprecations/pending-removal-in-future.rst:86
msgid ":mod:`ssl` options and protocols:"
msgstr ""

#: ../../deprecations/pending-removal-in-future.rst:88
msgid ":class:`ssl.SSLContext` without protocol argument is deprecated."
msgstr ""

#: ../../deprecations/pending-removal-in-future.rst:89
msgid ""
":class:`ssl.SSLContext`: :meth:`~ssl.SSLContext.set_npn_protocols` and :meth:"
"`!selected_npn_protocol` are deprecated: use ALPN instead."
msgstr ""

#: ../../deprecations/pending-removal-in-future.rst:92
msgid "``ssl.OP_NO_SSL*`` options"
msgstr ""

#: ../../deprecations/pending-removal-in-future.rst:93
msgid "``ssl.OP_NO_TLS*`` options"
msgstr ""

#: ../../deprecations/pending-removal-in-future.rst:94
msgid "``ssl.PROTOCOL_SSLv3``"
msgstr ""

#: ../../deprecations/pending-removal-in-future.rst:95
msgid "``ssl.PROTOCOL_TLS``"
msgstr ""

#: ../../deprecations/pending-removal-in-future.rst:96
msgid "``ssl.PROTOCOL_TLSv1``"
msgstr ""

#: ../../deprecations/pending-removal-in-future.rst:97
msgid "``ssl.PROTOCOL_TLSv1_1``"
msgstr ""

#: ../../deprecations/pending-removal-in-future.rst:98
msgid "``ssl.PROTOCOL_TLSv1_2``"
msgstr ""

#: ../../deprecations/pending-removal-in-future.rst:99
msgid "``ssl.TLSVersion.SSLv3``"
msgstr ""

#: ../../deprecations/pending-removal-in-future.rst:100
msgid "``ssl.TLSVersion.TLSv1``"
msgstr ""

#: ../../deprecations/pending-removal-in-future.rst:101
msgid "``ssl.TLSVersion.TLSv1_1``"
msgstr ""

#: ../../deprecations/pending-removal-in-future.rst:103
msgid ""
":func:`sysconfig.is_python_build` *check_home* parameter is deprecated and "
"ignored."
msgstr ""

#: ../../deprecations/pending-removal-in-future.rst:106
msgid ":mod:`threading` methods:"
msgstr ""

#: ../../deprecations/pending-removal-in-future.rst:108
msgid ""
":meth:`!threading.Condition.notifyAll`: use :meth:`~threading.Condition."
"notify_all`."
msgstr ""

#: ../../deprecations/pending-removal-in-future.rst:109
msgid ":meth:`!threading.Event.isSet`: use :meth:`~threading.Event.is_set`."
msgstr ""

#: ../../deprecations/pending-removal-in-future.rst:110
msgid ""
":meth:`!threading.Thread.isDaemon`, :meth:`threading.Thread.setDaemon`: use :"
"attr:`threading.Thread.daemon` attribute."
msgstr ""

#: ../../deprecations/pending-removal-in-future.rst:112
msgid ""
":meth:`!threading.Thread.getName`, :meth:`threading.Thread.setName`: use :"
"attr:`threading.Thread.name` attribute."
msgstr ""

#: ../../deprecations/pending-removal-in-future.rst:114
msgid ":meth:`!threading.currentThread`: use :meth:`threading.current_thread`."
msgstr ""

#: ../../deprecations/pending-removal-in-future.rst:115
msgid ":meth:`!threading.activeCount`: use :meth:`threading.active_count`."
msgstr ""

#: ../../deprecations/pending-removal-in-future.rst:117
msgid ":class:`typing.Text` (:gh:`92332`)."
msgstr ""

#: ../../deprecations/pending-removal-in-future.rst:119
msgid ""
":class:`unittest.IsolatedAsyncioTestCase`: it is deprecated to return a "
"value that is not ``None`` from a test case."
msgstr ""

#: ../../deprecations/pending-removal-in-future.rst:122
msgid ""
":mod:`urllib.parse` deprecated functions: :func:`~urllib.parse.urlparse` "
"instead"
msgstr ""

#: ../../deprecations/pending-removal-in-future.rst:124
msgid "``splitattr()``"
msgstr ""

#: ../../deprecations/pending-removal-in-future.rst:125
msgid "``splithost()``"
msgstr ""

#: ../../deprecations/pending-removal-in-future.rst:126
msgid "``splitnport()``"
msgstr ""

#: ../../deprecations/pending-removal-in-future.rst:127
msgid "``splitpasswd()``"
msgstr ""

#: ../../deprecations/pending-removal-in-future.rst:128
msgid "``splitport()``"
msgstr ""

#: ../../deprecations/pending-removal-in-future.rst:129
msgid "``splitquery()``"
msgstr ""

#: ../../deprecations/pending-removal-in-future.rst:130
msgid "``splittag()``"
msgstr ""

#: ../../deprecations/pending-removal-in-future.rst:131
msgid "``splittype()``"
msgstr ""

#: ../../deprecations/pending-removal-in-future.rst:132
msgid "``splituser()``"
msgstr ""

#: ../../deprecations/pending-removal-in-future.rst:133
msgid "``splitvalue()``"
msgstr ""

#: ../../deprecations/pending-removal-in-future.rst:134
msgid "``to_bytes()``"
msgstr ""

#: ../../deprecations/pending-removal-in-future.rst:136
msgid ""
":mod:`urllib.request`: :class:`~urllib.request.URLopener` and :class:"
"`~urllib.request.FancyURLopener` style of invoking requests is deprecated. "
"Use newer :func:`~urllib.request.urlopen` functions and methods."
msgstr ""

#: ../../deprecations/pending-removal-in-future.rst:140
msgid ""
":mod:`wsgiref`: ``SimpleHandler.stdout.write()`` should not do partial "
"writes."
msgstr ""

#: ../../deprecations/pending-removal-in-future.rst:143
msgid ""
":mod:`xml.etree.ElementTree`: Testing the truth value of an :class:`~xml."
"etree.ElementTree.Element` is deprecated. In a future release it will always "
"return ``True``. Prefer explicit ``len(elem)`` or ``elem is not None`` tests "
"instead."
msgstr ""

#: ../../deprecations/pending-removal-in-future.rst:148
msgid ""
":meth:`zipimport.zipimporter.load_module` is deprecated: use :meth:"
"`~zipimport.zipimporter.exec_module` instead."
msgstr ""

#: ../../whatsnew/3.13.rst:1635
msgid "CPython Bytecode Changes"
msgstr ""

#: ../../whatsnew/3.13.rst:1637
msgid ""
"The oparg of ``YIELD_VALUE`` is now ``1`` if the yield is part of a yield-"
"from or await, and ``0`` otherwise. The oparg of ``RESUME`` was changed to "
"add a bit indicating whether the except-depth is 1, which is needed to "
"optimize closing of generators. (Contributed by Irit Katriel in :gh:"
"`111354`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:1645
msgid "C API Changes"
msgstr ""

#: ../../whatsnew/3.13.rst:1650
msgid ""
"You no longer have to define the ``PY_SSIZE_T_CLEAN`` macro before "
"including :file:`Python.h` when using ``#`` formats in :ref:`format codes "
"<arg-parsing-string-and-buffers>`. APIs accepting the format codes always "
"use ``Py_ssize_t`` for ``#`` formats. (Contributed by Inada Naoki in :gh:"
"`104922`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:1656
msgid ""
"The *keywords* parameter of :c:func:`PyArg_ParseTupleAndKeywords` and :c:"
"func:`PyArg_VaParseTupleAndKeywords` now has type :c:expr:`char * const *` "
"in C and :c:expr:`const char * const *` in C++, instead of :c:expr:`char "
"**`. It makes these functions compatible with arguments of type :c:expr:"
"`const char * const *`, :c:expr:`const char **` or :c:expr:`char * const *` "
"in C++ and :c:expr:`char * const *` in C without an explicit type cast. This "
"can be overridden with the :c:macro:`PY_CXX_CONST` macro. (Contributed by "
"Serhiy Storchaka in :gh:`65210`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:1666
msgid ""
"Add :c:func:`PyImport_AddModuleRef`: similar to :c:func:"
"`PyImport_AddModule`, but return a :term:`strong reference` instead of a :"
"term:`borrowed reference`. (Contributed by Victor Stinner in :gh:`105922`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:1671
msgid ""
"Add :c:func:`PyWeakref_GetRef` function: similar to :c:func:"
"`PyWeakref_GetObject` but returns a :term:`strong reference`, or ``NULL`` if "
"the referent is no longer live. (Contributed by Victor Stinner in :gh:"
"`105927`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:1676
msgid ""
"Add :c:func:`PyObject_GetOptionalAttr` and :c:func:"
"`PyObject_GetOptionalAttrString`, variants of :c:func:`PyObject_GetAttr` "
"and :c:func:`PyObject_GetAttrString` which don't raise :exc:`AttributeError` "
"if the attribute is not found. These variants are more convenient and faster "
"if the missing attribute should not be treated as a failure. (Contributed by "
"Serhiy Storchaka in :gh:`106521`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:1684
msgid ""
"Add :c:func:`PyMapping_GetOptionalItem` and :c:func:"
"`PyMapping_GetOptionalItemString`: variants of :c:func:`PyObject_GetItem` "
"and :c:func:`PyMapping_GetItemString` which don't raise :exc:`KeyError` if "
"the key is not found. These variants are more convenient and faster if the "
"missing key should not be treated as a failure. (Contributed by Serhiy "
"Storchaka in :gh:`106307`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:1692
msgid "Add fixed variants of functions which silently ignore errors:"
msgstr ""

#: ../../whatsnew/3.13.rst:1694
msgid ""
":c:func:`PyObject_HasAttrWithError` replaces :c:func:`PyObject_HasAttr`."
msgstr ""

#: ../../whatsnew/3.13.rst:1695
msgid ""
":c:func:`PyObject_HasAttrStringWithError` replaces :c:func:"
"`PyObject_HasAttrString`."
msgstr ""

#: ../../whatsnew/3.13.rst:1696
msgid ""
":c:func:`PyMapping_HasKeyWithError` replaces :c:func:`PyMapping_HasKey`."
msgstr ""

#: ../../whatsnew/3.13.rst:1697
msgid ""
":c:func:`PyMapping_HasKeyStringWithError` replaces :c:func:"
"`PyMapping_HasKeyString`."
msgstr ""

#: ../../whatsnew/3.13.rst:1699
msgid ""
"New functions return not only ``1`` for true and ``0`` for false, but also "
"``-1`` for error."
msgstr ""

#: ../../whatsnew/3.13.rst:1702
msgid "(Contributed by Serhiy Storchaka in :gh:`108511`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:1704
msgid ""
"If Python is built in :ref:`debug mode <debug-build>` or :option:`with "
"assertions <--with-assertions>`, :c:func:`PyTuple_SET_ITEM` and :c:func:"
"`PyList_SET_ITEM` now check the index argument with an assertion. "
"(Contributed by Victor Stinner in :gh:`106168`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:1709
msgid ""
"Add :c:func:`PyModule_Add` function: similar to :c:func:"
"`PyModule_AddObjectRef` and :c:func:`PyModule_AddObject` but always steals a "
"reference to the value. (Contributed by Serhiy Storchaka in :gh:`86493`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:1714
msgid ""
"Add :c:func:`PyDict_GetItemRef` and :c:func:`PyDict_GetItemStringRef` "
"functions: similar to :c:func:`PyDict_GetItemWithError` but returning a :"
"term:`strong reference` instead of a :term:`borrowed reference`. Moreover, "
"these functions return -1 on error and so checking ``PyErr_Occurred()`` is "
"not needed. (Contributed by Victor Stinner in :gh:`106004`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:1721
msgid ""
"Added :c:func:`PyDict_SetDefaultRef`, which is similar to :c:func:"
"`PyDict_SetDefault` but returns a :term:`strong reference` instead of a :"
"term:`borrowed reference`. This function returns ``-1`` on error, ``0`` on "
"insertion, and ``1`` if the key was already present in the dictionary. "
"(Contributed by Sam Gross in :gh:`112066`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:1727
msgid ""
"Add :c:func:`PyDict_ContainsString` function: same as :c:func:"
"`PyDict_Contains`, but *key* is specified as a :c:expr:`const char*` UTF-8 "
"encoded bytes string, rather than a :c:expr:`PyObject*`. (Contributed by "
"Victor Stinner in :gh:`108314`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:1732
msgid ""
"Added :c:func:`PyList_GetItemRef` function: similar to :c:func:"
"`PyList_GetItem` but returns a :term:`strong reference` instead of a :term:"
"`borrowed reference`."
msgstr ""

#: ../../whatsnew/3.13.rst:1736
msgid ""
"Add :c:func:`Py_IsFinalizing` function: check if the main Python interpreter "
"is :term:`shutting down <interpreter shutdown>`. (Contributed by Victor "
"Stinner in :gh:`108014`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:1740
msgid ""
"Add :c:func:`PyLong_AsInt` function: similar to :c:func:`PyLong_AsLong`, but "
"store the result in a C :c:expr:`int` instead of a C :c:expr:`long`. "
"Previously, it was known as the private function :c:func:`!_PyLong_AsInt` "
"(with an underscore prefix). (Contributed by Victor Stinner in :gh:`108014`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:1746
msgid ""
"Python built with :file:`configure` :option:`--with-trace-refs` (tracing "
"references) now supports the :ref:`Limited API <limited-c-api>`. "
"(Contributed by Victor Stinner in :gh:`108634`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:1750
msgid ""
"Add :c:func:`PyObject_VisitManagedDict` and :c:func:"
"`PyObject_ClearManagedDict` functions which must be called by the traverse "
"and clear functions of a type using :c:macro:`Py_TPFLAGS_MANAGED_DICT` "
"flag.  The `pythoncapi-compat project <https://github.com/python/pythoncapi-"
"compat/>`__ can be used to get these functions on Python 3.11 and 3.12. "
"(Contributed by Victor Stinner in :gh:`107073`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:1758
msgid ""
"Add :c:func:`PyUnicode_EqualToUTF8AndSize` and :c:func:"
"`PyUnicode_EqualToUTF8` functions: compare Unicode object with a :c:expr:"
"`const char*` UTF-8 encoded string and return true (``1``) if they are "
"equal, or false (``0``) otherwise. These functions do not raise exceptions. "
"(Contributed by Serhiy Storchaka in :gh:`110289`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:1764
msgid ""
"Add :c:func:`PyThreadState_GetUnchecked()` function: similar to :c:func:"
"`PyThreadState_Get()`, but don't kill the process with a fatal error if it "
"is NULL. The caller is responsible to check if the result is NULL. "
"Previously, the function was private and known as "
"``_PyThreadState_UncheckedGet()``. (Contributed by Victor Stinner in :gh:"
"`108867`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:1771
msgid ""
"Add :c:func:`PySys_AuditTuple` function: similar to :c:func:`PySys_Audit`, "
"but pass event arguments as a Python :class:`tuple` object. (Contributed by "
"Victor Stinner in :gh:`85283`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:1775
msgid ""
":c:func:`PyArg_ParseTupleAndKeywords` now supports non-ASCII keyword "
"parameter names. (Contributed by Serhiy Storchaka in :gh:`110815`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:1779
msgid ""
"Add :c:func:`PyMem_RawMalloc`, :c:func:`PyMem_RawCalloc`, :c:func:"
"`PyMem_RawRealloc` and :c:func:`PyMem_RawFree` to the limited C API (version "
"3.13). (Contributed by Victor Stinner in :gh:`85283`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:1784
msgid ""
"Add :c:func:`PySys_Audit` and :c:func:`PySys_AuditTuple` functions to the "
"limited C API. (Contributed by Victor Stinner in :gh:`85283`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:1788
msgid ""
"Add :c:func:`PyErr_FormatUnraisable` function: similar to :c:func:"
"`PyErr_WriteUnraisable`, but allow customizing the warning message. "
"(Contributed by Serhiy Storchaka in :gh:`108082`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:1792
msgid ""
"Add :c:func:`PyList_Extend` and :c:func:`PyList_Clear` functions: similar to "
"Python ``list.extend()`` and ``list.clear()`` methods. (Contributed by "
"Victor Stinner in :gh:`111138`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:1796
msgid ""
"Add :c:func:`PyDict_Pop` and :c:func:`PyDict_PopString` functions: remove a "
"key from a dictionary and optionally return the removed value. This is "
"similar to :meth:`dict.pop`, but without the default value and not raising :"
"exc:`KeyError` if the key is missing. (Contributed by Stefan Behnel and "
"Victor Stinner in :gh:`111262`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:1802
msgid ""
"Add :c:func:`Py_HashPointer` function to hash a pointer. (Contributed by "
"Victor Stinner in :gh:`111545`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:1805
msgid ""
"Add :c:func:`PyObject_GenericHash` function that implements the default "
"hashing function of a Python object. (Contributed by Serhiy Storchaka in :gh:"
"`113024`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:1809
msgid "Add PyTime C API:"
msgstr ""

#: ../../whatsnew/3.13.rst:1811
msgid ":c:type:`PyTime_t` type."
msgstr ""

#: ../../whatsnew/3.13.rst:1812
msgid ":c:var:`PyTime_MIN` and :c:var:`PyTime_MAX` constants."
msgstr ""

#: ../../whatsnew/3.13.rst:1813
msgid "Add functions:"
msgstr ""

#: ../../whatsnew/3.13.rst:1815
msgid ":c:func:`PyTime_AsSecondsDouble`."
msgstr ""

#: ../../whatsnew/3.13.rst:1816
msgid ":c:func:`PyTime_Monotonic`."
msgstr ""

#: ../../whatsnew/3.13.rst:1817
msgid ":c:func:`PyTime_MonotonicRaw`."
msgstr ""

#: ../../whatsnew/3.13.rst:1818
msgid ":c:func:`PyTime_PerfCounter`."
msgstr ""

#: ../../whatsnew/3.13.rst:1819
msgid ":c:func:`PyTime_PerfCounterRaw`."
msgstr ""

#: ../../whatsnew/3.13.rst:1820
msgid ":c:func:`PyTime_Time`."
msgstr ""

#: ../../whatsnew/3.13.rst:1821
msgid ":c:func:`PyTime_TimeRaw`."
msgstr ""

#: ../../whatsnew/3.13.rst:1823
msgid "(Contributed by Victor Stinner and Petr Viktorin in :gh:`110850`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:1825
msgid ""
"Add :c:func:`PyLong_AsNativeBytes`, :c:func:`PyLong_FromNativeBytes` and :c:"
"func:`PyLong_FromUnsignedNativeBytes` functions to simplify converting "
"between native integer types and Python :class:`int` objects. (Contributed "
"by Steve Dower in :gh:`111140`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:1830
msgid ""
"Add :c:func:`PyType_GetFullyQualifiedName` function to get the type's fully "
"qualified name. Equivalent to ``f\"{type.__module__}.{type."
"__qualname__}\"``, or ``type.__qualname__`` if ``type.__module__`` is not a "
"string or is equal to ``\"builtins\"``. (Contributed by Victor Stinner in :"
"gh:`111696`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:1836
msgid ""
"Add :c:func:`PyType_GetModuleName` function to get the type's module name. "
"Equivalent to getting the ``type.__module__`` attribute. (Contributed by "
"Eric Snow and Victor Stinner in :gh:`111696`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:1840
msgid ""
"Add support for ``%T``, ``%#T``, ``%N`` and ``%#N`` formats to :c:func:"
"`PyUnicode_FromFormat`: format the fully qualified name of an object type "
"and of a type: call :c:func:`PyType_GetModuleName`. See :pep:`737` for more "
"information. (Contributed by Victor Stinner in :gh:`111696`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:1846
msgid ""
"Add :c:func:`Py_GetConstant` and :c:func:`Py_GetConstantBorrowed` functions "
"to get constants. For example, ``Py_GetConstant(Py_CONSTANT_ZERO)`` returns "
"a :term:`strong reference` to the constant zero. (Contributed by Victor "
"Stinner in :gh:`115754`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:1851
msgid ""
"Add :c:func:`PyType_GetModuleByDef` to the limited C API (Contributed by "
"Victor Stinner in :gh:`116936`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:1854
msgid ""
"Add two new functions to the C-API, :c:func:`PyRefTracer_SetTracer` and :c:"
"func:`PyRefTracer_GetTracer`, that allows to track object creation and "
"destruction the same way the :mod:`tracemalloc` module does. (Contributed by "
"Pablo Galindo in :gh:`93502`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:1859
msgid ""
"Add :c:func:`PyEval_GetFrameBuiltins`, :c:func:`PyEval_GetFrameGlobals`, "
"and :c:func:`PyEval_GetFrameLocals` to the C API. These replacements for :c:"
"func:`PyEval_GetBuiltins`, :c:func:`PyEval_GetGlobals`, and :c:func:"
"`PyEval_GetLocals` return :term:`strong references <strong reference>` "
"rather than borrowed references. (Added as part of :pep:`667`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:1865
msgid ""
"Add :c:type:`PyMutex` API, a lightweight mutex that occupies a single byte. "
"The :c:func:`PyMutex_Lock` function will release the GIL (if currently held) "
"if the operation needs to block. (Contributed by Sam Gross in :gh:`108724`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:1871
msgid "Build Changes"
msgstr ""

#: ../../whatsnew/3.13.rst:1873
msgid ""
"The :file:`configure` option :option:`--with-system-libmpdec` now defaults "
"to ``yes``. The bundled copy of ``libmpdecimal`` will be removed in Python "
"3.15."
msgstr ""

#: ../../whatsnew/3.13.rst:1877
msgid ""
"Autoconf 2.71 and aclocal 1.16.4 are now required to regenerate the :file:"
"`configure` script. (Contributed by Christian Heimes in :gh:`89886`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:1881
msgid ""
"SQLite 3.15.2 or newer is required to build the :mod:`sqlite3` extension "
"module. (Contributed by Erlend Aasland in :gh:`105875`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:1884
msgid ""
"Python built with :file:`configure` :option:`--with-trace-refs` (tracing "
"references) is now ABI compatible with the Python release build and :ref:"
"`debug build <debug-build>`. (Contributed by Victor Stinner in :gh:`108634`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:1889
msgid ""
"Building CPython now requires a compiler with support for the C11 atomic "
"library, GCC built-in atomic functions, or MSVC interlocked intrinsics."
msgstr ""

#: ../../whatsnew/3.13.rst:1892
msgid ""
"The ``errno``, ``fcntl``, ``grp``, ``md5``, ``pwd``, ``resource``, "
"``termios``, ``winsound``, ``_ctypes_test``, ``_multiprocessing."
"posixshmem``, ``_scproxy``, ``_stat``, ``_statistics``, ``_testconsole``, "
"``_testimportmultiple`` and ``_uuid`` C extensions are now built with the :"
"ref:`limited C API <limited-c-api>`. (Contributed by Victor Stinner in :gh:"
"`85283`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:1899
msgid ""
"``wasm32-wasi`` is now a :pep:`11` tier 2 platform. (Contributed by Brett "
"Cannon in :gh:`115192`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:1902
msgid ""
"``wasm32-emscripten`` is no longer a :pep:`11` supported platform. "
"(Contributed by Brett Cannon in :gh:`115192`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:1905
msgid ""
"Python now bundles the `mimalloc library <https://github.com/microsoft/"
"mimalloc>`__. It is licensed under the MIT license; see :ref:`mimalloc "
"license <mimalloc-license>`. The bundled mimalloc has custom changes, see :"
"gh:`113141` for details. (Contributed by Dino Viehland in :gh:`109914`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:1910
msgid ""
"On POSIX systems, the pkg-config (``.pc``) filenames now include the ABI "
"flags.  For example, the free-threaded build generates ``python-3.13t.pc`` "
"and the debug build generates ``python-3.13d.pc``."
msgstr ""

#: ../../whatsnew/3.13.rst:1916
msgid "Porting to Python 3.13"
msgstr ""

#: ../../whatsnew/3.13.rst:1918
msgid ""
"This section lists previously described changes and other bugfixes that may "
"require changes to your code."
msgstr ""

#: ../../whatsnew/3.13.rst:1922
msgid "Changes in the Python API"
msgstr ""

#: ../../whatsnew/3.13.rst:1924
msgid ""
"An :exc:`OSError` is now raised by :func:`getpass.getuser` for any failure "
"to retrieve a username, instead of :exc:`ImportError` on non-Unix platforms "
"or :exc:`KeyError` on Unix platforms where the password database is empty."
msgstr ""

#: ../../whatsnew/3.13.rst:1928
msgid ""
"The :mod:`threading` module now expects the :mod:`!_thread` module to have "
"an ``_is_main_interpreter`` attribute.  It is a function with no arguments "
"that returns ``True`` if the current interpreter is the main interpreter."
msgstr ""

#: ../../whatsnew/3.13.rst:1933
msgid ""
"Any library or application that provides a custom ``_thread`` module must "
"provide ``_is_main_interpreter()``, just like the module's other \"private\" "
"attributes. (See :gh:`112826`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:1938
msgid ""
":class:`mailbox.Maildir` now ignores files with a leading dot. (Contributed "
"by Zackery Spytz in :gh:`65559`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:1941
msgid ""
":meth:`pathlib.Path.glob` and :meth:`~pathlib.Path.rglob` now return both "
"files and directories if a pattern that ends with \"``**``\" is given, "
"rather than directories only. Users may add a trailing slash to match only "
"directories."
msgstr ""

#: ../../whatsnew/3.13.rst:1946
msgid ""
"The value of the :attr:`!mode` attribute of :class:`gzip.GzipFile` was "
"changed from integer (``1`` or ``2``) to string (``'rb'`` or ``'wb'``). The "
"value of the :attr:`!mode` attribute of the readable file-like object "
"returned by :meth:`zipfile.ZipFile.open` was changed from ``'r'`` to "
"``'rb'``. (Contributed by Serhiy Storchaka in :gh:`115961`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:1952
msgid ""
":class:`functools.partial` now emits a :exc:`FutureWarning` when it is used "
"as a method. Its behavior will be changed in future Python versions. Wrap it "
"in :func:`staticmethod` if you want to preserve the old behavior. "
"(Contributed by Serhiy Storchaka in :gh:`121027`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:1960
msgid ""
"Calling :func:`locals` in an :term:`optimized scope` now produces an "
"independent snapshot on each call, and hence no longer implicitly updates "
"previously returned references. Obtaining the legacy CPython behaviour now "
"requires explicit calls to update the initially returned dictionary with the "
"results of subsequent calls to ``locals()``. Code execution functions that "
"implicitly target ``locals()`` (such as ``exec`` and ``eval``) must be "
"passed an explicit namespace to access their results in an optimized scope. "
"(Changed as part of :pep:`667`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:1969
msgid ""
"Calling :func:`locals` from a comprehension at module or class scope "
"(including via ``exec`` or ``eval``) once more behaves as if the "
"comprehension were running as an independent nested function (i.e. the local "
"variables from the containing scope are not included). In Python 3.12, this "
"had changed to include the local variables from the containing scope when "
"implementing :pep:`709`. (Changed as part of :pep:`667`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:1976
msgid ""
"Accessing :attr:`FrameType.f_locals <frame.f_locals>` in an :term:`optimized "
"scope` now returns a write-through proxy rather than a snapshot that gets "
"updated at ill-specified times. If a snapshot is desired, it must be created "
"explicitly with ``dict`` or the proxy's ``.copy()`` method. (Changed as part "
"of :pep:`667`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:1983
msgid "Changes in the C API"
msgstr ""

#: ../../whatsnew/3.13.rst:1985
msgid ""
"``Python.h`` no longer includes the ``<ieeefp.h>`` standard header. It was "
"included for the ``finite()`` function which is now provided by the ``<math."
"h>`` header. It should now be included explicitly if needed. Remove also the "
"``HAVE_IEEEFP_H`` macro. (Contributed by Victor Stinner in :gh:`108765`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:1991
msgid ""
"``Python.h`` no longer includes these standard header files: ``<time.h>``, "
"``<sys/select.h>`` and ``<sys/time.h>``. If needed, they should now be "
"included explicitly. For example, ``<time.h>`` provides the ``clock()`` and "
"``gmtime()`` functions, ``<sys/select.h>`` provides the ``select()`` "
"function, and ``<sys/time.h>`` provides the ``futimes()``, "
"``gettimeofday()`` and ``setitimer()`` functions. (Contributed by Victor "
"Stinner in :gh:`108765`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:1999
msgid ""
"On Windows, ``Python.h`` no longer includes the ``<stddef.h>`` standard "
"header file. If needed, it should now be included explicitly. For example, "
"it provides ``offsetof()`` function, and ``size_t`` and ``ptrdiff_t`` types. "
"Including ``<stddef.h>`` explicitly was already needed by all other "
"platforms, the ``HAVE_STDDEF_H`` macro is only defined on Windows. "
"(Contributed by Victor Stinner in :gh:`108765`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:2006
msgid ""
"If the :c:macro:`Py_LIMITED_API` macro is defined, :c:macro:`!"
"Py_BUILD_CORE`, :c:macro:`!Py_BUILD_CORE_BUILTIN` and :c:macro:`!"
"Py_BUILD_CORE_MODULE` macros are now undefined by ``<Python.h>``. "
"(Contributed by Victor Stinner in :gh:`85283`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:2011
msgid ""
"The old trashcan macros ``Py_TRASHCAN_SAFE_BEGIN`` and "
"``Py_TRASHCAN_SAFE_END`` were removed. They should be replaced by the new "
"macros ``Py_TRASHCAN_BEGIN`` and ``Py_TRASHCAN_END``."
msgstr ""

#: ../../whatsnew/3.13.rst:2015
msgid "A ``tp_dealloc`` function that has the old macros, such as::"
msgstr ""

#: ../../whatsnew/3.13.rst:2026
msgid "should migrate to the new macros as follows::"
msgstr ""

#: ../../whatsnew/3.13.rst:2037
msgid ""
"Note that ``Py_TRASHCAN_BEGIN`` has a second argument which should be the "
"deallocation function it is in. The new macros were added in Python 3.8 and "
"the old macros were deprecated in Python 3.11. (Contributed by Irit Katriel "
"in :gh:`105111`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:2042
msgid ""
"Functions :c:func:`PyDict_GetItem`, :c:func:`PyDict_GetItemString`, :c:func:"
"`PyMapping_HasKey`, :c:func:`PyMapping_HasKeyString`, :c:func:"
"`PyObject_HasAttr`, :c:func:`PyObject_HasAttrString`, and :c:func:"
"`PySys_GetObject`, which clear all errors which occurred when calling them, "
"now report them using :func:`sys.unraisablehook`. You may replace them with "
"other functions as recommended in the documentation. (Contributed by Serhiy "
"Storchaka in :gh:`106672`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:2051
msgid ""
":c:func:`!PyCode_GetFirstFree` is an unstable API now and has been renamed "
"to :c:func:`PyUnstable_Code_GetFirstFree`. (Contributed by Bogdan Romanyuk "
"in :gh:`115781`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:2057
msgid ""
"The effects of mutating the dictionary returned from :c:func:"
"`PyEval_GetLocals` in an :term:`optimized scope` have changed. New dict "
"entries added this way will now *only* be visible to subsequent :c:func:"
"`PyEval_GetLocals` calls in that frame, as :c:func:`PyFrame_GetLocals`, :"
"func:`locals`, and :attr:`FrameType.f_locals <frame.f_locals>` no longer "
"access the same underlying cached dictionary. Changes made to entries for "
"actual variable names and names added via the write-through proxy interfaces "
"will be overwritten on subsequent calls to :c:func:`PyEval_GetLocals` in "
"that frame. The recommended code update depends on how the function was "
"being used, so refer to the deprecation notice on the function for details. "
"(Changed as part of :pep:`667`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:2068
msgid ""
"Calling :c:func:`PyFrame_GetLocals` in an :term:`optimized scope` now "
"returns a write-through proxy rather than a snapshot that gets updated at "
"ill-specified times. If a snapshot is desired, it must be created explicitly "
"(e.g. with :c:func:`PyDict_Copy`) or by calling the new :c:func:"
"`PyEval_GetFrameLocals` API. (Changed as part of :pep:`667`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:2073
msgid ""
":c:func:`!PyFrame_FastToLocals` and :c:func:`!PyFrame_FastToLocalsWithError` "
"no longer have any effect. Calling these functions has been redundant since "
"Python 3.11, when :c:func:`PyFrame_GetLocals` was first introduced. (Changed "
"as part of :pep:`667`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:2078
msgid ""
":c:func:`!PyFrame_LocalsToFast` no longer has any effect. Calling this "
"function is redundant now that :c:func:`PyFrame_GetLocals` returns a write-"
"through proxy for :term:`optimized scopes <optimized scope>`. (Changed as "
"part of :pep:`667`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:2083
msgid "Removed C APIs"
msgstr ""

#: ../../whatsnew/3.13.rst:2085
msgid ""
"Remove many APIs (functions, macros, variables) with names prefixed by "
"``_Py`` or ``_PY`` (considered as private API). If your project is affected "
"by one of these removals and you consider that the removed API should remain "
"available, please open a new issue to request a public C API and add ``cc "
"@vstinner`` to the issue to notify Victor Stinner. (Contributed by Victor "
"Stinner in :gh:`106320`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:2092
msgid "Remove functions deprecated in Python 3.9:"
msgstr ""

#: ../../whatsnew/3.13.rst:2094
msgid ""
"``PyEval_CallObject()``, ``PyEval_CallObjectWithKeywords()``: use :c:func:"
"`PyObject_CallNoArgs` or :c:func:`PyObject_Call` instead. Warning: :c:func:"
"`PyObject_Call` positional arguments must be a :class:`tuple` and must not "
"be ``NULL``, keyword arguments must be a :class:`dict` or ``NULL``, whereas "
"removed functions checked arguments type and accepted ``NULL`` positional "
"and keyword arguments. To replace ``PyEval_CallObjectWithKeywords(func, "
"NULL, kwargs)`` with :c:func:`PyObject_Call`, pass an empty tuple as "
"positional arguments using :c:func:`PyTuple_New(0) <PyTuple_New>`."
msgstr ""

#: ../../whatsnew/3.13.rst:2103
msgid "``PyEval_CallFunction()``: use :c:func:`PyObject_CallFunction` instead."
msgstr ""

#: ../../whatsnew/3.13.rst:2104
msgid "``PyEval_CallMethod()``: use :c:func:`PyObject_CallMethod` instead."
msgstr ""

#: ../../whatsnew/3.13.rst:2105
msgid "``PyCFunction_Call()``: use :c:func:`PyObject_Call` instead."
msgstr ""

#: ../../whatsnew/3.13.rst:2107
msgid "(Contributed by Victor Stinner in :gh:`105107`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:2109
msgid ""
"Remove old buffer protocols deprecated in Python 3.0. Use :ref:"
"`bufferobjects` instead."
msgstr ""

#: ../../whatsnew/3.13.rst:2111
msgid ""
":c:func:`!PyObject_CheckReadBuffer`: Use :c:func:`PyObject_CheckBuffer` to "
"test if the object supports the buffer protocol. Note that :c:func:"
"`PyObject_CheckBuffer` doesn't guarantee that :c:func:`PyObject_GetBuffer` "
"will succeed. To test if the object is actually readable, see the next "
"example of :c:func:`PyObject_GetBuffer`."
msgstr ""

#: ../../whatsnew/3.13.rst:2118
msgid ""
":c:func:`!PyObject_AsCharBuffer`, :c:func:`!PyObject_AsReadBuffer`: :c:func:"
"`PyObject_GetBuffer` and :c:func:`PyBuffer_Release` instead:"
msgstr ""

#: ../../whatsnew/3.13.rst:2131
msgid ""
":c:func:`!PyObject_AsWriteBuffer`: Use :c:func:`PyObject_GetBuffer` and :c:"
"func:`PyBuffer_Release` instead:"
msgstr ""

#: ../../whatsnew/3.13.rst:2143
msgid "(Contributed by Inada Naoki in :gh:`85275`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:2145
msgid ""
"Remove the following old functions to configure the Python initialization, "
"deprecated in Python 3.11:"
msgstr ""

#: ../../whatsnew/3.13.rst:2148
msgid ""
"``PySys_AddWarnOptionUnicode()``: use :c:member:`PyConfig.warnoptions` "
"instead."
msgstr ""

#: ../../whatsnew/3.13.rst:2149
msgid ""
"``PySys_AddWarnOption()``: use :c:member:`PyConfig.warnoptions` instead."
msgstr ""

#: ../../whatsnew/3.13.rst:2150
msgid "``PySys_AddXOption()``: use :c:member:`PyConfig.xoptions` instead."
msgstr ""

#: ../../whatsnew/3.13.rst:2151
msgid "``PySys_HasWarnOptions()``: use :c:member:`PyConfig.xoptions` instead."
msgstr ""

#: ../../whatsnew/3.13.rst:2152
msgid ""
"``PySys_SetPath()``: set :c:member:`PyConfig.module_search_paths` instead."
msgstr ""

#: ../../whatsnew/3.13.rst:2153
msgid "``Py_SetPath()``: set :c:member:`PyConfig.module_search_paths` instead."
msgstr ""

#: ../../whatsnew/3.13.rst:2154
msgid ""
"``Py_SetStandardStreamEncoding()``: set :c:member:`PyConfig.stdio_encoding` "
"instead, and set also maybe :c:member:`PyConfig.legacy_windows_stdio` (on "
"Windows)."
msgstr ""

#: ../../whatsnew/3.13.rst:2157
msgid ""
"``_Py_SetProgramFullPath()``: set :c:member:`PyConfig.executable` instead."
msgstr ""

#: ../../whatsnew/3.13.rst:2159
msgid ""
"Use the new :c:type:`PyConfig` API of the :ref:`Python Initialization "
"Configuration <init-config>` instead (:pep:`587`), added to Python 3.8. "
"(Contributed by Victor Stinner in :gh:`105145`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:2163
msgid ""
"Remove ``PyEval_ThreadsInitialized()`` function, deprecated in Python 3.9. "
"Since Python 3.7, ``Py_Initialize()`` always creates the GIL: calling "
"``PyEval_InitThreads()`` does nothing and ``PyEval_ThreadsInitialized()`` "
"always returned non-zero. (Contributed by Victor Stinner in :gh:`105182`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:2169
msgid ""
"Remove ``PyEval_AcquireLock()`` and ``PyEval_ReleaseLock()`` functions, "
"deprecated in Python 3.2. They didn't update the current thread state. They "
"can be replaced with:"
msgstr ""

#: ../../whatsnew/3.13.rst:2173
msgid ":c:func:`PyEval_SaveThread` and :c:func:`PyEval_RestoreThread`;"
msgstr ""

#: ../../whatsnew/3.13.rst:2174
msgid ""
"low-level :c:func:`PyEval_AcquireThread` and :c:func:`PyEval_RestoreThread`;"
msgstr ""

#: ../../whatsnew/3.13.rst:2175
msgid "or :c:func:`PyGILState_Ensure` and :c:func:`PyGILState_Release`."
msgstr ""

#: ../../whatsnew/3.13.rst:2177
msgid "(Contributed by Victor Stinner in :gh:`105182`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:2179
msgid ""
"Remove private ``_PyObject_FastCall()`` function: use "
"``PyObject_Vectorcall()`` which is available since Python 3.8 (:pep:`590`). "
"(Contributed by Victor Stinner in :gh:`106023`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:2184
msgid ""
"Remove ``cpython/pytime.h`` header file: it only contained private "
"functions. (Contributed by Victor Stinner in :gh:`106316`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:2187
msgid ""
"Remove ``_PyInterpreterState_Get()`` alias to :c:func:"
"`PyInterpreterState_Get()` which was kept for backward compatibility with "
"Python 3.8. The `pythoncapi-compat project <https://github.com/python/"
"pythoncapi-compat/>`__ can be used to get :c:func:`PyInterpreterState_Get()` "
"on Python 3.8 and older. (Contributed by Victor Stinner in :gh:`106320`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:2194
msgid ""
"The :c:func:`PyModule_AddObject` function is now :term:`soft deprecated`: :c:"
"func:`PyModule_Add` or :c:func:`PyModule_AddObjectRef` functions should be "
"used instead. (Contributed by Serhiy Storchaka in :gh:`86493`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:2200
msgid "Deprecated C APIs"
msgstr ""

#: ../../whatsnew/3.13.rst:2202
msgid ""
"Deprecate the old ``Py_UNICODE`` and ``PY_UNICODE_TYPE`` types: use directly "
"the :c:type:`wchar_t` type instead. Since Python 3.3, ``Py_UNICODE`` and "
"``PY_UNICODE_TYPE`` are just aliases to :c:type:`wchar_t`. (Contributed by "
"Victor Stinner in :gh:`105156`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:2207
msgid "Deprecate old Python initialization functions:"
msgstr ""

#: ../../whatsnew/3.13.rst:2209 ../../whatsnew/3.13.rst:2295
msgid ""
":c:func:`PySys_ResetWarnOptions`: clear :data:`sys.warnoptions` and :data:`!"
"warnings.filters` instead."
msgstr ""

#: ../../whatsnew/3.13.rst:2211 ../../whatsnew/3.13.rst:2297
msgid ":c:func:`Py_GetExecPrefix`: get :data:`sys.exec_prefix` instead."
msgstr ""

#: ../../whatsnew/3.13.rst:2212 ../../whatsnew/3.13.rst:2298
msgid ":c:func:`Py_GetPath`: get :data:`sys.path` instead."
msgstr ""

#: ../../whatsnew/3.13.rst:2213 ../../whatsnew/3.13.rst:2299
msgid ":c:func:`Py_GetPrefix`: get :data:`sys.prefix` instead."
msgstr ""

#: ../../whatsnew/3.13.rst:2214 ../../whatsnew/3.13.rst:2300
msgid ":c:func:`Py_GetProgramFullPath`: get :data:`sys.executable` instead."
msgstr ""

#: ../../whatsnew/3.13.rst:2215 ../../whatsnew/3.13.rst:2301
msgid ":c:func:`Py_GetProgramName`: get :data:`sys.executable` instead."
msgstr ""

#: ../../whatsnew/3.13.rst:2216 ../../whatsnew/3.13.rst:2302
msgid ""
":c:func:`Py_GetPythonHome`: get :c:member:`PyConfig.home` or :envvar:"
"`PYTHONHOME` environment variable instead."
msgstr ""

#: ../../whatsnew/3.13.rst:2219
msgid ""
"Functions scheduled for removal in Python 3.15. (Contributed by Victor "
"Stinner in :gh:`105145`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:2222
msgid ""
"Deprecate the :c:func:`PyImport_ImportModuleNoBlock` function which is just "
"an alias to :c:func:`PyImport_ImportModule` since Python 3.3. Scheduled for "
"removal in Python 3.15. (Contributed by Victor Stinner in :gh:`105396`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:2227
msgid ""
"Deprecate the :c:func:`PyWeakref_GetObject` and :c:func:"
"`PyWeakref_GET_OBJECT` functions, which return a :term:`borrowed reference`: "
"use the new :c:func:`PyWeakref_GetRef` function instead, it returns a :term:"
"`strong reference`. The `pythoncapi-compat project <https://github.com/"
"python/pythoncapi-compat/>`__ can be used to get :c:func:`PyWeakref_GetRef` "
"on Python 3.12 and older. (Contributed by Victor Stinner in :gh:`105927`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:2235
msgid ""
"Deprecate the :c:func:`PyEval_GetBuiltins`, :c:func:`PyEval_GetGlobals`, "
"and :c:func:`PyEval_GetLocals` functions, which return a :term:`borrowed "
"reference`. Refer to the deprecation notices on each function for their "
"recommended replacements. (Soft deprecated as part of :pep:`667`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:2243
msgid ""
"Creating immutable types (:c:macro:`Py_TPFLAGS_IMMUTABLETYPE`) with mutable "
"bases using the C API."
msgstr ""

#: ../../whatsnew/3.13.rst:2246
msgid ""
"Functions to configure the Python initialization, deprecated in Python 3.11:"
msgstr ""

#: ../../whatsnew/3.13.rst:2248
msgid "``PySys_SetArgvEx()``: set :c:member:`PyConfig.argv` instead."
msgstr ""

#: ../../whatsnew/3.13.rst:2249
msgid "``PySys_SetArgv()``: set :c:member:`PyConfig.argv` instead."
msgstr ""

#: ../../whatsnew/3.13.rst:2250
msgid "``Py_SetProgramName()``: set :c:member:`PyConfig.program_name` instead."
msgstr ""

#: ../../whatsnew/3.13.rst:2251
msgid "``Py_SetPythonHome()``: set :c:member:`PyConfig.home` instead."
msgstr ""

#: ../../whatsnew/3.13.rst:2253 ../../whatsnew/3.13.rst:2281
msgid ""
"The :c:func:`Py_InitializeFromConfig` API should be used with :c:type:"
"`PyConfig` instead."
msgstr ""

#: ../../whatsnew/3.13.rst:2256
msgid "Global configuration variables:"
msgstr ""

#: ../../whatsnew/3.13.rst:2258
msgid ":c:var:`Py_DebugFlag`: use :c:member:`PyConfig.parser_debug`"
msgstr ""

#: ../../whatsnew/3.13.rst:2259
msgid ":c:var:`Py_VerboseFlag`: use :c:member:`PyConfig.verbose`"
msgstr ""

#: ../../whatsnew/3.13.rst:2260
msgid ":c:var:`Py_QuietFlag`: use :c:member:`PyConfig.quiet`"
msgstr ""

#: ../../whatsnew/3.13.rst:2261
msgid ":c:var:`Py_InteractiveFlag`: use :c:member:`PyConfig.interactive`"
msgstr ""

#: ../../whatsnew/3.13.rst:2262
msgid ":c:var:`Py_InspectFlag`: use :c:member:`PyConfig.inspect`"
msgstr ""

#: ../../whatsnew/3.13.rst:2263
msgid ":c:var:`Py_OptimizeFlag`: use :c:member:`PyConfig.optimization_level`"
msgstr ""

#: ../../whatsnew/3.13.rst:2264
msgid ":c:var:`Py_NoSiteFlag`: use :c:member:`PyConfig.site_import`"
msgstr ""

#: ../../whatsnew/3.13.rst:2265
msgid ":c:var:`Py_BytesWarningFlag`: use :c:member:`PyConfig.bytes_warning`"
msgstr ""

#: ../../whatsnew/3.13.rst:2266
msgid ":c:var:`Py_FrozenFlag`: use :c:member:`PyConfig.pathconfig_warnings`"
msgstr ""

#: ../../whatsnew/3.13.rst:2267
msgid ""
":c:var:`Py_IgnoreEnvironmentFlag`: use :c:member:`PyConfig.use_environment`"
msgstr ""

#: ../../whatsnew/3.13.rst:2268
msgid ""
":c:var:`Py_DontWriteBytecodeFlag`: use :c:member:`PyConfig.write_bytecode`"
msgstr ""

#: ../../whatsnew/3.13.rst:2269
msgid ""
":c:var:`Py_NoUserSiteDirectory`: use :c:member:`PyConfig.user_site_directory`"
msgstr ""

#: ../../whatsnew/3.13.rst:2270
msgid ""
":c:var:`Py_UnbufferedStdioFlag`: use :c:member:`PyConfig.buffered_stdio`"
msgstr ""

#: ../../whatsnew/3.13.rst:2271
msgid ""
":c:var:`Py_HashRandomizationFlag`: use :c:member:`PyConfig.use_hash_seed` "
"and :c:member:`PyConfig.hash_seed`"
msgstr ""

#: ../../whatsnew/3.13.rst:2273
msgid ":c:var:`Py_IsolatedFlag`: use :c:member:`PyConfig.isolated`"
msgstr ""

#: ../../whatsnew/3.13.rst:2274
msgid ""
":c:var:`Py_LegacyWindowsFSEncodingFlag`: use :c:member:`PyPreConfig."
"legacy_windows_fs_encoding`"
msgstr ""

#: ../../whatsnew/3.13.rst:2275
msgid ""
":c:var:`Py_LegacyWindowsStdioFlag`: use :c:member:`PyConfig."
"legacy_windows_stdio`"
msgstr ""

#: ../../whatsnew/3.13.rst:2276
msgid ""
":c:var:`!Py_FileSystemDefaultEncoding`: use :c:member:`PyConfig."
"filesystem_encoding`"
msgstr ""

#: ../../whatsnew/3.13.rst:2277
msgid ""
":c:var:`!Py_HasFileSystemDefaultEncoding`: use :c:member:`PyConfig."
"filesystem_encoding`"
msgstr ""

#: ../../whatsnew/3.13.rst:2278
msgid ""
":c:var:`!Py_FileSystemDefaultEncodeErrors`: use :c:member:`PyConfig."
"filesystem_errors`"
msgstr ""

#: ../../whatsnew/3.13.rst:2279
msgid ""
":c:var:`!Py_UTF8Mode`: use :c:member:`PyPreConfig.utf8_mode` (see :c:func:"
"`Py_PreInitialize`)"
msgstr ""

#: ../../whatsnew/3.13.rst:2287
msgid "The bundled copy of ``libmpdecimal``."
msgstr ""

#: ../../whatsnew/3.13.rst:2288
msgid ""
":c:func:`PyImport_ImportModuleNoBlock`: use :c:func:`PyImport_ImportModule`."
msgstr ""

#: ../../whatsnew/3.13.rst:2289
msgid ":c:func:`PyWeakref_GET_OBJECT`: use :c:func:`PyWeakref_GetRef` instead."
msgstr ""

#: ../../whatsnew/3.13.rst:2290
msgid ":c:func:`PyWeakref_GetObject`: use :c:func:`PyWeakref_GetRef` instead."
msgstr ""

#: ../../whatsnew/3.13.rst:2291
msgid ":c:type:`!Py_UNICODE_WIDE` type: use :c:type:`wchar_t` instead."
msgstr ""

#: ../../whatsnew/3.13.rst:2292
msgid ":c:type:`Py_UNICODE` type: use :c:type:`wchar_t` instead."
msgstr ""

#: ../../whatsnew/3.13.rst:2293
msgid "Python initialization functions:"
msgstr ""

#: ../../whatsnew/3.13.rst:2308
msgid ""
"The following APIs were deprecated in earlier Python versions and will be "
"removed, although there is currently no date scheduled for their removal."
msgstr ""

#: ../../whatsnew/3.13.rst:2311
msgid ":c:macro:`Py_TPFLAGS_HAVE_FINALIZE`: no needed since Python 3.8."
msgstr ""

#: ../../whatsnew/3.13.rst:2312
msgid ":c:func:`PyErr_Fetch`: use :c:func:`PyErr_GetRaisedException`."
msgstr ""

#: ../../whatsnew/3.13.rst:2313
msgid ""
":c:func:`PyErr_NormalizeException`: use :c:func:`PyErr_GetRaisedException`."
msgstr ""

#: ../../whatsnew/3.13.rst:2314
msgid ":c:func:`PyErr_Restore`: use :c:func:`PyErr_SetRaisedException`."
msgstr ""

#: ../../whatsnew/3.13.rst:2315
msgid ""
":c:func:`PyModule_GetFilename`: use :c:func:`PyModule_GetFilenameObject`."
msgstr ""

#: ../../whatsnew/3.13.rst:2316
msgid ":c:func:`PyOS_AfterFork`: use :c:func:`PyOS_AfterFork_Child()`."
msgstr ""

#: ../../whatsnew/3.13.rst:2317
msgid ":c:func:`PySlice_GetIndicesEx`."
msgstr ""

#: ../../whatsnew/3.13.rst:2318
msgid ":c:func:`!PyUnicode_AsDecodedObject`."
msgstr ""

#: ../../whatsnew/3.13.rst:2319
msgid ":c:func:`!PyUnicode_AsDecodedUnicode`."
msgstr ""

#: ../../whatsnew/3.13.rst:2320
msgid ":c:func:`!PyUnicode_AsEncodedObject`."
msgstr ""

#: ../../whatsnew/3.13.rst:2321
msgid ":c:func:`!PyUnicode_AsEncodedUnicode`."
msgstr ""

#: ../../whatsnew/3.13.rst:2322
msgid ":c:func:`PyUnicode_READY`: not needed since Python 3.12."
msgstr ""

#: ../../whatsnew/3.13.rst:2323
msgid ":c:func:`!_PyErr_ChainExceptions`."
msgstr ""

#: ../../whatsnew/3.13.rst:2324
msgid ""
":c:member:`!PyBytesObject.ob_shash` member: call :c:func:`PyObject_Hash` "
"instead."
msgstr ""

#: ../../whatsnew/3.13.rst:2326
msgid ":c:member:`!PyDictObject.ma_version_tag` member."
msgstr ""

#: ../../whatsnew/3.13.rst:2327
msgid "TLS API:"
msgstr ""

#: ../../whatsnew/3.13.rst:2329
msgid ":c:func:`PyThread_create_key`: use :c:func:`PyThread_tss_alloc`."
msgstr ""

#: ../../whatsnew/3.13.rst:2330
msgid ":c:func:`PyThread_delete_key`: use :c:func:`PyThread_tss_free`."
msgstr ""

#: ../../whatsnew/3.13.rst:2331
msgid ":c:func:`PyThread_set_key_value`: use :c:func:`PyThread_tss_set`."
msgstr ""

#: ../../whatsnew/3.13.rst:2332
msgid ":c:func:`PyThread_get_key_value`: use :c:func:`PyThread_tss_get`."
msgstr ""

#: ../../whatsnew/3.13.rst:2333
msgid ":c:func:`PyThread_delete_key_value`: use :c:func:`PyThread_tss_delete`."
msgstr ""

#: ../../whatsnew/3.13.rst:2334
msgid ":c:func:`PyThread_ReInitTLS`: no longer needed."
msgstr ""

#: ../../whatsnew/3.13.rst:2336
msgid ""
"Remove undocumented ``PY_TIMEOUT_MAX`` constant from the limited C API. "
"(Contributed by Victor Stinner in :gh:`110014`.)"
msgstr ""

#: ../../whatsnew/3.13.rst:2341
msgid "Regression Test Changes"
msgstr ""

#: ../../whatsnew/3.13.rst:2343
msgid ""
"Python built with :file:`configure` :option:`--with-pydebug` now supports a :"
"option:`-X presite=package.module <-X>` command-line option. If used, it "
"specifies a module that should be imported early in the lifecycle of the "
"interpreter, before ``site.py`` is executed. (Contributed by Łukasz Langa "
"in :gh:`110769`.)"
msgstr ""
