# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2023, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Dmytro Kazanzhy, 2023
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-05-26 14:12+0000\n"
"PO-Revision-Date: 2021-06-28 01:03+0000\n"
"Last-Translator: Dmytro Kazanzhy, 2023\n"
"Language-Team: Ukrainian (https://app.transifex.com/python-doc/teams/5390/uk/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: uk\n"
"Plural-Forms: nplurals=4; plural=(n % 1 == 0 && n % 10 == 1 && n % 100 != 11 ? 0 : n % 1 == 0 && n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 12 || n % 100 > 14) ? 1 : n % 1 == 0 && (n % 10 ==0 || (n % 10 >=5 && n % 10 <=9) || (n % 100 >=11 && n % 100 <=14 )) ? 2: 3);\n"

#: ../../library/dataclasses.rst:2
msgid ":mod:`dataclasses` --- Data Classes"
msgstr ":mod:`dataclasses` --- Класи даних"

#: ../../library/dataclasses.rst:10
msgid "**Source code:** :source:`Lib/dataclasses.py`"
msgstr "**Вихідний код:** :source:`Lib/dataclasses.py`"

#: ../../library/dataclasses.rst:14
msgid ""
"This module provides a decorator and functions for automatically adding "
"generated :term:`special method`\\s such as :meth:`~object.__init__` and "
":meth:`~object.__repr__` to user-defined classes.  It was originally "
"described in :pep:`557`."
msgstr ""

#: ../../library/dataclasses.rst:19
msgid ""
"The member variables to use in these generated methods are defined using "
":pep:`526` type annotations.  For example, this code::"
msgstr ""
"Змінні-члени для використання в цих згенерованих методах визначаються за "
"допомогою анотацій типу :pep:`526`. Наприклад, цей код::"

#: ../../library/dataclasses.rst:34
msgid ""
"will add, among other things, a :meth:`~object.__init__` that looks like::"
msgstr ""

#: ../../library/dataclasses.rst:41
msgid ""
"Note that this method is automatically added to the class: it is not "
"directly specified in the ``InventoryItem`` definition shown above."
msgstr ""
"Зауважте, що цей метод автоматично додається до класу: він не вказано "
"безпосередньо у визначенні ``InventoryItem``, показаному вище."

#: ../../library/dataclasses.rst:47
msgid "Module contents"
msgstr "Зміст модуля"

#: ../../library/dataclasses.rst:51
msgid ""
"This function is a :term:`decorator` that is used to add generated "
":term:`special method`\\s to classes, as described below."
msgstr ""
"Ця функція є :term:`decorator`, який використовується для додавання "
"згенерованих :term:`special method`\\ до класів, як описано нижче."

#: ../../library/dataclasses.rst:54
msgid ""
"The :func:`dataclass` decorator examines the class to find ``field``\\s.  A "
"``field`` is defined as a class variable that has a :term:`type annotation "
"<variable annotation>`.  With two exceptions described below, nothing in "
":func:`dataclass` examines the type specified in the variable annotation."
msgstr ""
"Декоратор :func:`dataclass` перевіряє клас, щоб знайти ``поля`` \\s. "
"``Поле`` визначається як змінна класу, яка має :term:`анотацію типу "
"<variable annotation>`. За двома винятками, описаними нижче, нічого в "
":func:`dataclass` не перевіряє тип, указаний в анотації змінної."

#: ../../library/dataclasses.rst:60
msgid ""
"The order of the fields in all of the generated methods is the order in "
"which they appear in the class definition."
msgstr ""
"Порядок полів у всіх згенерованих методах – це порядок, у якому вони "
"з’являються у визначенні класу."

#: ../../library/dataclasses.rst:63
msgid ""
"The :func:`dataclass` decorator will add various \"dunder\" methods to the "
"class, described below.  If any of the added methods already exist in the "
"class, the behavior depends on the parameter, as documented below. The "
"decorator returns the same class that it is called on; no new class is "
"created."
msgstr ""
"Декоратор :func:`dataclass` додасть різні методи \"dunder\" до класу, "
"описані нижче. Якщо будь-який із доданих методів уже існує в класі, "
"поведінка залежить від параметра, як описано нижче. Декоратор повертає той "
"самий клас, до якого він викликаний; новий клас не створюється."

#: ../../library/dataclasses.rst:69
msgid ""
"If :func:`dataclass` is used just as a simple decorator with no parameters, "
"it acts as if it has the default values documented in this signature.  That "
"is, these three uses of :func:`dataclass` are equivalent::"
msgstr ""
"Якщо :func:`dataclass` використовується просто як простий декоратор без "
"параметрів, він діє так, ніби має значення за замовчуванням, задокументовані"
" в цьому підписі. Тобто ці три способи використання :func:`dataclass` "
"еквівалентні:"

#: ../../library/dataclasses.rst:87
msgid "The parameters to :func:`dataclass` are:"
msgstr "Параметри :func:`dataclass`:"

#: ../../library/dataclasses.rst:89
msgid ""
"``init``: If true (the default), a :meth:`~object.__init__` method will be "
"generated."
msgstr ""

#: ../../library/dataclasses.rst:92
msgid ""
"If the class already defines :meth:`~object.__init__`, this parameter is "
"ignored."
msgstr ""

#: ../../library/dataclasses.rst:95
msgid ""
"``repr``: If true (the default), a :meth:`~object.__repr__` method will be "
"generated.  The generated repr string will have the class name and the name "
"and repr of each field, in the order they are defined in the class.  Fields "
"that are marked as being excluded from the repr are not included.  For "
"example: ``InventoryItem(name='widget', unit_price=3.0, "
"quantity_on_hand=10)``."
msgstr ""

#: ../../library/dataclasses.rst:102
msgid ""
"If the class already defines :meth:`~object.__repr__`, this parameter is "
"ignored."
msgstr ""

#: ../../library/dataclasses.rst:105
msgid ""
"``eq``: If true (the default), an :meth:`~object.__eq__` method will be "
"generated.  This method compares the class as if it were a tuple of its "
"fields, in order.  Both instances in the comparison must be of the identical"
" type."
msgstr ""

#: ../../library/dataclasses.rst:110
msgid ""
"If the class already defines :meth:`~object.__eq__`, this parameter is "
"ignored."
msgstr ""

#: ../../library/dataclasses.rst:113
msgid ""
"``order``: If true (the default is ``False``), :meth:`~object.__lt__`, "
":meth:`~object.__le__`, :meth:`~object.__gt__`, and :meth:`~object.__ge__` "
"methods will be generated.  These compare the class as if it were a tuple of"
" its fields, in order.  Both instances in the comparison must be of the "
"identical type.  If ``order`` is true and ``eq`` is false, a "
":exc:`ValueError` is raised."
msgstr ""

#: ../../library/dataclasses.rst:120
msgid ""
"If the class already defines any of :meth:`~object.__lt__`, "
":meth:`~object.__le__`, :meth:`~object.__gt__`, or :meth:`~object.__ge__`, "
"then :exc:`TypeError` is raised."
msgstr ""

#: ../../library/dataclasses.rst:124
msgid ""
"``unsafe_hash``: If ``False`` (the default), a :meth:`~object.__hash__` "
"method is generated according to how ``eq`` and ``frozen`` are set."
msgstr ""

#: ../../library/dataclasses.rst:127
msgid ""
":meth:`~object.__hash__` is used by built-in :meth:`hash()`, and when "
"objects are added to hashed collections such as dictionaries and sets.  "
"Having a :meth:`~object.__hash__` implies that instances of the class are "
"immutable. Mutability is a complicated property that depends on the "
"programmer's intent, the existence and behavior of :meth:`~object.__eq__`, "
"and the values of the ``eq`` and ``frozen`` flags in the :func:`dataclass` "
"decorator."
msgstr ""

#: ../../library/dataclasses.rst:134
msgid ""
"By default, :func:`dataclass` will not implicitly add a "
":meth:`~object.__hash__` method unless it is safe to do so.  Neither will it"
" add or change an existing explicitly defined :meth:`~object.__hash__` "
"method.  Setting the class attribute ``__hash__ = None`` has a specific "
"meaning to Python, as described in the :meth:`~object.__hash__` "
"documentation."
msgstr ""

#: ../../library/dataclasses.rst:140
msgid ""
"If :meth:`~object.__hash__` is not explicitly defined, or if it is set to "
"``None``, then :func:`dataclass` *may* add an implicit "
":meth:`~object.__hash__` method. Although not recommended, you can force "
":func:`dataclass` to create a :meth:`~object.__hash__` method with "
"``unsafe_hash=True``. This might be the case if your class is logically "
"immutable but can nonetheless be mutated. This is a specialized use case and"
" should be considered carefully."
msgstr ""

#: ../../library/dataclasses.rst:147
msgid ""
"Here are the rules governing implicit creation of a :meth:`~object.__hash__`"
" method.  Note that you cannot both have an explicit "
":meth:`~object.__hash__` method in your dataclass and set "
"``unsafe_hash=True``; this will result in a :exc:`TypeError`."
msgstr ""

#: ../../library/dataclasses.rst:152
msgid ""
"If ``eq`` and ``frozen`` are both true, by default :func:`dataclass` will "
"generate a :meth:`~object.__hash__` method for you.  If ``eq`` is true and "
"``frozen`` is false, :meth:`~object.__hash__` will be set to ``None``, "
"marking it unhashable (which it is, since it is mutable).  If ``eq`` is "
"false, :meth:`~object.__hash__` will be left untouched meaning the "
":meth:`~object.__hash__` method of the superclass will be used (if the "
"superclass is :class:`object`, this means it will fall back to id-based "
"hashing)."
msgstr ""

#: ../../library/dataclasses.rst:160
msgid ""
"``frozen``: If true (the default is ``False``), assigning to fields will "
"generate an exception.  This emulates read-only frozen instances.  If "
":meth:`~object.__setattr__` or :meth:`~object.__delattr__` is defined in the"
" class, then :exc:`TypeError` is raised.  See the discussion below."
msgstr ""

#: ../../library/dataclasses.rst:165
msgid ""
"``match_args``: If true (the default is ``True``), the ``__match_args__`` "
"tuple will be created from the list of parameters to the generated "
":meth:`~object.__init__` method (even if :meth:`~object.__init__` is not "
"generated, see above).  If false, or if ``__match_args__`` is already "
"defined in the class, then ``__match_args__`` will not be generated."
msgstr ""

#: ../../library/dataclasses.rst:174
msgid ""
"``kw_only``: If true (the default value is ``False``), then all fields will "
"be marked as keyword-only.  If a field is marked as keyword-only, then the "
"only effect is that the :meth:`~object.__init__` parameter generated from a "
"keyword-only field must be specified with a keyword when "
":meth:`~object.__init__` is called.  There is no effect on any other aspect "
"of dataclasses.  See the :term:`parameter` glossary entry for details.  Also"
" see the :const:`KW_ONLY` section."
msgstr ""

#: ../../library/dataclasses.rst:185
msgid ""
"``slots``: If true (the default is ``False``), :attr:`~object.__slots__` "
"attribute will be generated and new class will be returned instead of the "
"original one. If :attr:`~object.__slots__` is already defined in the class, "
"then :exc:`TypeError` is raised."
msgstr ""

#: ../../library/dataclasses.rst:192
msgid ""
"If a field name is already included in the ``__slots__`` of a base class, it"
" will not be included in the generated ``__slots__`` to prevent "
":ref:`overriding them <datamodel-note-slots>`. Therefore, do not use "
"``__slots__`` to retrieve the field names of a dataclass. Use :func:`fields`"
" instead. To be able to determine inherited slots, base class ``__slots__`` "
"may be any iterable, but *not* an iterator."
msgstr ""

#: ../../library/dataclasses.rst:202
msgid ""
"``weakref_slot``: If true (the default is ``False``), add a slot named "
"\"__weakref__\", which is required to make an instance weakref-able.  It is "
"an error to specify ``weakref_slot=True`` without also specifying "
"``slots=True``."
msgstr ""

#: ../../library/dataclasses.rst:209
msgid ""
"``field``\\s may optionally specify a default value, using normal Python "
"syntax::"
msgstr ""
"``field``\\s може додатково вказати значення за замовчуванням, "
"використовуючи звичайний синтаксис Python:"

#: ../../library/dataclasses.rst:217
msgid ""
"In this example, both ``a`` and ``b`` will be included in the added "
":meth:`~object.__init__` method, which will be defined as::"
msgstr ""

#: ../../library/dataclasses.rst:222
msgid ""
":exc:`TypeError` will be raised if a field without a default value follows a"
" field with a default value.  This is true whether this occurs in a single "
"class, or as a result of class inheritance."
msgstr ""
":exc:`TypeError` буде викликано, якщо поле без значення за замовчуванням "
"слідує за полем зі значенням за замовчуванням. Це вірно незалежно від того, "
"чи відбувається це в одному класі, чи в результаті успадкування класу."

#: ../../library/dataclasses.rst:228
msgid ""
"For common and simple use cases, no other functionality is required.  There "
"are, however, some dataclass features that require additional per-field "
"information.  To satisfy this need for additional information, you can "
"replace the default field value with a call to the provided :func:`field` "
"function.  For example::"
msgstr ""
"Для звичайних і простих випадків використання інші функції не потрібні. "
"Однак існують деякі функції класу даних, які потребують додаткової "
"інформації для кожного поля. Щоб задовольнити цю потребу в додатковій "
"інформації, ви можете замінити значення поля за замовчуванням викликом "
"наданої функції :func:`field`. Наприклад::"

#: ../../library/dataclasses.rst:241
msgid ""
"As shown above, the :const:`MISSING` value is a sentinel object used to "
"detect if some parameters are provided by the user. This sentinel is used "
"because ``None`` is a valid value for some parameters with a distinct "
"meaning.  No code should directly use the :const:`MISSING` value."
msgstr ""
"Як показано вище, значення :const:`MISSING` є дозорним об’єктом, який "
"використовується для визначення того, чи деякі параметри надає користувач. "
"Цей контрольний сигнал використовується, оскільки ``None`` є дійсним "
"значенням для деяких параметрів з чітким значенням. Жоден код не повинен "
"безпосередньо використовувати значення :const:`MISSING`."

#: ../../library/dataclasses.rst:246
msgid "The parameters to :func:`field` are:"
msgstr "Параметри :func:`field` такі:"

#: ../../library/dataclasses.rst:248
msgid ""
"``default``: If provided, this will be the default value for this field.  "
"This is needed because the :meth:`field` call itself replaces the normal "
"position of the default value."
msgstr ""
"``default``: якщо вказано, це буде значення за замовчуванням для цього поля."
" Це необхідно, оскільки сам виклик :meth:`field` замінює звичайну позицію "
"значення за замовчуванням."

#: ../../library/dataclasses.rst:252
msgid ""
"``default_factory``: If provided, it must be a zero-argument callable that "
"will be called when a default value is needed for this field.  Among other "
"purposes, this can be used to specify fields with mutable default values, as"
" discussed below.  It is an error to specify both ``default`` and "
"``default_factory``."
msgstr ""
"``default_factory``: якщо вказано, це має бути функція виклику з нульовим "
"аргументом, яка буде викликана, коли для цього поля потрібне значення за "
"замовчуванням. Серед інших цілей це можна використовувати для визначення "
"полів зі змінними значеннями за замовчуванням, як обговорюється нижче. "
"Помилково вказувати як ``default``, так і ``default_factory``."

#: ../../library/dataclasses.rst:258
msgid ""
"``init``: If true (the default), this field is included as a parameter to "
"the generated :meth:`~object.__init__` method."
msgstr ""

#: ../../library/dataclasses.rst:261
msgid ""
"``repr``: If true (the default), this field is included in the string "
"returned by the generated :meth:`~object.__repr__` method."
msgstr ""

#: ../../library/dataclasses.rst:264
msgid ""
"``hash``: This can be a bool or ``None``.  If true, this field is included "
"in the generated :meth:`~object.__hash__` method.  If ``None`` (the "
"default), use the value of ``compare``: this would normally be the expected "
"behavior.  A field should be considered in the hash if it's used for "
"comparisons.  Setting this value to anything other than ``None`` is "
"discouraged."
msgstr ""

#: ../../library/dataclasses.rst:271
msgid ""
"One possible reason to set ``hash=False`` but ``compare=True`` would be if a"
" field is expensive to compute a hash value for, that field is needed for "
"equality testing, and there are other fields that contribute to the type's "
"hash value.  Even if a field is excluded from the hash, it will still be "
"used for comparisons."
msgstr ""
"Однією з можливих причин встановити ``hash=False``, але ``compare=True`` "
"було б, якщо поле є дорогим для обчислення хеш-значення, це поле потрібне "
"для перевірки рівності, і є інші поля, які сприяють хеш-значення типу. "
"Навіть якщо поле виключено з хешу, воно все одно використовуватиметься для "
"порівнянь."

#: ../../library/dataclasses.rst:277
msgid ""
"``compare``: If true (the default), this field is included in the generated "
"equality and comparison methods (:meth:`~object.__eq__`, "
":meth:`~object.__gt__`, et al.)."
msgstr ""

#: ../../library/dataclasses.rst:281
msgid ""
"``metadata``: This can be a mapping or None. None is treated as an empty "
"dict.  This value is wrapped in :func:`~types.MappingProxyType` to make it "
"read-only, and exposed on the :class:`Field` object. It is not used at all "
"by Data Classes, and is provided as a third-party extension mechanism. "
"Multiple third-parties can each have their own key, to use as a namespace in"
" the metadata."
msgstr ""
"``метадані``: це може бути відображення або немає. None не розглядається як "
"порожній dict. Це значення загорнуте в :func:`~types.MappingProxyType`, щоб "
"зробити його доступним лише для читання, і відображатиметься в об’єкті "
":class:`Field`. Він взагалі не використовується класами даних і надається як"
" сторонній механізм розширення. Кілька сторонніх розробників можуть мати "
"власний ключ, який можна використовувати як простір імен у метаданих."

#: ../../library/dataclasses.rst:289
msgid ""
"``kw_only``: If true, this field will be marked as keyword-only. This is "
"used when the generated :meth:`~object.__init__` method's parameters are "
"computed."
msgstr ""

#: ../../library/dataclasses.rst:295
msgid ""
"If the default value of a field is specified by a call to :func:`field()`, "
"then the class attribute for this field will be replaced by the specified "
"``default`` value.  If no ``default`` is provided, then the class attribute "
"will be deleted.  The intent is that after the :func:`dataclass` decorator "
"runs, the class attributes will all contain the default values for the "
"fields, just as if the default value itself were specified.  For example, "
"after::"
msgstr ""
"Якщо значення поля за замовчуванням вказано викликом :func:`field()`, тоді "
"атрибут класу для цього поля буде замінено вказаним значенням ``default``. "
"Якщо ``default`` не вказано, тоді атрибут класу буде видалено. Намір полягає"
" в тому, що після запуску декоратора :func:`dataclass` всі атрибути класу "
"будуть містити значення за замовчуванням для полів, так само, якби було "
"вказано саме значення за замовчуванням. Наприклад, після::"

#: ../../library/dataclasses.rst:311
msgid ""
"The class attribute ``C.z`` will be ``10``, the class attribute ``C.t`` will"
" be ``20``, and the class attributes ``C.x`` and ``C.y`` will not be set."
msgstr ""
"Атрибут класу ``C.z`` буде ``10``, атрибут класу ``C.t`` буде ``20``, а "
"атрибути класу ``C.x`` і ``C.y`` не будуть встановити."

#: ../../library/dataclasses.rst:317
msgid ""
":class:`Field` objects describe each defined field. These objects are "
"created internally, and are returned by the :func:`fields` module-level "
"method (see below).  Users should never instantiate a :class:`Field` object "
"directly.  Its documented attributes are:"
msgstr ""
"Об'єкти :class:`Field` описують кожне визначене поле. Ці об’єкти створюються"
" всередині та повертаються методом рівня модуля :func:`fields` (див. нижче)."
" Користувачі ніколи не повинні створювати об’єкт :class:`Field` "
"безпосередньо. Його задокументовані атрибути:"

#: ../../library/dataclasses.rst:322
msgid "``name``: The name of the field."
msgstr "``name``: назва поля."

#: ../../library/dataclasses.rst:324
msgid "``type``: The type of the field."
msgstr "``type``: тип поля."

#: ../../library/dataclasses.rst:326
msgid ""
"``default``, ``default_factory``, ``init``, ``repr``, ``hash``, ``compare``,"
" ``metadata``, and ``kw_only`` have the identical meaning and values as they"
" do in the :func:`field` function."
msgstr ""
"``default``, ``default_factory``, ``init``, ``repr``, ``hash``, ``compare``,"
" ``metadata`` і ``kw_only`` мають ідентичне значення та значення, як і у "
"функції :func:`field`."

#: ../../library/dataclasses.rst:330
msgid ""
"Other attributes may exist, but they are private and must not be inspected "
"or relied on."
msgstr ""
"Інші атрибути можуть існувати, але вони є приватними, і їх не можна "
"перевіряти чи покладатися на них."

#: ../../library/dataclasses.rst:335
msgid ""
"Returns a tuple of :class:`Field` objects that define the fields for this "
"dataclass.  Accepts either a dataclass, or an instance of a dataclass. "
"Raises :exc:`TypeError` if not passed a dataclass or instance of one. Does "
"not return pseudo-fields which are ``ClassVar`` or ``InitVar``."
msgstr ""
"Повертає кортеж об’єктів :class:`Field`, які визначають поля для цього класу"
" даних. Приймає або клас даних, або екземпляр класу даних. Викликає "
":exc:`TypeError`, якщо не передано клас даних або його екземпляр. Не "
"повертає псевдополя, які є ``ClassVar`` або ``InitVar``."

#: ../../library/dataclasses.rst:342
msgid ""
"Converts the dataclass ``obj`` to a dict (by using the factory function "
"``dict_factory``).  Each dataclass is converted to a dict of its fields, as "
"``name: value`` pairs.  dataclasses, dicts, lists, and tuples are recursed "
"into.  Other objects are copied with :func:`copy.deepcopy`."
msgstr ""
"Перетворює клас даних ``obj`` на dict (за допомогою фабричної функції "
"``dict_factory``). Кожен клас даних перетворюється на диктофон своїх полів у"
" вигляді пар \"ім’я: значення\". класи даних, диктофони, списки та кортежі "
"рекурсують. Інші об’єкти копіюються за допомогою :func:`copy.deepcopy`."

#: ../../library/dataclasses.rst:348
msgid "Example of using :func:`asdict` on nested dataclasses::"
msgstr "Приклад використання :func:`asdict` у вкладених класах даних::"

#: ../../library/dataclasses.rst:365 ../../library/dataclasses.rst:385
msgid "To create a shallow copy, the following workaround may be used::"
msgstr "Щоб створити дрібну копію, можна використати такий обхідний шлях:"

#: ../../library/dataclasses.rst:369
msgid ""
":func:`asdict` raises :exc:`TypeError` if ``obj`` is not a dataclass "
"instance."
msgstr ""
":func:`asdict` викликає :exc:`TypeError`, якщо ``obj`` не є екземпляром "
"класу даних."

#: ../../library/dataclasses.rst:374
msgid ""
"Converts the dataclass ``obj`` to a tuple (by using the factory function "
"``tuple_factory``).  Each dataclass is converted to a tuple of its field "
"values.  dataclasses, dicts, lists, and tuples are recursed into. Other "
"objects are copied with :func:`copy.deepcopy`."
msgstr ""
"Перетворює клас даних ``obj`` на кортеж (за допомогою фабричної функції "
"``tuple_factory``). Кожен клас даних перетворюється на кортеж значень свого "
"поля. класи даних, диктофони, списки та кортежі рекурсують. Інші об’єкти "
"копіюються за допомогою :func:`copy.deepcopy`."

#: ../../library/dataclasses.rst:380
msgid "Continuing from the previous example::"
msgstr "Продовжуючи попередній приклад:"

#: ../../library/dataclasses.rst:389
msgid ""
":func:`astuple` raises :exc:`TypeError` if ``obj`` is not a dataclass "
"instance."
msgstr ""
":func:`astuple` викликає :exc:`TypeError`, якщо ``obj`` не є екземпляром "
"класу даних."

#: ../../library/dataclasses.rst:394
msgid ""
"Creates a new dataclass with name ``cls_name``, fields as defined in "
"``fields``, base classes as given in ``bases``, and initialized with a "
"namespace as given in ``namespace``.  ``fields`` is an iterable whose "
"elements are each either ``name``, ``(name, type)``, or ``(name, type, "
"Field)``.  If just ``name`` is supplied, ``typing.Any`` is used for "
"``type``.  The values of ``init``, ``repr``, ``eq``, ``order``, "
"``unsafe_hash``, ``frozen``, ``match_args``, ``kw_only``, ``slots``, and "
"``weakref_slot`` have the same meaning as they do in :func:`dataclass`."
msgstr ""

#: ../../library/dataclasses.rst:404
msgid ""
"If ``module`` is defined, the ``__module__`` attribute of the dataclass is "
"set to that value. By default, it is set to the module name of the caller."
msgstr ""

#: ../../library/dataclasses.rst:408
msgid ""
"This function is not strictly required, because any Python mechanism for "
"creating a new class with ``__annotations__`` can then apply the "
":func:`dataclass` function to convert that class to a dataclass.  This "
"function is provided as a convenience.  For example::"
msgstr ""
"Ця функція не є обов’язковою, оскільки будь-який механізм Python для "
"створення нового класу з ``__annotations__`` може потім застосувати функцію "
":func:`dataclass` для перетворення цього класу на клас даних. Ця функція "
"передбачена для зручності. Наприклад::"

#: ../../library/dataclasses.rst:420
msgid "Is equivalent to::"
msgstr "Еквівалентно::"

#: ../../library/dataclasses.rst:433
msgid ""
"Creates a new object of the same type as ``obj``, replacing fields with "
"values from ``changes``.  If ``obj`` is not a Data Class, raises "
":exc:`TypeError`.  If values in ``changes`` do not specify fields, raises "
":exc:`TypeError`."
msgstr ""
"Створює новий об’єкт того самого типу, що й ``obj``, замінюючи поля "
"значеннями ``changes``. Якщо ``obj`` не є класом даних, викликає "
":exc:`TypeError`. Якщо значення в ``changes`` не вказують на поля, викликає "
":exc:`TypeError`."

#: ../../library/dataclasses.rst:438
msgid ""
"The newly returned object is created by calling the :meth:`~object.__init__`"
" method of the dataclass.  This ensures that :meth:`__post_init__`, if "
"present, is also called."
msgstr ""

#: ../../library/dataclasses.rst:442
msgid ""
"Init-only variables without default values, if any exist, must be specified "
"on the call to :func:`replace` so that they can be passed to "
":meth:`~object.__init__` and :meth:`__post_init__`."
msgstr ""

#: ../../library/dataclasses.rst:446
msgid ""
"It is an error for ``changes`` to contain any fields that are defined as "
"having ``init=False``.  A :exc:`ValueError` will be raised in this case."
msgstr ""
"Це помилка, якщо ``changes`` містить будь-які поля, які визначені як такі, "
"що мають ``init=False``. У цьому випадку буде викликано помилку "
":exc:`ValueError`."

#: ../../library/dataclasses.rst:450
msgid ""
"Be forewarned about how ``init=False`` fields work during a call to "
":func:`replace`.  They are not copied from the source object, but rather are"
" initialized in :meth:`__post_init__`, if they're initialized at all.  It is"
" expected that ``init=False`` fields will be rarely and judiciously used.  "
"If they are used, it might be wise to have alternate class constructors, or "
"perhaps a custom ``replace()`` (or similarly named) method which handles "
"instance copying."
msgstr ""
"Будьте попереджені про те, як працюють поля ``init=False`` під час виклику "
":func:`replace`. Вони не копіюються з вихідного об’єкта, а ініціалізуються в"
" :meth:`__post_init__`, якщо вони взагалі ініціалізовані. Очікується, що "
"поля ``init=False`` будуть використовуватися рідко та розумно. Якщо вони "
"використовуються, було б доцільно мати альтернативні конструктори класів "
"або, можливо, спеціальний метод ``replace()`` (або з подібною назвою), який "
"обробляє копіювання екземплярів."

#: ../../library/dataclasses.rst:461
msgid ""
"Return ``True`` if its parameter is a dataclass or an instance of one, "
"otherwise return ``False``."
msgstr ""
"Повертає ``True``, якщо його параметр є класом даних або його екземпляром, "
"інакше повертає ``False``."

#: ../../library/dataclasses.rst:464
msgid ""
"If you need to know if a class is an instance of a dataclass (and not a "
"dataclass itself), then add a further check for ``not isinstance(obj, "
"type)``::"
msgstr ""
"Якщо вам потрібно знати, чи є клас екземпляром класу даних (а не самим "
"класом даних), тоді додайте додаткову перевірку для ``not isinstance(obj, "
"type)``::"

#: ../../library/dataclasses.rst:473
msgid "A sentinel value signifying a missing default or default_factory."
msgstr ""
"Дозорне значення, яке вказує на відсутність параметра default або "
"default_factory."

#: ../../library/dataclasses.rst:477
msgid ""
"A sentinel value used as a type annotation.  Any fields after a pseudo-field"
" with the type of :const:`KW_ONLY` are marked as keyword-only fields.  Note "
"that a pseudo-field of type :const:`KW_ONLY` is otherwise completely "
"ignored.  This includes the name of such a field.  By convention, a name of "
"``_`` is used for a :const:`KW_ONLY` field.  Keyword-only fields signify "
":meth:`~object.__init__` parameters that must be specified as keywords when "
"the class is instantiated."
msgstr ""

#: ../../library/dataclasses.rst:486
msgid ""
"In this example, the fields ``y`` and ``z`` will be marked as keyword-only "
"fields::"
msgstr ""
"У цьому прикладі поля ``y`` і ``z`` будуть позначені як поля лише для "
"ключових слів:"

#: ../../library/dataclasses.rst:497
msgid ""
"In a single dataclass, it is an error to specify more than one field whose "
"type is :const:`KW_ONLY`."
msgstr ""
"В одному класі даних є помилкою вказувати більше ніж одне поле типу "
":const:`KW_ONLY`."

#: ../../library/dataclasses.rst:504
msgid ""
"Raised when an implicitly defined :meth:`~object.__setattr__` or "
":meth:`~object.__delattr__` is called on a dataclass which was defined with "
"``frozen=True``. It is a subclass of :exc:`AttributeError`."
msgstr ""

#: ../../library/dataclasses.rst:511
msgid "Post-init processing"
msgstr "Обробка після ініціалізації"

#: ../../library/dataclasses.rst:515
msgid ""
"When defined on the class, it will be called by the generated "
":meth:`~object.__init__`, normally as ``self.__post_init__()``. However, if "
"any ``InitVar`` fields are defined, they will also be passed to "
":meth:`__post_init__` in the order they were defined in the class.  If no "
":meth:`~object.__init__` method is generated, then :meth:`__post_init__` "
"will not automatically be called."
msgstr ""

#: ../../library/dataclasses.rst:522
msgid ""
"Among other uses, this allows for initializing field values that depend on "
"one or more other fields.  For example::"
msgstr ""
"Серед іншого використання це дозволяє ініціалізувати значення полів, які "
"залежать від одного або кількох інших полів. Наприклад::"

#: ../../library/dataclasses.rst:534
msgid ""
"The :meth:`~object.__init__` method generated by :func:`dataclass` does not "
"call base class :meth:`~object.__init__` methods. If the base class has an "
":meth:`~object.__init__` method that has to be called, it is common to call "
"this method in a :meth:`__post_init__` method::"
msgstr ""

#: ../../library/dataclasses.rst:551
msgid ""
"Note, however, that in general the dataclass-generated "
":meth:`~object.__init__` methods don't need to be called, since the derived "
"dataclass will take care of initializing all fields of any base class that "
"is a dataclass itself."
msgstr ""

#: ../../library/dataclasses.rst:555
msgid ""
"See the section below on init-only variables for ways to pass parameters to "
":meth:`__post_init__`.  Also see the warning about how :func:`replace` "
"handles ``init=False`` fields."
msgstr ""
"Перегляньте розділ нижче про змінні лише для ініціалізації, щоб дізнатися "
"про способи передачі параметрів у :meth:`__post_init__`. Також перегляньте "
"попередження про те, як :func:`replace` обробляє поля ``init=False``."

#: ../../library/dataclasses.rst:560
msgid "Class variables"
msgstr "Змінні класу"

#: ../../library/dataclasses.rst:562
msgid ""
"One of the few places where :func:`dataclass` actually inspects the type of "
"a field is to determine if a field is a class variable as defined in "
":pep:`526`.  It does this by checking if the type of the field is "
"``typing.ClassVar``.  If a field is a ``ClassVar``, it is excluded from "
"consideration as a field and is ignored by the dataclass mechanisms.  Such "
"``ClassVar`` pseudo-fields are not returned by the module-level "
":func:`fields` function."
msgstr ""

#: ../../library/dataclasses.rst:571
msgid "Init-only variables"
msgstr "Змінні лише для ініціалізації"

#: ../../library/dataclasses.rst:573
msgid ""
"Another place where :func:`dataclass` inspects a type annotation is to "
"determine if a field is an init-only variable.  It does this by seeing if "
"the type of a field is of type ``dataclasses.InitVar``.  If a field is an "
"``InitVar``, it is considered a pseudo-field called an init-only field.  As "
"it is not a true field, it is not returned by the module-level "
":func:`fields` function.  Init-only fields are added as parameters to the "
"generated :meth:`~object.__init__` method, and are passed to the optional "
":meth:`__post_init__` method.  They are not otherwise used by dataclasses."
msgstr ""

#: ../../library/dataclasses.rst:583
msgid ""
"For example, suppose a field will be initialized from a database, if a value"
" is not provided when creating the class::"
msgstr ""
"Наприклад, припустимо, що поле буде ініціалізовано з бази даних, якщо під "
"час створення класу не вказано значення::"

#: ../../library/dataclasses.rst:598
msgid ""
"In this case, :func:`fields` will return :class:`Field` objects for ``i`` "
"and ``j``, but not for ``database``."
msgstr ""
"У цьому випадку :func:`fields` повертатиме об’єкти :class:`Field` для ``i`` "
"та ``j``, але не для ``database``."

#: ../../library/dataclasses.rst:602
msgid "Frozen instances"
msgstr "Заморожені екземпляри"

#: ../../library/dataclasses.rst:604
msgid ""
"It is not possible to create truly immutable Python objects.  However, by "
"passing ``frozen=True`` to the :meth:`dataclass` decorator you can emulate "
"immutability.  In that case, dataclasses will add "
":meth:`~object.__setattr__` and :meth:`~object.__delattr__` methods to the "
"class.  These methods will raise a :exc:`FrozenInstanceError` when invoked."
msgstr ""

#: ../../library/dataclasses.rst:610
msgid ""
"There is a tiny performance penalty when using ``frozen=True``: "
":meth:`~object.__init__` cannot use simple assignment to initialize fields, "
"and must use :meth:`~object.__setattr__`."
msgstr ""

#: ../../library/dataclasses.rst:615
msgid "Inheritance"
msgstr "Спадщина"

#: ../../library/dataclasses.rst:617
msgid ""
"When the dataclass is being created by the :meth:`dataclass` decorator, it "
"looks through all of the class's base classes in reverse MRO (that is, "
"starting at :class:`object`) and, for each dataclass that it finds, adds the"
" fields from that base class to an ordered mapping of fields. After all of "
"the base class fields are added, it adds its own fields to the ordered "
"mapping.  All of the generated methods will use this combined, calculated "
"ordered mapping of fields.  Because the fields are in insertion order, "
"derived classes override base classes.  An example::"
msgstr ""
"Коли клас даних створюється декоратором :meth:`dataclass`, він переглядає "
"всі базові класи класу в зворотному MRO (тобто починаючи з :class:`object`) "
"і для кожного класу даних, який він знаходить, додає поля з цього базового "
"класу до впорядкованого відображення полів. Після додавання всіх полів "
"базового класу він додає власні поля до впорядкованого відображення. Усі "
"згенеровані методи використовуватимуть це комбіноване обчислене впорядковане"
" відображення полів. Оскільки поля розташовані в порядку вставки, похідні "
"класи замінюють базові класи. Приклад::"

#: ../../library/dataclasses.rst:637
msgid ""
"The final list of fields is, in order, ``x``, ``y``, ``z``.  The final type "
"of ``x`` is ``int``, as specified in class ``C``."
msgstr ""
"Остаточний список полів у такому порядку: ``x``, ``y``, ``z``. Остаточним "
"типом ``x`` є ``int``, як зазначено в класі ``C``."

#: ../../library/dataclasses.rst:640
msgid ""
"The generated :meth:`~object.__init__` method for ``C`` will look like::"
msgstr ""

#: ../../library/dataclasses.rst:645
msgid "Re-ordering of keyword-only parameters in :meth:`~object.__init__`"
msgstr ""

#: ../../library/dataclasses.rst:647
msgid ""
"After the parameters needed for :meth:`~object.__init__` are computed, any "
"keyword-only parameters are moved to come after all regular (non-keyword-"
"only) parameters.  This is a requirement of how keyword-only parameters are "
"implemented in Python: they must come after non-keyword-only parameters."
msgstr ""

#: ../../library/dataclasses.rst:653
msgid ""
"In this example, ``Base.y``, ``Base.w``, and ``D.t`` are keyword-only "
"fields, and ``Base.x`` and ``D.z`` are regular fields::"
msgstr ""
"У цьому прикладі ``Base.y``, ``Base.w`` і ``D.t`` є полями лише для ключових"
" слів, а ``Base.x`` і ``D.z`` є звичайними полями: :"

#: ../../library/dataclasses.rst:668
msgid ""
"The generated :meth:`~object.__init__` method for ``D`` will look like::"
msgstr ""

#: ../../library/dataclasses.rst:672
msgid ""
"Note that the parameters have been re-ordered from how they appear in the "
"list of fields: parameters derived from regular fields are followed by "
"parameters derived from keyword-only fields."
msgstr ""
"Зауважте, що порядок параметрів змінено відповідно до того, як вони "
"відображаються в списку полів: за параметрами, отриманими зі звичайних "
"полів, слідують параметри, отримані з полів лише з ключовими словами."

#: ../../library/dataclasses.rst:676
msgid ""
"The relative ordering of keyword-only parameters is maintained in the re-"
"ordered :meth:`~object.__init__` parameter list."
msgstr ""

#: ../../library/dataclasses.rst:681
msgid "Default factory functions"
msgstr "Стандартні заводські функції"

#: ../../library/dataclasses.rst:683
msgid ""
"If a :func:`field` specifies a ``default_factory``, it is called with zero "
"arguments when a default value for the field is needed.  For example, to "
"create a new instance of a list, use::"
msgstr ""
"Якщо :func:`field` визначає ``default_factory``, воно викликається з "
"нульовими аргументами, коли потрібне значення за замовчуванням для поля. "
"Наприклад, щоб створити новий екземпляр списку, використовуйте::"

#: ../../library/dataclasses.rst:689
msgid ""
"If a field is excluded from :meth:`~object.__init__` (using ``init=False``) "
"and the field also specifies ``default_factory``, then the default factory "
"function will always be called from the generated :meth:`~object.__init__` "
"function.  This happens because there is no other way to give the field an "
"initial value."
msgstr ""

#: ../../library/dataclasses.rst:696
msgid "Mutable default values"
msgstr "Змінні значення за замовчуванням"

#: ../../library/dataclasses.rst:698
msgid ""
"Python stores default member variable values in class attributes. Consider "
"this example, not using dataclasses::"
msgstr ""
"Python зберігає значення змінних членів за замовчуванням в атрибутах класу. "
"Розглянемо цей приклад, не використовуючи класи даних::"

#: ../../library/dataclasses.rst:713
msgid ""
"Note that the two instances of class ``C`` share the same class variable "
"``x``, as expected."
msgstr ""
"Зауважте, що два екземпляри класу ``C`` спільно використовують ту саму "
"змінну класу ``x``, як і очікувалося."

#: ../../library/dataclasses.rst:716
msgid "Using dataclasses, *if* this code was valid::"
msgstr "Використання класів даних, *якщо* цей код дійсний::"

#: ../../library/dataclasses.rst:724
msgid "it would generate code similar to::"
msgstr "це створить код, подібний до::"

#: ../../library/dataclasses.rst:735
msgid ""
"This has the same issue as the original example using class ``C``. That is, "
"two instances of class ``D`` that do not specify a value for ``x`` when "
"creating a class instance will share the same copy of ``x``.  Because "
"dataclasses just use normal Python class creation they also share this "
"behavior.  There is no general way for Data Classes to detect this "
"condition.  Instead, the :func:`dataclass` decorator will raise a "
":exc:`TypeError` if it detects an unhashable default parameter.  The "
"assumption is that if a value is unhashable, it is mutable.  This is a "
"partial solution, but it does protect against many common errors."
msgstr ""

#: ../../library/dataclasses.rst:746
msgid ""
"Using default factory functions is a way to create new instances of mutable "
"types as default values for fields::"
msgstr ""
"Використання заводських функцій за замовчуванням — це спосіб створення нових"
" екземплярів змінних типів як значень за замовчуванням для полів::"

#: ../../library/dataclasses.rst:755
msgid ""
"Instead of looking for and disallowing objects of type ``list``, ``dict``, "
"or ``set``, unhashable objects are now not allowed as default values.  "
"Unhashability is used to approximate mutability."
msgstr ""

#: ../../library/dataclasses.rst:762
msgid "Descriptor-typed fields"
msgstr ""

#: ../../library/dataclasses.rst:764
msgid ""
"Fields that are assigned :ref:`descriptor objects <descriptors>` as their "
"default value have the following special behaviors:"
msgstr ""

#: ../../library/dataclasses.rst:767
msgid ""
"The value for the field passed to the dataclass's ``__init__`` method is "
"passed to the descriptor's ``__set__`` method rather than overwriting the "
"descriptor object."
msgstr ""

#: ../../library/dataclasses.rst:770
msgid ""
"Similarly, when getting or setting the field, the descriptor's ``__get__`` "
"or ``__set__`` method is called rather than returning or overwriting the "
"descriptor object."
msgstr ""

#: ../../library/dataclasses.rst:773
msgid ""
"To determine whether a field contains a default value, ``dataclasses`` will "
"call the descriptor's ``__get__`` method using its class access form (i.e. "
"``descriptor.__get__(obj=None, type=cls)``.  If the descriptor returns a "
"value in this case, it will be used as the field's default. On the other "
"hand, if the descriptor raises :exc:`AttributeError` in this situation, no "
"default value will be provided for the field."
msgstr ""

#: ../../library/dataclasses.rst:808
msgid ""
"Note that if a field is annotated with a descriptor type, but is not "
"assigned a descriptor object as its default value, the field will act like a"
" normal field."
msgstr ""
