# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2024, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# oon arfiandwi (OonID) <oon.arfiandwi@gmail.com>, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-05-17 14:15+0000\n"
"PO-Revision-Date: 2021-06-28 01:08+0000\n"
"Last-Translator: oon arfiandwi (OonID) <oon.arfiandwi@gmail.com>, 2024\n"
"Language-Team: Indonesian (https://app.transifex.com/python-doc/teams/5390/"
"id/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: id\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/importlib.metadata.rst:5
msgid ":mod:`!importlib.metadata` -- Accessing package metadata"
msgstr ""

#: ../../library/importlib.metadata.rst:11
msgid "``importlib.metadata`` is no longer provisional."
msgstr ""

#: ../../library/importlib.metadata.rst:14
msgid "**Source code:** :source:`Lib/importlib/metadata/__init__.py`"
msgstr ""

#: ../../library/importlib.metadata.rst:16
msgid ""
"``importlib.metadata`` is a library that provides access to the metadata of "
"an installed `Distribution Package <https://packaging.python.org/en/latest/"
"glossary/#term-Distribution-Package>`_, such as its entry points or its top-"
"level names (`Import Package <https://packaging.python.org/en/latest/"
"glossary/#term-Import-Package>`_\\s, modules, if any). Built in part on "
"Python's import system, this library intends to replace similar "
"functionality in the `entry point API`_ and `metadata API`_ of "
"``pkg_resources``.  Along with :mod:`importlib.resources`, this package can "
"eliminate the need to use the older and less efficient ``pkg_resources`` "
"package."
msgstr ""

#: ../../library/importlib.metadata.rst:27
msgid ""
"``importlib.metadata`` operates on third-party *distribution packages* "
"installed into Python's ``site-packages`` directory via tools such as :pypi:"
"`pip`. Specifically, it works with distributions with discoverable ``dist-"
"info`` or ``egg-info`` directories, and metadata defined by the `Core "
"metadata specifications <https://packaging.python.org/en/latest/"
"specifications/core-metadata/#core-metadata>`_."
msgstr ""

#: ../../library/importlib.metadata.rst:36
msgid ""
"These are *not* necessarily equivalent to or correspond 1:1 with the top-"
"level *import package* names that can be imported inside Python code. One "
"*distribution package* can contain multiple *import packages* (and single "
"modules), and one top-level *import package* may map to multiple "
"*distribution packages* if it is a namespace package. You can use :ref:"
"`packages_distributions() <package-distributions>` to get a mapping between "
"them."
msgstr ""

#: ../../library/importlib.metadata.rst:47
msgid ""
"By default, distribution metadata can live on the file system or in zip "
"archives on :data:`sys.path`.  Through an extension mechanism, the metadata "
"can live almost anywhere."
msgstr ""

#: ../../library/importlib.metadata.rst:55
msgid "https://importlib-metadata.readthedocs.io/"
msgstr ""

#: ../../library/importlib.metadata.rst:56
msgid ""
"The documentation for ``importlib_metadata``, which supplies a backport of "
"``importlib.metadata``. This includes an `API reference <https://importlib-"
"metadata.readthedocs.io/en/latest/api.html>`__ for this module's classes and "
"functions, as well as a `migration guide <https://importlib-metadata."
"readthedocs.io/en/latest/migration.html>`__ for existing users of "
"``pkg_resources``."
msgstr ""

#: ../../library/importlib.metadata.rst:67
msgid "Overview"
msgstr ""

#: ../../library/importlib.metadata.rst:69
msgid ""
"Let's say you wanted to get the version string for a `Distribution Package "
"<https://packaging.python.org/en/latest/glossary/#term-Distribution-"
"Package>`_ you've installed using ``pip``.  We start by creating a virtual "
"environment and installing something into it:"
msgstr ""

#: ../../library/importlib.metadata.rst:80
msgid "You can get the version string for ``wheel`` by running the following:"
msgstr ""

#: ../../library/importlib.metadata.rst:89
msgid ""
"You can also get a collection of entry points selectable by properties of "
"the EntryPoint (typically 'group' or 'name'), such as ``console_scripts``, "
"``distutils.commands`` and others.  Each group contains a collection of :ref:"
"`EntryPoint <entry-points>` objects."
msgstr ""

#: ../../library/importlib.metadata.rst:93
msgid "You can get the :ref:`metadata for a distribution <metadata>`::"
msgstr ""

#: ../../library/importlib.metadata.rst:98
msgid ""
"You can also get a :ref:`distribution's version number <version>`, list its :"
"ref:`constituent files <files>`, and get a list of the distribution's :ref:"
"`requirements`."
msgstr ""

#: ../../library/importlib.metadata.rst:104
msgid "Functional API"
msgstr ""

#: ../../library/importlib.metadata.rst:106
msgid "This package provides the following functionality via its public API."
msgstr ""

#: ../../library/importlib.metadata.rst:112
msgid "Entry points"
msgstr ""

#: ../../library/importlib.metadata.rst:114
msgid ""
"The ``entry_points()`` function returns a collection of entry points. Entry "
"points are represented by ``EntryPoint`` instances; each ``EntryPoint`` has "
"a ``.name``, ``.group``, and ``.value`` attributes and a ``.load()`` method "
"to resolve the value.  There are also ``.module``, ``.attr``, and ``."
"extras`` attributes for getting the components of the ``.value`` attribute."
msgstr ""

#: ../../library/importlib.metadata.rst:121
msgid "Query all entry points::"
msgstr ""

#: ../../library/importlib.metadata.rst:125
msgid ""
"The ``entry_points()`` function returns an ``EntryPoints`` object, a "
"collection of all ``EntryPoint`` objects with ``names`` and ``groups`` "
"attributes for convenience::"
msgstr ""

#: ../../library/importlib.metadata.rst:132
msgid ""
"``EntryPoints`` has a ``select`` method to select entry points matching "
"specific properties. Select entry points in the ``console_scripts`` group::"
msgstr ""

#: ../../library/importlib.metadata.rst:138
msgid ""
"Equivalently, since ``entry_points`` passes keyword arguments through to "
"select::"
msgstr ""

#: ../../library/importlib.metadata.rst:143
msgid ""
"Pick out a specific script named \"wheel\" (found in the wheel project)::"
msgstr ""

#: ../../library/importlib.metadata.rst:149
msgid "Equivalently, query for that entry point during selection::"
msgstr ""

#: ../../library/importlib.metadata.rst:154
msgid "Inspect the resolved entry point::"
msgstr ""

#: ../../library/importlib.metadata.rst:168
msgid ""
"The ``group`` and ``name`` are arbitrary values defined by the package "
"author and usually a client will wish to resolve all entry points for a "
"particular group.  Read `the setuptools docs <https://setuptools.pypa.io/en/"
"latest/userguide/entry_point.html>`_ for more information on entry points, "
"their definition, and usage."
msgstr ""

#: ../../library/importlib.metadata.rst:174
msgid ""
"The \"selectable\" entry points were introduced in ``importlib_metadata`` "
"3.6 and Python 3.10. Prior to those changes, ``entry_points`` accepted no "
"parameters and always returned a dictionary of entry points, keyed by group. "
"With ``importlib_metadata`` 5.0 and Python 3.12, ``entry_points`` always "
"returns an ``EntryPoints`` object. See :pypi:`backports."
"entry_points_selectable` for compatibility options."
msgstr ""

#: ../../library/importlib.metadata.rst:183
msgid ""
"``EntryPoint`` objects no longer present a tuple-like interface (:meth:"
"`~object.__getitem__`)."
msgstr ""

#: ../../library/importlib.metadata.rst:190
msgid "Distribution metadata"
msgstr ""

#: ../../library/importlib.metadata.rst:192
msgid ""
"Every `Distribution Package <https://packaging.python.org/en/latest/glossary/"
"#term-Distribution-Package>`_ includes some metadata, which you can extract "
"using the ``metadata()`` function::"
msgstr ""

#: ../../library/importlib.metadata.rst:198
msgid ""
"The keys of the returned data structure, a ``PackageMetadata``, name the "
"metadata keywords, and the values are returned unparsed from the "
"distribution metadata::"
msgstr ""

#: ../../library/importlib.metadata.rst:205
msgid ""
"``PackageMetadata`` also presents a ``json`` attribute that returns all the "
"metadata in a JSON-compatible form per :PEP:`566`::"
msgstr ""

#: ../../library/importlib.metadata.rst:213
msgid ""
"The actual type of the object returned by ``metadata()`` is an "
"implementation detail and should be accessed only through the interface "
"described by the `PackageMetadata protocol <https://importlib-metadata."
"readthedocs.io/en/latest/api.html#importlib_metadata.PackageMetadata>`_."
msgstr ""

#: ../../library/importlib.metadata.rst:218
msgid ""
"The ``Description`` is now included in the metadata when presented through "
"the payload. Line continuation characters have been removed."
msgstr ""

#: ../../library/importlib.metadata.rst:222
msgid "The ``json`` attribute was added."
msgstr ""

#: ../../library/importlib.metadata.rst:228
msgid "Distribution versions"
msgstr ""

#: ../../library/importlib.metadata.rst:230
msgid ""
"The ``version()`` function is the quickest way to get a `Distribution "
"Package <https://packaging.python.org/en/latest/glossary/#term-Distribution-"
"Package>`_'s version number, as a string::"
msgstr ""

#: ../../library/importlib.metadata.rst:241
msgid "Distribution files"
msgstr ""

#: ../../library/importlib.metadata.rst:243
msgid ""
"You can also get the full set of files contained within a distribution.  The "
"``files()`` function takes a `Distribution Package <https://packaging.python."
"org/en/latest/glossary/#term-Distribution-Package>`_ name and returns all of "
"the files installed by this distribution.  Each file object returned is a "
"``PackagePath``, a :class:`pathlib.PurePath` derived object with additional "
"``dist``, ``size``, and ``hash`` properties as indicated by the metadata.  "
"For example::"
msgstr ""

#: ../../library/importlib.metadata.rst:260
msgid "Once you have the file, you can also read its contents::"
msgstr ""

#: ../../library/importlib.metadata.rst:271
msgid ""
"You can also use the ``locate`` method to get a the absolute path to the "
"file::"
msgstr ""

#: ../../library/importlib.metadata.rst:277
msgid ""
"In the case where the metadata file listing files (RECORD or SOURCES.txt) is "
"missing, ``files()`` will return ``None``. The caller may wish to wrap calls "
"to ``files()`` in `always_iterable <https://more-itertools.readthedocs.io/en/"
"stable/api.html#more_itertools.always_iterable>`_ or otherwise guard against "
"this condition if the target distribution is not known to have the metadata "
"present."
msgstr ""

#: ../../library/importlib.metadata.rst:288
msgid "Distribution requirements"
msgstr ""

#: ../../library/importlib.metadata.rst:290
msgid ""
"To get the full set of requirements for a `Distribution Package <https://"
"packaging.python.org/en/latest/glossary/#term-Distribution-Package>`_, use "
"the ``requires()`` function::"
msgstr ""

#: ../../library/importlib.metadata.rst:302
msgid "Mapping import to distribution packages"
msgstr ""

#: ../../library/importlib.metadata.rst:304
msgid ""
"A convenience method to resolve the `Distribution Package <https://packaging."
"python.org/en/latest/glossary/#term-Distribution-Package>`_ name (or names, "
"in the case of a namespace package) that provide each importable top-level "
"Python module or `Import Package <https://packaging.python.org/en/latest/"
"glossary/#term-Import-Package>`_::"
msgstr ""

#: ../../library/importlib.metadata.rst:312
msgid ""
"Some editable installs, `do not supply top-level names <https://github.com/"
"pypa/packaging-problems/issues/609>`_, and thus this function is not "
"reliable with such installs."
msgstr ""

#: ../../library/importlib.metadata.rst:321
msgid "Distributions"
msgstr ""

#: ../../library/importlib.metadata.rst:323
msgid ""
"While the above API is the most common and convenient usage, you can get all "
"of that information from the ``Distribution`` class.  A ``Distribution`` is "
"an abstract object that represents the metadata for a Python `Distribution "
"Package <https://packaging.python.org/en/latest/glossary/#term-Distribution-"
"Package>`_.  You can get the ``Distribution`` instance::"
msgstr ""

#: ../../library/importlib.metadata.rst:332
msgid ""
"Thus, an alternative way to get the version number is through the "
"``Distribution`` instance::"
msgstr ""

#: ../../library/importlib.metadata.rst:338
msgid ""
"There are all kinds of additional metadata available on the ``Distribution`` "
"instance::"
msgstr ""

#: ../../library/importlib.metadata.rst:346
msgid ""
"For editable packages, an ``origin`` property may present :pep:`610` "
"metadata::"
msgstr ""

#: ../../library/importlib.metadata.rst:352
msgid ""
"The full set of available metadata is not described here. See the `Core "
"metadata specifications <https://packaging.python.org/en/latest/"
"specifications/core-metadata/#core-metadata>`_ for additional details."
msgstr ""

#: ../../library/importlib.metadata.rst:355
msgid "The ``.origin`` property was added."
msgstr ""

#: ../../library/importlib.metadata.rst:359
msgid "Distribution Discovery"
msgstr ""

#: ../../library/importlib.metadata.rst:361
msgid ""
"By default, this package provides built-in support for discovery of metadata "
"for file system and zip file `Distribution Package <https://packaging.python."
"org/en/latest/glossary/#term-Distribution-Package>`_\\s. This metadata "
"finder search defaults to ``sys.path``, but varies slightly in how it "
"interprets those values from how other import machinery does. In particular:"
msgstr ""

#: ../../library/importlib.metadata.rst:365
msgid ""
"``importlib.metadata`` does not honor :class:`bytes` objects on ``sys.path``."
msgstr ""

#: ../../library/importlib.metadata.rst:366
msgid ""
"``importlib.metadata`` will incidentally honor :py:class:`pathlib.Path` "
"objects on ``sys.path`` even though such values will be ignored for imports."
msgstr ""

#: ../../library/importlib.metadata.rst:370
msgid "Extending the search algorithm"
msgstr ""

#: ../../library/importlib.metadata.rst:372
msgid ""
"Because `Distribution Package <https://packaging.python.org/en/latest/"
"glossary/#term-Distribution-Package>`_ metadata is not available through :"
"data:`sys.path` searches, or package loaders directly, the metadata for a "
"distribution is found through import system :ref:`finders <finders-and-"
"loaders>`.  To find a distribution package's metadata, ``importlib."
"metadata`` queries the list of :term:`meta path finders <meta path finder>` "
"on :data:`sys.meta_path`."
msgstr ""

#: ../../library/importlib.metadata.rst:380
msgid ""
"By default ``importlib.metadata`` installs a finder for distribution "
"packages found on the file system. This finder doesn't actually find any "
"*distributions*, but it can find their metadata."
msgstr ""

#: ../../library/importlib.metadata.rst:385
msgid ""
"The abstract class :py:class:`importlib.abc.MetaPathFinder` defines the "
"interface expected of finders by Python's import system. ``importlib."
"metadata`` extends this protocol by looking for an optional "
"``find_distributions`` callable on the finders from :data:`sys.meta_path` "
"and presents this extended interface as the ``DistributionFinder`` abstract "
"base class, which defines this abstract method::"
msgstr ""

#: ../../library/importlib.metadata.rst:399
msgid ""
"The ``DistributionFinder.Context`` object provides ``.path`` and ``.name`` "
"properties indicating the path to search and name to match and may supply "
"other relevant context."
msgstr ""

#: ../../library/importlib.metadata.rst:403
msgid ""
"What this means in practice is that to support finding distribution package "
"metadata in locations other than the file system, subclass ``Distribution`` "
"and implement the abstract methods. Then from a custom finder, return "
"instances of this derived ``Distribution`` in the ``find_distributions()`` "
"method."
msgstr ""

#: ../../library/importlib.metadata.rst:410
msgid "Example"
msgstr "Contoh"

#: ../../library/importlib.metadata.rst:412
msgid ""
"Consider for example a custom finder that loads Python modules from a "
"database::"
msgstr ""

#: ../../library/importlib.metadata.rst:424
msgid ""
"That importer now presumably provides importable modules from a database, "
"but it provides no metadata or entry points. For this custom importer to "
"provide metadata, it would also need to implement ``DistributionFinder``::"
msgstr ""

#: ../../library/importlib.metadata.rst:439
msgid ""
"In this way, ``query_distributions`` would return records for each "
"distribution served by the database matching the query. For example, if "
"``requests-1.0`` is in the database, ``find_distributions`` would yield a "
"``DatabaseDistribution`` for ``Context(name='requests')`` or "
"``Context(name=None)``."
msgstr ""

#: ../../library/importlib.metadata.rst:445
msgid ""
"For the sake of simplicity, this example ignores ``context.path``\\. The "
"``path`` attribute defaults to ``sys.path`` and is the set of import paths "
"to be considered in the search. A ``DatabaseImporter`` could potentially "
"function without any concern for a search path. Assuming the importer does "
"no partitioning, the \"path\" would be irrelevant. In order to illustrate "
"the purpose of ``path``, the example would need to illustrate a more complex "
"``DatabaseImporter`` whose behavior varied depending on ``sys.path``/"
"``PYTHONPATH``. In that case, the ``find_distributions`` should honor the "
"``context.path`` and only yield ``Distribution``\\ s pertinent to that path."
msgstr ""

#: ../../library/importlib.metadata.rst:456
msgid "``DatabaseDistribution``, then, would look something like::"
msgstr ""

#: ../../library/importlib.metadata.rst:478
msgid ""
"This basic implementation should provide metadata and entry points for "
"packages served by the ``DatabaseImporter``, assuming that the ``record`` "
"supplies suitable ``.name``, ``.version``, and ``.entry_points`` attributes."
msgstr ""

#: ../../library/importlib.metadata.rst:483
msgid ""
"The ``DatabaseDistribution`` may also provide other metadata files, like "
"``RECORD`` (required for ``Distribution.files``) or override the "
"implementation of ``Distribution.files``. See the source for more "
"inspiration."
msgstr ""
