# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2023, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# oon arfiandwi (OonID) <oon.arfiandwi@gmail.com>, 2019
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-06-02 14:49+0000\n"
"PO-Revision-Date: 2019-09-01 02:42+0000\n"
"Last-Translator: oon arfiandwi (OonID) <oon.arfiandwi@gmail.com>, 2019\n"
"Language-Team: Indonesian (https://app.transifex.com/python-doc/teams/5390/id/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: id\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:5
msgid "More Control Flow Tools"
msgstr "Lebih Banyak Alat Pengatur Aliran *Control Flow*"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:7
msgid ""
"Besides the :keyword:`while` statement just introduced, Python uses the "
"usual flow control statements known from other languages, with some twists."
msgstr ""
"Selain pernyataan :keyword:`while` baru saja diperkenalkan, Python "
"menggunakan pernyataan kontrol aliran yang biasa dikenal dari bahasa lain, "
"dengan beberapa *twist*."

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:14
msgid ":keyword:`!if` Statements"
msgstr "Pernyataan :keyword:`!if`"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:16
msgid ""
"Perhaps the most well-known statement type is the :keyword:`if` statement.  "
"For example::"
msgstr ""
"Mungkin tipe pernyataan yang paling terkenal adalah pernyataan "
":keyword:`if`. Sebagai contoh::"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:33
msgid ""
"There can be zero or more :keyword:`elif` parts, and the :keyword:`else` "
"part is optional.  The keyword ':keyword:`!elif`' is short for 'else if', "
"and is useful to avoid excessive indentation.  An  :keyword:`!if` ... "
":keyword:`!elif` ... :keyword:`!elif` ... sequence is a substitute for the "
"``switch`` or ``case`` statements found in other languages."
msgstr ""
"Mungkin ada nol atau lebih bagian :keyword:`elif`, dan bagian "
":keyword:`else` adalah opsional. Kata kunci ':keyword:`!elif`' adalah "
"kependekan dari 'else if', dan berguna untuk menghindari indentasi yang "
"berlebihan. Sebuah :keyword:`!if` ... :keyword:`!elif` ... :keyword:`!elif` "
"... adalah urutan pengganti untuk pernyataan ``switch`` atau ``case`` yang "
"ditemukan dalam bahasa lain."

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:43
msgid ":keyword:`!for` Statements"
msgstr "Pernyataan :keyword:`!for`"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:48
msgid ""
"The :keyword:`for` statement in Python differs a bit from what you may be "
"used to in C or Pascal.  Rather than always iterating over an arithmetic "
"progression of numbers (like in Pascal), or giving the user the ability to "
"define both the iteration step and halting condition (as C), Python's "
":keyword:`!for` statement iterates over the items of any sequence (a list or"
" a string), in the order that they appear in the sequence.  For example (no "
"pun intended):"
msgstr ""
"Pernyataan :keyword:`for` dalam Python sedikit berbeda dari apa yang mungkin"
" Anda gunakan di C atau Pascal. Alih-alih selalu mengulangi perkembangan "
"angka dalam aritmatika (seperti dalam Pascal), atau memberikan pengguna "
"kemampuan untuk menentukan langkah iterasi dan kondisi berhenti (seperti C),"
" Python pernyataan :keyword:`!for` diulangi pada item-item dari urutan apa "
"pun (daftar *list* atau string), dalam urutan yang muncul dalam urutan. "
"Misalnya (tidak ada permainan kata-kata):"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:69
msgid ""
"If you need to modify the sequence you are iterating over while inside the "
"loop (for example to duplicate selected items), it is recommended that you "
"first make a copy.  Iterating over a sequence does not implicitly make a "
"copy.  The slice notation makes this especially convenient::"
msgstr ""

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:81
msgid ""
"With ``for w in words:``, the example would attempt to create an infinite "
"list, inserting ``defenestrate`` over and over again."
msgstr ""

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:88
msgid "The :func:`range` Function"
msgstr "Fungsi :func:`range`"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:90
msgid ""
"If you do need to iterate over a sequence of numbers, the built-in function "
":func:`range` comes in handy.  It generates arithmetic progressions::"
msgstr ""
"Jika Anda perlu mengulangi urutan angka, fungsi bawaan :func:`range` "
"berguna. Ini menghasilkan perkembangan aritmatika::"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:102
msgid ""
"The given end point is never part of the generated sequence; ``range(10)`` "
"generates 10 values, the legal indices for items of a sequence of length 10."
"  It is possible to let the range start at another number, or to specify a "
"different increment (even negative; sometimes this is called the 'step')::"
msgstr ""
"Titik akhir yang diberikan tidak pernah menjadi bagian dari urutan yang "
"dihasilkan; ``range(10)`` menghasilkan 10 nilai, indeks sah *legal* untuk "
"item dengan urutan panjang 10. Dimungkinkan untuk membiarkan rentang mulai "
"dari nomor lain, atau untuk menentukan kenaikan yang berbeda (bahkan "
"negatif; kadang-kadang ini disebut 'step')::"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:116
msgid ""
"To iterate over the indices of a sequence, you can combine :func:`range` and"
" :func:`len` as follows::"
msgstr ""
"Untuk beralih pada indeks urutan, Anda dapat menggabungkan :func:`range` dan"
" :func:`len` sebagai berikut::"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:129
msgid ""
"In most such cases, however, it is convenient to use the :func:`enumerate` "
"function, see :ref:`tut-loopidioms`."
msgstr ""
"Dalam kebanyakan kasus seperti itu, bagaimanapun, lebih mudah untuk "
"menggunakan fungsi :func:`enumerate`, lihat :ref:`tut-loopidioms`."

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:132
msgid "A strange thing happens if you just print a range::"
msgstr "Hal aneh terjadi jika Anda hanya mencetak rentang *range*::"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:137
msgid ""
"In many ways the object returned by :func:`range` behaves as if it is a "
"list, but in fact it isn't. It is an object which returns the successive "
"items of the desired sequence when you iterate over it, but it doesn't "
"really make the list, thus saving space."
msgstr ""
"Dalam banyak hal objek dikembalikan oleh :func:`range` berperilaku seolah-"
"olah itu adalah daftar *list*, tetapi sebenarnya tidak. Ini adalah objek "
"yang mengembalikan item berurutan dari urutan yang diinginkan ketika Anda "
"mengulanginya, tetapi itu tidak benar-benar membuat daftar *list*, sehingga "
"menghemat ruang."

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:142
msgid ""
"We say such an object is *iterable*, that is, suitable as a target for "
"functions and constructs that expect something from which they can obtain "
"successive items until the supply is exhausted. We have seen that the "
":keyword:`for` statement is such an *iterator*. The function :func:`list` is"
" another; it creates lists from iterables::"
msgstr ""

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:152
msgid ""
"Later we will see more functions that return iterables and take iterables as"
" argument."
msgstr ""

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:158
msgid ""
":keyword:`!break` and :keyword:`!continue` Statements, and :keyword:`!else` "
"Clauses on Loops"
msgstr ""
"Pernyataan :keyword:`!break` dan :keyword:`!continue`, dan :keyword:`!else` "
"Klausa pada Perulangan *Loops*"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:160
msgid ""
"The :keyword:`break` statement, like in C, breaks out of the innermost "
"enclosing :keyword:`for` or :keyword:`while` loop."
msgstr ""
"Pernyataan :keyword:`break`, seperti dalam C, keluar dari bagian terdalam "
"yang terlampir :keyword:`for` atau perulangan :keyword:`while`."

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:163
msgid ""
"Loop statements may have an :keyword:`!else` clause; it is executed when the"
" loop terminates through exhaustion of the list (with :keyword:`for`) or "
"when the condition becomes false (with :keyword:`while`), but not when the "
"loop is terminated by a :keyword:`break` statement.  This is exemplified by "
"the following loop, which searches for prime numbers::"
msgstr ""

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:187
msgid ""
"(Yes, this is the correct code.  Look closely: the ``else`` clause belongs "
"to the :keyword:`for` loop, **not** the :keyword:`if` statement.)"
msgstr ""
"(Ya, ini adalah kode yang benar. Perhatikan baik-baik: klausul ``else`` "
"milik perulangan :keyword:`for`, **not** pernyataan :keyword:`if`.)"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:190
msgid ""
"When used with a loop, the ``else`` clause has more in common with the "
"``else`` clause of a :keyword:`try` statement than it does that of "
":keyword:`if` statements: a :keyword:`!try` statement's ``else`` clause runs"
" when no exception occurs, and a loop's ``else`` clause runs when no "
"``break`` occurs. For more on the :keyword:`!try` statement and exceptions, "
"see :ref:`tut-handling`."
msgstr ""

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:197
msgid ""
"The :keyword:`continue` statement, also borrowed from C, continues with the "
"next iteration of the loop::"
msgstr ""
"Pernyataan :keyword:`continue`, juga dipinjam dari C, melanjutkan dengan "
"pengulangan berikutnya dari loop::"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:217
msgid ":keyword:`!pass` Statements"
msgstr "Pernyataan :keyword:`!pass`"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:219
msgid ""
"The :keyword:`pass` statement does nothing. It can be used when a statement "
"is required syntactically but the program requires no action. For example::"
msgstr ""
"Pernyataan :keyword:`pass` tidak melakukan apa-apa. Ini dapat digunakan "
"ketika pernyataan diperlukan secara sintaksis tetapi program tidak "
"memerlukan tindakan. Sebagai contoh::"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:226
msgid "This is commonly used for creating minimal classes::"
msgstr "Ini biasanya digunakan untuk membuat kelas minimal::"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:232
msgid ""
"Another place :keyword:`pass` can be used is as a place-holder for a "
"function or conditional body when you are working on new code, allowing you "
"to keep thinking at a more abstract level.  The :keyword:`!pass` is silently"
" ignored::"
msgstr ""
"Tempat lain :keyword:`pass` dapat digunakan adalah sebagai tempat-penampung "
"*place-holder* untuk fungsi atau badan bersyarat *conditional body* saat "
"Anda bekerja pada kode baru, memungkinkan Anda untuk terus berpikir pada "
"tingkat yang lebih abstrak. :keyword: `!pass` diabaikan secara diam-diam::"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:243
msgid "Defining Functions"
msgstr "Mendefinisikan Fungsi"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:245
msgid ""
"We can create a function that writes the Fibonacci series to an arbitrary "
"boundary::"
msgstr ""
"Kita dapat membuat fungsi yang menulis seri Fibonacci ke batas acak "
"*arbitrary*::"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:265
msgid ""
"The keyword :keyword:`def` introduces a function *definition*.  It must be "
"followed by the function name and the parenthesized list of formal "
"parameters. The statements that form the body of the function start at the "
"next line, and must be indented."
msgstr ""
"Kata kunci :keyword:`def` memperkenalkan fungsi *definition*. Itu harus "
"diikuti oleh nama fungsi dan daftar parameter formal yang di dalam tanda "
"kurung. Pernyataan yang membentuk tubuh fungsi mulai dari baris berikutnya, "
"dan harus diberi indentasi."

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:270
msgid ""
"The first statement of the function body can optionally be a string literal;"
" this string literal is the function's documentation string, or "
":dfn:`docstring`. (More about docstrings can be found in the section "
":ref:`tut-docstrings`.) There are tools which use docstrings to "
"automatically produce online or printed documentation, or to let the user "
"interactively browse through code; it's good practice to include docstrings "
"in code that you write, so make a habit of it."
msgstr ""
"Pernyataan pertama dari tubuh fungsi secara opsional dapat berupa string "
"literal; string literal ini adalah string dokumentasi fungsi, atau "
":dfn:`docstring`. (Lebih lanjut tentang *docstring* dapat ditemukan di "
"bagian :ref:`tut-docstrings`.) Ada alat yang menggunakan *docstring* untuk "
"secara otomatis menghasilkan dokumentasi online atau cetak, atau untuk "
"membiarkan pengguna menelusuri kode secara interaktif; itu praktik yang baik"
" untuk memasukkan dokumen dalam kode yang Anda tulis, jadi biasakan seperti "
"itu."

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:277
msgid ""
"The *execution* of a function introduces a new symbol table used for the "
"local variables of the function.  More precisely, all variable assignments "
"in a function store the value in the local symbol table; whereas variable "
"references first look in the local symbol table, then in the local symbol "
"tables of enclosing functions, then in the global symbol table, and finally "
"in the table of built-in names. Thus, global variables and variables of "
"enclosing functions cannot be directly assigned a value within a function "
"(unless, for global variables, named in a :keyword:`global` statement, or, "
"for variables of enclosing functions, named in a :keyword:`nonlocal` "
"statement), although they may be referenced."
msgstr ""
"*execution* dari suatu fungsi memperkenalkan tabel simbol baru yang "
"digunakan untuk variabel lokal dari fungsi tersebut. Lebih tepatnya, semua "
"tugas variabel dalam suatu fungsi menyimpan nilai dalam tabel simbol lokal; "
"sedangkan referensi variabel pertama-tama terlihat pada tabel simbol lokal, "
"kemudian pada tabel simbol lokal lampiran *enclosing* fungsi, kemudian pada "
"tabel simbol global, dan akhirnya pada tabel nama bawaan. Dengan demikian, "
"variabel global dan variabel lampiran *enclosing* fungsi tidak dapat secara "
"langsung menetapkan nilai dalam suatu fungsi (kecuali, untuk variabel "
"global, disebutkan dalam pernyataan :keyword:`global`, atau, untuk variabel "
"lampiran *enclosing* fungsi, dinamai dalam pernyataan :keyword:`nonlocal`), "
"meskipun mungkin direferensikan."

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:288
msgid ""
"The actual parameters (arguments) to a function call are introduced in the "
"local symbol table of the called function when it is called; thus, arguments"
" are passed using *call by value* (where the *value* is always an object "
"*reference*, not the value of the object). [#]_ When a function calls "
"another function, a new local symbol table is created for that call."
msgstr ""
"Parameter aktual (*arguments*) untuk panggilan fungsi diperkenalkan dalam "
"tabel simbol lokal dari fungsi yang dipanggil ketika dipanggil; dengan "
"demikian, argumen dilewatkan menggunakan *call by value* (di mana *value* "
"selalu menjadi objek *reference*, bukan nilai objek). [#]_ Ketika suatu "
"fungsi memanggil fungsi lain, tabel simbol lokal baru dibuat untuk panggilan"
" itu."

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:294
msgid ""
"A function definition introduces the function name in the current symbol "
"table. The value of the function name has a type that is recognized by the "
"interpreter as a user-defined function.  This value can be assigned to "
"another name which can then also be used as a function.  This serves as a "
"general renaming mechanism::"
msgstr ""
"Definisi fungsi memperkenalkan nama fungsi dalam tabel simbol saat ini. "
"Nilai nama fungsi memiliki tipe yang diakui oleh *interpreter* sebagai "
"fungsi yang ditentukan pengguna. Nilai ini dapat ditetapkan ke nama lain "
"yang kemudian dapat juga digunakan sebagai fungsi. Ini berfungsi sebagai "
"mekanisme penggantian nama umum::"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:306
msgid ""
"Coming from other languages, you might object that ``fib`` is not a function"
" but a procedure since it doesn't return a value.  In fact, even functions "
"without a :keyword:`return` statement do return a value, albeit a rather "
"boring one.  This value is called ``None`` (it's a built-in name).  Writing "
"the value ``None`` is normally suppressed by the interpreter if it would be "
"the only value written. You can see it if you really want to using "
":func:`print`::"
msgstr ""
"Berasal dari bahasa lain, Anda mungkin keberatan bahwa ``fib`` bukan fungsi "
"melainkan prosedur karena tidak mengembalikan nilai. Bahkan, fungsi bahkan "
"tanpa pernyataan :keyword:`return` mengembalikan nilai, meskipun yang agak "
"membosankan. Nilai ini disebut ``None`` (ini adalah nama bawaan). Menulis "
"nilai ``None`` biasanya dihilangkan *suppressed* oleh *interpreter* jika itu"
" akan menjadi satu-satunya nilai yang ditulis. Anda dapat melihatnya jika "
"Anda benar-benar ingin menggunakan :func:`print`::"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:317
msgid ""
"It is simple to write a function that returns a list of the numbers of the "
"Fibonacci series, instead of printing it::"
msgstr ""
"Sangat mudah untuk menulis fungsi yang mengembalikan daftar *list* nomor "
"seri Fibonacci, alih-alih mencetaknya::"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:333
msgid "This example, as usual, demonstrates some new Python features:"
msgstr "Contoh ini, seperti biasa, menunjukkan beberapa fitur Python baru:"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:335
msgid ""
"The :keyword:`return` statement returns with a value from a function. "
":keyword:`!return` without an expression argument returns ``None``. Falling "
"off the end of a function also returns ``None``."
msgstr ""
"Pernyataan :keyword:`return` kembali dengan nilai dari suatu fungsi. "
":keyword:`!return` tanpa argumen ekspresi mengembalikan ``None``. Keluar "
"dari akhir suatu fungsi juga mengembalikan ``None``."

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:339
msgid ""
"The statement ``result.append(a)`` calls a *method* of the list object "
"``result``.  A method is a function that 'belongs' to an object and is named"
" ``obj.methodname``, where ``obj`` is some object (this may be an "
"expression), and ``methodname`` is the name of a method that is defined by "
"the object's type. Different types define different methods.  Methods of "
"different types may have the same name without causing ambiguity.  (It is "
"possible to define your own object types and methods, using *classes*, see "
":ref:`tut-classes`) The method :meth:`append` shown in the example is "
"defined for list objects; it adds a new element at the end of the list.  In "
"this example it is equivalent to ``result = result + [a]``, but more "
"efficient."
msgstr ""
"Pernyataan ``result.append(a)`` memanggil *method* dari objek daftar *list* "
"``result``. Sebuah metode adalah fungsi yang 'milik' sebuah objek dan "
"dinamai ``obj.methodname``, di mana ``obj`` adalah suatu objek (ini mungkin "
"sebuah ekspresi), dan `` methodname`` adalah nama dari metode yang "
"ditentukan oleh tipe objek. Jenis yang berbeda menentukan metode yang "
"berbeda. Metode tipe yang berbeda mungkin memiliki nama yang sama tanpa "
"menimbulkan ambiguitas. (Dimungkinkan untuk menentukan jenis dan metode "
"objek Anda sendiri, menggunakan *classes*, lihat :ref:`tut-classes`) Metode "
":meth:`append` yang ditunjukkan pada contoh didefinisikan untuk objek "
"daftar; itu menambahkan elemen baru di akhir daftar. Dalam contoh ini setara"
" dengan ``result = result + [a]``, tetapi lebih efisien."

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:354
msgid "More on Defining Functions"
msgstr "Lebih lanjut tentang Mendefinisikan Fungsi"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:356
msgid ""
"It is also possible to define functions with a variable number of arguments."
" There are three forms, which can be combined."
msgstr ""
"Dimungkinkan juga untuk mendefinisikan fungsi dengan sejumlah variabel "
"argumen. Ada tiga bentuk, yang bisa digabungkan."

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:363
msgid "Default Argument Values"
msgstr "Nilai Argumen Bawaan"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:365
msgid ""
"The most useful form is to specify a default value for one or more "
"arguments. This creates a function that can be called with fewer arguments "
"than it is defined to allow.  For example::"
msgstr ""
"Bentuk yang paling berguna adalah menentukan nilai bawaan untuk satu atau "
"lebih argumen. Ini menciptakan fungsi yang bisa dipanggil dengan argumen "
"yang lebih sedikit daripada yang didefinisikan untuk diizinkan. Sebagai "
"contoh::"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:381
msgid "This function can be called in several ways:"
msgstr "Fungsi ini dapat dipanggil dengan beberapa cara:"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:383
msgid ""
"giving only the mandatory argument: ``ask_ok('Do you really want to "
"quit?')``"
msgstr ""
"hanya memberikan argumen wajib: ``ask_ok('Apakah Anda benar-benar ingin "
"berhenti?')``"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:385
msgid ""
"giving one of the optional arguments: ``ask_ok('OK to overwrite the file?', "
"2)``"
msgstr ""
"memberikan salah satu argumen opsional: ``ask_ok('OK to overwrite the "
"file?', 2)``"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:387
msgid ""
"or even giving all arguments: ``ask_ok('OK to overwrite the file?', 2, 'Come"
" on, only yes or no!')``"
msgstr ""
"atau bahkan memberikan semua argumen: ``ask_ok('OK to overwrite file?', 2, "
"'Come on, only yes or no!')``"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:390
msgid ""
"This example also introduces the :keyword:`in` keyword. This tests whether "
"or not a sequence contains a certain value."
msgstr ""
"Contoh ini juga memperkenalkan kata kunci :keyword:`in`. Ini menguji apakah "
"suatu urutan berisi nilai tertentu atau tidak."

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:393
msgid ""
"The default values are evaluated at the point of function definition in the "
"*defining* scope, so that ::"
msgstr ""
"Nilai bawaan dievaluasi pada titik definisi fungsi dalam lingkup *defining*,"
" sehingga::"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:404
msgid "will print ``5``."
msgstr "akan mencetak ``5``."

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:406
msgid ""
"**Important warning:**  The default value is evaluated only once. This makes"
" a difference when the default is a mutable object such as a list, "
"dictionary, or instances of most classes.  For example, the following "
"function accumulates the arguments passed to it on subsequent calls::"
msgstr ""
"**Peringatan penting:** Nilai bawaan dievaluasi hanya sekali. Ini membuat "
"perbedaan ketika bawaan adalah objek yang dapat diubah seperti daftar "
"*list*, kamus *dictionary*, atau *instances* dari sebagian besar kelas. "
"Misalnya, fungsi berikut mengakumulasi argumen yang diteruskan pada "
"panggilan berikutnya::"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:419
msgid "This will print ::"
msgstr "Ini akan mencetak::"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:425
msgid ""
"If you don't want the default to be shared between subsequent calls, you can"
" write the function like this instead::"
msgstr ""
"Jika Anda tidak ingin bawaan dibagi dengan panggilan berikutnya, Anda dapat "
"menulis fungsi seperti ini sebagai gantinya:"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:438
msgid "Keyword Arguments"
msgstr "Argumen Kata Kunci *Keyword Arguments*"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:440
msgid ""
"Functions can also be called using :term:`keyword arguments <keyword "
"argument>` of the form ``kwarg=value``.  For instance, the following "
"function::"
msgstr ""
"Fungsi juga dapat dipanggil menggunakan :term:`keyword argument <keyword "
"argument>` dari bentuk ``kwarg=value``. Misalnya, fungsi berikut::"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:449
msgid ""
"accepts one required argument (``voltage``) and three optional arguments "
"(``state``, ``action``, and ``type``).  This function can be called in any "
"of the following ways::"
msgstr ""
"menerima satu argumen yang diperlukan (``voltage``) dan tiga argumen "
"opsional (``state``, ``action``, dan ``type``). Fungsi ini dapat dipanggil "
"dengan salah satu cara berikut::"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:460
msgid "but all the following calls would be invalid::"
msgstr "tetapi semua panggilan berikut ini tidak valid::"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:467
msgid ""
"In a function call, keyword arguments must follow positional arguments. All "
"the keyword arguments passed must match one of the arguments accepted by the"
" function (e.g. ``actor`` is not a valid argument for the ``parrot`` "
"function), and their order is not important.  This also includes non-"
"optional arguments (e.g. ``parrot(voltage=1000)`` is valid too). No argument"
" may receive a value more than once. Here's an example that fails due to "
"this restriction::"
msgstr ""
"Dalam pemanggilan fungsi, argumen kata kunci *keyword argument* harus "
"mengikuti argumen posisi. Semua argumen kata kunci *keyword argument* yang "
"diteruskan harus cocok dengan salah satu argumen yang diterima oleh fungsi "
"(mis. ``actor`` bukan argumen yang valid untuk fungsi ``parrot``), dan "
"urutannya tidak penting. Ini juga termasuk argumen non-opsional (mis. "
"``Parrot(voltase=1000)`` juga valid). Tidak ada argumen yang dapat menerima "
"nilai lebih dari sekali. Berikut ini contoh yang gagal karena batasan ini::"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:483
msgid ""
"When a final formal parameter of the form ``**name`` is present, it receives"
" a dictionary (see :ref:`typesmapping`) containing all keyword arguments "
"except for those corresponding to a formal parameter.  This may be combined "
"with a formal parameter of the form ``*name`` (described in the next "
"subsection) which receives a :ref:`tuple <tut-tuples>` containing the "
"positional arguments beyond the formal parameter list.  (``*name`` must "
"occur before ``**name``.) For example, if we define a function like this::"
msgstr ""
"Ketika parameter formal terakhir dari bentuk ``**name`` ada, ia menerima "
"kamus *dictionary* (lihat :ref:`typesmapping`) yang berisi semua argumen "
"kata kunci *keyword argument* kecuali yang terkait dengan parameter formal. "
"Ini dapat digabungkan dengan parameter formal dari bentuk ``*name`` "
"(dijelaskan dalam subbagian berikutnya) yang menerima :ref:`tuple <tut-"
"tuples>` yang berisi argumen posisi di luar daftar parameter formal. "
"(``*name`` harus ada sebelum ``**name``.) Misalnya, jika kita mendefinisikan"
" fungsi seperti ini::"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:500
msgid "It could be called like this::"
msgstr "Ini bisa disebut seperti ini::"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:508
msgid "and of course it would print:"
msgstr "dan tentu saja itu akan mencetak:"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:521
msgid ""
"Note that the order in which the keyword arguments are printed is guaranteed"
" to match the order in which they were provided in the function call."
msgstr ""
"Perhatikan bahwa urutan argumen kata kunci dicetak dijamin sesuai dengan "
"urutan yang disediakan dalam pemanggilan fungsi."

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:528
msgid "Arbitrary Argument Lists"
msgstr "Daftar Argumen Berubah-ubah *Arbitrary*"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:533
msgid ""
"Finally, the least frequently used option is to specify that a function can "
"be called with an arbitrary number of arguments.  These arguments will be "
"wrapped up in a tuple (see :ref:`tut-tuples`).  Before the variable number "
"of arguments, zero or more normal arguments may occur. ::"
msgstr ""
"Akhirnya, opsi yang paling jarang digunakan adalah menentukan bahwa suatu "
"fungsi dapat dipanggil dengan sejumlah argumen acak *arbitrary*. Argumen-"
"argumen ini akan dibungkus dalam sebuah tuple (lihat :ref:`tuttuples`). "
"Sebelum jumlah variabel argumen, nol atau lebih argumen normal dapat muncul."
" ::"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:542
msgid ""
"Normally, these ``variadic`` arguments will be last in the list of formal "
"parameters, because they scoop up all remaining input arguments that are "
"passed to the function. Any formal parameters which occur after the "
"``*args`` parameter are 'keyword-only' arguments, meaning that they can only"
" be used as keywords rather than positional arguments. ::"
msgstr ""
"Biasanya, argumen ``variadic`` ini akan menjadi yang terakhir dalam daftar "
"parameter formal, karena mereka mengambil semua argumen masukan yang tersisa"
" yang diteruskan ke fungsi. Parameter formal apa pun yang muncul setelah "
"parameter ``*args`` adalah argumen 'keyword-only', yang berarti bahwa "
"parameter itu hanya dapat digunakan sebagai kata kunci alih-alih argumen "
"posisi. ::"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:559
msgid "Unpacking Argument Lists"
msgstr "Pembukaan Paket *Unpacking* Daftar Argumen"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:561
msgid ""
"The reverse situation occurs when the arguments are already in a list or "
"tuple but need to be unpacked for a function call requiring separate "
"positional arguments.  For instance, the built-in :func:`range` function "
"expects separate *start* and *stop* arguments.  If they are not available "
"separately, write the function call with the  ``*`` operator to unpack the "
"arguments out of a list or tuple::"
msgstr ""

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:577
msgid ""
"In the same fashion, dictionaries can deliver keyword arguments with the "
"``**`` operator::"
msgstr ""

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:593
msgid "Lambda Expressions"
msgstr "Ekspresi Lambda"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:595
msgid ""
"Small anonymous functions can be created with the :keyword:`lambda` keyword."
" This function returns the sum of its two arguments: ``lambda a, b: a+b``. "
"Lambda functions can be used wherever function objects are required.  They "
"are syntactically restricted to a single expression.  Semantically, they are"
" just syntactic sugar for a normal function definition.  Like nested "
"function definitions, lambda functions can reference variables from the "
"containing scope::"
msgstr ""
"Fungsi kecil anonim dapat dibuat dengan kata kunci :keyword:`lambda`. Fungsi"
" ini mengembalikan jumlah dari dua argumennya: ``lambda a, b: a + b``. "
"Fungsi Lambda dapat digunakan di mana pun objek fungsi diperlukan. Mereka "
"secara sintaksis terbatas pada satu ekspresi. Secara semantik, mereka hanya "
"pemanis sintaksis untuk definisi fungsi normal. Seperti definisi fungsi "
"bersarang, fungsi lambda dapat mereferensikan variabel dari cakupan yang "
"mengandung ::"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:612
msgid ""
"The above example uses a lambda expression to return a function.  Another "
"use is to pass a small function as an argument::"
msgstr ""
"Contoh di atas menggunakan ekspresi lambda untuk mengembalikan fungsi. "
"Penggunaan lain adalah untuk melewatkan fungsi kecil sebagai argumen ::"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:624
msgid "Documentation Strings"
msgstr "String Dokumentasi"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:631
msgid ""
"Here are some conventions about the content and formatting of documentation "
"strings."
msgstr ""
"Berikut adalah beberapa konvensi tentang konten dan format string "
"dokumentasi."

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:634
msgid ""
"The first line should always be a short, concise summary of the object's "
"purpose.  For brevity, it should not explicitly state the object's name or "
"type, since these are available by other means (except if the name happens "
"to be a verb describing a function's operation).  This line should begin "
"with a capital letter and end with a period."
msgstr ""
"Baris pertama harus selalu berupa ringkasan singkat dan ringkas dari tujuan "
"objek. Untuk singkatnya, itu tidak boleh secara eksplisit menyatakan nama "
"atau jenis objek, karena ini tersedia dengan cara lain (kecuali jika nama "
"tersebut merupakan kata kerja yang menggambarkan operasi fungsi). Baris ini "
"harus dimulai dengan huruf kapital dan diakhiri dengan titik."

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:640
msgid ""
"If there are more lines in the documentation string, the second line should "
"be blank, visually separating the summary from the rest of the description."
"  The following lines should be one or more paragraphs describing the "
"object's calling conventions, its side effects, etc."
msgstr ""
"Jika ada lebih banyak baris dalam string dokumentasi, baris kedua harus "
"kosong, memisahkan ringkasan secara visual dari sisa deskripsi. Baris "
"berikut harus satu atau lebih paragraf yang menggambarkan konvensi "
"pemanggilan objek, efek sampingnya, dll."

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:645
msgid ""
"The Python parser does not strip indentation from multi-line string literals"
" in Python, so tools that process documentation have to strip indentation if"
" desired.  This is done using the following convention. The first non-blank "
"line *after* the first line of the string determines the amount of "
"indentation for the entire documentation string.  (We can't use the first "
"line since it is generally adjacent to the string's opening quotes so its "
"indentation is not apparent in the string literal.)  Whitespace "
"\"equivalent\" to this indentation is then stripped from the start of all "
"lines of the string.  Lines that are indented less should not occur, but if "
"they occur all their leading whitespace should be stripped.  Equivalence of "
"whitespace should be tested after expansion of tabs (to 8 spaces, normally)."
msgstr ""
"Pengurai Python tidak menghapus lekukan dari string multi-baris literal di "
"Python, jadi alat yang memproses dokumentasi harus menghapus indentasi jika "
"diinginkan. Ini dilakukan dengan menggunakan konvensi berikut. Baris tidak-"
"kosong pertama *setelah* baris pertama string menentukan jumlah indentasi "
"untuk seluruh string dokumentasi. (Kami tidak dapat menggunakan baris "
"pertama karena umumnya berbatasan dengan tanda kutip pembukaan string "
"sehingga indentasinya tidak terlihat dalam string literal.) Spasi "
"\"equivalent\" untuk indentasi ini kemudian dihilangkan dari awal semua "
"baris string. Baris yang indentasi lebih sedikit seharusnya tidak terjadi, "
"tetapi jika terjadi semua spasi *whitespace* utama harus dihilangkan. "
"Kesetaraan spasi harus diuji setelah ekspansi tab (hingga 8 spasi, "
"biasanya)."

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:657
msgid "Here is an example of a multi-line docstring::"
msgstr "Berikut adalah contoh dari multi-line *docstring*::"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:675
msgid "Function Annotations"
msgstr "Anotasi Fungsi"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:683
msgid ""
":ref:`Function annotations <function>` are completely optional metadata "
"information about the types used by user-defined functions (see :pep:`3107` "
"and :pep:`484` for more information)."
msgstr ""
":ref: `Function annotations <fungsi>` informasi metadata yang sepenuhnya "
"opsional tentang jenis yang digunakan oleh fungsi yang ditentukan pengguna "
"(lihat :pep:`3107` dan :pep:`484` untuk informasi lebih lanjut)."

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:687
msgid ""
":term:`Annotations <function annotation>` are stored in the "
":attr:`__annotations__` attribute of the function as a dictionary and have "
"no effect on any other part of the function.  Parameter annotations are "
"defined by a colon after the parameter name, followed by an expression "
"evaluating to the value of the annotation.  Return annotations are defined "
"by a literal ``->``, followed by an expression, between the parameter list "
"and the colon denoting the end of the :keyword:`def` statement.  The "
"following example has a positional argument, a keyword argument, and the "
"return value annotated::"
msgstr ""
":term:`Annotations <function annotation>` disimpan dalam atribut "
":attr:`__annotations__` dari fungsi sebagai kamus *dictionary* dan tidak "
"berpengaruh pada bagian fungsi yang lain. Anotasi parameter didefinisikan "
"oleh titik dua setelah nama parameter, diikuti oleh ekspresi yang "
"mengevaluasi nilai anotasi. Anotasi pengembalian didefinisikan oleh literal "
"``->``, diikuti oleh ekspresi, antara daftar parameter dan titik dua yang "
"menunjukkan akhir dari pernyataan :keyword:`def`. Contoh berikut memiliki "
"argumen posisi, argumen kata kunci *keyword argument*, dan nilai kembalian "
"yang dianotasi ::"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:709
msgid "Intermezzo: Coding Style"
msgstr "Intermezzo: Gaya *Coding*"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:714
msgid ""
"Now that you are about to write longer, more complex pieces of Python, it is"
" a good time to talk about *coding style*.  Most languages can be written "
"(or more concise, *formatted*) in different styles; some are more readable "
"than others. Making it easy for others to read your code is always a good "
"idea, and adopting a nice coding style helps tremendously for that."
msgstr ""
"Sekarang Anda akan menulis potongan Python yang lebih panjang dan lebih "
"kompleks, ini adalah saat yang tepat untuk berbicara tentang *coding style*."
" Sebagian besar bahasa dapat ditulis (atau lebih ringkas, *formatted*) dalam"
" gaya yang berbeda; beberapa lebih mudah dibaca daripada yang lain. "
"Memudahkan orang lain untuk membaca kode Anda selalu merupakan ide yang "
"baik, dan mengadopsi gaya pengkodean yang bagus sangat membantu untuk itu."

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:720
msgid ""
"For Python, :pep:`8` has emerged as the style guide that most projects "
"adhere to; it promotes a very readable and eye-pleasing coding style.  Every"
" Python developer should read it at some point; here are the most important "
"points extracted for you:"
msgstr ""
"Untuk Python, :pep:`8` telah muncul sebagai panduan gaya yang dipatuhi "
"sebagian besar proyek; itu mempromosikan gaya pengkodean yang sangat mudah "
"dibaca dan menyenangkan. Setiap pengembang Python harus membacanya di "
"beberapa bagian; di sini adalah poin paling penting yang diambil untuk Anda:"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:725
msgid "Use 4-space indentation, and no tabs."
msgstr "Gunakan lekukan 4-spasi, dan tidak ada tab."

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:727
msgid ""
"4 spaces are a good compromise between small indentation (allows greater "
"nesting depth) and large indentation (easier to read).  Tabs introduce "
"confusion, and are best left out."
msgstr ""
"4 spasi adalah kompromi yang baik antara indentasi kecil (memungkinkan "
"kedalaman bersarang lebih besar) dan indentasi besar (lebih mudah dibaca). "
"Tab menimbulkan kebingungan, dan sebaiknya ditinggalkan."

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:731
msgid "Wrap lines so that they don't exceed 79 characters."
msgstr "Bungkus garis agar tidak melebihi 79 karakter."

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:733
msgid ""
"This helps users with small displays and makes it possible to have several "
"code files side-by-side on larger displays."
msgstr ""
"Ini membantu pengguna dengan tampilan kecil dan memungkinkan untuk memiliki "
"beberapa file kode berdampingan pada tampilan yang lebih besar."

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:736
msgid ""
"Use blank lines to separate functions and classes, and larger blocks of code"
" inside functions."
msgstr ""
"Gunakan baris kosong untuk memisahkan fungsi dan kelas, dan blok kode yang "
"lebih besar di dalam fungsi."

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:739
msgid "When possible, put comments on a line of their own."
msgstr "Jika memungkinkan, berikan komentar pada baris terkait."

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:741
msgid "Use docstrings."
msgstr "Gunakan docstrings."

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:743
msgid ""
"Use spaces around operators and after commas, but not directly inside "
"bracketing constructs: ``a = f(1, 2) + g(3, 4)``."
msgstr ""
"Gunakan spasi di sekitar operator dan setelah koma, tetapi tidak secara "
"langsung di dalam konstruksi kurung *bracketing*: ``a = f (1, 2) + g (3, "
"4)``."

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:746
msgid ""
"Name your classes and functions consistently; the convention is to use "
"``UpperCamelCase`` for classes and ``lowercase_with_underscores`` for "
"functions and methods.  Always use ``self`` as the name for the first method"
" argument (see :ref:`tut-firstclasses` for more on classes and methods)."
msgstr ""
"Beri nama kelas dan fungsi Anda secara konsisten; konvensi ini menggunakan "
"``UpperCamelCase`` untuk kelas dan ``lowercase_with_underscores`` untuk "
"fungsi dan metode. Selalu gunakan ``self`` sebagai nama untuk argumen metode"
" pertama (lihat :ref:`tut-firstclass` untuk lebih lanjut tentang kelas dan "
"metode)."

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:751
msgid ""
"Don't use fancy encodings if your code is meant to be used in international "
"environments.  Python's default, UTF-8, or even plain ASCII work best in any"
" case."
msgstr ""
"Jangan gunakan pengkodean ajaib *fancy encodings* jika kode Anda dimaksudkan"
" untuk digunakan di lingkungan internasional. Default Python, UTF-8, atau "
"bahkan ASCII biasa berfungsi paling baik dalam hal apa pun."

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:755
msgid ""
"Likewise, don't use non-ASCII characters in identifiers if there is only the"
" slightest chance people speaking a different language will read or maintain"
" the code."
msgstr ""
"Demikian juga, jangan gunakan karakter non-ASCII dalam pengidentifikasi jika"
" hanya ada sedikit kesempatan orang berbicara bahasa yang berbeda akan "
"membaca atau merawat kode."

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:761
msgid "Footnotes"
msgstr "Catatan kaki"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/tutorial/controlflow.rst:762
msgid ""
"Actually, *call by object reference* would be a better description, since if"
" a mutable object is passed, the caller will see any changes the callee "
"makes to it (items inserted into a list)."
msgstr ""
"Sebenarnya, *panggilan dengan referensi objek* akan menjadi deskripsi yang "
"lebih baik, karena jika objek yang bisa ditransmisikan dilewatkan, pemanggil"
" akan melihat perubahan yang dibuat oleh yang dipanggil *callee* (item "
"dimasukkan ke dalam daftar)."
