# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2024, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# tomo, 2021
# Osamu NAKAMURA, 2021
# Masato HASHIMOTO <cabezon.hashimoto@gmail.com>, 2023
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-01-26 14:13+0000\n"
"PO-Revision-Date: 2021-06-28 01:04+0000\n"
"Last-Translator: Masato HASHIMOTO <cabezon.hashimoto@gmail.com>, 2023\n"
"Language-Team: Japanese (https://app.transifex.com/python-doc/teams/5390/"
"ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/dbm.rst:2
msgid ":mod:`dbm` --- Interfaces to Unix \"databases\""
msgstr ":mod:`dbm` --- Unix \"データベース\" へのインターフェース"

#: ../../library/dbm.rst:7
msgid "**Source code:** :source:`Lib/dbm/__init__.py`"
msgstr "**ソースコード:** :source:`Lib/dbm/__init__.py`"

#: ../../library/dbm.rst:11
msgid ""
":mod:`dbm` is a generic interface to variants of the DBM database --- :mod:"
"`dbm.gnu` or :mod:`dbm.ndbm`.  If none of these modules is installed, the "
"slow-but-simple implementation in module :mod:`dbm.dumb` will be used.  "
"There is a `third party interface <https://www.jcea.es/programacion/pybsddb."
"htm>`_ to the Oracle Berkeley DB."
msgstr ""
":mod:`dbm` は DBM データベースのいくつかの種類 ( :mod:`dbm.gnu` または :mod:"
"`dbm.ndbm` ) に対する汎用的なインターフェースです。これらのモジュールのどれも"
"インストールされていなければ、モジュール :mod:`dbm.dumb` に含まれる低速だが単"
"純な実装が使用されます。Oracle Berkeley DB に対する `サードパーティのインター"
"フェース <https://www.jcea.es/programacion/pybsddb.htm>`_ があります。"

#: ../../library/dbm.rst:20
msgid ""
"A tuple containing the exceptions that can be raised by each of the "
"supported modules, with a unique exception also named :exc:`dbm.error` as "
"the first item --- the latter is used when :exc:`dbm.error` is raised."
msgstr ""
"サポートされているモジュールそれぞれによって送出される可能性のある例外を含む"
"タプル。これにはユニークな例外があり、最初の要素として同じく :exc:`dbm."
"error` という名前の例外が含まれます --- :exc:`dbm.error` が送出される場合、後"
"者(訳注:タプルの ``dbm.error`` ではなく例外 :exc:`dbm.error`)が使用されます。"

#: ../../library/dbm.rst:27
msgid ""
"This function attempts to guess which of the several simple database modules "
"available --- :mod:`dbm.gnu`, :mod:`dbm.ndbm` or :mod:`dbm.dumb` --- should "
"be used to open a given file."
msgstr ""
"この関数は、与えられたファイルを開くために、利用可能ないくつかの単純なデータ"
"ベースモジュール --- :mod:`dbm.gnu`, :mod:`dbm.ndbm`, :mod:`dbm.dumb` --- の"
"どれを使用すべきか推測を試みます。"

#: ../../library/dbm.rst:31
msgid "Return one of the following values:"
msgstr ""

#: ../../library/dbm.rst:33
msgid ""
"``None`` if the file can't be opened because it's unreadable or doesn't exist"
msgstr ""

#: ../../library/dbm.rst:34
msgid "the empty string (``''``) if the file's format can't be guessed"
msgstr ""

#: ../../library/dbm.rst:35
msgid ""
"a string containing the required module name, such as ``'dbm.ndbm'`` or "
"``'dbm.gnu'``"
msgstr ""

#: ../../library/dbm.rst:37
msgid "*filename* accepts a :term:`path-like object`."
msgstr ""

#: ../../library/dbm.rst:61
msgid "Open the database file *file* and return a corresponding object."
msgstr "データベースファイル *file* を開いて対応するオブジェクトを返します。"

#: ../../library/dbm.rst:63
msgid ""
"If the database file already exists, the :func:`whichdb` function is used to "
"determine its type and the appropriate module is used; if it does not exist, "
"the first module listed above that can be imported is used."
msgstr ""
"データベースファイルが既に存在する場合、その種類を決定するために  :func:"
"`whichdb` 関数が使用され、適切なモジュールが使用されます; データベースファイ"
"ルが存在しない場合、上記のリストの中でインポート可能な最初のモジュールが使用"
"されます。"

#: ../../library/dbm.rst:67 ../../library/dbm.rst:177 ../../library/dbm.rst:363
msgid "The optional *flag* argument can be:"
msgstr "オプションの *flag* は:"

#: ../../library/dbm.rst:1 ../../library/dbm.rst:191
msgid "Value"
msgstr "値"

#: ../../library/dbm.rst:1 ../../library/dbm.rst:191
msgid "Meaning"
msgstr "意味"

#: ../../library/dbm.rst:1
msgid "``'r'`` (default)"
msgstr ""

#: ../../library/dbm.rst:1
msgid "|flag_r|"
msgstr ""

#: ../../library/dbm.rst:1
msgid "``'w'``"
msgstr "``'w'``"

#: ../../library/dbm.rst:1
msgid "|flag_w|"
msgstr ""

#: ../../library/dbm.rst:1
msgid "``'c'``"
msgstr "``'c'``"

#: ../../library/dbm.rst:1
msgid "|flag_c|"
msgstr ""

#: ../../library/dbm.rst:1
msgid "``'n'``"
msgstr "``'n'``"

#: ../../library/dbm.rst:1
msgid "|flag_n|"
msgstr ""

#: ../../library/dbm.rst:77 ../../library/dbm.rst:308 ../../library/dbm.rst:373
msgid ""
"The optional *mode* argument is the Unix mode of the file, used only when "
"the database has to be created.  It defaults to octal ``0o666`` (and will be "
"modified by the prevailing umask)."
msgstr ""
"オプションの *mode* 引数は、新たにデータベースを作成しなければならない場合に"
"使われる Unix のファイルモードです。標準の値は 8 進数の ``0o666`` です (この"
"値は現在有効な umask で修飾されます)。"

#: ../../library/dbm.rst:81
msgid "*file* accepts a :term:`path-like object`."
msgstr ""

#: ../../library/dbm.rst:85
msgid ""
"The object returned by :func:`open` supports the same basic functionality as "
"a :class:`dict`; keys and their corresponding values can be stored, "
"retrieved, and deleted, and the :keyword:`in` operator and the :meth:`!keys` "
"method are available, as well as :meth:`!get` and :meth:`!setdefault`."
msgstr ""

#: ../../library/dbm.rst:90
msgid ""
":meth:`!get` and :meth:`!setdefault` are now available in all database "
"modules."
msgstr ""

#: ../../library/dbm.rst:93
msgid ""
"Deleting a key from a read-only database raises database module specific "
"error instead of :exc:`KeyError`."
msgstr ""
"読み出し専用のデータベースからキーを削除しようとすると、 :exc:`KeyError` では"
"なくデータベースモジュール専用のエラーが送出されるようになりました。"

#: ../../library/dbm.rst:97
msgid ""
"Key and values are always stored as :class:`bytes`. This means that when "
"strings are used they are implicitly converted to the default encoding "
"before being stored."
msgstr ""

#: ../../library/dbm.rst:101
msgid ""
"These objects also support being used in a :keyword:`with` statement, which "
"will automatically close them when done."
msgstr ""
"これらのオブジェクトは、 :keyword:`with` 文での使用にも対応しています。with "
"文を使用した場合、終了時に自動的に閉じられます。"

#: ../../library/dbm.rst:104
msgid ""
"Added native support for the context management protocol to the objects "
"returned by :func:`.open`."
msgstr ""
":func:`.open` が返すオブジェクトに対するコンテキスト管理のプロトコルがネイ"
"ティブにサポートされました。"

#: ../../library/dbm.rst:108
msgid ""
"The following example records some hostnames and a corresponding title,  and "
"then prints out the contents of the database::"
msgstr ""
"以下の例ではホスト名と対応するタイトルをいくつか記録し、データベースの内容を"
"出力します::"

#: ../../library/dbm.rst:138
msgid "Module :mod:`shelve`"
msgstr ":mod:`shelve` モジュール"

#: ../../library/dbm.rst:139
msgid "Persistence module which stores non-string data."
msgstr "非文字列データを記録する永続化モジュール。"

#: ../../library/dbm.rst:142
msgid "The individual submodules are described in the following sections."
msgstr "個々のサブモジュールは以降の節で説明されます。"

#: ../../library/dbm.rst:146
msgid ":mod:`dbm.gnu` --- GNU database manager"
msgstr ""

#: ../../library/dbm.rst:152
msgid "**Source code:** :source:`Lib/dbm/gnu.py`"
msgstr "**ソースコード:** :source:`Lib/dbm/gnu.py`"

#: ../../library/dbm.rst:156
msgid ""
"The :mod:`dbm.gnu` module provides an interface to the :abbr:`GDBM (GNU "
"dbm)` library, similar to the :mod:`dbm.ndbm` module, but with additional "
"functionality like crash tolerance."
msgstr ""

#: ../../library/dbm.rst:160
msgid ""
":class:`!gdbm` objects behave similar to :term:`mappings <mapping>`, except "
"that keys and values are always converted to :class:`bytes` before storing, "
"and the :meth:`!items` and :meth:`!values` methods are not supported."
msgstr ""

#: ../../library/dbm.rst:164 ../../library/dbm.rst:272
msgid "|incompat_note|"
msgstr ""

#: ../../library/dbm.rst:168
msgid ""
"Raised on :mod:`dbm.gnu`-specific errors, such as I/O errors. :exc:"
"`KeyError` is raised for general mapping errors like specifying an incorrect "
"key."
msgstr ""
"I/O エラーのような :mod:`dbm.gnu` 特有のエラーで送出されます。誤ったキーの指"
"定のように、一般的なマップ型のエラーに対しては :exc:`KeyError` が送出されま"
"す。"

#: ../../library/dbm.rst:174
msgid ""
"Open a GDBM database and return a :class:`!gdbm` object.  The *filename* "
"argument is the name of the database file."
msgstr ""

#: ../../library/dbm.rst:187
msgid ""
"The following additional characters may be appended to the flag to control "
"how the database is opened:"
msgstr ""
"以下の追加の文字を flag に追加して、データベースの開きかたを制御することがで"
"きます:"

#: ../../library/dbm.rst:193
msgid "``'f'``"
msgstr "``'f'``"

#: ../../library/dbm.rst:193
msgid ""
"Open the database in fast mode.  Writes to the database will not be "
"synchronized."
msgstr "データベースを高速モードで開きます。書き込みが同期されません。"

#: ../../library/dbm.rst:196
msgid "``'s'``"
msgstr "``'s'``"

#: ../../library/dbm.rst:196
msgid ""
"Synchronized mode. This will cause changes to the database to be immediately "
"written to the file."
msgstr "同期モード。データベースへの変更がすぐにファイルに書き込まれます。"

#: ../../library/dbm.rst:200
msgid "``'u'``"
msgstr "``'u'``"

#: ../../library/dbm.rst:200
msgid "Do not lock database."
msgstr "データベースをロックしません。"

#: ../../library/dbm.rst:203
msgid ""
"Not all flags are valid for all versions of GDBM.  The module constant :"
"const:`open_flags` is a string of supported flag characters.  The exception :"
"exc:`error` is raised if an invalid flag is specified."
msgstr ""

#: ../../library/dbm.rst:207
msgid ""
"The optional *mode* argument is the Unix mode of the file, used only when "
"the database has to be created.  It defaults to octal ``0o666``."
msgstr ""
"オプションの *mode* 引数は、新たにデータベースを作成しなければならない場合に"
"使われる Unix のファイルモードです。標準の値は 8 進数の ``0o666`` です。"

#: ../../library/dbm.rst:210
msgid ""
"In addition to the dictionary-like methods, :class:`gdbm` objects have the "
"following methods:"
msgstr ""

#: ../../library/dbm.rst:213 ../../library/dbm.rst:315
#: ../../library/dbm.rst:391
msgid "Accepts :term:`path-like object` for filename."
msgstr ""

#: ../../library/dbm.rst:218
msgid ""
"It's possible to loop over every key in the database using this method  and "
"the :meth:`nextkey` method.  The traversal is ordered by GDBM's internal "
"hash values, and won't be sorted by the key values.  This method returns the "
"starting key."
msgstr ""

#: ../../library/dbm.rst:225
msgid ""
"Returns the key that follows *key* in the traversal.  The following code "
"prints every key in the database ``db``, without having to create a list in "
"memory that contains them all::"
msgstr ""
"データベースの順方向探索において、*key* よりも後に来るキーを返します。以下の"
"コードはデータベース ``db`` について、キー全てを含むリストをメモリ上に生成す"
"ることなく全てのキーを出力します::"

#: ../../library/dbm.rst:236
msgid ""
"If you have carried out a lot of deletions and would like to shrink the "
"space used by the GDBM file, this routine will reorganize the database.  :"
"class:`!gdbm` objects will not shorten the length of a database file except "
"by using this reorganization; otherwise, deleted file space will be kept and "
"reused as new (key, value) pairs are added."
msgstr ""

#: ../../library/dbm.rst:244
msgid ""
"When the database has been opened in fast mode, this method forces any "
"unwritten data to be written to the disk."
msgstr ""
"データベースが高速モードで開かれていた場合、このメソッドはディスクにまだ書き"
"込まれていないデータを全て書き込ませます。"

#: ../../library/dbm.rst:249
msgid "Close the GDBM database."
msgstr ""

#: ../../library/dbm.rst:253
msgid ":mod:`dbm.ndbm` --- New Database Manager"
msgstr ""

#: ../../library/dbm.rst:259
msgid "**Source code:** :source:`Lib/dbm/ndbm.py`"
msgstr "**ソースコード:** :source:`Lib/dbm/ndbm.py`"

#: ../../library/dbm.rst:263
msgid ""
"The :mod:`dbm.ndbm` module provides an interface to the :abbr:`NDBM (New "
"Database Manager)` library. :class:`!ndbm` objects behave similar to :term:"
"`mappings <mapping>`, except that keys and values are always stored as :"
"class:`bytes`, and the :meth:`!items` and :meth:`!values` methods are not "
"supported."
msgstr ""

#: ../../library/dbm.rst:269
msgid ""
"This module can be used with the \"classic\" NDBM interface or the :abbr:"
"`GDBM (GNU dbm)` compatibility interface."
msgstr ""

#: ../../library/dbm.rst:276
msgid ""
"The NDBM library shipped as part of macOS has an undocumented limitation on "
"the size of values, which can result in corrupted database files when "
"storing values larger than this limit. Reading such corrupted files can "
"result in a hard crash (segmentation fault)."
msgstr ""

#: ../../library/dbm.rst:283
msgid ""
"Raised on :mod:`dbm.ndbm`-specific errors, such as I/O errors. :exc:"
"`KeyError` is raised for general mapping errors like specifying an incorrect "
"key."
msgstr ""
"I/O エラーのような :mod:`dbm.ndbm` 特有のエラーで送出されます。誤ったキーの指"
"定のように、一般的なマップ型のエラーに対しては :exc:`KeyError` が送出されま"
"す。"

#: ../../library/dbm.rst:289
msgid "Name of the NDBM implementation library used."
msgstr ""

#: ../../library/dbm.rst:294
msgid ""
"Open an NDBM database and return an :class:`!ndbm` object. The *filename* "
"argument is the name of the database file (without the :file:`.dir` or :file:"
"`.pag` extensions)."
msgstr ""

#: ../../library/dbm.rst:298
msgid "The optional *flag* argument must be one of these values:"
msgstr "オプションの *flag* は以下の値のいずれかです:"

#: ../../library/dbm.rst:312
msgid ""
"In addition to the dictionary-like methods, :class:`!ndbm` objects provide "
"the following method:"
msgstr ""

#: ../../library/dbm.rst:320
msgid "Close the NDBM database."
msgstr ""

#: ../../library/dbm.rst:324
msgid ":mod:`dbm.dumb` --- Portable DBM implementation"
msgstr ":mod:`dbm.dumb` --- 可搬性のある DBM 実装"

#: ../../library/dbm.rst:329
msgid "**Source code:** :source:`Lib/dbm/dumb.py`"
msgstr "**ソースコード:** :source:`Lib/dbm/dumb.py`"

#: ../../library/dbm.rst:335
msgid ""
"The :mod:`dbm.dumb` module is intended as a last resort fallback for the :"
"mod:`dbm` module when a more robust module is not available. The :mod:`dbm."
"dumb` module is not written for speed and is not nearly as heavily used as "
"the other database modules."
msgstr ""
":mod:`dbm.dumb` モジュールは、 :mod:`dbm` が頑健なモジュールを他に見つけるこ"
"とができなかった際の最後の手段とされています。 :mod:`dbm.dumb` モジュールは速"
"度を重視して書かれているわけではなく、他のデータベースモジュールのように重い"
"使い方をするためのものではありません。"

#: ../../library/dbm.rst:342
msgid ""
"The :mod:`dbm.dumb` module provides a persistent dictionary-like interface "
"which is written entirely in Python.  Unlike other modules such as :mod:`dbm."
"gnu` no external library is required.  As with other persistent mappings, "
"the keys and values are always stored as bytes."
msgstr ""
":mod:`dbm.dumb` モジュールは永続性辞書に類似したインターフェースを提供し、全"
"て Python で書かれています。 :mod:`dbm.gnu` のようなモジュールと異なり、外部"
"ライブラリは必要ありません。他の永続性マップ型のように、キーおよび値は常にバ"
"イト列として保存されます。"

#: ../../library/dbm.rst:347
msgid "The module defines the following:"
msgstr "このモジュールは以下を定義します:"

#: ../../library/dbm.rst:352
msgid ""
"Raised on :mod:`dbm.dumb`-specific errors, such as I/O errors.  :exc:"
"`KeyError` is raised for general mapping errors like specifying an incorrect "
"key."
msgstr ""
"I/O エラーのような :mod:`dbm.dumb` 特有のエラーの際に送出されます。不正なキー"
"を指定したときのような、一般的な対応付けエラーの際には :exc:`KeyError` が送出"
"されます。"

#: ../../library/dbm.rst:358
msgid ""
"Open a ``dumbdbm`` database and return a dumbdbm object.  The *filename* "
"argument is the basename of the database file (without any specific "
"extensions).  When a dumbdbm database is created, files with :file:`.dat` "
"and :file:`.dir` extensions are created."
msgstr ""
"``dumbdbm`` データベースを開き、 dubmdbm オブジェクトを返します。 *filename* "
"引数はデータベースファイル名の雛型 (特定の拡張子をもたないもの) です。"
"dumbdbm データベースが生成される際、 :file:`.dat` および :file:`.dir` の拡張"
"子を持ったファイルが生成されます。"

#: ../../library/dbm.rst:1
msgid "``'r'``"
msgstr "``'r'``"

#: ../../library/dbm.rst:1
msgid "``'c'`` (default)"
msgstr ""

#: ../../library/dbm.rst:378
msgid ""
"It is possible to crash the Python interpreter when loading a database with "
"a sufficiently large/complex entry due to stack depth limitations in "
"Python's AST compiler."
msgstr ""
"十分に大きかったり複雑だったりするエントリーのあるデータベースを読み込んでい"
"るときに、 Python の抽象構文木コンパイラのスタックの深さの限界を越えるせい"
"で、 Python インタプリタをクラッシュさせることができます。"

#: ../../library/dbm.rst:382
msgid ""
":func:`.open` always creates a new database when the flag has the value "
"``'n'``."
msgstr ""
"フラグに値 ``'n'`` を与えると、 :func:`.open` が常に新しいデータベースを作成"
"するようになりました。"

#: ../../library/dbm.rst:386
msgid ""
"A database opened with flags ``'r'`` is now read-only.  Opening with flags "
"``'r'`` and ``'w'`` no longer creates a database if it does not exist."
msgstr ""
"フラグ ``'r'`` で開いたデータベースは読み出し専用となりました。\n"
"データベースが存在していない場合にフラグ ``'r'`` と ``'w'`` で開いても、デー"
"タベースを作成しなくなりました。"

#: ../../library/dbm.rst:394
msgid ""
"In addition to the methods provided by the :class:`collections.abc."
"MutableMapping` class, :class:`dumbdbm` objects provide the following "
"methods:"
msgstr ""
":class:`collections.abc.MutableMapping` クラスによって提供されるメソッドに加"
"えて、 :class:`dumbdbm` オブジェクトは以下のメソッドを提供します:"

#: ../../library/dbm.rst:400
msgid ""
"Synchronize the on-disk directory and data files.  This method is called by "
"the :meth:`Shelve.sync` method."
msgstr ""
"ディスク上の辞書とデータファイルを同期します。このメソッドは :meth:`Shelve."
"sync`  メソッドから呼び出されます。"

#: ../../library/dbm.rst:405
msgid "Close the ``dumbdbm`` database."
msgstr "``dumbdbm`` データベースをクローズします。"

#: ../../library/dbm.rst:331
msgid "databases"
msgstr "データベース"
