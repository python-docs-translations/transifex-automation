# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2024, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# tomo, 2019
# Skydelta, 2023
# Rafael Fontenelle <rffontenelle@gmail.com>, 2023
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.9\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-02-09 21:24+0000\n"
"PO-Revision-Date: 2019-09-01 14:41+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2023\n"
"Language-Team: Japanese (https://app.transifex.com/python-doc/teams/5390/"
"ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/importlib.metadata.rst:5
msgid "Using :mod:`!importlib.metadata`"
msgstr ":mod:`!importlib.metadata` を使う"

#: ../../library/importlib.metadata.rst:10
msgid "**Source code:** :source:`Lib/importlib/metadata.py`"
msgstr "**ソースコード:** :source:`Lib/importlib/metadata.py`"

#: ../../library/importlib.metadata.rst:15
msgid ""
"This functionality is provisional and may deviate from the usual version "
"semantics of the standard library."
msgstr ""

#: ../../library/importlib.metadata.rst:18
msgid ""
"``importlib.metadata`` is a library that provides for access to installed "
"package metadata.  Built in part on Python's import system, this library "
"intends to replace similar functionality in the `entry point API`_ and "
"`metadata API`_ of ``pkg_resources``.  Along with :mod:`importlib.resources` "
"in Python 3.7 and newer (backported as `importlib_resources`_ for older "
"versions of Python), this can eliminate the need to use the older and less "
"efficient ``pkg_resources`` package."
msgstr ""
"``importlib.metadata`` はインストールされたパッケージのメタデータへのアクセス"
"を提供するライブラリです。Pythonのインポートシステムを基に構築されており、こ"
"のライブラリは ``pkg_resources`` の `entry point API`_ と `metadata API`_ に"
"ある同様の機能を置き換えることを目的としています。Python 3.7 以降の :mod:"
"`importlib.resources` と共に(古いバージョンの Python では "
"`importlib_resources`_ としてバックポートされます)、古くて効率の悪い "
"``pkg_resources`` パッケージを使う必要性を無くすことができます。"

#: ../../library/importlib.metadata.rst:27
msgid ""
"By \"installed package\" we generally mean a third-party package installed "
"into Python's ``site-packages`` directory via tools such as `pip <https://"
"pypi.org/project/pip/>`_.  Specifically, it means a package with either a "
"discoverable ``dist-info`` or ``egg-info`` directory, and metadata defined "
"by :pep:`566` or its older specifications. By default, package metadata can "
"live on the file system or in zip archives on :data:`sys.path`.  Through an "
"extension mechanism, the metadata can live almost anywhere."
msgstr ""

#: ../../library/importlib.metadata.rst:38
msgid "Overview"
msgstr "概要"

#: ../../library/importlib.metadata.rst:40
msgid ""
"Let's say you wanted to get the version string for a package you've "
"installed using ``pip``.  We start by creating a virtual environment and "
"installing something into it:"
msgstr ""
"例えば、 ``pip`` を使ってインストールしたパッケージのバージョン文字列を取得し"
"たいとします。まず、仮想環境を作成し、そこに何かをインストールすることから始"
"めましょう:"

#: ../../library/importlib.metadata.rst:50
msgid "You can get the version string for ``wheel`` by running the following:"
msgstr ""
"以下のように実行することで、``wheel`` のバージョン文字列を取得することができ"
"ます::"

#: ../../library/importlib.metadata.rst:59
msgid ""
"You can also get the set of entry points keyed by group, such as "
"``console_scripts``, ``distutils.commands`` and others.  Each group contains "
"a sequence of :ref:`EntryPoint <entry-points>` objects."
msgstr ""
"また、 ``console_scripts`` や ``distutils.commands`` などのように、グループ単"
"位でキーとなるエントリポイントの集合を取得することもできます。 各グループは :"
"ref:`エントリポイント <entry-points>` オブジェクトのシーケンスを含んでいま"
"す。"

#: ../../library/importlib.metadata.rst:63
msgid "You can get the :ref:`metadata for a distribution <metadata>`::"
msgstr ""
":ref:`ディストリビューションのメタデータ <metadata>` を取得することができま"
"す。::"

#: ../../library/importlib.metadata.rst:68
msgid ""
"You can also get a :ref:`distribution's version number <version>`, list its :"
"ref:`constituent files <files>`, and get a list of the distribution's :ref:"
"`requirements`."
msgstr ""
"また、 :ref:`配布物のバージョン番号 <version>` を取得し、 :ref:`構成ファイル "
"<files>` をリストアップし、配布物の :ref:`requirements` のリストを取得するこ"
"とができます。"

#: ../../library/importlib.metadata.rst:74
msgid "Functional API"
msgstr "機能 API"

#: ../../library/importlib.metadata.rst:76
msgid "This package provides the following functionality via its public API."
msgstr "本パッケージは、公開APIを通じて以下の機能を提供します。"

#: ../../library/importlib.metadata.rst:82
msgid "Entry points"
msgstr "エントリポイント"

#: ../../library/importlib.metadata.rst:84
msgid ""
"The ``entry_points()`` function returns a dictionary of all entry points, "
"keyed by group.  Entry points are represented by ``EntryPoint`` instances; "
"each ``EntryPoint`` has a ``.name``, ``.group``, and ``.value`` attributes "
"and a ``.load()`` method to resolve the value.  There are also ``.module``, "
"``.attr``, and ``.extras`` attributes for getting the components of the ``."
"value`` attribute::"
msgstr ""
"``entry_points()`` 関数は、すべてのエントリポイントをグループごとにまとめた辞"
"書を返します。各 ``EntryPoint`` は ``.name``, ``.group``, ``.value`` 属性と値"
"を解決する ``.load()`` メソッドを持っています。また、 ``.value`` 属性の構成要"
"素を取得するための ``.module``, ``.attr``, ``.extras`` 属性もあります::"

#: ../../library/importlib.metadata.rst:108
msgid ""
"The ``group`` and ``name`` are arbitrary values defined by the package "
"author and usually a client will wish to resolve all entry points for a "
"particular group.  Read `the setuptools docs <https://setuptools.readthedocs."
"io/en/latest/setuptools.html#dynamic-discovery-of-services-and-plugins>`_ "
"for more information on entry points, their definition, and usage."
msgstr ""
"``group`` と ``name`` はパッケージの作者によって定義された任意の値で、通常ク"
"ライアントは特定のグループのエントリポイントを解決したいと思うでしょう。エン"
"トリポイント、その他の定義、使用方法についての詳細は `setuptoolsのドキュメン"
"ト <https://setuptools.readthedocs.io/en/latest/setuptools.html#dynamic-"
"discovery-of-services-and-plugins>`_ を参照してください。"

#: ../../library/importlib.metadata.rst:118
msgid "Distribution metadata"
msgstr "配布物メタデータ"

#: ../../library/importlib.metadata.rst:120
msgid ""
"Every distribution includes some metadata, which you can extract using the "
"``metadata()`` function::"
msgstr ""
"すべての配布物にはいくつかのメタデータが含まれており、 ``metadata()`` 関数を"
"使ってそれを取得することができます::"

#: ../../library/importlib.metadata.rst:125
msgid ""
"The keys of the returned data structure [#f1]_ name the metadata keywords, "
"and their values are returned unparsed from the distribution metadata::"
msgstr ""
"返されたデータ構造 [#f1]_ のキーはメタデータのキーワードを示し、その値はディ"
"ストリビューションのメタデータから解析されずに返されます::"

#: ../../library/importlib.metadata.rst:135
msgid "Distribution versions"
msgstr "配布物バージョン"

#: ../../library/importlib.metadata.rst:137
msgid ""
"The ``version()`` function is the quickest way to get a distribution's "
"version number, as a string::"
msgstr ""
"``version()`` 関数は、配布物のバージョン番号を文字列として取得するもっとも簡"
"単な方法です::"

#: ../../library/importlib.metadata.rst:147
msgid "Distribution files"
msgstr "配布物ファイル"

#: ../../library/importlib.metadata.rst:149
msgid ""
"You can also get the full set of files contained within a distribution.  The "
"``files()`` function takes a distribution package name and returns all of "
"the files installed by this distribution.  Each file object returned is a "
"``PackagePath``, a :class:`pathlib.PurePath` derived object with additional "
"``dist``, ``size``, and ``hash`` properties as indicated by the metadata.  "
"For example::"
msgstr ""
"また、配布物に含まれるファイルの完全な一覧を取得することもできます。 "
"``files()`` 関数は配布物のパッケージ名を受け取り、その配布物にインストールさ"
"れているすべてのファイルを返します。返される各ファイルオブジェクトは "
"``PackagePath`` で、 :class:`pathlib.PurePath` から派生したオブジェクトに、メ"
"タデータで示された ``dist``, ``size``, ``hash`` のプロパティを追加していま"
"す。例えば::"

#: ../../library/importlib.metadata.rst:165
msgid "Once you have the file, you can also read its contents::"
msgstr "ファイルを取得したら、その内容を読むこともできます::"

#: ../../library/importlib.metadata.rst:176
msgid ""
"You can also use the ``locate`` method to get a the absolute path to the "
"file::"
msgstr ""
"また、 ``locate`` メソッドを使用すると、ファイルへの絶対パスを取得することが"
"できます::"

#: ../../library/importlib.metadata.rst:182
msgid ""
"In the case where the metadata file listing files (RECORD or SOURCES.txt) is "
"missing, ``files()`` will return ``None``. The caller may wish to wrap calls "
"to ``files()`` in `always_iterable <https://more-itertools.readthedocs.io/en/"
"stable/api.html#more_itertools.always_iterable>`_ or otherwise guard against "
"this condition if the target distribution is not known to have the metadata "
"present."
msgstr ""

#: ../../library/importlib.metadata.rst:193
msgid "Distribution requirements"
msgstr "配布物の要件"

#: ../../library/importlib.metadata.rst:195
msgid ""
"To get the full set of requirements for a distribution, use the "
"``requires()`` function::"
msgstr ""
"配布物に必要なすべての要件を取得するには、 ``requires()`` 関数を使用します::"

#: ../../library/importlib.metadata.rst:205
msgid "Distributions"
msgstr ""

#: ../../library/importlib.metadata.rst:207
msgid ""
"While the above API is the most common and convenient usage, you can get all "
"of that information from the ``Distribution`` class.  A ``Distribution`` is "
"an abstract object that represents the metadata for a Python package.  You "
"can get the ``Distribution`` instance::"
msgstr ""
"上記のAPIは最も一般的で便利な使い方ですが、 ``Distribution`` クラスからすべて"
"の情報を得ることができます。 ``Distribution`` はPythonパッケージのメタデータ"
"を表す抽象オブジェクトです。 ``Distribution`` のインスタンスを取得することが"
"できます::"

#: ../../library/importlib.metadata.rst:215
msgid ""
"Thus, an alternative way to get the version number is through the "
"``Distribution`` instance::"
msgstr ""
"したがって、バージョン情報を取得する別の方法として、 ``Distribution`` インス"
"タンスを使用します::"

#: ../../library/importlib.metadata.rst:221
msgid ""
"There are all kinds of additional metadata available on the ``Distribution`` "
"instance::"
msgstr ""
"``Distribution`` インスタンスには、あらゆる種類の追加メタデータが用意されてい"
"ます::"

#: ../../library/importlib.metadata.rst:229
msgid ""
"The full set of available metadata is not described here.  See :pep:`566` "
"for additional details."
msgstr ""
"利用可能なメタデータのフルセットはここでは説明しません。詳細は :pep:`566` を"
"参照してください。"

#: ../../library/importlib.metadata.rst:234
msgid "Extending the search algorithm"
msgstr "検索アルゴリズムの拡張"

#: ../../library/importlib.metadata.rst:236
msgid ""
"Because package metadata is not available through :data:`sys.path` searches, "
"or package loaders directly, the metadata for a package is found through "
"import system :ref:`finders <finders-and-loaders>`.  To find a distribution "
"package's metadata, ``importlib.metadata`` queries the list of :term:`meta "
"path finders <meta path finder>` on :data:`sys.meta_path`."
msgstr ""
"パッケージのメタデータは :data:`sys.path` の検索やパッケージローダーから直接"
"取得することができないため、インポートシステム :ref:`finders <finders-and-"
"loaders>` から見つけます。配布パッケージのメタデータを見つけるために、 "
"``importlib.metadata`` は :data:`sys.meta_path` の :term:`meta path finders "
"<meta path finder>` のリストに問い合わせをします。"

#: ../../library/importlib.metadata.rst:242
msgid ""
"The default ``PathFinder`` for Python includes a hook that calls into "
"``importlib.metadata.MetadataPathFinder`` for finding distributions loaded "
"from typical file-system-based paths."
msgstr ""
"Pythonのデフォルトの ``PathFinder`` には、典型的なファイスシステムベースのパ"
"スから読み込まれた配布物を見つけるための ``importlib.metadata."
"MetadataPathFinder`` を呼び出すフックがあります。"

#: ../../library/importlib.metadata.rst:246
msgid ""
"The abstract class :py:class:`importlib.abc.MetaPathFinder` defines the "
"interface expected of finders by Python's import system. ``importlib."
"metadata`` extends this protocol by looking for an optional "
"``find_distributions`` callable on the finders from :data:`sys.meta_path` "
"and presents this extended interface as the ``DistributionFinder`` abstract "
"base class, which defines this abstract method::"
msgstr ""
"抽象クラス :py:class:`importlib.abc.MetaPathFinder` はPythonの importシステム"
"によってファインダーに期待されるインターフェイスを定義しています。 "
"``importlib.metadata`` はこのプロトコルを拡張し、 :data:`sys.meta_path` から"
"ファインダーにオプションの ``find_distributions`` を呼び出すことができるよう"
"にし、この拡張インターフェースを ``DistributionFinder`` 抽象基底クラスとして"
"提示し、この抽象メソッドを定義しています::"

#: ../../library/importlib.metadata.rst:260
msgid ""
"The ``DistributionFinder.Context`` object provides ``.path`` and ``.name`` "
"properties indicating the path to search and name to match and may supply "
"other relevant context."
msgstr ""
"``DistributionFinder.Context`` オブジェクトは、検索するパスと一致する名前を示"
"す ``.path`` と ``.name`` のプロパティを提供し、その他の関連するコンテキスト"
"を提供することもできます。"

#: ../../library/importlib.metadata.rst:264
msgid ""
"What this means in practice is that to support finding distribution package "
"metadata in locations other than the file system, subclass ``Distribution`` "
"and implement the abstract methods. Then from a custom finder, return "
"instances of this derived ``Distribution`` in the ``find_distributions()`` "
"method."
msgstr ""
"つまり、ファイルシステム以外の場所にある配布パッケージのメタデータを見つける"
"には、 ``Distribution`` をサブクラス化して抽象メソッドを実装します。そして、"
"カスタムファインダーから ``find_distributions()`` メソッドで、派生した "
"``Distribution`` のインスタンスを返します。"

#: ../../library/importlib.metadata.rst:277
msgid "Footnotes"
msgstr "脚注"

#: ../../library/importlib.metadata.rst:278
msgid ""
"Technically, the returned distribution metadata object is an :class:`email."
"message.EmailMessage` instance, but this is an implementation detail, and "
"not part of the stable API.  You should only use dictionary-like methods and "
"syntax to access the metadata contents."
msgstr ""
"技術的には、返される配布物メタデータオブジェクトは :class:`email.message."
"EmailMessage` インスタンスですが、これは実装の詳細であり、安定したAPIの一部で"
"はありません。メタデータの内容にアクセスするためには、辞書的なメソッドや構文"
"のみを使用する必要があります。"
