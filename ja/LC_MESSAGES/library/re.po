# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2024, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# tomo, 2022
# Inada Naoki <songofacandy@gmail.com>, 2023
# Takanori Suzuki <takanori@takanory.net>, 2023
# Takeshi Nakazato, 2023
# TENMYO Masakazu, 2023
# 秘湯 <xwhhsprings@gmail.com>, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-01-26 14:13+0000\n"
"PO-Revision-Date: 2021-06-28 01:12+0000\n"
"Last-Translator: 秘湯 <xwhhsprings@gmail.com>, 2024\n"
"Language-Team: Japanese (https://app.transifex.com/python-doc/teams/5390/"
"ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/re.rst:2
msgid ":mod:`re` --- Regular expression operations"
msgstr ":mod:`re` --- 正規表現操作"

#: ../../library/re.rst:10
msgid "**Source code:** :source:`Lib/re/`"
msgstr "**ソースコード:** :source:`Lib/re/`"

#: ../../library/re.rst:14
msgid ""
"This module provides regular expression matching operations similar to those "
"found in Perl."
msgstr ""
"このモジュールは Perl に見られる正規表現マッチング操作と同様のものを提供しま"
"す。"

#: ../../library/re.rst:17
msgid ""
"Both patterns and strings to be searched can be Unicode strings (:class:"
"`str`) as well as 8-bit strings (:class:`bytes`). However, Unicode strings "
"and 8-bit strings cannot be mixed: that is, you cannot match a Unicode "
"string with a bytes pattern or vice-versa; similarly, when asking for a "
"substitution, the replacement string must be of the same type as both the "
"pattern and the search string."
msgstr ""

#: ../../library/re.rst:24
msgid ""
"Regular expressions use the backslash character (``'\\'``) to indicate "
"special forms or to allow special characters to be used without invoking "
"their special meaning.  This collides with Python's usage of the same "
"character for the same purpose in string literals; for example, to match a "
"literal backslash, one might have to write ``'\\\\\\\\'`` as the pattern "
"string, because the regular expression must be ``\\\\``, and each backslash "
"must be expressed as ``\\\\`` inside a regular Python string literal. Also, "
"please note that any invalid escape sequences in Python's usage of the "
"backslash in string literals now generate a :exc:`SyntaxWarning` and in the "
"future this will become a :exc:`SyntaxError`. This behaviour will happen "
"even if it is a valid escape sequence for a regular expression."
msgstr ""
"正規表現では、特殊な形式を表すためや、特殊文字をその特殊な意味を発動させず使"
"うために、バックスラッシュ文字 (``'\\'``) を使います。こうしたバックスラッ"
"シュの使い方は、 Python の文字列リテラルにおける同じ文字の使い方と衝突しま"
"す。例えば、リテラルのバックスラッシュにマッチさせるには、パターン文字列とし"
"て ``'\\\\\\\\'`` と書かなければなりません。なぜなら、正規表現は ``\\\\`` で"
"なければならないうえ、それぞれのバックスラッシュは標準の Python 文字列リテラ"
"ルで ``\\\\`` と表現せねばならないからです。 \n"
"Python の文字列リテラルにおいて、バックスラッシュの使用による不正なエスケープ"
"文字がある場合は、:exc:`SyntaxWarning` が発生し、将来的には :exc:"
"`SyntaxError` になることにも注意してください。この動作は、正規表現として有効"
"な文字列に対しても同様です。"

#: ../../library/re.rst:36
msgid ""
"The solution is to use Python's raw string notation for regular expression "
"patterns; backslashes are not handled in any special way in a string literal "
"prefixed with ``'r'``.  So ``r\"\\n\"`` is a two-character string containing "
"``'\\'`` and ``'n'``, while ``\"\\n\"`` is a one-character string containing "
"a newline.  Usually patterns will be expressed in Python code using this raw "
"string notation."
msgstr ""
"これを解決するには、正規表現パターンに Python の raw 文字列記法を使います。 "
"``'r'`` を前置した文字列リテラル内ではバックスラッシュが特別扱いされません。"
"従って ``\"\\n\"`` が改行一文字からなる文字列であるのに対して、 ``r\"\\n\"`` "
"は ``'\\'`` と ``'n'`` の二文字からなる文字列です。通常、 Python コード中で"
"は、パターンをこの raw 文字列記法を使って表現します。"

#: ../../library/re.rst:43
msgid ""
"It is important to note that most regular expression operations are "
"available as module-level functions and methods on :ref:`compiled regular "
"expressions <re-objects>`.  The functions are shortcuts that don't require "
"you to compile a regex object first, but miss some fine-tuning parameters."
msgstr ""
"重要なこととして、大抵の正規表現操作は、モジュールレベルの関数としても、 :"
"ref:`コンパイル済み正規表現 <re-objects>` のメソッドとしても利用できます。関"
"数は正規表現オブジェクトを前もってコンパイルする必要がない近道ですが、微調整"
"のための変数が減ります。"

#: ../../library/re.rst:51
msgid ""
"The third-party `regex <https://pypi.org/project/regex/>`_ module, which has "
"an API compatible with the standard library :mod:`re` module, but offers "
"additional functionality and a more thorough Unicode support."
msgstr ""
"サードパーティの `regex <https://pypi.org/project/regex/>`_ モジュールは、標"
"準ライブラリの :mod:`re` モジュールと互換な API を持ちながら、追加の機能とよ"
"り徹底した Unicode サポートを提供します。"

#: ../../library/re.rst:59
msgid "Regular Expression Syntax"
msgstr "正規表現のシンタックス"

#: ../../library/re.rst:61
msgid ""
"A regular expression (or RE) specifies a set of strings that matches it; the "
"functions in this module let you check if a particular string matches a "
"given regular expression (or if a given regular expression matches a "
"particular string, which comes down to the same thing)."
msgstr ""
"正規表現 (または RE) は、その表現にマッチ (match) する文字列の集合を指定しま"
"す。このモジュールの関数を使えば、ある文字列が与えられた正規表現にマッチする"
"か (または、与えられた正規表現がある文字列にマッチするか、と言い換えても同じ"
"ことになります) を検査できます。"

#: ../../library/re.rst:66
msgid ""
"Regular expressions can be concatenated to form new regular expressions; if "
"*A* and *B* are both regular expressions, then *AB* is also a regular "
"expression. In general, if a string *p* matches *A* and another string *q* "
"matches *B*, the string *pq* will match AB.  This holds unless *A* or *B* "
"contain low precedence operations; boundary conditions between *A* and *B*; "
"or have numbered group references.  Thus, complex expressions can easily be "
"constructed from simpler primitive expressions like the ones described "
"here.  For details of the theory and implementation of regular expressions, "
"consult the Friedl book [Frie09]_, or almost any textbook about compiler "
"construction."
msgstr ""
"正規表現を連結することで新しい正規表現を作れます。*A* と *B* がともに正規表現"
"であれば *AB* も正規表現です。一般的に、ある文字列 *p* が *A* にマッチし、別"
"の文字列 *q* が *B* にマッチするなら、文字列 *pq* は AB にマッチします。ただ"
"し、 *A* または *B* に優先度の低い演算が含まれる場合や、 *A* と *B* との間に"
"境界条件がある場合や、番号付けされたグループ参照をしている場合、を除きます。"
"こうして、ここで述べるような簡単な基本表現から、複雑な表現を容易に構築できま"
"す。正規表現に関する理論と実装の詳細については Friedl 本 [Frie09]_ か、コンパ"
"イラの構築に関するテキストを参照してください。"

#: ../../library/re.rst:76
msgid ""
"A brief explanation of the format of regular expressions follows.  For "
"further information and a gentler presentation, consult the :ref:`regex-"
"howto`."
msgstr ""
"以下で正規表現の形式を簡単に説明します。詳細な情報ややさしい説明は、 :ref:"
"`regex-howto` を参照してください。"

#: ../../library/re.rst:79
msgid ""
"Regular expressions can contain both special and ordinary characters. Most "
"ordinary characters, like ``'A'``, ``'a'``, or ``'0'``, are the simplest "
"regular expressions; they simply match themselves.  You can concatenate "
"ordinary characters, so ``last`` matches the string ``'last'``.  (In the "
"rest of this section, we'll write RE's in ``this special style``, usually "
"without quotes, and strings to be matched ``'in single quotes'``.)"
msgstr ""
"正規表現には、特殊文字と通常文字の両方を含められます。 ``'A'`` 、 ``'a'`` 、"
"または ``'0'`` のようなほとんどの通常文字は、最も単純な正規表現です。これは単"
"純に、その文字自体にマッチします。通常文字は連結できるので、 ``last`` は文字"
"列 ``'last'`` にマッチします。 (この節では以降、正規表現は一般にクオートを使"
"わず ``この特殊スタイルで`` 表記し、マッチ対象の文字列は、 ``'シングルクオー"
"トで括って'`` 表記します。)"

#: ../../library/re.rst:86
msgid ""
"Some characters, like ``'|'`` or ``'('``, are special. Special characters "
"either stand for classes of ordinary characters, or affect how the regular "
"expressions around them are interpreted."
msgstr ""
"``'|'`` や ``'('`` といったいくつかの文字は特殊です。特殊文字は通常文字の種別"
"を表したり、周辺の通常文字に対する解釈方法に影響します。"

#: ../../library/re.rst:90
msgid ""
"Repetition operators or quantifiers (``*``, ``+``, ``?``, ``{m,n}``, etc) "
"cannot be directly nested. This avoids ambiguity with the non-greedy "
"modifier suffix ``?``, and with other modifiers in other implementations. To "
"apply a second repetition to an inner repetition, parentheses may be used. "
"For example, the expression ``(?:a{6})*`` matches any multiple of six "
"``'a'`` characters."
msgstr ""
"繰り返しの演算子または修飾子 (``*``、 ``+``、 ``?``、 ``{m,n}`` など) は直接"
"入れ子にはできません。これは、非貪欲な修飾子の接尾辞 ``?`` や他の実装での他の"
"修飾子との曖昧さを回避します。内側で繰り返したものをさらに繰り返すには、丸括"
"弧が使えます。例えば、正規表現 ``(?:a{6})*`` は 6 の倍数個の ``'a'`` 文字に"
"マッチします。"

#: ../../library/re.rst:97
msgid "The special characters are:"
msgstr "特殊文字を以下に示します:"

#: ../../library/re.rst:104 ../../library/re.rst:1605
msgid "``.``"
msgstr "``.``"

#: ../../library/re.rst:102
msgid ""
"(Dot.)  In the default mode, this matches any character except a newline.  "
"If the :const:`DOTALL` flag has been specified, this matches any character "
"including a newline."
msgstr ""
"(ドット) デフォルトのモードでは改行以外の任意の文字にマッチします。 :const:"
"`DOTALL` フラグが指定されていれば改行も含む全ての文字にマッチします。"

#: ../../library/re.rst:110
msgid "``^``"
msgstr "``^``"

#: ../../library/re.rst:109
msgid ""
"(Caret.)  Matches the start of the string, and in :const:`MULTILINE` mode "
"also matches immediately after each newline."
msgstr ""
"(キャレット) 文字列の先頭にマッチし、 :const:`MULTILINE` モードでは各改行の直"
"後にもマッチします。"

#: ../../library/re.rst:121
msgid "``$``"
msgstr "``$``"

#: ../../library/re.rst:115
msgid ""
"Matches the end of the string or just before the newline at the end of the "
"string, and in :const:`MULTILINE` mode also matches before a newline.  "
"``foo`` matches both 'foo' and 'foobar', while the regular expression "
"``foo$`` matches only 'foo'.  More interestingly, searching for ``foo.$`` in "
"``'foo1\\nfoo2\\n'`` matches 'foo2' normally, but 'foo1' in :const:"
"`MULTILINE` mode; searching for a single ``$`` in ``'foo\\n'`` will find two "
"(empty) matches: one just before the newline, and one at the end of the "
"string."
msgstr ""
"文字列の末尾、あるいは文字列の末尾の改行の直前にマッチし、 :const:"
"`MULTILINE` モードでは改行の前にもマッチします。 ``foo`` は 'foo' と "
"'foobar' の両方にマッチしますが、正規表現 ``foo$`` は 'foo' だけにマッチしま"
"す。興味深いことに、 ``'foo1\\nfoo2\\n'`` を ``foo.$`` で検索した場合、通常"
"は 'foo2' だけにマッチしますが、 :const:`MULTILINE` モードでは 'foo1' にも"
"マッチします。 ``$`` だけで ``'foo\\n'`` を検索した場合、2 つの (空の) マッチ"
"を見つけます: 1つは改行の直前で、もう1つは文字列の末尾です。"

#: ../../library/re.rst:128
msgid "``*``"
msgstr "``*``"

#: ../../library/re.rst:126
msgid ""
"Causes the resulting RE to match 0 or more repetitions of the preceding RE, "
"as many repetitions as are possible.  ``ab*`` will match 'a', 'ab', or 'a' "
"followed by any number of 'b's."
msgstr ""
"直前の正規表現を 0 回以上、できるだけ多く繰り返したものにマッチさせる結果の正"
"規表現にします。例えば ``ab*`` は 'a'、'ab'、または 'a' に任意個数の 'b' を続"
"けたものにマッチします。"

#: ../../library/re.rst:135
msgid "``+``"
msgstr "``+``"

#: ../../library/re.rst:133
msgid ""
"Causes the resulting RE to match 1 or more repetitions of the preceding RE. "
"``ab+`` will match 'a' followed by any non-zero number of 'b's; it will not "
"match just 'a'."
msgstr ""
"直前の正規表現を 1 回以上繰り返したものにマッチさせる結果の正規表現にします。"
"例えば ``ab+`` は 'a' に 1 つ以上の 'b' が続いたものにマッチし、単なる 'a' に"
"はマッチしません。"

#: ../../library/re.rst:141
msgid "``?``"
msgstr "``?``"

#: ../../library/re.rst:140
msgid ""
"Causes the resulting RE to match 0 or 1 repetitions of the preceding RE. "
"``ab?`` will match either 'a' or 'ab'."
msgstr ""
"直前の正規表現を 0 回か 1 回繰り返したものにマッチさせる結果の正規表現にしま"
"す。例えば ``ab?`` は 'a' あるいは 'ab' にマッチします。"

#: ../../library/re.rst:155
msgid "``*?``, ``+?``, ``??``"
msgstr "``*?``, ``+?``, ``??``"

#: ../../library/re.rst:149
msgid ""
"The ``'*'``, ``'+'``, and ``'?'`` quantifiers are all :dfn:`greedy`; they "
"match as much text as possible.  Sometimes this behaviour isn't desired; if "
"the RE ``<.*>`` is matched against ``'<a> b <c>'``, it will match the entire "
"string, and not just ``'<a>'``.  Adding ``?`` after the quantifier makes it "
"perform the match in :dfn:`non-greedy` or :dfn:`minimal` fashion; as *few* "
"characters as possible will be matched.  Using the RE ``<.*?>`` will match "
"only ``'<a>'``."
msgstr ""
"``'*'`` 、 ``'+'`` 、および ``'?'`` 修飾子は全て :dfn:`貪欲 (greedy)` マッチ"
"で、できるだけ多くのテキストにマッチします。この挙動が望ましくない時もありま"
"す。例えば正規表現 ``<.*>`` が ``'<a> b <c>'`` に対してマッチされると、 "
"``'<a>'`` だけでなく文字列全体にマッチしてしまいます。修飾子の後に ``?`` を追"
"加すると、 :dfn:`非貪欲 (non-greedy)` あるいは :dfn:`最小 (minimal)` のマッチ"
"が行われ、できるだけ *少ない* 文字にマッチします。正規表現 ``<.*?>`` を使う"
"と ``'<a>'`` だけにマッチします。"

#: ../../library/re.rst:179
msgid "``*+``, ``++``, ``?+``"
msgstr "``*+``, ``++``, ``?+``"

#: ../../library/re.rst:163
msgid ""
"Like the ``'*'``, ``'+'``, and ``'?'`` quantifiers, those where ``'+'`` is "
"appended also match as many times as possible. However, unlike the true "
"greedy quantifiers, these do not allow back-tracking when the expression "
"following it fails to match. These are known as :dfn:`possessive` "
"quantifiers. For example, ``a*a`` will match ``'aaaa'`` because the ``a*`` "
"will match all 4 ``'a'``\\ s, but, when the final ``'a'`` is encountered, "
"the expression is backtracked so that in the end the ``a*`` ends up matching "
"3 ``'a'``\\ s total, and the fourth ``'a'`` is matched by the final ``'a'``. "
"However, when ``a*+a`` is used to match ``'aaaa'``, the ``a*+`` will match "
"all 4 ``'a'``, but when the final ``'a'`` fails to find any more characters "
"to match, the expression cannot be backtracked and will thus fail to match. "
"``x*+``, ``x++`` and ``x?+`` are equivalent to ``(?>x*)``, ``(?>x+)`` and "
"``(?>x?)`` correspondingly."
msgstr ""

#: ../../library/re.rst:187
msgid "``{m}``"
msgstr "``{m}``"

#: ../../library/re.rst:185
msgid ""
"Specifies that exactly *m* copies of the previous RE should be matched; "
"fewer matches cause the entire RE not to match.  For example, ``a{6}`` will "
"match exactly six ``'a'`` characters, but not five."
msgstr ""
"直前の正規表現をちょうど *m* 回繰り返したものにマッチさせるよう指定します。そ"
"れより少ないマッチでは正規表現全体がマッチしません。例えば、 ``a{6}`` は 6 個"
"ちょうどの ``'a'`` 文字にマッチしますが、 5 個ではマッチしません。"

#: ../../library/re.rst:196
msgid "``{m,n}``"
msgstr "``{m,n}``"

#: ../../library/re.rst:190
msgid ""
"Causes the resulting RE to match from *m* to *n* repetitions of the "
"preceding RE, attempting to match as many repetitions as possible.  For "
"example, ``a{3,5}`` will match from 3 to 5 ``'a'`` characters.  Omitting *m* "
"specifies a lower bound of zero,  and omitting *n* specifies an infinite "
"upper bound.  As an example, ``a{4,}b`` will match ``'aaaab'`` or a thousand "
"``'a'`` characters followed by a ``'b'``, but not ``'aaab'``. The comma may "
"not be omitted or the modifier would be confused with the previously "
"described form."
msgstr ""
"直前の正規表現を *m* 回から *n* 回、できるだけ多く繰り返したものにマッチさせ"
"る結果の正規表現にします。例えば、``a{3,5}`` は、3 個から 5 個の ``'a'`` 文字"
"にマッチします。*m* を省略すると下限は 0 に指定され、*n* を省略すると上限は無"
"限に指定されます。例として、 ``a{4,}b`` は ``'aaaab'`` や、1,000 個の "
"``'a'`` 文字に ``'b'`` が続いたものにマッチしますが、``'aaab'`` にはマッチし"
"ません。コンマは省略できません、省略すると修飾子が上で述べた形式と混同されて"
"しまうからです。"

#: ../../library/re.rst:203
msgid "``{m,n}?``"
msgstr "``{m,n}?``"

#: ../../library/re.rst:199
msgid ""
"Causes the resulting RE to match from *m* to *n* repetitions of the "
"preceding RE, attempting to match as *few* repetitions as possible.  This is "
"the non-greedy version of the previous quantifier.  For example, on the 6-"
"character string ``'aaaaaa'``, ``a{3,5}`` will match 5 ``'a'`` characters, "
"while ``a{3,5}?`` will only match 3 characters."
msgstr ""
"結果の正規表現は、前にある正規表現を、*m* 回から *n* 回まで繰り返したものに"
"マッチし、できるだけ *少なく* 繰り返したものにマッチするようにします。これ"
"は、前の数量詞の非貪欲版です。例えば、 6 文字文字列 ``'aaaaaa'`` では、 "
"``a{3,5}`` は、5 個の ``'a'`` 文字にマッチしますが、 ``a{3,5}?`` は 3 個の文"
"字にマッチするだけです。"

#: ../../library/re.rst:218
msgid "``{m,n}+``"
msgstr "``{m,n}+``"

#: ../../library/re.rst:206
msgid ""
"Causes the resulting RE to match from *m* to *n* repetitions of the "
"preceding RE, attempting to match as many repetitions as possible *without* "
"establishing any backtracking points. This is the possessive version of the "
"quantifier above. For example, on the 6-character string ``'aaaaaa'``, "
"``a{3,5}+aa`` attempt to match 5 ``'a'`` characters, then, requiring 2 more "
"``'a'``\\ s, will need more characters than available and thus fail, while "
"``a{3,5}aa`` will match with ``a{3,5}`` capturing 5, then 4 ``'a'``\\ s by "
"backtracking and then the final 2 ``'a'``\\ s are matched by the final "
"``aa`` in the pattern. ``x{m,n}+`` is equivalent to ``(?>x{m,n})``."
msgstr ""

#: ../../library/re.rst:233
msgid "``\\``"
msgstr "``\\``"

#: ../../library/re.rst:223
msgid ""
"Either escapes special characters (permitting you to match characters like "
"``'*'``, ``'?'``, and so forth), or signals a special sequence; special "
"sequences are discussed below."
msgstr ""
"特殊文字をエスケープ ( ``'*'`` や ``'?'`` などの文字にマッチできるようにす"
"る) し、または特殊シーケンスを合図します。特殊シーケンスは後で議論します。"

#: ../../library/re.rst:227
msgid ""
"If you're not using a raw string to express the pattern, remember that "
"Python also uses the backslash as an escape sequence in string literals; if "
"the escape sequence isn't recognized by Python's parser, the backslash and "
"subsequent character are included in the resulting string.  However, if "
"Python would recognize the resulting sequence, the backslash should be "
"repeated twice.  This is complicated and hard to understand, so it's highly "
"recommended that you use raw strings for all but the simplest expressions."
msgstr ""
"パターンを表現するのに raw 文字列を使っていないのであれば、 Python ももまた、"
"バックスラッシュを文字列リテラルでエスケープシーケンスとして使うことを思い出"
"して下さい。そのエスケープシーケンスを Python のパーザが認識しないなら、その"
"バックスラッシュとそれに続く文字が結果の文字列に含まれます。しかし、Python が"
"結果のシーケンスを認識するなら、そのバックスラッシュは 2 回繰り返さなければい"
"けません。これは複雑で理解しにくいので、ごく単純な表現以外は、全て raw 文字列"
"を使うことを強く推奨します。"

#: ../../library/re.rst:293
msgid "``[]``"
msgstr "``[]``"

#: ../../library/re.rst:239
msgid "Used to indicate a set of characters.  In a set:"
msgstr "文字の集合を指定するのに使います。集合の中では:"

#: ../../library/re.rst:241
msgid ""
"Characters can be listed individually, e.g. ``[amk]`` will match ``'a'``, "
"``'m'``, or ``'k'``."
msgstr ""
"文字を個別に指定できます。 ``[amk]`` は ``'a'`` 、 ``'m'`` または ``'k'`` に"
"マッチします。"

#: ../../library/re.rst:246
msgid ""
"Ranges of characters can be indicated by giving two characters and "
"separating them by a ``'-'``, for example ``[a-z]`` will match any lowercase "
"ASCII letter, ``[0-5][0-9]`` will match all the two-digits numbers from "
"``00`` to ``59``, and ``[0-9A-Fa-f]`` will match any hexadecimal digit.  If "
"``-`` is escaped (e.g. ``[a\\-z]``) or if it's placed as the first or last "
"character (e.g. ``[-a]`` or ``[a-]``), it will match a literal ``'-'``."
msgstr ""
"連続した文字の範囲を、 ``'-'`` を2 つの文字で挟んで指定できます。例えば、 "
"``[a-z]`` はあらゆる小文字の ASCII 文字にマッチします。``[0-5][0-9]`` は "
"``00`` から ``59`` まで全ての 2 桁の数字にマッチします。``[0-9A-Fa-f]`` は任"
"意の 16 進数字にマッチします。``-`` がエスケープされているか (例: ``[a\\-"
"z]``)、先頭や末尾の文字にされていると (例: ``[-a]`` や ``[a-]``)、リテラル "
"``'-'`` にマッチします。"

#: ../../library/re.rst:253
msgid ""
"Special characters lose their special meaning inside sets.  For example, "
"``[(+*)]`` will match any of the literal characters ``'('``, ``'+'``, "
"``'*'``, or ``')'``."
msgstr ""
"集合の中では、特殊文字はその特殊な意味を失います。例えば ``[(+*)]`` はリテラ"
"ル文字 ``'('`` 、 ``'+'`` 、 ``'*'`` 、または ``')'`` のどれにでもマッチしま"
"す。"

#: ../../library/re.rst:259
msgid ""
"Character classes such as ``\\w`` or ``\\S`` (defined below) are also "
"accepted inside a set, although the characters they match depend on the "
"flags_ used."
msgstr ""

#: ../../library/re.rst:264
msgid ""
"Characters that are not within a range can be matched by :dfn:"
"`complementing` the set.  If the first character of the set is ``'^'``, all "
"the characters that are *not* in the set will be matched.  For example, "
"``[^5]`` will match any character except ``'5'``, and ``[^^]`` will match "
"any character except ``'^'``.  ``^`` has no special meaning if it's not the "
"first character in the set."
msgstr ""
":dfn:`補集合` をとって範囲内にない文字にマッチできます。集合の最初の文字が "
"``'^'`` なら、集合に *含まれない* 全ての文字にマッチします。例えば、 "
"``[^5]`` は ``'5'`` を除くあらゆる文字にマッチし、 ``[^^]`` は ``'^'`` を除く"
"あらゆる文字にマッチします。 ``^`` は集合の最初の文字でなければ特別の意味を持"
"ちません。"

#: ../../library/re.rst:271
msgid ""
"To match a literal ``']'`` inside a set, precede it with a backslash, or "
"place it at the beginning of the set.  For example, both ``[()[\\]{}]`` and "
"``[]()[{}]`` will match a right bracket, as well as left bracket, braces, "
"and parentheses."
msgstr ""

#: ../../library/re.rst:281
msgid ""
"Support of nested sets and set operations as in `Unicode Technical Standard "
"#18`_ might be added in the future.  This would change the syntax, so to "
"facilitate this change a :exc:`FutureWarning` will be raised in ambiguous "
"cases for the time being. That includes sets starting with a literal ``'['`` "
"or containing literal character sequences ``'--'``, ``'&&'``, ``'~~'``, and "
"``'||'``.  To avoid a warning escape them with a backslash."
msgstr ""
"`Unicode Technical Standard #18`_ にあるような集合の入れ子や集合操作が将来追"
"加される可能性があります。これは構文を変化させるもので、この変化を容易にする"
"ために、さしあたって曖昧な事例には :exc:`FutureWarning` が送出されます。これ"
"はリテラル ``'['`` で始まる集合や、リテラル文字の連続 ``'--'`` 、 "
"``'&&'`` 、 ``'~~'`` および ``'||'`` を含む集合を含みます。警告を避けるには"
"バックスラッシュでエスケープしてください。"

#: ../../library/re.rst:291
msgid ""
":exc:`FutureWarning` is raised if a character set contains constructs that "
"will change semantically in the future."
msgstr ""
"文字セットが将来意味論的に変化する構造を含むなら :exc:`FutureWarning` が送出"
"されます。"

#: ../../library/re.rst:306
msgid "``|``"
msgstr "``|``"

#: ../../library/re.rst:298
msgid ""
"``A|B``, where *A* and *B* can be arbitrary REs, creates a regular "
"expression that will match either *A* or *B*.  An arbitrary number of REs "
"can be separated by the ``'|'`` in this way.  This can be used inside groups "
"(see below) as well.  As the target string is scanned, REs separated by "
"``'|'`` are tried from left to right. When one pattern completely matches, "
"that branch is accepted. This means that once *A* matches, *B* will not be "
"tested further, even if it would produce a longer overall match.  In other "
"words, the ``'|'`` operator is never greedy.  To match a literal ``'|'``, "
"use ``\\|``, or enclose it inside a character class, as in ``[|]``."
msgstr ""
"*A* と *B* を任意の正規表現として、 ``A|B`` は *A* と *B* のいずれかにマッチ"
"する正規表現を作成します。この方法で任意の数の正規表現を ``'|'`` で分離できま"
"す。これはグループ (下記参照) 中でも使えます。対象文字列を走査するとき、"
"``'|'`` で分離された正規表現は左から右へ順に試されます。一つのパターンが完全"
"にマッチしたとき、そのパターン枝が受理されます。つまり、ひとたび *A* がマッチ"
"してしまえば、例え *B* によって全体のマッチが長くなるとしても、 *B* はもはや"
"走査されません。言いかえると、 ``'|'`` 演算子は決して貪欲にはなりません。リテ"
"ラル ``'|'`` にマッチするには、 ``\\|`` を使うか、 ``[|]`` のように文字クラス"
"中に囲みます。"

#: ../../library/re.rst:316
msgid "``(...)``"
msgstr "``(...)``"

#: ../../library/re.rst:312
msgid ""
"Matches whatever regular expression is inside the parentheses, and indicates "
"the start and end of a group; the contents of a group can be retrieved after "
"a match has been performed, and can be matched later in the string with the "
"``\\number`` special sequence, described below.  To match the literals "
"``'('`` or ``')'``, use ``\\(`` or ``\\)``, or enclose them inside a "
"character class: ``[(]``, ``[)]``."
msgstr ""
"丸括弧で囲まれた正規表現にマッチするとともに、グループの開始と終了を表しま"
"す。グループの中身は以下で述べるように、マッチが実行された後で回収したり、そ"
"の文字列中で以降 ``\\number`` 特殊シーケンスでマッチしたりできます。リテラル "
"``'('`` や ``')'`` にマッチするには、``\\(`` や ``\\)`` を使うか、文字クラス"
"中に囲みます:  ``[(]``、 ``[)]`` 。"

#: ../../library/re.rst:325
msgid "``(?...)``"
msgstr "``(?...)``"

#: ../../library/re.rst:321
msgid ""
"This is an extension notation (a ``'?'`` following a ``'('`` is not "
"meaningful otherwise).  The first character after the ``'?'`` determines "
"what the meaning and further syntax of the construct is. Extensions usually "
"do not create a new group; ``(?P<name>...)`` is the only exception to this "
"rule. Following are the currently supported extensions."
msgstr ""
"これは拡張記法です (``'('`` に続く ``'?'`` はそれ以上の意味を持ちません) 。 "
"``'?'`` に続く最初の文字がこの構造の意味と特有の構文を決定します。拡張は一般"
"に新しいグループを作成しません。ただし ``(?P<name>...)`` はこの法則の唯一の例"
"外です。現在サポートされている拡張は以下の通りです。"

#: ../../library/re.rst:348
msgid "``(?aiLmsux)``"
msgstr "``(?aiLmsux)``"

#: ../../library/re.rst:328
msgid ""
"(One or more letters from the set ``'a'``, ``'i'``, ``'L'``, ``'m'``, "
"``'s'``, ``'u'``, ``'x'``.) The group matches the empty string; the letters "
"set the corresponding flags for the entire regular expression:"
msgstr ""

#: ../../library/re.rst:333 ../../library/re.rst:365
msgid ":const:`re.A` (ASCII-only matching)"
msgstr ""

#: ../../library/re.rst:334 ../../library/re.rst:366
msgid ":const:`re.I` (ignore case)"
msgstr ""

#: ../../library/re.rst:335 ../../library/re.rst:367
msgid ":const:`re.L` (locale dependent)"
msgstr ""

#: ../../library/re.rst:336 ../../library/re.rst:368
msgid ":const:`re.M` (multi-line)"
msgstr ""

#: ../../library/re.rst:337 ../../library/re.rst:369
msgid ":const:`re.S` (dot matches all)"
msgstr ""

#: ../../library/re.rst:338 ../../library/re.rst:370
msgid ":const:`re.U` (Unicode matching)"
msgstr ""

#: ../../library/re.rst:339 ../../library/re.rst:371
msgid ":const:`re.X` (verbose)"
msgstr ""

#: ../../library/re.rst:341
msgid ""
"(The flags are described in :ref:`contents-of-module-re`.) This is useful if "
"you wish to include the flags as part of the regular expression, instead of "
"passing a *flag* argument to the :func:`re.compile` function. Flags should "
"be used first in the expression string."
msgstr ""

#: ../../library/re.rst:347
msgid "This construction can only be used at the start of the expression."
msgstr ""

#: ../../library/re.rst:356
msgid "``(?:...)``"
msgstr "``(?:...)``"

#: ../../library/re.rst:353
msgid ""
"A non-capturing version of regular parentheses.  Matches whatever regular "
"expression is inside the parentheses, but the substring matched by the group "
"*cannot* be retrieved after performing a match or referenced later in the "
"pattern."
msgstr ""
"普通の丸括弧の、キャプチャしない版です。丸括弧で囲まれた正規表現にマッチしま"
"すが、このグループがマッチした部分文字列は、マッチを実行したあとで回収するこ"
"とも、そのパターン中で以降参照することも *できません* 。"

#: ../../library/re.rst:388
msgid "``(?aiLmsux-imsx:...)``"
msgstr "``(?aiLmsux-imsx:...)``"

#: ../../library/re.rst:359
msgid ""
"(Zero or more letters from the set ``'a'``, ``'i'``, ``'L'``, ``'m'``, "
"``'s'``, ``'u'``, ``'x'``, optionally followed by ``'-'`` followed by one or "
"more letters from the ``'i'``, ``'m'``, ``'s'``, ``'x'``.) The letters set "
"or remove the corresponding flags for the part of the expression:"
msgstr ""

#: ../../library/re.rst:373
msgid "(The flags are described in :ref:`contents-of-module-re`.)"
msgstr ""

#: ../../library/re.rst:375
msgid ""
"The letters ``'a'``, ``'L'`` and ``'u'`` are mutually exclusive when used as "
"inline flags, so they can't be combined or follow ``'-'``.  Instead, when "
"one of them appears in an inline group, it overrides the matching mode in "
"the enclosing group.  In Unicode patterns ``(?a:...)`` switches to ASCII-"
"only matching, and ``(?u:...)`` switches to Unicode matching (default).  In "
"bytes patterns ``(?L:...)`` switches to locale dependent matching, and ``(?"
"a:...)`` switches to ASCII-only matching (default). This override is only in "
"effect for the narrow inline group, and the original matching mode is "
"restored outside of the group."
msgstr ""

#: ../../library/re.rst:387
msgid "The letters ``'a'``, ``'L'`` and ``'u'`` also can be used in a group."
msgstr "文字 ``'a'`` 、 ``'L'`` および ``'u'`` もグループ中で使えます。"

#: ../../library/re.rst:403
msgid "``(?>...)``"
msgstr "``(?>...)``"

#: ../../library/re.rst:391
msgid ""
"Attempts to match ``...`` as if it was a separate regular expression, and if "
"successful, continues to match the rest of the pattern following it. If the "
"subsequent pattern fails to match, the stack can only be unwound to a point "
"*before* the ``(?>...)`` because once exited, the expression, known as an :"
"dfn:`atomic group`, has thrown away all stack points within itself. Thus, "
"``(?>.*).`` would never match anything because first the ``.*`` would match "
"all characters possible, then, having nothing left to match, the final ``.`` "
"would fail to match. Since there are no stack points saved in the Atomic "
"Group, and there is no stack point before it, the entire expression would "
"thus fail to match."
msgstr ""

#: ../../library/re.rst:435
msgid "``(?P<name>...)``"
msgstr "``(?P<name>...)``"

#: ../../library/re.rst:408
msgid ""
"Similar to regular parentheses, but the substring matched by the group is "
"accessible via the symbolic group name *name*.  Group names must be valid "
"Python identifiers, and in :class:`bytes` patterns they can only contain "
"bytes in the ASCII range.  Each group name must be defined only once within "
"a regular expression.  A symbolic group is also a numbered group, just as if "
"the group were not named."
msgstr ""

#: ../../library/re.rst:415
msgid ""
"Named groups can be referenced in three contexts.  If the pattern is ``(?"
"P<quote>['\"]).*?(?P=quote)`` (i.e. matching a string quoted with either "
"single or double quotes):"
msgstr ""
"名前付きグループは 3 つのコンテキストで参照できます。パターンが ``(?"
"P<quote>['\\\"]).*?(?P=quote)`` (シングルまたはダブルクオートで囲まれた文字列"
"にマッチ) ならば:"

#: ../../library/re.rst:420
msgid "Context of reference to group \"quote\""
msgstr "グループ \"quote\" を参照するコンテキスト"

#: ../../library/re.rst:420
msgid "Ways to reference it"
msgstr "参照する方法"

#: ../../library/re.rst:422
msgid "in the same pattern itself"
msgstr "その同じパターン中"

#: ../../library/re.rst:422
msgid "``(?P=quote)`` (as shown)"
msgstr "``(?P=quote)`` (示したとおり)"

#: ../../library/re.rst:423 ../../library/re.rst:430
msgid "``\\1``"
msgstr "``\\1``"

#: ../../library/re.rst:425
msgid "when processing match object *m*"
msgstr "マッチオブジェクト *m* の処理時"

#: ../../library/re.rst:425
msgid "``m.group('quote')``"
msgstr "``m.group('quote')``"

#: ../../library/re.rst:426
msgid "``m.end('quote')`` (etc.)"
msgstr "``m.end('quote')`` (など)"

#: ../../library/re.rst:428
msgid "in a string passed to the *repl* argument of ``re.sub()``"
msgstr "``re.sub()`` の *repl* 引数へ渡される文字列中"

#: ../../library/re.rst:428
msgid "``\\g<quote>``"
msgstr "``\\g<quote>``"

#: ../../library/re.rst:429
msgid "``\\g<1>``"
msgstr "``\\g<1>``"

#: ../../library/re.rst:433
msgid ""
"In :class:`bytes` patterns, group *name* can only contain bytes in the ASCII "
"range (``b'\\x00'``-``b'\\x7f'``)."
msgstr ""

#: ../../library/re.rst:441
msgid "``(?P=name)``"
msgstr "``(?P=name)``"

#: ../../library/re.rst:440
msgid ""
"A backreference to a named group; it matches whatever text was matched by "
"the earlier group named *name*."
msgstr ""
"名前付きグループへの後方参照です。これは *name* という名前の既出のグループが"
"マッチした文字列にマッチします。"

#: ../../library/re.rst:446
msgid "``(?#...)``"
msgstr "``(?#...)``"

#: ../../library/re.rst:446
msgid "A comment; the contents of the parentheses are simply ignored."
msgstr "コメントです。括弧の中身は単純に無視されます。"

#: ../../library/re.rst:453
msgid "``(?=...)``"
msgstr "``(?=...)``"

#: ../../library/re.rst:451
msgid ""
"Matches if ``...`` matches next, but doesn't consume any of the string.  "
"This is called a :dfn:`lookahead assertion`.  For example, ``Isaac (?"
"=Asimov)`` will match ``'Isaac '`` only if it's followed by ``'Asimov'``."
msgstr ""
"``...`` が次に続くものにマッチすればマッチしますが、文字列をまったく消費しま"
"せん。これは :dfn:`先読みアサーション (lookahead assertion)` と呼ばれます。例"
"えば、``Isaac (?=Asimov)`` は ``'Isaac '`` に、その後に ``'Asimov'`` が続く場"
"合にのみ、マッチします。"

#: ../../library/re.rst:460
msgid "``(?!...)``"
msgstr "``(?!...)``"

#: ../../library/re.rst:458
msgid ""
"Matches if ``...`` doesn't match next.  This is a :dfn:`negative lookahead "
"assertion`. For example, ``Isaac (?!Asimov)`` will match ``'Isaac '`` only "
"if it's *not* followed by ``'Asimov'``."
msgstr ""
"``...`` が次に続くものにマッチしなければマッチします。これは :dfn:`否定先読み"
"アサーション (negative lookahead assertion)` です。例えば、``Isaac (?!"
"Asimov)`` は ``'Isaac '`` に、その後に ``'Asimov'`` が続か *ない* 場合にの"
"み、マッチします。"

#: ../../library/re.rst:487
msgid "``(?<=...)``"
msgstr "``(?<=...)``"

#: ../../library/re.rst:465
msgid ""
"Matches if the current position in the string is preceded by a match for "
"``...`` that ends at the current position.  This is called a :dfn:`positive "
"lookbehind assertion`. ``(?<=abc)def`` will find a match in ``'abcdef'``, "
"since the lookbehind will back up 3 characters and check if the contained "
"pattern matches. The contained pattern must only match strings of some fixed "
"length, meaning that ``abc`` or ``a|b`` are allowed, but ``a*`` and ``a{3,4}"
"`` are not.  Note that patterns which start with positive lookbehind "
"assertions will not match at the beginning of the string being searched; you "
"will most likely want to use the :func:`search` function rather than the :"
"func:`match` function:"
msgstr ""
"その文字列における現在位置の前に、現在位置で終わる ``...`` とのマッチがあれ"
"ば、マッチします。これは :dfn:`後読みアサーション` と呼ばれます。``(?"
"<=abc)def`` は、後読みは 3 文字をバックアップし、含まれているパターンがマッチ"
"するか検査するので ``'abcdef'`` にマッチを見つけます。含まれるパターンは、固"
"定長の文字列にのみマッチしなければなりません。すなわち、 ``abc`` や ``a|b`` "
"は許されますが、``a*`` や ``a{3,4}`` は許されません。肯定後読みアサーションで"
"始まるパターンは、検索される文字列の先頭とは決してマッチしないことに注意して"
"下さい。:func:`match` 関数ではなく :func:`search` 関数を使う方が望ましいで"
"しょう:"

#: ../../library/re.rst:480
msgid "This example looks for a word following a hyphen:"
msgstr "この例ではハイフンに続く単語を探します:"

#: ../../library/re.rst:486
msgid "Added support for group references of fixed length."
msgstr "固定長のグループ参照をサポートするようになりました。"

#: ../../library/re.rst:496
msgid "``(?<!...)``"
msgstr "``(?<!...)``"

#: ../../library/re.rst:492
msgid ""
"Matches if the current position in the string is not preceded by a match for "
"``...``.  This is called a :dfn:`negative lookbehind assertion`.  Similar to "
"positive lookbehind assertions, the contained pattern must only match "
"strings of some fixed length.  Patterns which start with negative lookbehind "
"assertions may match at the beginning of the string being searched."
msgstr ""
"その文字列における現在位置の前に ``...`` とのマッチがなければ、マッチします。"
"これは :dfn:`否定後読みアサーション(negative lookbehind assertion)` と呼ばれ"
"ます。肯定後読みアサーションと同様に、含まれるパターンは固定長の文字列にのみ"
"マッチしなければなりません。否定後読みアサーションで始まるパターンは検索され"
"る文字列の先頭でマッチできます。"

#: ../../library/re.rst:513
msgid "``(?(id/name)yes-pattern|no-pattern)``"
msgstr "``(?(id/name)yes-pattern|no-pattern)``"

#: ../../library/re.rst:502
msgid ""
"Will try to match with ``yes-pattern`` if the group with given *id* or "
"*name* exists, and with ``no-pattern`` if it doesn't. ``no-pattern`` is "
"optional and can be omitted. For example, ``(<)?(\\w+@\\w+(?:\\.\\w+)+)(?"
"(1)>|$)`` is a poor email matching pattern, which will match with "
"``'<user@host.com>'`` as well as ``'user@host.com'``, but not with "
"``'<user@host.com'`` nor ``'user@host.com>'``."
msgstr ""
"与えられた *id* や *name* のグループが存在すれば ``yes-pattern`` との、存在し"
"なければ ``no-pattern`` とのマッチを試みます。``no-pattern`` はオプションであ"
"り省略できます。例えば、``(<)?(\\w+@\\w+(?:\\.\\w+)+)(?(1)>|$)`` は貧弱な E-"
"mail マッチングパターンで、``'<user@host.com>'`` や ``'user@host.com'`` には"
"マッチしますが、``'<user@host.com'`` や ``'user@host.com>'`` にはマッチしませ"
"ん。"

#: ../../library/re.rst:509
msgid ""
"Group *id* can only contain ASCII digits. In :class:`bytes` patterns, group "
"*name* can only contain bytes in the ASCII range (``b'\\x00'``-``b'\\x7f'``)."
msgstr ""

#: ../../library/re.rst:517
msgid ""
"The special sequences consist of ``'\\'`` and a character from the list "
"below. If the ordinary character is not an ASCII digit or an ASCII letter, "
"then the resulting RE will match the second character.  For example, ``\\$`` "
"matches the character ``'$'``."
msgstr ""
"特殊シーケンスは ``'\\'`` と以下のリストの文字から構成されます。通常文字が "
"ASCII 数字でも ASCII 文字でもなければ、結果の正規表現は 2 番目の文字にマッチ"
"します。例えば、``\\$`` は文字 ``'$'`` にマッチします。"

#: ../../library/re.rst:532
msgid "``\\number``"
msgstr "``\\number``"

#: ../../library/re.rst:525
msgid ""
"Matches the contents of the group of the same number.  Groups are numbered "
"starting from 1.  For example, ``(.+) \\1`` matches ``'the the'`` or ``'55 "
"55'``, but not ``'thethe'`` (note the space after the group).  This special "
"sequence can only be used to match one of the first 99 groups.  If the first "
"digit of *number* is 0, or *number* is 3 octal digits long, it will not be "
"interpreted as a group match, but as the character with octal value "
"*number*. Inside the ``'['`` and ``']'`` of a character class, all numeric "
"escapes are treated as characters."
msgstr ""
"同じ番号のグループの中身にマッチします。グループは 1 から始まる番号をつけられ"
"ます。例えば、 ``(.+) \\1`` は、 ``'the the'`` あるいは ``'55 55'`` にマッチ"
"しますが、 ``'thethe'`` にはマッチしません(グループの後のスペースに注意して下"
"さい)。この特殊シーケンスは最初の 99 グループのうちの一つとのマッチにのみ使え"
"ます。 *number* の最初の桁が 0 であるか、 *number* が 3 桁の 8 進数であれば、"
"それはグループのマッチとしてではなく、 8 進値 *number* を持つ文字として解釈さ"
"れます。文字クラスの ``'['`` と ``']'`` の間では全ての数値エスケープが文字と"
"して扱われます。"

#: ../../library/re.rst:537
msgid "``\\A``"
msgstr "``\\A``"

#: ../../library/re.rst:537
msgid "Matches only at the start of the string."
msgstr "文字列の先頭でのみマッチします。"

#: ../../library/re.rst:559
msgid "``\\b``"
msgstr "``\\b``"

#: ../../library/re.rst:542
msgid ""
"Matches the empty string, but only at the beginning or end of a word. A word "
"is defined as a sequence of word characters. Note that formally, ``\\b`` is "
"defined as the boundary between a ``\\w`` and a ``\\W`` character (or vice "
"versa), or between ``\\w`` and the beginning or end of the string. This "
"means that ``r'\\bat\\b'`` matches ``'at'``, ``'at.'``, ``'(at)'``, and "
"``'as at ay'`` but not ``'attempt'`` or ``'atlas'``."
msgstr ""

#: ../../library/re.rst:550
msgid ""
"The default word characters in Unicode (str) patterns are Unicode "
"alphanumerics and the underscore, but this can be changed by using the :py:"
"const:`~re.ASCII` flag. Word boundaries are determined by the current locale "
"if the :py:const:`~re.LOCALE` flag is used."
msgstr ""

#: ../../library/re.rst:558
msgid ""
"Inside a character range, ``\\b`` represents the backspace character, for "
"compatibility with Python's string literals."
msgstr ""

#: ../../library/re.rst:573
msgid "``\\B``"
msgstr "``\\B``"

#: ../../library/re.rst:564
msgid ""
"Matches the empty string, but only when it is *not* at the beginning or end "
"of a word. This means that ``r'at\\B'`` matches ``'athens'``, ``'atom'``, "
"``'attorney'``, but not ``'at'``, ``'at.'``, or ``'at!'``. ``\\B`` is the "
"opposite of ``\\b``, so word characters in Unicode (str) patterns are "
"Unicode alphanumerics or the underscore, although this can be changed by "
"using the :py:const:`~re.ASCII` flag. Word boundaries are determined by the "
"current locale if the :py:const:`~re.LOCALE` flag is used."
msgstr ""

#: ../../library/re.rst:589
msgid "``\\d``"
msgstr "``\\d``"

#: ../../library/re.rst:585 ../../library/re.rst:608 ../../library/re.rst:631
msgid "For Unicode (str) patterns:"
msgstr "Unicode (str) パターンでは:"

#: ../../library/re.rst:579
msgid ""
"Matches any Unicode decimal digit (that is, any character in Unicode "
"character category `[Nd]`__). This includes ``[0-9]``, and also many other "
"digit characters."
msgstr ""

#: ../../library/re.rst:583
msgid "Matches ``[0-9]`` if the :py:const:`~re.ASCII` flag is used."
msgstr ""

#: ../../library/re.rst:589 ../../library/re.rst:612 ../../library/re.rst:637
msgid "For 8-bit (bytes) patterns:"
msgstr "8 ビット (bytes) パターンでは:"

#: ../../library/re.rst:588
msgid ""
"Matches any decimal digit in the ASCII character set; this is equivalent to "
"``[0-9]``."
msgstr ""

#: ../../library/re.rst:597
msgid "``\\D``"
msgstr "``\\D``"

#: ../../library/re.rst:594
msgid ""
"Matches any character which is not a decimal digit. This is the opposite of "
"``\\d``."
msgstr ""

#: ../../library/re.rst:597
msgid "Matches ``[^0-9]`` if the :py:const:`~re.ASCII` flag is used."
msgstr ""

#: ../../library/re.rst:612
msgid "``\\s``"
msgstr "``\\s``"

#: ../../library/re.rst:603
msgid ""
"Matches Unicode whitespace characters (which includes "
"``[ \\t\\n\\r\\f\\v]``, and also many other characters, for example the non-"
"breaking spaces mandated by typography rules in many languages)."
msgstr ""

#: ../../library/re.rst:608
msgid ""
"Matches ``[ \\t\\n\\r\\f\\v]`` if the :py:const:`~re.ASCII` flag is used."
msgstr ""

#: ../../library/re.rst:611
msgid ""
"Matches characters considered whitespace in the ASCII character set; this is "
"equivalent to ``[ \\t\\n\\r\\f\\v]``."
msgstr ""
"ASCII 文字セットで空白文字と見なされる文字にマッチします。これは "
"``[ \\t\\n\\r\\f\\v]`` と等価です。"

#: ../../library/re.rst:620
msgid "``\\S``"
msgstr "``\\S``"

#: ../../library/re.rst:617
msgid ""
"Matches any character which is not a whitespace character. This is the "
"opposite of ``\\s``."
msgstr ""

#: ../../library/re.rst:620
msgid ""
"Matches ``[^ \\t\\n\\r\\f\\v]`` if the :py:const:`~re.ASCII` flag is used."
msgstr ""

#: ../../library/re.rst:637
msgid "``\\w``"
msgstr "``\\w``"

#: ../../library/re.rst:626
msgid ""
"Matches Unicode word characters; this includes all Unicode alphanumeric "
"characters (as defined by :py:meth:`str.isalnum`), as well as the underscore "
"(``_``)."
msgstr ""

#: ../../library/re.rst:631
msgid "Matches ``[a-zA-Z0-9_]`` if the :py:const:`~re.ASCII` flag is used."
msgstr ""

#: ../../library/re.rst:634
msgid ""
"Matches characters considered alphanumeric in the ASCII character set; this "
"is equivalent to ``[a-zA-Z0-9_]``. If the :py:const:`~re.LOCALE` flag is "
"used, matches characters considered alphanumeric in the current locale and "
"the underscore."
msgstr ""

#: ../../library/re.rst:651
msgid "``\\W``"
msgstr "``\\W``"

#: ../../library/re.rst:642
msgid ""
"Matches any character which is not a word character. This is the opposite of "
"``\\w``. By default, matches non-underscore (``_``) characters for which :py:"
"meth:`str.isalnum` returns ``False``."
msgstr ""

#: ../../library/re.rst:647
msgid "Matches ``[^a-zA-Z0-9_]`` if the :py:const:`~re.ASCII` flag is used."
msgstr ""

#: ../../library/re.rst:649
msgid ""
"If the :py:const:`~re.LOCALE` flag is used, matches characters which are "
"neither alphanumeric in the current locale nor the underscore."
msgstr ""

#: ../../library/re.rst:656
msgid "``\\Z``"
msgstr "``\\Z``"

#: ../../library/re.rst:656
msgid "Matches only at the end of the string."
msgstr "文字列の末尾でのみマッチします。"

#: ../../library/re.rst:672
msgid ""
"Most of the :ref:`escape sequences <escape-sequences>` supported by Python "
"string literals are also accepted by the regular expression parser::"
msgstr ""

#: ../../library/re.rst:679
msgid ""
"(Note that ``\\b`` is used to represent word boundaries, and means "
"\"backspace\" only inside character classes.)"
msgstr ""
"(``\\b`` は単語の境界を表すのに使われ、文字クラス中でのみ \"後退 "
"(backspace)\" 文字を意味することに注意してください。)"

#: ../../library/re.rst:682
msgid ""
"``'\\u'``, ``'\\U'``, and ``'\\N'`` escape sequences are only recognized in "
"Unicode (str) patterns. In bytes patterns they are errors. Unknown escapes "
"of ASCII letters are reserved for future use and treated as errors."
msgstr ""

#: ../../library/re.rst:688
msgid ""
"Octal escapes are included in a limited form.  If the first digit is a 0, or "
"if there are three octal digits, it is considered an octal escape. "
"Otherwise, it is a group reference.  As for string literals, octal escapes "
"are always at most three digits in length."
msgstr ""
"8 進エスケープは限られた形式でのみ含まれます。その最初の桁が 0 であるか、それ"
"が 3 桁の 8 進数であるならば、それは 8 進エスケープと見なされます。そうでなけ"
"れば、それはグループ参照です。文字列リテラルでは、8 進エスケープは常にたかだ"
"か 3 桁長です。"

#: ../../library/re.rst:693
msgid "The ``'\\u'`` and ``'\\U'`` escape sequences have been added."
msgstr "``'\\u'`` と ``'\\U'`` エスケープシーケンスが追加されました。"

#: ../../library/re.rst:696
msgid ""
"Unknown escapes consisting of ``'\\'`` and an ASCII letter now are errors."
msgstr "``'\\'`` と ASCII 文字からなる未知のエスケープはエラーになります。"

#: ../../library/re.rst:699
msgid ""
"The :samp:`'\\\\N\\\\{{name}\\\\}'` escape sequence has been added. As in "
"string literals, it expands to the named Unicode character (e.g. ``'\\N{EM "
"DASH}'``)."
msgstr ""

#: ../../library/re.rst:707
msgid "Module Contents"
msgstr "モジュールコンテンツ"

#: ../../library/re.rst:709
msgid ""
"The module defines several functions, constants, and an exception. Some of "
"the functions are simplified versions of the full featured methods for "
"compiled regular expressions.  Most non-trivial applications always use the "
"compiled form."
msgstr ""
"このモジュールはいくつかの関数、定数、例外を定義します。このうちいくつかの関"
"数は、コンパイル済み正規表現がそなえる完全な機能のメソッドを簡易にしたもので"
"す。些細なものを除くほとんどのアプリケーションは常にコンパイル済み形式を使い"
"ます。"

#: ../../library/re.rst:716
msgid "Flags"
msgstr ""

#: ../../library/re.rst:718
msgid ""
"Flag constants are now instances of :class:`RegexFlag`, which is a subclass "
"of :class:`enum.IntFlag`."
msgstr ""
"フラグ定数は、:class:`enum.IntFlag` のサブクラスである :class:`RegexFlag` の"
"インスタンスになりました。"

#: ../../library/re.rst:725
msgid ""
"An :class:`enum.IntFlag` class containing the regex options listed below."
msgstr ""

#: ../../library/re.rst:727
msgid "- added to ``__all__``"
msgstr ""

#: ../../library/re.rst:732
msgid ""
"Make ``\\w``, ``\\W``, ``\\b``, ``\\B``, ``\\d``, ``\\D``, ``\\s`` and "
"``\\S`` perform ASCII-only matching instead of full Unicode matching.  This "
"is only meaningful for Unicode (str) patterns, and is ignored for bytes "
"patterns."
msgstr ""

#: ../../library/re.rst:736
msgid "Corresponds to the inline flag ``(?a)``."
msgstr ""

#: ../../library/re.rst:740
msgid ""
"The :py:const:`~re.U` flag still exists for backward compatibility, but is "
"redundant in Python 3 since matches are Unicode by default for ``str`` "
"patterns, and Unicode matching isn't allowed for bytes patterns. :py:const:"
"`~re.UNICODE` and the inline flag ``(?u)`` are similarly redundant."
msgstr ""

#: ../../library/re.rst:749
msgid "Display debug information about compiled expression."
msgstr "コンパイルした表現に関するデバッグ情報を出力します。"

#: ../../library/re.rst:751
msgid "No corresponding inline flag."
msgstr ""

#: ../../library/re.rst:757
msgid ""
"Perform case-insensitive matching; expressions like ``[A-Z]`` will also  "
"match lowercase letters. Full Unicode matching (such as ``Ü`` matching "
"``ü``) also works unless the :py:const:`~re.ASCII` flag is used to disable "
"non-ASCII matches. The current locale does not change the effect of this "
"flag unless the :py:const:`~re.LOCALE` flag is also used."
msgstr ""

#: ../../library/re.rst:765
msgid "Corresponds to the inline flag ``(?i)``."
msgstr ""

#: ../../library/re.rst:767
msgid ""
"Note that when the Unicode patterns ``[a-z]`` or ``[A-Z]`` are used in "
"combination with the :const:`IGNORECASE` flag, they will match the 52 ASCII "
"letters and 4 additional non-ASCII letters: 'İ' (U+0130, Latin capital "
"letter I with dot above), 'ı' (U+0131, Latin small letter dotless i), "
"'ſ' (U+017F, Latin small letter long s) and 'K' (U+212A, Kelvin sign). If "
"the :py:const:`~re.ASCII` flag is used, only letters 'a' to 'z' and 'A' to "
"'Z' are matched."
msgstr ""

#: ../../library/re.rst:778
msgid ""
"Make ``\\w``, ``\\W``, ``\\b``, ``\\B`` and case-insensitive matching "
"dependent on the current locale. This flag can be used only with bytes "
"patterns."
msgstr ""

#: ../../library/re.rst:782
msgid "Corresponds to the inline flag ``(?L)``."
msgstr ""

#: ../../library/re.rst:786
msgid ""
"This flag is discouraged; consider Unicode matching instead. The locale "
"mechanism is very unreliable as it only handles one \"culture\" at a time "
"and only works with 8-bit locales. Unicode matching is enabled by default "
"for Unicode (str) patterns and it is able to handle different locales and "
"languages."
msgstr ""

#: ../../library/re.rst:793
msgid ""
":py:const:`~re.LOCALE` can be used only with bytes patterns and is not "
"compatible with :py:const:`~re.ASCII`."
msgstr ""

#: ../../library/re.rst:797
msgid ""
"Compiled regular expression objects with the :py:const:`~re.LOCALE` flag no "
"longer depend on the locale at compile time. Only the locale at matching "
"time affects the result of matching."
msgstr ""

#: ../../library/re.rst:806
msgid ""
"When specified, the pattern character ``'^'`` matches at the beginning of "
"the string and at the beginning of each line (immediately following each "
"newline); and the pattern character ``'$'`` matches at the end of the string "
"and at the end of each line (immediately preceding each newline).  By "
"default, ``'^'`` matches only at the beginning of the string, and ``'$'`` "
"only at the end of the string and immediately before the newline (if any) at "
"the end of the string."
msgstr ""
"指定されると、パターン文字 ``'^'`` は、文字列の先頭および各行の先頭(各改行の"
"直後)とマッチします；そしてパターン文字 ``'$'`` は文字列の末尾および各行の末"
"尾 (改行の直前) とマッチします。デフォルトでは、 ``'^'`` は、文字列の先頭とだ"
"けマッチし、 ``'$'`` は、文字列の末尾および文字列の末尾の改行の直前(がもしあ"
"れば)とマッチします。"

#: ../../library/re.rst:813
msgid "Corresponds to the inline flag ``(?m)``."
msgstr ""

#: ../../library/re.rst:817
msgid ""
"Indicates no flag being applied, the value is ``0``.  This flag may be used "
"as a default value for a function keyword argument or as a base value that "
"will be conditionally ORed with other flags.  Example of use as a default "
"value::"
msgstr ""

#: ../../library/re.rst:830
msgid ""
"Make the ``'.'`` special character match any character at all, including a "
"newline; without this flag, ``'.'`` will match anything *except* a newline."
msgstr ""
"特殊文字 ``'.'`` を、改行を含む任意の文字と、とにかくマッチさせます；このフラ"
"グがなければ、 ``'.'`` は、改行 *以外の* 任意の文字とマッチします。"

#: ../../library/re.rst:833
msgid "Corresponds to the inline flag ``(?s)``."
msgstr ""

#: ../../library/re.rst:839
msgid ""
"In Python 3, Unicode characters are matched by default for ``str`` patterns. "
"This flag is therefore redundant with **no effect** and is only kept for "
"backward compatibility."
msgstr ""

#: ../../library/re.rst:844
msgid ""
"See :py:const:`~re.ASCII` to restrict matching to ASCII characters instead."
msgstr ""

#: ../../library/re.rst:851
msgid ""
"This flag allows you to write regular expressions that look nicer and are "
"more readable by allowing you to visually separate logical sections of the "
"pattern and add comments. Whitespace within the pattern is ignored, except "
"when in a character class, or when preceded by an unescaped backslash, or "
"within tokens like ``*?``, ``(?:`` or ``(?P<...>``. For example, ``(? :`` "
"and ``* ?`` are not allowed. When a line contains a ``#`` that is not in a "
"character class and is not preceded by an unescaped backslash, all "
"characters from the leftmost such ``#`` through the end of the line are "
"ignored."
msgstr ""

#: ../../library/re.rst:861
msgid ""
"This means that the two following regular expression objects that match a "
"decimal number are functionally equal::"
msgstr ""
"つまり、10 進数字にマッチする下記のふたつの正規表現オブジェクトは、機能的に等"
"価です::"

#: ../../library/re.rst:869
msgid "Corresponds to the inline flag ``(?x)``."
msgstr "インラインフラグの ``(?x)`` に相当します。"

#: ../../library/re.rst:873
msgid "Functions"
msgstr "関数"

#: ../../library/re.rst:877
msgid ""
"Compile a regular expression pattern into a :ref:`regular expression object "
"<re-objects>`, which can be used for matching using its :func:`~Pattern."
"match`, :func:`~Pattern.search` and other methods, described below."
msgstr ""
"正規表現パターンを :ref:`正規表現オブジェクト <re-objects>` にコンパイルし、"
"以下に述べる :func:`~Pattern.match` 、 :func:`~Pattern.search` その他のメソッ"
"ドを使ってマッチングに使えるようにします。"

#: ../../library/re.rst:882
msgid ""
"The expression's behaviour can be modified by specifying a *flags* value. "
"Values can be any of the `flags`_ variables, combined using bitwise OR (the "
"``|`` operator)."
msgstr ""

#: ../../library/re.rst:886
msgid "The sequence ::"
msgstr "シーケンス ::"

#: ../../library/re.rst:891
msgid "is equivalent to ::"
msgstr "は、以下と同等です ::"

#: ../../library/re.rst:895
msgid ""
"but using :func:`re.compile` and saving the resulting regular expression "
"object for reuse is more efficient when the expression will be used several "
"times in a single program."
msgstr ""
"が、 :func:`re.compile` を使い、結果の正規表現オブジェクトを保存して再利用す"
"るほうが、一つのプログラムでその表現を何回も使うときに効率的です。"

#: ../../library/re.rst:901
msgid ""
"The compiled versions of the most recent patterns passed to :func:`re."
"compile` and the module-level matching functions are cached, so programs "
"that use only a few regular expressions at a time needn't worry about "
"compiling regular expressions."
msgstr ""
":func:`re.compile` やモジュールレベルのマッチング関数に渡された最新のパターン"
"はコンパイル済みのものがキャッシュされるので、一度に正規表現を少ししか使わな"
"いプログラムでは正規表現をコンパイルする必要はありません。"

#: ../../library/re.rst:909
msgid ""
"Scan through *string* looking for the first location where the regular "
"expression *pattern* produces a match, and return a corresponding :class:"
"`~re.Match`. Return ``None`` if no position in the string matches the "
"pattern; note that this is different from finding a zero-length match at "
"some point in the string."
msgstr ""

#: ../../library/re.rst:917
msgid ""
"If zero or more characters at the beginning of *string* match the regular "
"expression *pattern*, return a corresponding :class:`~re.Match`.  Return "
"``None`` if the string does not match the pattern; note that this is "
"different from a zero-length match."
msgstr ""

#: ../../library/re.rst:922
msgid ""
"Note that even in :const:`MULTILINE` mode, :func:`re.match` will only match "
"at the beginning of the string and not at the beginning of each line."
msgstr ""
":const:`MULTILINE` モードにおいても、:func:`re.match` は各行の先頭でマッチす"
"るのではなく、文字列の先頭でのみマッチすることに注意してください。"

#: ../../library/re.rst:925
msgid ""
"If you want to locate a match anywhere in *string*, use :func:`search` "
"instead (see also :ref:`search-vs-match`)."
msgstr ""
"*string* 中のどこででもマッチさせたいなら、代わりに :func:`search` を使ってく"
"ださい (:ref:`search-vs-match` も参照してください)。"

#: ../../library/re.rst:931
msgid ""
"If the whole *string* matches the regular expression *pattern*, return a "
"corresponding :class:`~re.Match`.  Return ``None`` if the string does not "
"match the pattern; note that this is different from a zero-length match."
msgstr ""

#: ../../library/re.rst:940
msgid ""
"Split *string* by the occurrences of *pattern*.  If capturing parentheses "
"are used in *pattern*, then the text of all groups in the pattern are also "
"returned as part of the resulting list. If *maxsplit* is nonzero, at most "
"*maxsplit* splits occur, and the remainder of the string is returned as the "
"final element of the list. ::"
msgstr ""
"*string* を、出現した *pattern* で分割します。 *pattern* 中でキャプチャの丸括"
"弧が使われていれば、パターン中の全てのグループのテキストも結果のリストの一部"
"として返されます。*maxsplit* が 0 でなければ、分割は最大 *maxsplit* 回起こ"
"り、残りの文字列はリストの最終要素として返されます。 ::"

#: ../../library/re.rst:955
msgid ""
"If there are capturing groups in the separator and it matches at the start "
"of the string, the result will start with an empty string.  The same holds "
"for the end of the string::"
msgstr ""
"セパレータ中にキャプチャグループがあり、それが文字列の先頭にマッチするなら、"
"結果は空文字列で始まります。同じことが文字列の末尾にも言えます。"

#: ../../library/re.rst:962
msgid ""
"That way, separator components are always found at the same relative indices "
"within the result list."
msgstr ""
"そうして、結果のリストにおいて、セパレータの構成要素は常に同じ相対的インデッ"
"クスに見つかります。"

#: ../../library/re.rst:965
msgid ""
"Empty matches for the pattern split the string only when not adjacent to a "
"previous empty match."
msgstr ""
"パターンへの空マッチは、直前の空マッチに隣接していないときのみ文字列を分割し"
"ます。"

#: ../../library/re.rst:977 ../../library/re.rst:1068 ../../library/re.rst:1097
msgid "Added the optional flags argument."
msgstr "オプションの flags 引数が追加されました。"

#: ../../library/re.rst:980
msgid ""
"Added support of splitting on a pattern that could match an empty string."
msgstr "空文字列にマッチしうるパターンでの分割をサポートするようになりました。"

#: ../../library/re.rst:986
msgid ""
"Return all non-overlapping matches of *pattern* in *string*, as a list of "
"strings or tuples.  The *string* is scanned left-to-right, and matches are "
"returned in the order found.  Empty matches are included in the result."
msgstr ""

#: ../../library/re.rst:990
msgid ""
"The result depends on the number of capturing groups in the pattern. If "
"there are no groups, return a list of strings matching the whole pattern.  "
"If there is exactly one group, return a list of strings matching that "
"group.  If multiple groups are present, return a list of tuples of strings "
"matching the groups.  Non-capturing groups do not affect the form of the "
"result."
msgstr ""

#: ../../library/re.rst:1002 ../../library/re.rst:1013
msgid "Non-empty matches can now start just after a previous empty match."
msgstr "空でないマッチが前の空マッチの直後から始められるようになりました。"

#: ../../library/re.rst:1008
msgid ""
"Return an :term:`iterator` yielding :class:`~re.Match` objects over all non-"
"overlapping matches for the RE *pattern* in *string*.  The *string* is "
"scanned left-to-right, and matches are returned in the order found.  Empty "
"matches are included in the result."
msgstr ""

#: ../../library/re.rst:1019
msgid ""
"Return the string obtained by replacing the leftmost non-overlapping "
"occurrences of *pattern* in *string* by the replacement *repl*.  If the "
"pattern isn't found, *string* is returned unchanged.  *repl* can be a string "
"or a function; if it is a string, any backslash escapes in it are "
"processed.  That is, ``\\n`` is converted to a single newline character, "
"``\\r`` is converted to a carriage return, and so forth.  Unknown escapes of "
"ASCII letters are reserved for future use and treated as errors.  Other "
"unknown escapes such as ``\\&`` are left alone. Backreferences, such as "
"``\\6``, are replaced with the substring matched by group 6 in the pattern. "
"For example::"
msgstr ""
"*string* 中に出現する最も左の重複しない *pattern* を置換 *repl* で置換するこ"
"とで得られる文字列を返します。\n"
"パターンが見つからない場合、 *string* がそのまま返されます。\n"
"*repl* は文字列または関数です。\n"
"*repl* が文字列の場合は、その中の全てのバックスラッシュエスケープが処理されま"
"す。\n"
"``\\n`` は 1 つの改行文字に変換され、 ``\\r`` はキャリッジリターンに変換され"
"る、などです。\n"
"ASCII 文字のエスケープで未知のものは将来使うために予約されていて、エラーとし"
"て扱われます。\n"
"それ以外の ``\\&`` のような未知のエスケープは残されます。\n"
"``\\6`` のような後方参照は、パターンのグループ 6 がマッチした部分文字列で置換"
"されます。\n"
"例えば::"

#: ../../library/re.rst:1035
msgid ""
"If *repl* is a function, it is called for every non-overlapping occurrence "
"of *pattern*.  The function takes a single :class:`~re.Match` argument, and "
"returns the replacement string.  For example::"
msgstr ""

#: ../../library/re.rst:1048
msgid "The pattern may be a string or a :class:`~re.Pattern`."
msgstr ""

#: ../../library/re.rst:1050
msgid ""
"The optional argument *count* is the maximum number of pattern occurrences "
"to be replaced; *count* must be a non-negative integer.  If omitted or zero, "
"all occurrences will be replaced. Empty matches for the pattern are replaced "
"only when not adjacent to a previous empty match, so ``sub('x*', '-', "
"'abxd')`` returns ``'-a-b--d-'``."
msgstr ""
"オプション引数 *count* は出現したパターンを置換する最大の回数です。 *count* "
"は非負整数です。省略されるか 0 なら、出現した全てが置換されます。パターンへの"
"空マッチは前の空マッチに隣接していないときのみ置換されるので、 ``sub('x*', "
"'-', 'abxd')`` は ``'-a-b--d-'`` を返します。"

#: ../../library/re.rst:1058
msgid ""
"In string-type *repl* arguments, in addition to the character escapes and "
"backreferences described above, ``\\g<name>`` will use the substring matched "
"by the group named ``name``, as defined by the ``(?P<name>...)`` syntax. "
"``\\g<number>`` uses the corresponding group number; ``\\g<2>`` is therefore "
"equivalent to ``\\2``, but isn't ambiguous in a replacement such as "
"``\\g<2>0``.  ``\\20`` would be interpreted as a reference to group 20, not "
"a reference to group 2 followed by the literal character ``'0'``.  The "
"backreference ``\\g<0>`` substitutes in the entire substring matched by the "
"RE."
msgstr ""
"文字列型 *repl* 引数では、上で述べた文字エスケープや後方参照に加えて、 "
"``\\g<name>`` は ``(?P<name>...)`` 構文で定義された ``name`` という名前のグ"
"ループがマッチした部分文字列を使い、 ``\\g<number>`` は対応するグループ番号を"
"使います。よって ``\\g<2>`` は ``\\2`` と等価ですが、 ``\\g<2>0`` のような置"
"換においても曖昧になりません。 ``\\20`` は、グループ 20 への参照として解釈さ"
"れ、グループ 2 への参照にリテラル文字 ``'0'`` が続いたものとしては解釈されま"
"せん。後方参照 ``\\g<0>`` は正規表現とマッチした部分文字列全体で置き換わりま"
"す。"

#: ../../library/re.rst:1071 ../../library/re.rst:1100
#: ../../library/re.rst:1343
msgid "Unmatched groups are replaced with an empty string."
msgstr "マッチしなかったグループは空文字列に置き換えられます。"

#: ../../library/re.rst:1074
msgid ""
"Unknown escapes in *pattern* consisting of ``'\\'`` and an ASCII letter now "
"are errors."
msgstr ""
"*pattern* 中に ``'\\'`` と ASCII 文字からなる未知のエスケープがあると、エラー"
"になります。"

#: ../../library/re.rst:1078
msgid ""
"Unknown escapes in *repl* consisting of ``'\\'`` and an ASCII letter now are "
"errors."
msgstr ""
"*repl* 中に ``'\\'`` と ASCII 文字からなる未知のエスケープがあると、エラーに"
"なります。"

#: ../../library/re.rst:1082
msgid ""
"Empty matches for the pattern are replaced when adjacent to a previous non-"
"empty match."
msgstr ""
"パターンへの空マッチは前の空でないマッチに隣接しているとき置き換えられます。"

#: ../../library/re.rst:1086
msgid ""
"Group *id* can only contain ASCII digits. In :class:`bytes` replacement "
"strings, group *name* can only contain bytes in the ASCII range "
"(``b'\\x00'``-``b'\\x7f'``)."
msgstr ""

#: ../../library/re.rst:1094
msgid ""
"Perform the same operation as :func:`sub`, but return a tuple ``(new_string, "
"number_of_subs_made)``."
msgstr ""
":func:`sub` と同じ操作を行いますが、タプル ``(new_string、 "
"number_of_subs_made)`` を返します。"

#: ../../library/re.rst:1106
msgid ""
"Escape special characters in *pattern*. This is useful if you want to match "
"an arbitrary literal string that may have regular expression metacharacters "
"in it.  For example::"
msgstr ""
"*pattern* 中の特殊文字をエスケープします。これは正規表現メタ文字を含みうる任"
"意のリテラル文字列にマッチしたい時に便利です。"

#: ../../library/re.rst:1121
msgid ""
"This function must not be used for the replacement string in :func:`sub` "
"and :func:`subn`, only backslashes should be escaped.  For example::"
msgstr ""
"この関数は、バックスラッシュのみをエスケープするべき :func:`sub` および :"
"func:`subn` における置換文字列に使われてはなりません。例えば::"

#: ../../library/re.rst:1129
msgid "The ``'_'`` character is no longer escaped."
msgstr "``'_'`` 文字がエスケープされなくなりました。"

#: ../../library/re.rst:1132
msgid ""
"Only characters that can have special meaning in a regular expression are "
"escaped. As a result, ``'!'``, ``'\"'``, ``'%'``, ``\"'\"``, ``','``, "
"``'/'``, ``':'``, ``';'``, ``'<'``, ``'='``, ``'>'``, ``'@'``, and ``\"`\"`` "
"are no longer escaped."
msgstr ""
"正規表現で特別な意味を持つ文字だけがエスケープされます。結果として、 "
"``'!'``、 ``'\"'``、 ``'%'``、 ``\"'\"``、 ``','``、 ``'/'``、 ``':'``、 "
"``';'``、 ``'<'``、 ``'='``、 ``'>'``、 ``'@'``、 と ``\"`\"`` はもはやエス"
"ケープされません。"

#: ../../library/re.rst:1141
msgid "Clear the regular expression cache."
msgstr "正規表現キャッシュをクリアします。"

#: ../../library/re.rst:1145
msgid "Exceptions"
msgstr "例外"

#: ../../library/re.rst:1149
msgid ""
"Exception raised when a string passed to one of the functions here is not a "
"valid regular expression (for example, it might contain unmatched "
"parentheses) or when some other error occurs during compilation or "
"matching.  It is never an error if a string contains no match for a "
"pattern.  The error instance has the following additional attributes:"
msgstr ""
"ここの関数のいずれかに渡された文字列が有効な正規表現ではない (例: 括弧が対に"
"なっていない) とき、またはコンパイルやマッチングの際にその他なんらかのエラー"
"が発生した場合に送出される例外です。文字列にパターンとマッチする部分がなくて"
"も、それはエラーではありません。エラーインスタンスには、次のような追加の属性"
"があります。"

#: ../../library/re.rst:1157
msgid "The unformatted error message."
msgstr "フォーマットされていないエラーメッセージです。"

#: ../../library/re.rst:1161
msgid "The regular expression pattern."
msgstr "正規表現のパターンです。"

#: ../../library/re.rst:1165
msgid "The index in *pattern* where compilation failed (may be ``None``)."
msgstr ""
"*pattern* のコンパイルに失敗した場所のインデックスです (``None`` の場合もあり"
"ます)。"

#: ../../library/re.rst:1169
msgid "The line corresponding to *pos* (may be ``None``)."
msgstr "*pos* に対応する行です (``None`` の場合もあります)。"

#: ../../library/re.rst:1173
msgid "The column corresponding to *pos* (may be ``None``)."
msgstr "*pos* に対応する列です (``None`` の場合もあります)。"

#: ../../library/re.rst:1175
msgid "Added additional attributes."
msgstr "追加の属性が追加されました。"

#: ../../library/re.rst:1181
msgid "Regular Expression Objects"
msgstr "正規表現オブジェクト"

#: ../../library/re.rst:1185
msgid "Compiled regular expression object returned by :func:`re.compile`."
msgstr ""

#: ../../library/re.rst:1187
msgid ""
":py:class:`re.Pattern` supports ``[]`` to indicate a Unicode (str) or bytes "
"pattern. See :ref:`types-genericalias`."
msgstr ""

#: ../../library/re.rst:1193
msgid ""
"Scan through *string* looking for the first location where this regular "
"expression produces a match, and return a corresponding :class:`~re.Match`. "
"Return ``None`` if no position in the string matches the pattern; note that "
"this is different from finding a zero-length match at some point in the "
"string."
msgstr ""

#: ../../library/re.rst:1198
msgid ""
"The optional second parameter *pos* gives an index in the string where the "
"search is to start; it defaults to ``0``.  This is not completely equivalent "
"to slicing the string; the ``'^'`` pattern character matches at the real "
"beginning of the string and at positions just after a newline, but not "
"necessarily at the index where the search is to start."
msgstr ""
"オプションの第二引数 *pos* は、文字列のどこから探し始めるかを指定するインデッ"
"クスで、デフォルトでは 0 です。これは文字列のスライスと完全には同じではありま"
"せん。パターン文字 ``'^'`` は本当の文字列の先頭と改行の直後でマッチしますが、"
"検索を開始するインデックスでマッチするとは限りません。"

#: ../../library/re.rst:1204
msgid ""
"The optional parameter *endpos* limits how far the string will be searched; "
"it will be as if the string is *endpos* characters long, so only the "
"characters from *pos* to ``endpos - 1`` will be searched for a match.  If "
"*endpos* is less than *pos*, no match will be found; otherwise, if *rx* is a "
"compiled regular expression object, ``rx.search(string, 0, 50)`` is "
"equivalent to ``rx.search(string[:50], 0)``. ::"
msgstr ""
"オプションの引数 *endpos* は文字列がどこまで検索されるかを制限します。文字列"
"の長さが *endpos* 文字だったかのようになるので、*pos* から ``endpos - 1`` の"
"文字に対してだけマッチを探します。*endpos* が *pos* よりも小さいと、マッチは"
"見つかりません。そうでなければ、*rx* をコンパイル済み正規表現オブジェクトとし"
"て、``rx.search(string, 0, 50)`` は ``rx.search(string[:50], 0)`` と等価で"
"す。 ::"

#: ../../library/re.rst:1219
msgid ""
"If zero or more characters at the *beginning* of *string* match this regular "
"expression, return a corresponding :class:`~re.Match`. Return ``None`` if "
"the string does not match the pattern; note that this is different from a "
"zero-length match."
msgstr ""

#: ../../library/re.rst:1224 ../../library/re.rst:1242
msgid ""
"The optional *pos* and *endpos* parameters have the same meaning as for the :"
"meth:`~Pattern.search` method. ::"
msgstr ""
"オプションの *pos* および *endpos* 引数は :meth:`~Pattern.search` メソッドの"
"ものと同じ意味です。"

#: ../../library/re.rst:1232
msgid ""
"If you want to locate a match anywhere in *string*, use :meth:`~Pattern."
"search` instead (see also :ref:`search-vs-match`)."
msgstr ""
"*string* 中のどこででもマッチさせたいなら、代わりに :meth:`~Pattern.search` "
"を使ってください (:ref:`search-vs-match` も参照してください)。"

#: ../../library/re.rst:1238
msgid ""
"If the whole *string* matches this regular expression, return a "
"corresponding :class:`~re.Match`.  Return ``None`` if the string does not "
"match the pattern; note that this is different from a zero-length match."
msgstr ""

#: ../../library/re.rst:1256
msgid "Identical to the :func:`split` function, using the compiled pattern."
msgstr ":func:`split` 関数にこのコンパイル済みパターンを使うのと同じです。"

#: ../../library/re.rst:1261
msgid ""
"Similar to the :func:`findall` function, using the compiled pattern, but "
"also accepts optional *pos* and *endpos* parameters that limit the search "
"region like for :meth:`search`."
msgstr ""
":func:`findall` 関数にこのコンパイル済みパターンを使うのと似ていますが、オプ"
"ションの *pos* および *endpos* 引数で :meth:`search` のように検索範囲を制限で"
"きます。"

#: ../../library/re.rst:1268
msgid ""
"Similar to the :func:`finditer` function, using the compiled pattern, but "
"also accepts optional *pos* and *endpos* parameters that limit the search "
"region like for :meth:`search`."
msgstr ""
":func:`finditer` 関数にこのコンパイル済みパターンを使うのと似ていますが、オプ"
"ションの *pos* および *endpos* 引数で :meth:`search` のように検索範囲を制限で"
"きます。"

#: ../../library/re.rst:1275
msgid "Identical to the :func:`sub` function, using the compiled pattern."
msgstr ":func:`sub` 関数にこのコンパイル済みパターンを使うのと同じです。"

#: ../../library/re.rst:1280
msgid "Identical to the :func:`subn` function, using the compiled pattern."
msgstr ":func:`subn` 関数にこのコンパイル済みパターンを使うのと同じです。"

#: ../../library/re.rst:1285
msgid ""
"The regex matching flags.  This is a combination of the flags given to :func:"
"`.compile`, any ``(?...)`` inline flags in the pattern, and implicit flags "
"such as :py:const:`~re.UNICODE` if the pattern is a Unicode string."
msgstr ""

#: ../../library/re.rst:1292
msgid "The number of capturing groups in the pattern."
msgstr "パターン中のキャプチャグループの数です。"

#: ../../library/re.rst:1297
msgid ""
"A dictionary mapping any symbolic group names defined by ``(?P<id>)`` to "
"group numbers.  The dictionary is empty if no symbolic groups were used in "
"the pattern."
msgstr ""
"``(?P<id>)`` で定義されたあらゆるシンボリックグループ名をグループ番号へ写像す"
"る辞書です。シンボリックグループがパターン中で全く使われていなければ、この辞"
"書は空です。"

#: ../../library/re.rst:1304
msgid "The pattern string from which the pattern object was compiled."
msgstr "パターンオブジェクトがコンパイルされた元のパターン文字列です。"

#: ../../library/re.rst:1307
msgid ""
"Added support of :func:`copy.copy` and :func:`copy.deepcopy`.  Compiled "
"regular expression objects are considered atomic."
msgstr ""
":func:`copy.copy` および :func:`copy.deepcopy` をサポートするようになりまし"
"た。コンパイル済み正規表現オブジェクトはアトミックであると見なされます。"

#: ../../library/re.rst:1315
msgid "Match Objects"
msgstr "マッチオブジェクト"

#: ../../library/re.rst:1317
msgid ""
"Match objects always have a boolean value of ``True``. Since :meth:`~Pattern."
"match` and :meth:`~Pattern.search` return ``None`` when there is no match, "
"you can test whether there was a match with a simple ``if`` statement::"
msgstr ""
"マッチオブジェクトのブール値は常に ``True`` です。 :meth:`~Pattern.match` お"
"よび :meth:`~Pattern.search` はマッチがないとき ``None`` を返すので、マッチが"
"あるか単純な ``if`` 文で判定できます。"

#: ../../library/re.rst:1328
msgid "Match object returned by successful ``match``\\ es and ``search``\\ es."
msgstr ""

#: ../../library/re.rst:1330
msgid ""
":py:class:`re.Match` supports ``[]`` to indicate a Unicode (str) or bytes "
"match. See :ref:`types-genericalias`."
msgstr ""

#: ../../library/re.rst:1336
msgid ""
"Return the string obtained by doing backslash substitution on the template "
"string *template*, as done by the :meth:`~Pattern.sub` method. Escapes such "
"as ``\\n`` are converted to the appropriate characters, and numeric "
"backreferences (``\\1``, ``\\2``) and named backreferences (``\\g<1>``, "
"``\\g<name>``) are replaced by the contents of the corresponding group."
msgstr ""
"テンプレート文字列 *template* に :meth:`~Pattern.sub` メソッドの行うバックス"
"ラッシュ置換を行って得られる文字列を返します。 ``\\n`` のようなエスケープは適"
"切な文字に変換され、数後方参照 (``\\1``, ``\\2``) および名前付き後方参照 "
"(``\\g<1>``, ``\\g<name>``) は対応するグループの内容に置換されます。"

#: ../../library/re.rst:1348
msgid ""
"Returns one or more subgroups of the match.  If there is a single argument, "
"the result is a single string; if there are multiple arguments, the result "
"is a tuple with one item per argument. Without arguments, *group1* defaults "
"to zero (the whole match is returned). If a *groupN* argument is zero, the "
"corresponding return value is the entire matching string; if it is in the "
"inclusive range [1..99], it is the string matching the corresponding "
"parenthesized group.  If a group number is negative or larger than the "
"number of groups defined in the pattern, an :exc:`IndexError` exception is "
"raised. If a group is contained in a part of the pattern that did not match, "
"the corresponding result is ``None``. If a group is contained in a part of "
"the pattern that matched multiple times, the last match is returned. ::"
msgstr ""
"このマッチの 1 つ以上のサブグループを返します。引数が 1 つなら結果は 1 つの文"
"字列です。複数の引数があれば、結果は引数ごとに 1 項目のタプルです。引数がなけ"
"れば、 *group1* はデフォルトで 0 (マッチ全体が返される) です。 *groupN* 引数"
"が 0 なら、対応する返り値はマッチした文字列全体です。1 以上 99 以下なら、丸括"
"弧による対応するグループにマッチする文字列です。グループ番号が負であるかパ"
"ターン中で定義されたグループの数より大きければ、 :exc:`IndexError` 例外が送出"
"されます。あるグループがパターンのマッチしなかった部分に含まれているなら、対"
"応する結果は ``None`` です。あるグループがパターンの複数回マッチした部分に含"
"まれているなら、最後のマッチが返されます。 ::"

#: ../../library/re.rst:1370
msgid ""
"If the regular expression uses the ``(?P<name>...)`` syntax, the *groupN* "
"arguments may also be strings identifying groups by their group name.  If a "
"string argument is not used as a group name in the pattern, an :exc:"
"`IndexError` exception is raised."
msgstr ""
"正規表現が ``(?P<name>...)`` 構文を使うなら、 *groupN* 引数はグループ名でグ"
"ループを識別する文字列でも構いません。文字列引数がパターン中でグループ名とし"
"て使われていなければ、 :exc:`IndexError` 例外が送出されます。"

#: ../../library/re.rst:1375
msgid "A moderately complicated example::"
msgstr "やや複雑な例::"

#: ../../library/re.rst:1383
msgid "Named groups can also be referred to by their index::"
msgstr "名前付きグループはインデックスでも参照できます::"

#: ../../library/re.rst:1390
msgid "If a group matches multiple times, only the last match is accessible::"
msgstr ""
"あるグループが複数回マッチすると、その最後のマッチにのみアクセスできます::"

#: ../../library/re.rst:1399
msgid ""
"This is identical to ``m.group(g)``.  This allows easier access to an "
"individual group from a match::"
msgstr ""
"これは ``m.group(g)`` と同等です。これでマッチの個別のグループに簡単にアクセ"
"スできます::"

#: ../../library/re.rst:1410
msgid "Named groups are supported as well::"
msgstr ""

#: ../../library/re.rst:1423
msgid ""
"Return a tuple containing all the subgroups of the match, from 1 up to "
"however many groups are in the pattern.  The *default* argument is used for "
"groups that did not participate in the match; it defaults to ``None``."
msgstr ""
"このマッチの、1 からパターン中のグループ数まで、全てのサブグループを含むタプ"
"ルを返します。*default* 引数はマッチに関係しなかったグループに使われます。デ"
"フォルトでは ``None`` です。"

#: ../../library/re.rst:1427 ../../library/re.rst:1652
msgid "For example::"
msgstr "例えば::"

#: ../../library/re.rst:1433
msgid ""
"If we make the decimal place and everything after it optional, not all "
"groups might participate in the match.  These groups will default to "
"``None`` unless the *default* argument is given::"
msgstr ""
"少数位およびその後の全てをオプションにすると、全てのグループがマッチに関係す"
"るとは限りません。そういったグループは *default* 引数が与えられない限りデフォ"
"ルトで ``None`` になります。"

#: ../../library/re.rst:1446
msgid ""
"Return a dictionary containing all the *named* subgroups of the match, keyed "
"by the subgroup name.  The *default* argument is used for groups that did "
"not participate in the match; it defaults to ``None``.  For example::"
msgstr ""
"このマッチの、全ての *名前付き* サブグループを含む、サブグループ名をキーとす"
"る辞書を返します。 *default* 引数はマッチに関係しなかったグループに使われま"
"す。デフォルトは ``None`` です。例えば::"

#: ../../library/re.rst:1458
msgid ""
"Return the indices of the start and end of the substring matched by *group*; "
"*group* defaults to zero (meaning the whole matched substring). Return "
"``-1`` if *group* exists but did not contribute to the match.  For a match "
"object *m*, and a group *g* that did contribute to the match, the substring "
"matched by group *g* (equivalent to ``m.group(g)``) is ::"
msgstr ""
"*group* がマッチした部分文字列の先頭と末尾のインデックスを返します。 *group* "
"はデフォルトで 0 (マッチした部分文字列全体という意味) です。 *group* が存在し"
"てかつマッチには寄与していなかったなら ``-1`` を返します。マッチオブジェクト "
"*m* と、マッチに寄与したグループ *g* に対して、グループ *g* がマッチした部分"
"文字列 (``m.group(g)`` と等価です) は以下の通りです ::"

#: ../../library/re.rst:1466
msgid ""
"Note that ``m.start(group)`` will equal ``m.end(group)`` if *group* matched "
"a null string.  For example, after ``m = re.search('b(c?)', 'cba')``, ``m."
"start(0)`` is 1, ``m.end(0)`` is 2, ``m.start(1)`` and ``m.end(1)`` are both "
"2, and ``m.start(2)`` raises an :exc:`IndexError` exception."
msgstr ""
"*group* が空文字列にマッチしていたら ``m.start(group)`` は ``m.end(group)`` "
"と等しくなることに注意して下さい。例えば、 ``m = re.search('b(c?)', 'cba')`` "
"とすると、 ``m.start(0)`` は 1 で、 ``m.end(0)`` は 2 で、 ``m.start(1)`` と "
"``m.end(1)`` はともに 2 であり、 ``m.start(2)`` は :exc:`IndexError` 例外を発"
"生します。"

#: ../../library/re.rst:1471
msgid "An example that will remove *remove_this* from email addresses::"
msgstr "メールアドレスから *remove_this* を取り除く例::"

#: ../../library/re.rst:1481
msgid ""
"For a match *m*, return the 2-tuple ``(m.start(group), m.end(group))``. Note "
"that if *group* did not contribute to the match, this is ``(-1, -1)``. "
"*group* defaults to zero, the entire match."
msgstr ""
"マッチ *m* について、2 タプル ``(m.start(group), m.end(group))`` を返しま"
"す。 *group* がマッチに寄与していなければ、これは ``(-1, -1)`` です。 "
"*group* はデフォルトで 0 、マッチ全体です。"

#: ../../library/re.rst:1488
msgid ""
"The value of *pos* which was passed to the :meth:`~Pattern.search` or :meth:"
"`~Pattern.match` method of a :ref:`regex object <re-objects>`.  This is the "
"index into the string at which the RE engine started looking for a match."
msgstr ""
":ref:`正規表現オブジェクト <re-objects>` の :meth:`~Pattern.search` や :meth:"
"`~Pattern.match` に渡された *pos* の値です。これは正規表現エンジンがマッチを"
"探し始める位置の文字列のインデックスです。"

#: ../../library/re.rst:1495
msgid ""
"The value of *endpos* which was passed to the :meth:`~Pattern.search` or :"
"meth:`~Pattern.match` method of a :ref:`regex object <re-objects>`.  This is "
"the index into the string beyond which the RE engine will not go."
msgstr ""
":ref:`正規表現オブジェクト <re-objects>` の :meth:`~Pattern.search` や :meth:"
"`~Pattern.match` に渡された *endpos* の値です。これは正規表現エンジンがそれ以"
"上は進まない文字列のインデックスです。"

#: ../../library/re.rst:1502
msgid ""
"The integer index of the last matched capturing group, or ``None`` if no "
"group was matched at all. For example, the expressions ``(a)b``, ``((a)"
"(b))``, and ``((ab))`` will have ``lastindex == 1`` if applied to the string "
"``'ab'``, while the expression ``(a)(b)`` will have ``lastindex == 2``, if "
"applied to the same string."
msgstr ""
"最後にマッチしたキャプチャグループの整数インデックスです。どのグループも全く"
"マッチしなければ ``None`` です。例えば、表現 ``(a)b`` 、 ``((a)(b))`` や "
"``((ab))`` が ``'ab'`` に適用されると ``lastindex == 1`` となり、同じ文字列"
"に ``(a)(b)`` が適用されると ``lastindex == 2`` となります。"

#: ../../library/re.rst:1511
msgid ""
"The name of the last matched capturing group, or ``None`` if the group "
"didn't have a name, or if no group was matched at all."
msgstr ""
"最後にマッチしたキャプチャグループの名前です。そのグループに名前がないか、ど"
"のグループも全くマッチしていなければ ``None`` です。"

#: ../../library/re.rst:1517
msgid ""
"The :ref:`regular expression object <re-objects>` whose :meth:`~Pattern."
"match` or :meth:`~Pattern.search` method produced this match instance."
msgstr ""
"このマッチインスタンスを生じさせた :meth:`~Pattern.match` または :meth:"
"`~Pattern.search` メソッドの属する :ref:`正規表現オブジェクト <re-objects>` "
"です。"

#: ../../library/re.rst:1523
msgid "The string passed to :meth:`~Pattern.match` or :meth:`~Pattern.search`."
msgstr ""
":meth:`~Pattern.match` や :meth:`~Pattern.search` へ渡された文字列です。"

#: ../../library/re.rst:1526
msgid ""
"Added support of :func:`copy.copy` and :func:`copy.deepcopy`.  Match objects "
"are considered atomic."
msgstr ""
":func:`copy.copy` および :func:`copy.deepcopy` をサポートするようになりまし"
"た。マッチオブジェクトはアトミックであると見なされます。"

#: ../../library/re.rst:1534
msgid "Regular Expression Examples"
msgstr "正規表現の例"

#: ../../library/re.rst:1538
msgid "Checking for a Pair"
msgstr "ペアの確認"

#: ../../library/re.rst:1540
msgid ""
"In this example, we'll use the following helper function to display match "
"objects a little more gracefully::"
msgstr ""
"この例では、マッチオブジェクトをより美しく表示するために、この補助関数を使用"
"します:: "

#: ../../library/re.rst:1548
msgid ""
"Suppose you are writing a poker program where a player's hand is represented "
"as a 5-character string with each character representing a card, \"a\" for "
"ace, \"k\" for king, \"q\" for queen, \"j\" for jack, \"t\" for 10, and "
"\"2\" through \"9\" representing the card with that value."
msgstr ""
"あなたがポーカープログラムを書いているとします。プレイヤーの手札は 5 文字の文"
"字列によって表され、それぞれの文字が 1 枚のカードを表します。 \"a\" はエー"
"ス、 \"k\" はキング、 \"q\" はクイーン、 \"j\" はジャック、 \"t\" は 10、そし"
"て \"2\" から \"9\" はその数字のカードを表します。"

#: ../../library/re.rst:1553
msgid "To see if a given string is a valid hand, one could do the following::"
msgstr "与えられた文字列が有効な手札であるか見るには、以下のようにできます::"

#: ../../library/re.rst:1563
msgid ""
"That last hand, ``\"727ak\"``, contained a pair, or two of the same valued "
"cards. To match this with a regular expression, one could use backreferences "
"as such::"
msgstr ""
"最後の手札、 ``\"727ak\"`` 、はペア、すなわち同じ値の 2 枚のカードを含みま"
"す。正規表現でこれにマッチするには、このように後方参照を使えます::"

#: ../../library/re.rst:1573
msgid ""
"To find out what card the pair consists of, one could use the :meth:`~Match."
"group` method of the match object in the following manner::"
msgstr ""
"ペアになっているのがどのカードか調べるには、このようにマッチオブジェクトの :"
"meth:`~Match.group` メソッドを使えます::"

#: ../../library/re.rst:1592
msgid "Simulating scanf()"
msgstr "scanf() をシミュレートする"

#: ../../library/re.rst:1596
msgid ""
"Python does not currently have an equivalent to :c:func:`!scanf`.  Regular "
"expressions are generally more powerful, though also more verbose, than :c:"
"func:`!scanf` format strings.  The table below offers some more-or-less "
"equivalent mappings between :c:func:`!scanf` format tokens and regular "
"expressions."
msgstr ""

#: ../../library/re.rst:1603
msgid ":c:func:`!scanf` Token"
msgstr ""

#: ../../library/re.rst:1603
msgid "Regular Expression"
msgstr "正規表現"

#: ../../library/re.rst:1605
msgid "``%c``"
msgstr "``%c``"

#: ../../library/re.rst:1607
msgid "``%5c``"
msgstr "``%5c``"

#: ../../library/re.rst:1607
msgid "``.{5}``"
msgstr "``.{5}``"

#: ../../library/re.rst:1609
msgid "``%d``"
msgstr "``%d``"

#: ../../library/re.rst:1609
msgid "``[-+]?\\d+``"
msgstr "``[-+]?\\d+``"

#: ../../library/re.rst:1611
msgid "``%e``, ``%E``, ``%f``, ``%g``"
msgstr "``%e``, ``%E``, ``%f``, ``%g``"

#: ../../library/re.rst:1611
msgid "``[-+]?(\\d+(\\.\\d*)?|\\.\\d+)([eE][-+]?\\d+)?``"
msgstr "``[-+]?(\\d+(\\.\\d*)?|\\.\\d+)([eE][-+]?\\d+)?``"

#: ../../library/re.rst:1613
msgid "``%i``"
msgstr "``%i``"

#: ../../library/re.rst:1613
msgid "``[-+]?(0[xX][\\dA-Fa-f]+|0[0-7]*|\\d+)``"
msgstr "``[-+]?(0[xX][\\dA-Fa-f]+|0[0-7]*|\\d+)``"

#: ../../library/re.rst:1615
msgid "``%o``"
msgstr "``%o``"

#: ../../library/re.rst:1615
msgid "``[-+]?[0-7]+``"
msgstr "``[-+]?[0-7]+``"

#: ../../library/re.rst:1617
msgid "``%s``"
msgstr "``%s``"

#: ../../library/re.rst:1617
msgid "``\\S+``"
msgstr "``\\S+``"

#: ../../library/re.rst:1619
msgid "``%u``"
msgstr "``%u``"

#: ../../library/re.rst:1619
msgid "``\\d+``"
msgstr "``\\d+``"

#: ../../library/re.rst:1621
msgid "``%x``, ``%X``"
msgstr "``%x``, ``%X``"

#: ../../library/re.rst:1621
msgid "``[-+]?(0[xX])?[\\dA-Fa-f]+``"
msgstr "``[-+]?(0[xX])?[\\dA-Fa-f]+``"

#: ../../library/re.rst:1624
msgid "To extract the filename and numbers from a string like ::"
msgstr "以下のような文字列からファイル名と数を抽出するには ::"

#: ../../library/re.rst:1628
msgid "you would use a :c:func:`!scanf` format like ::"
msgstr ""

#: ../../library/re.rst:1632
msgid "The equivalent regular expression would be ::"
msgstr "等価な正規表現はこうです ::"

#: ../../library/re.rst:1640
msgid "search() vs. match()"
msgstr "search() vs. match()"

#: ../../library/re.rst:1644
msgid ""
"Python offers different primitive operations based on regular expressions:"
msgstr ""

#: ../../library/re.rst:1646
msgid ":func:`re.match` checks for a match only at the beginning of the string"
msgstr ""

#: ../../library/re.rst:1647
msgid ""
":func:`re.search` checks for a match anywhere in the string (this is what "
"Perl does by default)"
msgstr ""

#: ../../library/re.rst:1649
msgid ":func:`re.fullmatch` checks for entire string to be a match"
msgstr ""

#: ../../library/re.rst:1661
msgid ""
"Regular expressions beginning with ``'^'`` can be used with :func:`search` "
"to restrict the match at the beginning of the string::"
msgstr ""
"``'^'`` で始まる正規表現を :func:`search` で使って、マッチを文字列の先頭での"
"みに制限できます::"

#: ../../library/re.rst:1669
msgid ""
"Note however that in :const:`MULTILINE` mode :func:`match` only matches at "
"the beginning of the string, whereas using :func:`search` with a regular "
"expression beginning with ``'^'`` will match at the beginning of each "
"line. ::"
msgstr ""
"ただし、 :const:`MULTILINE` モードにおいて :func:`match` は文字列の先頭でのみ"
"マッチし、 ``'^'`` で始まる正規表現で :func:`search` を使うと各行の先頭でマッ"
"チすることに注意してください。"

#: ../../library/re.rst:1679
msgid "Making a Phonebook"
msgstr "電話帳を作る"

#: ../../library/re.rst:1681
msgid ""
":func:`split` splits a string into a list delimited by the passed pattern.  "
"The method is invaluable for converting textual data into data structures "
"that can be easily read and modified by Python as demonstrated in the "
"following example that creates a phonebook."
msgstr ""
":func:`split` は渡されたパターンで文字列を分割してリストにします。このメソッ"
"ドは、テキストデータをデータ構造に変換して、読みやすくしたり、以下の例で実演"
"する電話帳作成のように Python で編集したりしやすくするのに、非常に役に立ちま"
"す。"

#: ../../library/re.rst:1686
msgid ""
"First, here is the input.  Normally it may come from a file, here we are "
"using triple-quoted string syntax"
msgstr ""
"最初に、入力を示します。通常、これはファイルからの入力になるでしょう。ここで"
"は、3重引用符の書式とします。"

#: ../../library/re.rst:1699
msgid ""
"The entries are separated by one or more newlines. Now we convert the string "
"into a list with each nonempty line having its own entry:"
msgstr ""
"各項目は 1 つ以上の改行で区切られています。まずは文字列を変換して、空行でない"
"各行を項目とするリストにします:"

#: ../../library/re.rst:1712
msgid ""
"Finally, split each entry into a list with first name, last name, telephone "
"number, and address.  We use the ``maxsplit`` parameter of :func:`split` "
"because the address has spaces, our splitting pattern, in it:"
msgstr ""
"そして各項目を、ファーストネーム、ラストネーム、電話番号、住所に分割してリス"
"トにします。分割パターンである空白文字は住所にも含まれるので、 :func:`split` "
"の ``maxsplit`` 引数を使います:"

#: ../../library/re.rst:1725
msgid ""
"The ``:?`` pattern matches the colon after the last name, so that it does "
"not occur in the result list.  With a ``maxsplit`` of ``4``, we could "
"separate the house number from the street name:"
msgstr ""
"この ``:?`` パターンはラストネームの次のコロンにマッチして、分割結果のリスト"
"に出てこないようにします。 ``maxsplit`` を ``4`` にすれば、家屋番号とストリー"
"ト名を分割できます:"

#: ../../library/re.rst:1740
msgid "Text Munging"
msgstr "テキストの秘匿"

#: ../../library/re.rst:1742
msgid ""
":func:`sub` replaces every occurrence of a pattern with a string or the "
"result of a function.  This example demonstrates using :func:`sub` with a "
"function to \"munge\" text, or randomize the order of all the characters in "
"each word of a sentence except for the first and last characters::"
msgstr ""
":func:`sub` は出現する各パターンを文字列で、または関数の返り値で置き換えま"
"す。この例ではテキストを「秘匿」する関数と合わせて :func:`sub` を使うところを"
"実演します。具体的には、文中の各単語について、最初と最後の文字を除く全ての文"
"字をランダムに並び替えます::"

#: ../../library/re.rst:1760
msgid "Finding all Adverbs"
msgstr "全ての副詞を見つける"

#: ../../library/re.rst:1762
msgid ""
":func:`findall` matches *all* occurrences of a pattern, not just the first "
"one as :func:`search` does.  For example, if a writer wanted to find all of "
"the adverbs in some text, they might use :func:`findall` in the following "
"manner::"
msgstr ""
":func:`search` は最初のパターンにのみマッチしますが、 :func:`findall` は出現"
"する *全ての* パターンにマッチします。例えば、ライターがあるテキストの全ての"
"副詞を見つけたいなら、以下のように :func:`findall` を使えます::"

#: ../../library/re.rst:1773
msgid "Finding all Adverbs and their Positions"
msgstr "全ての副詞とその位置を見つける"

#: ../../library/re.rst:1775
msgid ""
"If one wants more information about all matches of a pattern than the "
"matched text, :func:`finditer` is useful as it provides :class:`~re.Match` "
"objects instead of strings.  Continuing with the previous example, if a "
"writer wanted to find all of the adverbs *and their positions* in some text, "
"they would use :func:`finditer` in the following manner::"
msgstr ""

#: ../../library/re.rst:1789
msgid "Raw String Notation"
msgstr "Raw 文字列記法"

#: ../../library/re.rst:1791
msgid ""
"Raw string notation (``r\"text\"``) keeps regular expressions sane.  Without "
"it, every backslash (``'\\'``) in a regular expression would have to be "
"prefixed with another one to escape it.  For example, the two following "
"lines of code are functionally identical::"
msgstr ""
"Raw 文字列記法 (``r\"text\"``) で正規表現をまともに保てます。それがなければ、"
"正規表現中のバックスラッシュ (``'\\'``) を個々にバックスラッシュを前置してエ"
"スケープしなければなりません。例えば、以下の 2 行のコードは機能的に等価です::"

#: ../../library/re.rst:1801
msgid ""
"When one wants to match a literal backslash, it must be escaped in the "
"regular expression.  With raw string notation, this means ``r\"\\\\\"``.  "
"Without raw string notation, one must use ``\"\\\\\\\\\"``, making the "
"following lines of code functionally identical::"
msgstr ""
"リテラルのバックスラッシュにマッチさせたいなら、正規表現中ではエスケープする"
"必要があります。Raw 文字列記法では、``r\"\\\\\"``  になります。Raw 文字列記法"
"を用いないと、``\"\\\\\\\\\"`` としなくてはならず、以下のコードは機能的に等価"
"です::"

#: ../../library/re.rst:1813
msgid "Writing a Tokenizer"
msgstr "トークナイザを書く"

#: ../../library/re.rst:1815
msgid ""
"A `tokenizer or scanner <https://en.wikipedia.org/wiki/Lexical_analysis>`_ "
"analyzes a string to categorize groups of characters.  This is a useful "
"first step in writing a compiler or interpreter."
msgstr ""
"`トークナイザやスキャナ <https://en.wikipedia.org/wiki/Lexical_analysis>`_ は"
"文字列を解析し、文字のグループにカテゴリ分けします。これはコンパイラやインタ"
"プリタを書くうえで役立つ第一段階です。"

#: ../../library/re.rst:1819
msgid ""
"The text categories are specified with regular expressions.  The technique "
"is to combine those into a single master regular expression and to loop over "
"successive matches::"
msgstr ""
"テキストのカテゴリは正規表現で指定されます。この技法では、それらを一つのマス"
"ター正規表現に結合し、マッチの連続についてループします::"

#: ../../library/re.rst:1875
msgid "The tokenizer produces the following output::"
msgstr "このトークナイザは以下の出力を作成します::"

#: ../../library/re.rst:1898
msgid ""
"Friedl, Jeffrey. Mastering Regular Expressions. 3rd ed., O'Reilly Media, "
"2009. The third edition of the book no longer covers Python at all, but the "
"first edition covered writing good regular expression patterns in great "
"detail."
msgstr ""
"Friedl, Jeffrey. Mastering Regular Expressions. 3rd ed., O'Reilly Media, "
"2009. 当書の第三版ではもはや Python についてまったく取り扱っていませんが、初"
"版では良い正規表現を書くことを綿密に取り扱っていました。"

#: ../../library/re.rst:99
msgid ". (dot)"
msgstr ". (ドット)"

#: ../../library/re.rst:99 ../../library/re.rst:106 ../../library/re.rst:112
#: ../../library/re.rst:123 ../../library/re.rst:130 ../../library/re.rst:137
#: ../../library/re.rst:143 ../../library/re.rst:157 ../../library/re.rst:181
#: ../../library/re.rst:220 ../../library/re.rst:235 ../../library/re.rst:244
#: ../../library/re.rst:257 ../../library/re.rst:262 ../../library/re.rst:295
#: ../../library/re.rst:308 ../../library/re.rst:318 ../../library/re.rst:350
#: ../../library/re.rst:405 ../../library/re.rst:437 ../../library/re.rst:443
#: ../../library/re.rst:448 ../../library/re.rst:455 ../../library/re.rst:462
#: ../../library/re.rst:489 ../../library/re.rst:499 ../../library/re.rst:522
#: ../../library/re.rst:534 ../../library/re.rst:539 ../../library/re.rst:561
#: ../../library/re.rst:575 ../../library/re.rst:591 ../../library/re.rst:599
#: ../../library/re.rst:614 ../../library/re.rst:622 ../../library/re.rst:639
#: ../../library/re.rst:653 ../../library/re.rst:658 ../../library/re.rst:849
#: ../../library/re.rst:1056
msgid "in regular expressions"
msgstr ""

#: ../../library/re.rst:106 ../../library/re.rst:262
msgid "^ (caret)"
msgstr ""

#: ../../library/re.rst:112
msgid "$ (dollar)"
msgstr ""

#: ../../library/re.rst:123
msgid "* (asterisk)"
msgstr "* (アスタリスク)"

#: ../../library/re.rst:130
msgid "+ (plus)"
msgstr "+ (プラス記号)"

#: ../../library/re.rst:137
msgid "? (question mark)"
msgstr "? (クエスチョンマーク)"

#: ../../library/re.rst:143
msgid "*?"
msgstr "*?"

#: ../../library/re.rst:143
msgid "+?"
msgstr "+?"

#: ../../library/re.rst:143
msgid "??"
msgstr "??"

#: ../../library/re.rst:157
msgid "*+"
msgstr "*+"

#: ../../library/re.rst:157
msgid "++"
msgstr "++"

#: ../../library/re.rst:157
msgid "?+"
msgstr "?+"

#: ../../library/re.rst:181
msgid "{} (curly brackets)"
msgstr ""

#: ../../library/re.rst:220 ../../library/re.rst:257 ../../library/re.rst:522
msgid "\\ (backslash)"
msgstr ""

#: ../../library/re.rst:235
msgid "[] (square brackets)"
msgstr "[] (角カッコ)"

#: ../../library/re.rst:244
msgid "- (minus)"
msgstr "- (負符号)"

#: ../../library/re.rst:295
msgid "| (vertical bar)"
msgstr ""

#: ../../library/re.rst:308
msgid "() (parentheses)"
msgstr ""

#: ../../library/re.rst:318
msgid "(?"
msgstr "(?"

#: ../../library/re.rst:350
msgid "(?:"
msgstr "(?:"

#: ../../library/re.rst:405
msgid "(?P<"
msgstr "(?P<"

#: ../../library/re.rst:437
msgid "(?P="
msgstr "(?P="

#: ../../library/re.rst:443
msgid "(?#"
msgstr "(?#"

#: ../../library/re.rst:448
msgid "(?="
msgstr "(?="

#: ../../library/re.rst:455
msgid "(?!"
msgstr "(?!"

#: ../../library/re.rst:462
msgid "(?<="
msgstr "(?<="

#: ../../library/re.rst:489
msgid "(?<!"
msgstr "(?<!"

#: ../../library/re.rst:499
msgid "(?("
msgstr "(?("

#: ../../library/re.rst:534
msgid "\\A"
msgstr "\\A"

#: ../../library/re.rst:539 ../../library/re.rst:658
msgid "\\b"
msgstr "\\b"

#: ../../library/re.rst:561
msgid "\\B"
msgstr "\\B"

#: ../../library/re.rst:575
msgid "\\d"
msgstr "\\d"

#: ../../library/re.rst:591
msgid "\\D"
msgstr "\\D"

#: ../../library/re.rst:599
msgid "\\s"
msgstr "\\s"

#: ../../library/re.rst:614
msgid "\\S"
msgstr "\\S"

#: ../../library/re.rst:622
msgid "\\w"
msgstr "\\w"

#: ../../library/re.rst:639
msgid "\\W"
msgstr "\\W"

#: ../../library/re.rst:653
msgid "\\Z"
msgstr "\\Z"

#: ../../library/re.rst:658
msgid "\\a"
msgstr "\\a"

#: ../../library/re.rst:658
msgid "\\f"
msgstr "\\f"

#: ../../library/re.rst:658
msgid "\\n"
msgstr "\\n"

#: ../../library/re.rst:658
msgid "\\r"
msgstr "\\r"

#: ../../library/re.rst:658
msgid "\\t"
msgstr "\\t"

#: ../../library/re.rst:658
msgid "\\u"
msgstr "\\u"

#: ../../library/re.rst:658
msgid "\\U"
msgstr "\\U"

#: ../../library/re.rst:658
msgid "\\v"
msgstr "\\v"

#: ../../library/re.rst:658
msgid "\\x"
msgstr "\\x"

#: ../../library/re.rst:658
msgid "\\\\"
msgstr "\\\\"

#: ../../library/re.rst:849
msgid "# (hash)"
msgstr "# (hash)"

#: ../../library/re.rst:1056
msgid "\\g"
msgstr "\\g"

#: ../../library/re.rst:1594
msgid "scanf()"
msgstr "scanf()"
