# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2023, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# tomo, 2019
# Takeshi Nakazato, 2022
# yaakiyu, 2022
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-06-16 16:41+0000\n"
"PO-Revision-Date: 2019-09-01 02:45+0000\n"
"Last-Translator: yaakiyu, 2022\n"
"Language-Team: Japanese (https://app.transifex.com/python-doc/teams/5390/"
"ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/asyncio-policy.rst:8
msgid "Policies"
msgstr "ポリシー"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/asyncio-policy.rst:10
msgid ""
"An event loop policy is a global per-process object that controls the "
"management of the event loop. Each event loop has a default policy, which "
"can be changed and customized using the policy API."
msgstr ""
"イベントループのポリシーはプロセスごとにグローバルなオブジェクトで、イベント"
"ループの管理方法を制御します。各イベントループはデフォルトのポリシーを持ちま"
"すが、ポリシー API を用いてポリシーを変更したりカスタマイズしたりすることがで"
"きます。"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/asyncio-policy.rst:14
msgid ""
"A policy defines the notion of *context* and manages a separate event loop "
"per context. The default policy defines *context* to be the current thread."
msgstr ""
"ポリシーは *コンテキスト* という概念を定義し、コンテキストごとに別々のイベン"
"トループを管理します。デフォルトポリシーは *コンテキスト* を現在のスレッドと"
"して定義します。"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/asyncio-policy.rst:18
msgid ""
"By using a custom event loop policy, the behavior of :func:"
"`get_event_loop`, :func:`set_event_loop`, and :func:`new_event_loop` "
"functions can be customized."
msgstr ""
"イベントループポリシーをカスタマイズすることにより、 :func:"
"`get_event_loop`、 :func:`set_event_loop`、そして :func:`new_event_loop` の振"
"る舞いを変更することができます。"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/asyncio-policy.rst:22
msgid ""
"Policy objects should implement the APIs defined in the :class:"
"`AbstractEventLoopPolicy` abstract base class."
msgstr ""
"ポリシーオブジェクトは :class:`AbstractEventLoopPolicy` 抽象基底クラスで定義"
"された API を実装しなければなりません。"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/asyncio-policy.rst:27
msgid "Getting and Setting the Policy"
msgstr "ポリシーの取得と設定"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/asyncio-policy.rst:29
msgid ""
"The following functions can be used to get and set the policy for the "
"current process:"
msgstr ""
"以下の関数は現在のプロセスに対するポリシーの取得や設定をするために使われます:"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/asyncio-policy.rst:34
msgid "Return the current process-wide policy."
msgstr "プロセス全体にわたる現在のポリシーを返します。"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/asyncio-policy.rst:38
msgid "Set the current process-wide policy to *policy*."
msgstr "プロセス全体にわたる現在のポリシーを *policy* に設定します。"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/asyncio-policy.rst:40
msgid "If *policy* is set to ``None``, the default policy is restored."
msgstr ""
"*policy* が ``None`` の場合、デフォルトポリシーが現在のポリシーに戻されます。"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/asyncio-policy.rst:44
msgid "Policy Objects"
msgstr "ポリシーオブジェクト"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/asyncio-policy.rst:46
msgid "The abstract event loop policy base class is defined as follows:"
msgstr "イベントループポリシーの抽象基底クラスは以下のように定義されています:"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/asyncio-policy.rst:50
msgid "An abstract base class for asyncio policies."
msgstr "asyncio ポリシーの抽象基底クラスです。"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/asyncio-policy.rst:54
msgid "Get the event loop for the current context."
msgstr "現在のコンテキストのイベントループを取得します。"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/asyncio-policy.rst:56
msgid ""
"Return an event loop object implementing the :class:`AbstractEventLoop` "
"interface."
msgstr ""
":class:`AbstractEventLoop` のインターフェースを実装したイベントループオブジェ"
"クトを返します。"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/asyncio-policy.rst:59
#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/asyncio-policy.rst:71
msgid "This method should never return ``None``."
msgstr "このメソッドは ``None`` を返してはいけません。"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/asyncio-policy.rst:65
msgid "Set the event loop for the current context to *loop*."
msgstr "現在のコンテキストにイベントループ *loop* を設定します。"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/asyncio-policy.rst:69
msgid "Create and return a new event loop object."
msgstr "新しいイベントループオブジェクトを生成して返します。"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/asyncio-policy.rst:75
msgid "Get a child process watcher object."
msgstr "子プロセスを監視するウオッチャーオブジェクトを返します。"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/asyncio-policy.rst:77
msgid ""
"Return a watcher object implementing the :class:`AbstractChildWatcher` "
"interface."
msgstr ""
":class:`AbstractChildWatcher` のインターフェースを実装したウオッチャーオブ"
"ジェクトを返します。"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/asyncio-policy.rst:80
#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/asyncio-policy.rst:86
msgid "This function is Unix specific."
msgstr "この関数は Unix 特有です。"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/asyncio-policy.rst:84
msgid "Set the current child process watcher to *watcher*."
msgstr ""
"子プロセスに対する現在のウオッチャーオブジェクトを *watcher* に設定します。"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/asyncio-policy.rst:89
msgid "asyncio ships with the following built-in policies:"
msgstr "asyncio は以下の組み込みポリシーを提供します:"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/asyncio-policy.rst:94
msgid ""
"The default asyncio policy.  Uses :class:`SelectorEventLoop` on both Unix "
"and Windows platforms."
msgstr ""
"デフォルトの asyncio ポリシーです。Unix と Windows の両方で :class:"
"`SelectorEventLoop` を使います。"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/asyncio-policy.rst:97
msgid ""
"There is no need to install the default policy manually. asyncio is "
"configured to use the default policy automatically."
msgstr ""
"デフォルトのポリシーを手動でインストールする必要はありません。 asyncio はデ"
"フォルトポリシーを使うように自動的に構成されます。 "

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/asyncio-policy.rst:103
msgid ""
"An alternative event loop policy that uses the :class:`ProactorEventLoop` "
"event loop implementation."
msgstr ""
":class:`ProactorEventLoop` イベントループ実装を使った別のイベントループポリ"
"シーです。"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/asyncio-policy.rst:106
msgid ":ref:`Availability <availability>`: Windows."
msgstr ":ref:`利用可能な環境 <availability>`: Windows 。"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/asyncio-policy.rst:110
msgid "Process Watchers"
msgstr "プロセスのウオッチャー"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/asyncio-policy.rst:112
msgid ""
"A process watcher allows customization of how an event loop monitors child "
"processes on Unix. Specifically, the event loop needs to know when a child "
"process has exited."
msgstr ""
"プロセスのウオッチャーは Unix 上でイベントループが子プロセスを監視する方法を"
"カスタマイズすることを可能にします。特に、子プロセスがいつ終了したかをイベン"
"トループは知る必要があります。"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/asyncio-policy.rst:116
msgid ""
"In asyncio, child processes are created with :func:`create_subprocess_exec` "
"and :meth:`loop.subprocess_exec` functions."
msgstr ""
"asyncio では、子プロセスは :func:`create_subprocess_exec` や :meth:`loop."
"subprocess_exec` 関数により生成されます。"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/asyncio-policy.rst:120
msgid ""
"asyncio defines the :class:`AbstractChildWatcher` abstract base class, which "
"child watchers should implement, and has two different implementations: :"
"class:`SafeChildWatcher` (configured to be used by default) and :class:"
"`FastChildWatcher`."
msgstr ""
"asyncio は、子プロセスのウオッチャーが実装すべき :class:"
"`AbstractChildWatcher` 抽象基底クラスを定義しており、さらに異なる2つの実装ク"
"ラスを提供しています: :class:`SafeChildWatcher` (デフォルトでこのクラスが使わ"
"れるように構成されます)と :class:`FastChildWatcher` です。"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/asyncio-policy.rst:125
msgid ""
"See also the :ref:`Subprocess and Threads <asyncio-subprocess-threads>` "
"section."
msgstr ""
":ref:`サブプロセスとスレッド <asyncio-subprocess-threads>` 節も参照してくださ"
"い。"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/asyncio-policy.rst:128
msgid ""
"The following two functions can be used to customize the child process "
"watcher implementation used by the asyncio event loop:"
msgstr ""
"以下の2つの関数は asyncio のイベントループが使う子プロセスのウオッチャーの実"
"装をカスタマイズするために使うことができます:"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/asyncio-policy.rst:133
msgid "Return the current child watcher for the current policy."
msgstr "現在のポリシーにおける子プロセスのウオッチャーを返します。"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/asyncio-policy.rst:137
msgid ""
"Set the current child watcher to *watcher* for the current policy.  "
"*watcher* must implement methods defined in the :class:"
"`AbstractChildWatcher` base class."
msgstr ""
"現在ポリシーにおける子プロセスのウオッチャーを *watcher* に設定します。 "
"*watcher* は :class:`AbstractChildWatcher` 基底クラスで定義されたメソッドを実"
"装していなければなりません。"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/asyncio-policy.rst:142
msgid ""
"Third-party event loops implementations might not support custom child "
"watchers.  For such event loops, using :func:`set_child_watcher` might be "
"prohibited or have no effect."
msgstr ""
"サードパーティのイベントループ実装は子プロセスのウオッチャーのカスタマイズを"
"サポートしていない可能性があります。そのようなイベントループでは、 :func:"
"`set_child_watcher` 関数の利用は禁止されているか、または何の効果もありませ"
"ん。"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/asyncio-policy.rst:150
msgid "Register a new child handler."
msgstr "新しい子プロセスのハンドラを登録します。"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/asyncio-policy.rst:152
msgid ""
"Arrange for ``callback(pid, returncode, *args)`` to be called when a process "
"with PID equal to *pid* terminates.  Specifying another callback for the "
"same process replaces the previous handler."
msgstr ""
"プロセス ID (PID) が *pid* であるプロセスが終了した時に ``callback(pid, "
"returncode, *args)`` コールバック関数が呼び出されるように手配します。同じプロ"
"セスに対して別のコールバックを登録した場合、以前登録したハンドラを置き換えま"
"す。"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/asyncio-policy.rst:157
msgid "The *callback* callable must be thread-safe."
msgstr ""
"*callback* はスレッドセーフな呼び出し可能オブジェクトでなければなりません。"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/asyncio-policy.rst:161
msgid "Removes the handler for process with PID equal to *pid*."
msgstr ""
"プロセス ID (PID) が *pid* であるプロセスに対して登録されたハンドラを削除しま"
"す。"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/asyncio-policy.rst:163
msgid ""
"The function returns ``True`` if the handler was successfully removed, "
"``False`` if there was nothing to remove."
msgstr ""
"ハンドラが正しく削除された場合 ``True`` を返します。削除するハンドラがない場"
"合は ``False`` を返します。"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/asyncio-policy.rst:168
msgid "Attach the watcher to an event loop."
msgstr "ウオッチャーをイベントループに接続します。"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/asyncio-policy.rst:170
msgid ""
"If the watcher was previously attached to an event loop, then it is first "
"detached before attaching to the new loop."
msgstr ""
"ウオッチャーがイベントループに接続されている場合、新しいイベントループに接続"
"される前に接続済みのイベントループから切り離されます。"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/asyncio-policy.rst:173
msgid "Note: loop may be ``None``."
msgstr "注: 引数は ``None`` をとることができます。"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/asyncio-policy.rst:177
msgid "Close the watcher."
msgstr "ウオッチャーをクローズします。"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/asyncio-policy.rst:179
msgid ""
"This method has to be called to ensure that underlying resources are cleaned-"
"up."
msgstr ""
"このメソッドは、ウオッチャーの背後にあるリソースを確実にクリーンアップするた"
"めに必ず呼び出さなければなりません。"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/asyncio-policy.rst:184
msgid ""
"This implementation avoids disrupting other code spawning processes by "
"polling every process explicitly on a :py:data:`SIGCHLD` signal."
msgstr ""
"この実装は、各プロセスに明示的に :py:data:`SIGCHLD` シグナルをポーリングさせ"
"ることにより、プロセスを生成する他のコードを中断させないようにします。"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/asyncio-policy.rst:187
msgid ""
"This is a safe solution but it has a significant overhead when handling a "
"big number of processes (*O(n)* each time a :py:data:`SIGCHLD` is received)."
msgstr ""
"これは安全ですが、大量の子プロセスを処理する際に非常に大きなオーバーヘッドを"
"伴います (:py:data:`SIGCHLD` シグナルを受信するごとに *O(n)* 程度)。"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/asyncio-policy.rst:191
msgid "asyncio uses this safe implementation by default."
msgstr "asyncioはデフォルトでこの安全な実装を使用します。"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/asyncio-policy.rst:195
msgid ""
"This implementation reaps every terminated processes by calling ``os."
"waitpid(-1)`` directly, possibly breaking other code spawning processes and "
"waiting for their termination."
msgstr ""
"この実装は終了した子プロセスを得るために直接 ``os.waitpid(-1)`` を呼び出しま"
"す。これにより、プロセスを生成してその終了を待ち受ける別のコードを壊す可能性"
"があります。"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/asyncio-policy.rst:199
msgid ""
"There is no noticeable overhead when handling a big number of children "
"(*O(1)* each time a child terminates)."
msgstr ""
"大量の子プロセスを処理する際に顕著なオーバーヘッドはありません (子プロセスが"
"終了するごとに *O(1)* 程度です)。"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/asyncio-policy.rst:204
msgid "Custom Policies"
msgstr "ポリシーのカスタマイズ"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/asyncio-policy.rst:206
msgid ""
"To implement a new event loop policy, it is recommended to subclass :class:"
"`DefaultEventLoopPolicy` and override the methods for which custom behavior "
"is wanted, e.g.::"
msgstr ""
"新しいイベントループのポリシーを実装するためには、以下に示すように :class:"
"`DefaultEventLoopPolicy` を継承して振る舞いを変更したいメソッドをオーバーライ"
"ドすることが推奨されます。::"
