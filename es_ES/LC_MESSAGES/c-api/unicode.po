# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2023, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# eulalio barbero espinosa <eulalio@disroot.org>, 2023
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-12-15 19:01+0000\n"
"PO-Revision-Date: 2022-11-05 17:21+0000\n"
"Last-Translator: eulalio barbero espinosa <eulalio@disroot.org>, 2023\n"
"Language-Team: Spanish (Spain) (https://app.transifex.com/python-doc/"
"teams/5390/es_ES/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: es_ES\n"
"Plural-Forms: nplurals=3; plural=n == 1 ? 0 : n != 0 && n % 1000000 == 0 ? "
"1 : 2;\n"

#: ../../c-api/unicode.rst:6
msgid "Unicode Objects and Codecs"
msgstr "Objetos Unicode y Codecs"

#: ../../c-api/unicode.rst:12
msgid "Unicode Objects"
msgstr "Objetos Unicode"

#: ../../c-api/unicode.rst:14
msgid ""
"Since the implementation of :pep:`393` in Python 3.3, Unicode objects "
"internally use a variety of representations, in order to allow handling the "
"complete range of Unicode characters while staying memory efficient.  There "
"are special cases for strings where all code points are below 128, 256, or "
"65536; otherwise, code points must be below 1114112 (which is the full "
"Unicode range)."
msgstr ""
"Desde la implementación de :pep:`393` en Python 3.3, los objetos Unicode "
"utilizan internamente una variedad de representaciones para permitir el "
"manejo de la gama completa de caracteres Unicode mientras se mantiene la "
"eficiencia de memoria. Hay casos especiales para cadenas donde todos los "
"puntos de código están por debajo de 128, 256 o 65536; de lo contrario, los "
"puntos de código deben estar por debajo de 1114112 (que es el rango completo "
"de Unicode)."

#: ../../c-api/unicode.rst:20
msgid ""
":c:expr:`Py_UNICODE*` and UTF-8 representations are created on demand and "
"cached in the Unicode object.  The :c:expr:`Py_UNICODE*` representation is "
"deprecated and inefficient."
msgstr ""
":c:expr:`Py_UNICODE*` y UTF-8 se crean bajo demanda y se almacenan en caché "
"en el objeto Unicode.  La representación :c:expr:`Py_UNICODE*` es obsoleta e "
"ineficiente."

#: ../../c-api/unicode.rst:24
msgid ""
"Due to the transition between the old APIs and the new APIs, Unicode objects "
"can internally be in two states depending on how they were created:"
msgstr ""
"Debido a la transición entre las antiguas APIs y las nuevas APIs, los "
"objetos Unicode pueden estar internamente en dos estados dependiendo de cómo "
"se crearon."

#: ../../c-api/unicode.rst:27
msgid ""
"\"canonical\" Unicode objects are all objects created by a non-deprecated "
"Unicode API.  They use the most efficient representation allowed by the "
"implementation."
msgstr ""
"\"Objetos \"canónicos\" Unicode son todos los objetos creados por una API "
"Unicode no obsoleta. Utilizan la representación más eficiente permitida por "
"la implementación.\""

#: ../../c-api/unicode.rst:31
msgid ""
"\"legacy\" Unicode objects have been created through one of the deprecated "
"APIs (typically :c:func:`PyUnicode_FromUnicode`) and only bear the :c:expr:"
"`Py_UNICODE*` representation; you will have to call :c:func:"
"`PyUnicode_READY` on them before calling any other API."
msgstr ""
"\"legacy\" Los objetos Unicode se han creado a través de una de las APIs "
"obsoletas (normalmente :c:func:`PyUnicode_FromUnicode`) y solo tienen la "
"representación :c:expr:`Py_UNICODE*`; deberás llamar a :c:func:"
"`PyUnicode_READY` en ellos antes de llamar a cualquier otra API."

#: ../../c-api/unicode.rst:37
msgid ""
"The \"legacy\" Unicode object will be removed in Python 3.12 with deprecated "
"APIs. All Unicode objects will be \"canonical\" since then. See :pep:`623` "
"for more information."
msgstr ""
"El objeto Unicode \"legacy\" se eliminará en Python 3.12 con APIs obsoletas. "
"Todos los objetos Unicode serán \"canónicos\" a partir de entonces. "
"Consulta :pep:`623` para obtener más información."

#: ../../c-api/unicode.rst:43
msgid "Unicode Type"
msgstr "Tipo Unicode"

#: ../../c-api/unicode.rst:45
msgid ""
"These are the basic Unicode object types used for the Unicode implementation "
"in Python:"
msgstr ""
"Estos son los tipos básicos de objetos Unicode utilizados para la "
"implementación de Unicode en Python."

#: ../../c-api/unicode.rst:52
msgid ""
"These types are typedefs for unsigned integer types wide enough to contain "
"characters of 32 bits, 16 bits and 8 bits, respectively.  When dealing with "
"single Unicode characters, use :c:type:`Py_UCS4`."
msgstr ""
"Estos tipos son typedefs para tipos de enteros sin signo lo suficientemente "
"amplios para contener caracteres de 32 bits, 16 bits y 8 bits, "
"respectivamente. Al tratar con caracteres Unicode individuales, utiliza :c:"
"type:`Py_UCS4`."

#: ../../c-api/unicode.rst:61
msgid ""
"This is a typedef of :c:expr:`wchar_t`, which is a 16-bit type or 32-bit "
"type depending on the platform."
msgstr ""
"Este es un typedef de :c:expr:`wchar_t`, que es un tipo de 16 bits o 32 bits "
"dependiendo de la plataforma."

#: ../../c-api/unicode.rst:64
msgid ""
"In previous versions, this was a 16-bit type or a 32-bit type depending on "
"whether you selected a \"narrow\" or \"wide\" Unicode version of Python at "
"build time."
msgstr ""
"En versiones anteriores, esto era un tipo de 16 bits o un tipo de 32 bits "
"dependiendo de si seleccionaste una versión de Python \"narrow\" o \"wide\" "
"de Unicode en el momento de la compilación."

#: ../../c-api/unicode.rst:74
msgid ""
"These subtypes of :c:type:`PyObject` represent a Python Unicode object.  In "
"almost all cases, they shouldn't be used directly, since all API functions "
"that deal with Unicode objects take and return :c:type:`PyObject` pointers."
msgstr ""
"Estos subtipos de :c:type:`PyObject` representan un objeto Unicode de "
"Python. En casi todos los casos, no se deberían utilizar directamente, ya "
"que todas las funciones de la API que trabajan con objetos Unicode toman y "
"devuelven punteros :c:type:`PyObject`."

#: ../../c-api/unicode.rst:83
msgid ""
"This instance of :c:type:`PyTypeObject` represents the Python Unicode type.  "
"It is exposed to Python code as ``str``."
msgstr ""
"Esta instancia de :c:type:`PyTypeObject` representa el tipo Unicode de "
"Python. Se expone al código de Python como ``str``."

#: ../../c-api/unicode.rst:87
msgid ""
"The following APIs are really C macros and can be used to do fast checks and "
"to access internal read-only data of Unicode objects:"
msgstr ""
"Las siguientes APIs son en realidad macros de C y se pueden utilizar para "
"realizar comprobaciones rápidas y acceder a datos internos de solo lectura "
"de objetos Unicode."

#: ../../c-api/unicode.rst:92
msgid ""
"Return true if the object *o* is a Unicode object or an instance of a "
"Unicode subtype.  This function always succeeds."
msgstr ""
"Devuelve verdadero si el objeto *o* es un objeto Unicode o una instancia de "
"un subtipo Unicode. Esta función siempre tiene éxito."

#: ../../c-api/unicode.rst:98
msgid ""
"Return true if the object *o* is a Unicode object, but not an instance of a "
"subtype.  This function always succeeds."
msgstr ""
"Devuelve verdadero si el objeto *o* es un objeto Unicode, pero no una "
"instancia de un subtipo. Esta función siempre tiene éxito."

#: ../../c-api/unicode.rst:104
msgid ""
"Ensure the string object *o* is in the \"canonical\" representation.  This "
"is required before using any of the access macros described below."
msgstr ""
"Asegúrese de que el objeto de cadena *o* esté en la representación "
"\"canónica\". Esto es necesario antes de usar cualquiera de las macros de "
"acceso descritas a continuación."

#: ../../c-api/unicode.rst:109
msgid ""
"Returns ``0`` on success and ``-1`` with an exception set on failure, which "
"in particular happens if memory allocation fails."
msgstr ""
"Devuelve ``0`` en caso de éxito y ``-1`` con una excepción establecida en "
"caso de fallo, lo cual ocurre en particular si falla la asignación de "
"memoria."

#: ../../c-api/unicode.rst:115
msgid "This API will be removed with :c:func:`PyUnicode_FromUnicode`."
msgstr "Esta API se eliminará con :c:func:`PyUnicode_FromUnicode`."

#: ../../c-api/unicode.rst:120
msgid ""
"Return the length of the Unicode string, in code points.  *o* has to be a "
"Unicode object in the \"canonical\" representation (not checked)."
msgstr ""
"Devuelve la longitud de la cadena Unicode, en puntos de código. *o* tiene "
"que ser un objeto Unicode en la representación \"canónica\" (no verificado)."

#: ../../c-api/unicode.rst:130
msgid ""
"Return a pointer to the canonical representation cast to UCS1, UCS2 or UCS4 "
"integer types for direct character access.  No checks are performed if the "
"canonical representation has the correct character size; use :c:func:"
"`PyUnicode_KIND` to select the right macro.  Make sure :c:func:"
"`PyUnicode_READY` has been called before accessing this."
msgstr ""
"Devuelve un puntero a la representación canónica convertida a tipos enteros "
"UCS1, UCS2 o UCS4 para acceder directamente a los caracteres. No se realizan "
"comprobaciones si la representación canónica tiene el tamaño de carácter "
"correcto; utiliza :c:func:`PyUnicode_KIND` para seleccionar la macro "
"correcta. Asegúrate de que se haya llamado a :c:func:`PyUnicode_READY` antes "
"de acceder a esto."

#: ../../c-api/unicode.rst:144
msgid "Return values of the :c:func:`PyUnicode_KIND` macro."
msgstr "Valores de retorno de la macro :c:func:`PyUnicode_KIND`."

#: ../../c-api/unicode.rst:149
msgid "``PyUnicode_WCHAR_KIND`` is deprecated."
msgstr "``PyUnicode_WCHAR_KIND`` está obsoleto."

#: ../../c-api/unicode.rst:154
msgid ""
"Return one of the PyUnicode kind constants (see above) that indicate how "
"many bytes per character this Unicode object uses to store its data.  *o* "
"has to be a Unicode object in the \"canonical\" representation (not checked)."
msgstr ""
"Devuelve una de las constantes de tipo PyUnicode (ver arriba) que indica "
"cuántos bytes por carácter utiliza este objeto Unicode para almacenar sus "
"datos. *o* tiene que ser un objeto Unicode en la representación "
"\"canónica\" (no comprobado)."

#: ../../c-api/unicode.rst:165
msgid ""
"Return a void pointer to the raw Unicode buffer.  *o* has to be a Unicode "
"object in the \"canonical\" representation (not checked)."
msgstr ""
"Devolver un puntero void al búfer Unicode sin procesar. *o* tiene que ser un "
"objeto Unicode en la representación \"canónica\" (no verificado)."

#: ../../c-api/unicode.rst:174
msgid ""
"Write into a canonical representation *data* (as obtained with :c:func:"
"`PyUnicode_DATA`).  This macro does not do any sanity checks and is intended "
"for usage in loops.  The caller should cache the *kind* value and *data* "
"pointer as obtained from other macro calls.  *index* is the index in the "
"string (starts at 0) and *value* is the new code point value which should be "
"written to that location."
msgstr ""
"Escriba en una representación canónica *data* (como se obtiene con :c:func:"
"`PyUnicode_DATA`). Esta macro no realiza ninguna comprobación de integridad "
"y está destinada a ser utilizada en bucles. Quien llame debe almacenar en "
"caché el valor de *kind* y el puntero *data* obtenidos de otras llamadas de "
"macro. *index* es el índice en la cadena (comienza en 0) y *value* es el "
"nuevo valor del punto de código que se debe escribir en esa ubicación."

#: ../../c-api/unicode.rst:186
msgid ""
"Read a code point from a canonical representation *data* (as obtained with :"
"c:func:`PyUnicode_DATA`).  No checks or ready calls are performed."
msgstr ""
"Lea un punto de código desde una representación canónica *data* (como se "
"obtiene con :c:func:`PyUnicode_DATA`). No se realizan comprobaciones ni "
"llamadas listas."

#: ../../c-api/unicode.rst:194
msgid ""
"Read a character from a Unicode object *o*, which must be in the "
"\"canonical\" representation.  This is less efficient than :c:func:"
"`PyUnicode_READ` if you do multiple consecutive reads."
msgstr ""
"Lea un carácter de un objeto Unicode *o*, que debe estar en la "
"representación \"canónica\". Esto es menos eficiente que :c:func:"
"`PyUnicode_READ` si realiza múltiples lecturas consecutivas."

#: ../../c-api/unicode.rst:203
msgid ""
"Return the maximum code point that is suitable for creating another string "
"based on *o*, which must be in the \"canonical\" representation.  This is "
"always an approximation but more efficient than iterating over the string."
msgstr ""
"Devuelve el punto de código máximo que es adecuado para crear otra cadena "
"basada en *o*, que debe estar en la representación \"canónica\". Esto "
"siempre es una aproximación pero más eficiente que iterar sobre la cadena."

#: ../../c-api/unicode.rst:212
msgid ""
"Return the size of the deprecated :c:type:`Py_UNICODE` representation, in "
"code units (this includes surrogate pairs as 2 units).  *o* has to be a "
"Unicode object (not checked)."
msgstr ""
"Devuelve el tamaño de la representación obsoleta :c:type:`Py_UNICODE`, en "
"unidades de código (esto incluye pares de sustitutos como 2 unidades). *o* "
"tiene que ser un objeto Unicode (no se comprueba)."

#: ../../c-api/unicode.rst:218 ../../c-api/unicode.rst:228
#: ../../c-api/unicode.rst:756
msgid ""
"Part of the old-style Unicode API, please migrate to using :c:func:"
"`PyUnicode_GET_LENGTH`."
msgstr ""
"Parte de la API de Unicode de estilo antiguo, por favor migre a usar :c:func:"
"`PyUnicode_GET_LENGTH`."

#: ../../c-api/unicode.rst:223
msgid ""
"Return the size of the deprecated :c:type:`Py_UNICODE` representation in "
"bytes.  *o* has to be a Unicode object (not checked)."
msgstr ""
"Devuelve el tamaño de la representación en bytes del obsoleto :c:type:"
"`Py_UNICODE`. *o* tiene que ser un objeto Unicode (no comprobado)."

#: ../../c-api/unicode.rst:234
msgid ""
"Return a pointer to a :c:type:`Py_UNICODE` representation of the object.  "
"The returned buffer is always terminated with an extra null code point.  It "
"may also contain embedded null code points, which would cause the string to "
"be truncated when used in most C functions.  The ``AS_DATA`` form casts the "
"pointer to :c:expr:`const char *`.  The *o* argument has to be a Unicode "
"object (not checked)."
msgstr ""
"Devuelve un puntero a una representación de :c:type:`Py_UNICODE` del objeto. "
"El búfer devuelto siempre está terminado con un punto de código nulo "
"adicional. También puede contener puntos de código nulos incrustados, lo que "
"haría que la cadena se truncara al usarla en la mayoría de las funciones C. "
"La forma ``AS_DATA`` convierte el puntero a :c:expr:`const char *`. El "
"argumento *o* debe ser un objeto Unicode (no se verifica)."

#: ../../c-api/unicode.rst:241
msgid ""
"This macro is now inefficient -- because in many cases the :c:type:"
"`Py_UNICODE` representation does not exist and needs to be created -- and "
"can fail (return ``NULL`` with an exception set).  Try to port the code to "
"use the new :c:func:`PyUnicode_nBYTE_DATA` macros or use :c:func:"
"`PyUnicode_WRITE` or :c:func:`PyUnicode_READ`."
msgstr ""
"Esta macro ahora es ineficiente -- porque en muchos casos la representación :"
"c:type:`Py_UNICODE` no existe y se necesita crear -- y puede fallar "
"(devolver ``NULL`` con una excepción establecida). Intenta portar el código "
"para usar las nuevas macros :c:func:`PyUnicode_nBYTE_DATA` o usa :c:func:"
"`PyUnicode_WRITE` o :c:func:`PyUnicode_READ`."

#: ../../c-api/unicode.rst:250
msgid ""
"Part of the old-style Unicode API, please migrate to using the :c:func:"
"`PyUnicode_nBYTE_DATA` family of macros."
msgstr ""
"Parte de la API de Unicode de estilo antiguo, por favor migre a usar la "
"familia de macros :c:func:`PyUnicode_nBYTE_DATA`."

#: ../../c-api/unicode.rst:255
msgid ""
"Return ``1`` if the string is a valid identifier according to the language "
"definition, section :ref:`identifiers`. Return ``0`` otherwise."
msgstr ""
"Devuelve ``1`` si la cadena es un identificador válido según la definición "
"del lenguaje, sección :ref:`identifiers`. Devuelve ``0`` en caso contrario."

#: ../../c-api/unicode.rst:258
msgid ""
"The function does not call :c:func:`Py_FatalError` anymore if the string is "
"not ready."
msgstr ""
"La función ya no llama a :c:func:`Py_FatalError` si la cadena no está lista."

#: ../../c-api/unicode.rst:264
msgid "Unicode Character Properties"
msgstr "Propiedades de los caracteres Unicode"

#: ../../c-api/unicode.rst:266
msgid ""
"Unicode provides many different character properties. The most often needed "
"ones are available through these macros which are mapped to C functions "
"depending on the Python configuration."
msgstr ""
"Unicode proporciona muchas propiedades de caracteres diferentes. Los más "
"necesarios están disponibles a través de estas macros que se asignan a "
"funciones C dependiendo de la configuración de Python."

#: ../../c-api/unicode.rst:273
msgid ""
"Return ``1`` or ``0`` depending on whether *ch* is a whitespace character."
msgstr ""
"Devuelve ``1`` o ``0`` dependiendo de si *ch* es un carácter de espacio en "
"blanco."

#: ../../c-api/unicode.rst:278
msgid ""
"Return ``1`` or ``0`` depending on whether *ch* is a lowercase character."
msgstr ""
"Devuelve ``1`` o ``0`` dependiendo de si *ch* es un carácter en minúscula."

#: ../../c-api/unicode.rst:283
msgid ""
"Return ``1`` or ``0`` depending on whether *ch* is an uppercase character."
msgstr ""
"Devuelve ``1`` o ``0`` dependiendo de si *ch* es un carácter en mayúscula."

#: ../../c-api/unicode.rst:288
msgid ""
"Return ``1`` or ``0`` depending on whether *ch* is a titlecase character."
msgstr ""
"Devuelve ``1`` o ``0`` dependiendo de si *ch* es un carácter en mayúscula "
"inicial."

#: ../../c-api/unicode.rst:293
msgid ""
"Return ``1`` or ``0`` depending on whether *ch* is a linebreak character."
msgstr ""
"Devuelve ``1`` o ``0`` dependiendo de si *ch* es un carácter de salto de "
"línea."

#: ../../c-api/unicode.rst:298
msgid "Return ``1`` or ``0`` depending on whether *ch* is a decimal character."
msgstr "Devuelve ``1`` o ``0`` dependiendo de si *ch* es un carácter decimal."

#: ../../c-api/unicode.rst:303
msgid "Return ``1`` or ``0`` depending on whether *ch* is a digit character."
msgstr "Devuelve ``1`` o ``0`` dependiendo de si *ch* es un carácter numérico."

#: ../../c-api/unicode.rst:308
msgid "Return ``1`` or ``0`` depending on whether *ch* is a numeric character."
msgstr "Devuelve ``1`` o ``0`` dependiendo de si *ch* es un carácter numérico."

#: ../../c-api/unicode.rst:313
msgid ""
"Return ``1`` or ``0`` depending on whether *ch* is an alphabetic character."
msgstr ""
"Devuelve ``1`` o ``0`` dependiendo de si *ch* es un carácter alfabético."

#: ../../c-api/unicode.rst:318
msgid ""
"Return ``1`` or ``0`` depending on whether *ch* is an alphanumeric character."
msgstr ""
"Devuelve ``1`` o ``0`` dependiendo de si *ch* es un carácter alfanumérico."

#: ../../c-api/unicode.rst:323
msgid ""
"Return ``1`` or ``0`` depending on whether *ch* is a printable character. "
"Nonprintable characters are those characters defined in the Unicode "
"character database as \"Other\" or \"Separator\", excepting the ASCII space "
"(0x20) which is considered printable.  (Note that printable characters in "
"this context are those which should not be escaped when :func:`repr` is "
"invoked on a string. It has no bearing on the handling of strings written "
"to :data:`sys.stdout` or :data:`sys.stderr`.)"
msgstr ""
"Devuelve ``1`` o ``0`` dependiendo de si *ch* es un carácter imprimible. Los "
"caracteres no imprimibles son aquellos caracteres definidos en la base de "
"datos de caracteres Unicode como \"Otros\" o \"Separadores\", excepto el "
"espacio ASCII (0x20) que se considera imprimible. (Tener en cuenta que los "
"caracteres imprimibles en este contexto son aquellos que no deben escaparse "
"cuando se invoca la función :func:`repr` en una cadena. No tiene ninguna "
"influencia en el manejo de las cadenas escritas en :data:`sys.stdout` o :"
"data:`sys.stderr`.)"

#: ../../c-api/unicode.rst:332
msgid "These APIs can be used for fast direct character conversions:"
msgstr ""
"Estas APIs se pueden utilizar para conversiones de caracteres directas y "
"rápidas."

#: ../../c-api/unicode.rst:337
msgid "Return the character *ch* converted to lower case."
msgstr "Devuelve el carácter *ch* convertido a minúscula."

#: ../../c-api/unicode.rst:339 ../../c-api/unicode.rst:347
#: ../../c-api/unicode.rst:355
msgid "This function uses simple case mappings."
msgstr "Esta función utiliza mapeos de casos simples."

#: ../../c-api/unicode.rst:345
msgid "Return the character *ch* converted to upper case."
msgstr "Devuelve el carácter *ch* convertido a mayúsculas."

#: ../../c-api/unicode.rst:353
msgid "Return the character *ch* converted to title case."
msgstr "Devuelve el carácter *ch* convertido a título."

#: ../../c-api/unicode.rst:361
msgid ""
"Return the character *ch* converted to a decimal positive integer.  Return "
"``-1`` if this is not possible.  This macro does not raise exceptions."
msgstr ""
"Devuelve el carácter *ch* convertido en un entero decimal positivo. Devuelve "
"``-1`` si esto no es posible. Esta macro no genera excepciones."

#: ../../c-api/unicode.rst:367
msgid ""
"Return the character *ch* converted to a single digit integer. Return ``-1`` "
"if this is not possible.  This macro does not raise exceptions."
msgstr ""
"Devuelve el carácter *ch* convertido en un entero de un solo dígito. "
"Devuelve ``-1`` si esto no es posible. Esta macro no genera excepciones."

#: ../../c-api/unicode.rst:373
msgid ""
"Return the character *ch* converted to a double. Return ``-1.0`` if this is "
"not possible.  This macro does not raise exceptions."
msgstr ""
"Devuelve el carácter *ch* convertido a un double. Devuelve ``-1.0`` si esto "
"no es posible. Esta macro no genera excepciones."

#: ../../c-api/unicode.rst:377
msgid "These APIs can be used to work with surrogates:"
msgstr "Estas APIs se pueden utilizar para trabajar con sustitutos."

#: ../../c-api/unicode.rst:381
msgid "Check if *ch* is a surrogate (``0xD800 <= ch <= 0xDFFF``)."
msgstr "Comprueba si *ch* es un sustituto (``0xD800 <= ch <= 0xDFFF``)."

#: ../../c-api/unicode.rst:385
msgid "Check if *ch* is a high surrogate (``0xD800 <= ch <= 0xDBFF``)."
msgstr "Comprueba si *ch* es un alto sustituto (``0xD800 <= ch <= 0xDBFF``)."

#: ../../c-api/unicode.rst:389
msgid "Check if *ch* is a low surrogate (``0xDC00 <= ch <= 0xDFFF``)."
msgstr "Comprueba si *ch* es un sustituto bajo (``0xDC00 <= ch <= 0xDFFF``)."

#: ../../c-api/unicode.rst:393
msgid ""
"Join two surrogate characters and return a single Py_UCS4 value. *high* and "
"*low* are respectively the leading and trailing surrogates in a surrogate "
"pair."
msgstr ""
"Unir dos caracteres sustitutos y devolver un único valor Py_UCS4. *high* y "
"*low* son respectivamente los caracteres sustitutos principales y "
"secundarios en un par de caracteres sustitutos."

#: ../../c-api/unicode.rst:399
msgid "Creating and accessing Unicode strings"
msgstr "Crear y acceder a cadenas Unicode"

#: ../../c-api/unicode.rst:401
msgid ""
"To create Unicode objects and access their basic sequence properties, use "
"these APIs:"
msgstr ""
"Para crear objetos Unicode y acceder a sus propiedades básicas de secuencia, "
"utiliza estas APIs:"

#: ../../c-api/unicode.rst:406
msgid ""
"Create a new Unicode object.  *maxchar* should be the true maximum code "
"point to be placed in the string.  As an approximation, it can be rounded up "
"to the nearest value in the sequence 127, 255, 65535, 1114111."
msgstr ""
"Crear un nuevo objeto Unicode. *maxchar* debería ser el verdadero punto de "
"código máximo que se colocará en la cadena. Como aproximación, se puede "
"redondear al valor más cercano en la secuencia 127, 255, 65535, 1114111."

#: ../../c-api/unicode.rst:410
msgid ""
"This is the recommended way to allocate a new Unicode object.  Objects "
"created using this function are not resizable."
msgstr ""
"Esta es la forma recomendada de asignar un nuevo objeto Unicode. Los objetos "
"creados usando esta función no son redimensionables."

#: ../../c-api/unicode.rst:419
msgid ""
"Create a new Unicode object with the given *kind* (possible values are :c:"
"macro:`PyUnicode_1BYTE_KIND` etc., as returned by :c:func:"
"`PyUnicode_KIND`).  The *buffer* must point to an array of *size* units of "
"1, 2 or 4 bytes per character, as given by the kind."
msgstr ""
"Crear un nuevo objeto Unicode con el *kind* dado (los valores posibles son :"
"c:macro:`PyUnicode_1BYTE_KIND`, etc., como se devuelve por :c:func:"
"`PyUnicode_KIND`). El *buffer* debe apuntar a un array de *size* unidades de "
"1, 2 o 4 bytes por carácter, según el *kind* dado."

#: ../../c-api/unicode.rst:429
msgid ""
"Create a Unicode object from the char buffer *u*.  The bytes will be "
"interpreted as being UTF-8 encoded.  The buffer is copied into the new "
"object. If the buffer is not ``NULL``, the return value might be a shared "
"object, i.e. modification of the data is not allowed."
msgstr ""
"Crear un objeto Unicode a partir del búfer de caracteres *u*. Los bytes se "
"interpretarán como codificados en UTF-8. El búfer se copia en el nuevo "
"objeto. Si el búfer no es ``NULL``, el valor de retorno podría ser un objeto "
"compartido, es decir, no se permite la modificación de los datos."

#: ../../c-api/unicode.rst:434
msgid ""
"If *u* is ``NULL``, this function behaves like :c:func:"
"`PyUnicode_FromUnicode` with the buffer set to ``NULL``.  This usage is "
"deprecated in favor of :c:func:`PyUnicode_New`, and will be removed in "
"Python 3.12."
msgstr ""
"Si *u* es ``NULL``, esta función se comporta como :c:func:"
"`PyUnicode_FromUnicode` con el búfer establecido en ``NULL``. Este uso está "
"obsoleto a favor de :c:func:`PyUnicode_New` y se eliminará en Python 3.12."

#: ../../c-api/unicode.rst:441
msgid ""
"Create a Unicode object from a UTF-8 encoded null-terminated char buffer *u*."
msgstr ""
"Crear un objeto Unicode a partir de un búfer de caracteres terminado en nulo "
"codificado en UTF-8 *u*."

#: ../../c-api/unicode.rst:447
msgid ""
"Take a C :c:func:`printf`\\ -style *format* string and a variable number of "
"arguments, calculate the size of the resulting Python Unicode string and "
"return a string with the values formatted into it.  The variable arguments "
"must be C types and must correspond exactly to the format characters in the "
"*format* ASCII-encoded string. The following format characters are allowed:"
msgstr ""
"Tome una cadena de formato de estilo C :c:func:`printf` y un número variable "
"de argumentos, calcule el tamaño de la cadena de caracteres Unicode "
"resultante de Python y devuelva una cadena con los valores formateados en "
"ella. Los argumentos variables deben ser tipos de C y deben corresponder "
"exactamente a los caracteres de formato en la cadena *format* codificada en "
"ASCII. Se permiten los siguientes caracteres de formato:"

#: ../../c-api/unicode.rst:462
msgid "Format Characters"
msgstr "Caracteres de formato"

#: ../../c-api/unicode.rst:462
msgid "Type"
msgstr "Tipo"

#: ../../c-api/unicode.rst:462
msgid "Comment"
msgstr "Comentario"

#: ../../c-api/unicode.rst:464
msgid ":attr:`%%`"
msgstr ":attr:`%%`"

#: ../../c-api/unicode.rst:464
msgid "*n/a*"
msgstr "*n/a*"

#: ../../c-api/unicode.rst:464
msgid "The literal % character."
msgstr "El carácter % literal."

#: ../../c-api/unicode.rst:466
msgid ":attr:`%c`"
msgstr ":attr:`%c`"

#: ../../c-api/unicode.rst:466 ../../c-api/unicode.rst:469
#: ../../c-api/unicode.rst:502 ../../c-api/unicode.rst:505
msgid "int"
msgstr "int"

#: ../../c-api/unicode.rst:466
msgid "A single character, represented as a C int."
msgstr "Un solo carácter, representado como un C int."

#: ../../c-api/unicode.rst:469
msgid ":attr:`%d`"
msgstr ":attr:`%d`"

#: ../../c-api/unicode.rst:469
msgid "Equivalent to ``printf(\"%d\")``. [1]_"
msgstr "Equivalente a ``printf(\"%d\")``. [1]_"

#: ../../c-api/unicode.rst:472
msgid ":attr:`%u`"
msgstr ":attr:`%u`"

#: ../../c-api/unicode.rst:472
msgid "unsigned int"
msgstr "int sin firmar"

#: ../../c-api/unicode.rst:472
msgid "Equivalent to ``printf(\"%u\")``. [1]_"
msgstr "Equivalente a ``printf(\"%u\")``. [1]_"

#: ../../c-api/unicode.rst:475
msgid ":attr:`%ld`"
msgstr ":attr:`%ld`"

#: ../../c-api/unicode.rst:475 ../../c-api/unicode.rst:478
msgid "long"
msgstr "long"

#: ../../c-api/unicode.rst:475
msgid "Equivalent to ``printf(\"%ld\")``. [1]_"
msgstr "Equivalente a ``printf(\"%ld\")``. [1]_"

#: ../../c-api/unicode.rst:478
msgid ":attr:`%li`"
msgstr ":attr:`%li`"

#: ../../c-api/unicode.rst:478
msgid "Equivalent to ``printf(\"%li\")``. [1]_"
msgstr "Equivalente a ``printf(\"%li\")``. [1]_"

#: ../../c-api/unicode.rst:481
msgid ":attr:`%lu`"
msgstr ":attr:`%lu`"

#: ../../c-api/unicode.rst:481
msgid "unsigned long"
msgstr "int sin firmar"

#: ../../c-api/unicode.rst:481
msgid "Equivalent to ``printf(\"%lu\")``. [1]_"
msgstr "Equivalente a ``printf(\"%lu\")``. [1]_"

#: ../../c-api/unicode.rst:484
msgid ":attr:`%lld`"
msgstr ":attr:`%lld`"

#: ../../c-api/unicode.rst:484 ../../c-api/unicode.rst:487
msgid "long long"
msgstr "long long"

#: ../../c-api/unicode.rst:484
msgid "Equivalent to ``printf(\"%lld\")``. [1]_"
msgstr "Equivalente a ``printf(\"%lld\")``. [1]_"

#: ../../c-api/unicode.rst:487
msgid ":attr:`%lli`"
msgstr ":attr:`%lli`"

#: ../../c-api/unicode.rst:487
msgid "Equivalent to ``printf(\"%lli\")``. [1]_"
msgstr "Equivalente a ``printf(\"%lli\")``. [1]_"

#: ../../c-api/unicode.rst:490
msgid ":attr:`%llu`"
msgstr ":attr:`%llu`"

#: ../../c-api/unicode.rst:490
msgid "unsigned long long"
msgstr "sin firmar long long"

#: ../../c-api/unicode.rst:490
msgid "Equivalent to ``printf(\"%llu\")``. [1]_"
msgstr "Equivalente a ``printf(\"%llu\")``. [1]_"

#: ../../c-api/unicode.rst:493
msgid ":attr:`%zd`"
msgstr ":attr:`%zd`"

#: ../../c-api/unicode.rst:493 ../../c-api/unicode.rst:496
msgid ":c:type:`\\ Py_ssize_t`"
msgstr ":c:type:`\\ Py_ssize_t`"

#: ../../c-api/unicode.rst:493
msgid "Equivalent to ``printf(\"%zd\")``. [1]_"
msgstr "Equivalente a ``printf(\"%zd\")``. [1]_"

#: ../../c-api/unicode.rst:496
msgid ":attr:`%zi`"
msgstr ":attr:`%zi`"

#: ../../c-api/unicode.rst:496
msgid "Equivalent to ``printf(\"%zi\")``. [1]_"
msgstr "Equivalente a ``printf(\"%zi\")``. [1]_"

#: ../../c-api/unicode.rst:499
msgid ":attr:`%zu`"
msgstr ":attr:`%zu`"

#: ../../c-api/unicode.rst:499
msgid "size_t"
msgstr "size_t"

#: ../../c-api/unicode.rst:499
msgid "Equivalent to ``printf(\"%zu\")``. [1]_"
msgstr "Equivalente a ``printf(\"%zu\")``. [1]_"

#: ../../c-api/unicode.rst:502
msgid ":attr:`%i`"
msgstr ":attr:`%i`"

#: ../../c-api/unicode.rst:502
msgid "Equivalent to ``printf(\"%i\")``. [1]_"
msgstr "Equivalente a ``printf(\"%i\")``. [1]_"

#: ../../c-api/unicode.rst:505
msgid ":attr:`%x`"
msgstr ":attr:`%x`"

#: ../../c-api/unicode.rst:505
msgid "Equivalent to ``printf(\"%x\")``. [1]_"
msgstr "Equivalente a ``printf(\"%x\")``. [1]_"

#: ../../c-api/unicode.rst:508
msgid ":attr:`%s`"
msgstr ":attr:`%s`"

#: ../../c-api/unicode.rst:508
msgid "const char\\*"
msgstr "const char\\*"

#: ../../c-api/unicode.rst:508
msgid "A null-terminated C character array."
msgstr "Una matriz de caracteres C terminada en nulo."

#: ../../c-api/unicode.rst:511
msgid ":attr:`%p`"
msgstr ":attr:`%p`"

#: ../../c-api/unicode.rst:511
msgid "const void\\*"
msgstr "const void\\*"

#: ../../c-api/unicode.rst:511
msgid ""
"The hex representation of a C pointer. Mostly equivalent to "
"``printf(\"%p\")`` except that it is guaranteed to start with the literal "
"``0x`` regardless of what the platform's ``printf`` yields."
msgstr ""
"La representación hexadecimal de un puntero C. Mayormente equivalente a "
"``printf(\"%p\")`` excepto si se garantiza que comienza con el literal  "
"``0x`` independientemente de lo que produzca``printf`` de la plataforma."

#: ../../c-api/unicode.rst:519
msgid ":attr:`%A`"
msgstr ":attr:`%A`"

#: ../../c-api/unicode.rst:519 ../../c-api/unicode.rst:522
#: ../../c-api/unicode.rst:531 ../../c-api/unicode.rst:534
msgid "PyObject\\*"
msgstr "PyObject\\*"

#: ../../c-api/unicode.rst:519
msgid "The result of calling :func:`ascii`."
msgstr "El resultado de llamar a :func:`ascii`."

#: ../../c-api/unicode.rst:522
msgid ":attr:`%U`"
msgstr ":attr:`%U`"

#: ../../c-api/unicode.rst:522
msgid "A Unicode object."
msgstr "Un objeto Unicode."

#: ../../c-api/unicode.rst:524
msgid ":attr:`%V`"
msgstr ":attr:`%V`"

#: ../../c-api/unicode.rst:524
msgid "PyObject\\*, const char\\*"
msgstr "PyObject*, const char\\*"

#: ../../c-api/unicode.rst:524
msgid ""
"A Unicode object (which may be ``NULL``) and a null-terminated C character "
"array as a second parameter (which will be used, if the first parameter is "
"``NULL``)."
msgstr ""
"Un objeto Unicode (que puede ser ``NULL``) y una matriz de caracteres C "
"terminada en cero como segundo parámetro (que se utilizará si el primer "
"parámetro es ``NULL``)."

#: ../../c-api/unicode.rst:531
msgid ":attr:`%S`"
msgstr ":attr:`%S`"

#: ../../c-api/unicode.rst:531
msgid "The result of calling :c:func:`PyObject_Str`."
msgstr "El resultado de llamar a :c:func:`PyObject_Str`."

#: ../../c-api/unicode.rst:534
msgid ":attr:`%R`"
msgstr ":attr:`%R`"

#: ../../c-api/unicode.rst:534
msgid "The result of calling :c:func:`PyObject_Repr`."
msgstr "El resultado de llamar a :c:func:`PyObject_Repr`."

#: ../../c-api/unicode.rst:538
msgid ""
"An unrecognized format character causes all the rest of the format string to "
"be copied as-is to the result string, and any extra arguments discarded."
msgstr ""
"Un carácter de formato no reconocido hace que el resto de la cadena de "
"formato se copie tal cual en la cadena resultante, y se descarten los "
"argumentos adicionales."

#: ../../c-api/unicode.rst:542
msgid ""
"The width formatter unit is number of characters rather than bytes. The "
"precision formatter unit is number of bytes for ``\"%s\"`` and ``\"%V\"`` "
"(if the ``PyObject*`` argument is ``NULL``), and a number of characters for "
"``\"%A\"``, ``\"%U\"``, ``\"%S\"``, ``\"%R\"`` and ``\"%V\"`` (if the "
"``PyObject*`` argument is not ``NULL``)."
msgstr ""
"La unidad del formateador de anchura es el número de caracteres en lugar de "
"bytes. La unidad del formateador de precisión es el número de bytes para "
"``\"%s\"`` y ``\"%V\"`` (si el argumento ``PyObject*`` es ``NULL``), y el "
"número de caracteres para ``\"%A\"``, ``\"%U\"``, ``\"%S\"``, ``\"%R\"`` y "
"``\"%V\"`` (si el argumento ``PyObject*`` no es ``NULL``)."

#: ../../c-api/unicode.rst:548
msgid ""
"For integer specifiers (d, u, ld, li, lu, lld, lli, llu, zd, zi, zu, i, x): "
"the 0-conversion flag has effect even when a precision is given."
msgstr ""
"Para especificadores enteros (d, u, ld, li, lu, lld, lli, llu, zd, zi, zu, "
"i, x): la bandera de conversión 0 tiene efecto incluso cuando se da una "
"precisión."

#: ../../c-api/unicode.rst:551
msgid "Support for ``\"%lld\"`` and ``\"%llu\"`` added."
msgstr "Se ha añadido compatibilidad con ``\"%lld\"`` y ``\"%llu\"``."

#: ../../c-api/unicode.rst:554
msgid "Support for ``\"%li\"``, ``\"%lli\"`` and ``\"%zi\"`` added."
msgstr ""
"Se ha añadido compatibilidad con ``\"%li\"``, ``\"%lli\"`` y ``\"%zi\"``."

#: ../../c-api/unicode.rst:557
msgid ""
"Support width and precision formatter for ``\"%s\"``, ``\"%A\"``, "
"``\"%U\"``, ``\"%V\"``, ``\"%S\"``, ``\"%R\"`` added."
msgstr ""
"Formateador de ancho y precisión para ``\"%s\"``, ``\"%A\"``, ``\"%U\"``, "
"``\"%V\"``, ``\"%S\"``, ``\"%R\"`` añadido."

#: ../../c-api/unicode.rst:564
msgid ""
"Identical to :c:func:`PyUnicode_FromFormat` except that it takes exactly two "
"arguments."
msgstr ""
"Idéntico a :c:func:`PyUnicode_FromFormat` excepto que toma exactamente dos "
"argumentos."

#: ../../c-api/unicode.rst:571
msgid "Decode an encoded object *obj* to a Unicode object."
msgstr "Decodifica un objeto codificado *obj* a un objeto Unicode."

#: ../../c-api/unicode.rst:573
msgid ""
":class:`bytes`, :class:`bytearray` and other :term:`bytes-like objects "
"<bytes-like object>` are decoded according to the given *encoding* and using "
"the error handling defined by *errors*. Both can be ``NULL`` to have the "
"interface use the default values (see :ref:`builtincodecs` for details)."
msgstr ""
":class:`bytes` :class:`bytearray` y otros objetos :term:`bytes-like `  "
"<bytes-like object> se decodifican de acuerdo con la *codificación* dada y "
"usando el tratamiento de errores definido por *errors*. Ambos pueden ser  "
"``NULL`` para que la interfaz use los valores por defecto (ver :ref:"
"`builtincodecs` para más detalles)."

#: ../../c-api/unicode.rst:579
msgid ""
"All other objects, including Unicode objects, cause a :exc:`TypeError` to be "
"set."
msgstr ""
"Todos los demás objetos, incluidos los Unicode, hacen que se establezca un :"
"exc:`TypeError`."

#: ../../c-api/unicode.rst:582
msgid ""
"The API returns ``NULL`` if there was an error.  The caller is responsible "
"for decref'ing the returned objects."
msgstr ""
"La API devuelve ``NULL`` si se ha producido un error.  Quien llama es "
"responsable de decref'ing los objetos devueltos."

#: ../../c-api/unicode.rst:588
msgid "Return the length of the Unicode object, in code points."
msgstr "Devuelve la longitud del objeto Unicode, en puntos de código."

#: ../../c-api/unicode.rst:599
msgid ""
"Copy characters from one Unicode object into another.  This function "
"performs character conversion when necessary and falls back to :c:func:"
"`memcpy` if possible.  Returns ``-1`` and sets an exception on error, "
"otherwise returns the number of copied characters."
msgstr ""
"Copia caracteres de un objeto Unicode a otro.  Esta función realiza la "
"conversión de caracteres cuando es necesario y vuelve a :c:func:`memcpy` si "
"es posible.  Devuelve ``-1`` y establece una excepción en caso de error; en "
"caso contrario, devuelve el número de caracteres copiados."

#: ../../c-api/unicode.rst:610
msgid ""
"Fill a string with a character: write *fill_char* into ``unicode[start:"
"start+length]``."
msgstr ""
"Llena una cadena con un carácter: escribe *fill_char* en ``unicode[start:"
"start+length]``."

#: ../../c-api/unicode.rst:613
msgid ""
"Fail if *fill_char* is bigger than the string maximum character, or if the "
"string has more than 1 reference."
msgstr ""
"Fallo si *fill_char* es mayor que el carácter máximo de la cadena, o si la "
"cadena tiene más de 1 referencia."

#: ../../c-api/unicode.rst:616
msgid ""
"Return the number of written character, or return ``-1`` and raise an "
"exception on error."
msgstr ""
"Devuelve el número de caracteres escritos, o devuelve ``-1`` y lanza una "
"excepción en caso de error."

#: ../../c-api/unicode.rst:625
msgid ""
"Write a character to a string.  The string must have been created through :c:"
"func:`PyUnicode_New`.  Since Unicode strings are supposed to be immutable, "
"the string must not be shared, or have been hashed yet."
msgstr ""

#: ../../c-api/unicode.rst:629
msgid ""
"This function checks that *unicode* is a Unicode object, that the index is "
"not out of bounds, and that the object can be modified safely (i.e. that it "
"its reference count is one)."
msgstr ""

#: ../../c-api/unicode.rst:638
msgid ""
"Read a character from a string.  This function checks that *unicode* is a "
"Unicode object and the index is not out of bounds, in contrast to the macro "
"version :c:func:`PyUnicode_READ_CHAR`."
msgstr ""

#: ../../c-api/unicode.rst:648
msgid ""
"Return a substring of *str*, from character index *start* (included) to "
"character index *end* (excluded).  Negative indices are not supported."
msgstr ""

#: ../../c-api/unicode.rst:657
msgid ""
"Copy the string *u* into a UCS4 buffer, including a null character, if "
"*copy_null* is set.  Returns ``NULL`` and sets an exception on error (in "
"particular, a :exc:`SystemError` if *buflen* is smaller than the length of "
"*u*).  *buffer* is returned on success."
msgstr ""

#: ../../c-api/unicode.rst:667
msgid ""
"Copy the string *u* into a new UCS4 buffer that is allocated using :c:func:"
"`PyMem_Malloc`.  If this fails, ``NULL`` is returned with a :exc:"
"`MemoryError` set.  The returned buffer always has an extra null code point "
"appended."
msgstr ""

#: ../../c-api/unicode.rst:676
msgid "Deprecated Py_UNICODE APIs"
msgstr ""

#: ../../c-api/unicode.rst:680
msgid ""
"These API functions are deprecated with the implementation of :pep:`393`. "
"Extension modules can continue using them, as they will not be removed in "
"Python 3.x, but need to be aware that their use can now cause performance "
"and memory hits."
msgstr ""

#: ../../c-api/unicode.rst:687
msgid ""
"Create a Unicode object from the Py_UNICODE buffer *u* of the given size. "
"*u* may be ``NULL`` which causes the contents to be undefined. It is the "
"user's responsibility to fill in the needed data.  The buffer is copied into "
"the new object."
msgstr ""

#: ../../c-api/unicode.rst:692
msgid ""
"If the buffer is not ``NULL``, the return value might be a shared object. "
"Therefore, modification of the resulting Unicode object is only allowed when "
"*u* is ``NULL``."
msgstr ""

#: ../../c-api/unicode.rst:696
msgid ""
"If the buffer is ``NULL``, :c:func:`PyUnicode_READY` must be called once the "
"string content has been filled before using any of the access macros such "
"as :c:func:`PyUnicode_KIND`."
msgstr ""

#: ../../c-api/unicode.rst:703
msgid ""
"Part of the old-style Unicode API, please migrate to using :c:func:"
"`PyUnicode_FromKindAndData`, :c:func:`PyUnicode_FromWideChar`, or :c:func:"
"`PyUnicode_New`."
msgstr ""

#: ../../c-api/unicode.rst:708
msgid ""
"Return a read-only pointer to the Unicode object's internal :c:type:"
"`Py_UNICODE` buffer, or ``NULL`` on error. This will create the :c:expr:"
"`Py_UNICODE*` representation of the object if it is not yet available. The "
"buffer is always terminated with an extra null code point. Note that the "
"resulting :c:type:`Py_UNICODE` string may also contain embedded null code "
"points, which would cause the string to be truncated when used in most C "
"functions."
msgstr ""

#: ../../c-api/unicode.rst:719 ../../c-api/unicode.rst:746
msgid ""
"Part of the old-style Unicode API, please migrate to using :c:func:"
"`PyUnicode_AsUCS4`, :c:func:`PyUnicode_AsWideChar`, :c:func:"
"`PyUnicode_ReadChar` or similar new APIs."
msgstr ""

#: ../../c-api/unicode.rst:724
msgid ""
"Create a Unicode object by replacing all decimal digits in :c:type:"
"`Py_UNICODE` buffer of the given *size* by ASCII digits 0--9 according to "
"their decimal value.  Return ``NULL`` if an exception occurs."
msgstr ""

#: ../../c-api/unicode.rst:730
msgid ""
"Part of the old-style :c:type:`Py_UNICODE` API; please migrate to using :c:"
"func:`Py_UNICODE_TODECIMAL`."
msgstr ""

#: ../../c-api/unicode.rst:735
msgid ""
"Like :c:func:`PyUnicode_AsUnicode`, but also saves the :c:func:`Py_UNICODE` "
"array length (excluding the extra null terminator) in *size*. Note that the "
"resulting :c:expr:`Py_UNICODE*` string may contain embedded null code "
"points, which would cause the string to be truncated when used in most C "
"functions."
msgstr ""

#: ../../c-api/unicode.rst:751
msgid ""
"Return the size of the deprecated :c:type:`Py_UNICODE` representation, in "
"code units (this includes surrogate pairs as 2 units)."
msgstr ""

#: ../../c-api/unicode.rst:761
msgid ""
"Copy an instance of a Unicode subtype to a new true Unicode object if "
"necessary. If *obj* is already a true Unicode object (not a subtype), return "
"the reference with incremented refcount."
msgstr ""

#: ../../c-api/unicode.rst:765
msgid ""
"Objects other than Unicode or its subtypes will cause a :exc:`TypeError`."
msgstr ""

#: ../../c-api/unicode.rst:769
msgid "Locale Encoding"
msgstr ""

#: ../../c-api/unicode.rst:771
msgid ""
"The current locale encoding can be used to decode text from the operating "
"system."
msgstr ""

#: ../../c-api/unicode.rst:778
msgid ""
"Decode a string from UTF-8 on Android and VxWorks, or from the current "
"locale encoding on other platforms. The supported error handlers are "
"``\"strict\"`` and ``\"surrogateescape\"`` (:pep:`383`). The decoder uses "
"``\"strict\"`` error handler if *errors* is ``NULL``.  *str* must end with a "
"null character but cannot contain embedded null characters."
msgstr ""

#: ../../c-api/unicode.rst:785
msgid ""
"Use :c:func:`PyUnicode_DecodeFSDefaultAndSize` to decode a string from :c:"
"data:`Py_FileSystemDefaultEncoding` (the locale encoding read at Python "
"startup)."
msgstr ""

#: ../../c-api/unicode.rst:789 ../../c-api/unicode.rst:825
msgid "This function ignores the :ref:`Python UTF-8 Mode <utf8-mode>`."
msgstr ""

#: ../../c-api/unicode.rst:793 ../../c-api/unicode.rst:896
msgid "The :c:func:`Py_DecodeLocale` function."
msgstr ""

#: ../../c-api/unicode.rst:797
msgid ""
"The function now also uses the current locale encoding for the "
"``surrogateescape`` error handler, except on Android. Previously, :c:func:"
"`Py_DecodeLocale` was used for the ``surrogateescape``, and the current "
"locale encoding was used for ``strict``."
msgstr ""

#: ../../c-api/unicode.rst:806
msgid ""
"Similar to :c:func:`PyUnicode_DecodeLocaleAndSize`, but compute the string "
"length using :c:func:`strlen`."
msgstr ""

#: ../../c-api/unicode.rst:814
msgid ""
"Encode a Unicode object to UTF-8 on Android and VxWorks, or to the current "
"locale encoding on other platforms. The supported error handlers are "
"``\"strict\"`` and ``\"surrogateescape\"`` (:pep:`383`). The encoder uses "
"``\"strict\"`` error handler if *errors* is ``NULL``. Return a :class:"
"`bytes` object. *unicode* cannot contain embedded null characters."
msgstr ""

#: ../../c-api/unicode.rst:821
msgid ""
"Use :c:func:`PyUnicode_EncodeFSDefault` to encode a string to :c:data:"
"`Py_FileSystemDefaultEncoding` (the locale encoding read at Python startup)."
msgstr ""

#: ../../c-api/unicode.rst:829 ../../c-api/unicode.rst:932
msgid "The :c:func:`Py_EncodeLocale` function."
msgstr ""

#: ../../c-api/unicode.rst:833
msgid ""
"The function now also uses the current locale encoding for the "
"``surrogateescape`` error handler, except on Android. Previously, :c:func:"
"`Py_EncodeLocale` was used for the ``surrogateescape``, and the current "
"locale encoding was used for ``strict``."
msgstr ""

#: ../../c-api/unicode.rst:842
msgid "File System Encoding"
msgstr ""

#: ../../c-api/unicode.rst:844
msgid ""
"To encode and decode file names and other environment strings, :c:data:"
"`Py_FileSystemDefaultEncoding` should be used as the encoding, and :c:data:"
"`Py_FileSystemDefaultEncodeErrors` should be used as the error handler (:pep:"
"`383` and :pep:`529`). To encode file names to :class:`bytes` during "
"argument parsing, the ``\"O&\"`` converter should be used, passing :c:func:"
"`PyUnicode_FSConverter` as the conversion function:"
msgstr ""

#: ../../c-api/unicode.rst:853
msgid ""
"ParseTuple converter: encode :class:`str` objects -- obtained directly or "
"through the :class:`os.PathLike` interface -- to :class:`bytes` using :c:"
"func:`PyUnicode_EncodeFSDefault`; :class:`bytes` objects are output as-is. "
"*result* must be a :c:expr:`PyBytesObject*` which must be released when it "
"is no longer used."
msgstr ""

#: ../../c-api/unicode.rst:861 ../../c-api/unicode.rst:878
msgid "Accepts a :term:`path-like object`."
msgstr ""

#: ../../c-api/unicode.rst:864
msgid ""
"To decode file names to :class:`str` during argument parsing, the ``\"O&\"`` "
"converter should be used, passing :c:func:`PyUnicode_FSDecoder` as the "
"conversion function:"
msgstr ""

#: ../../c-api/unicode.rst:870
msgid ""
"ParseTuple converter: decode :class:`bytes` objects -- obtained either "
"directly or indirectly through the :class:`os.PathLike` interface -- to :"
"class:`str` using :c:func:`PyUnicode_DecodeFSDefaultAndSize`; :class:`str` "
"objects are output as-is. *result* must be a :c:expr:`PyUnicodeObject*` "
"which must be released when it is no longer used."
msgstr ""

#: ../../c-api/unicode.rst:884
msgid "Decode a string from the :term:`filesystem encoding and error handler`."
msgstr ""

#: ../../c-api/unicode.rst:886 ../../c-api/unicode.rst:907
#: ../../c-api/unicode.rst:923
msgid ""
"If :c:data:`Py_FileSystemDefaultEncoding` is not set, fall back to the "
"locale encoding."
msgstr ""

#: ../../c-api/unicode.rst:889
msgid ""
":c:data:`Py_FileSystemDefaultEncoding` is initialized at startup from the "
"locale encoding and cannot be modified later. If you need to decode a string "
"from the current locale encoding, use :c:func:"
"`PyUnicode_DecodeLocaleAndSize`."
msgstr ""

#: ../../c-api/unicode.rst:898 ../../c-api/unicode.rst:912
#: ../../c-api/unicode.rst:936
msgid "Use :c:data:`Py_FileSystemDefaultEncodeErrors` error handler."
msgstr ""

#: ../../c-api/unicode.rst:904
msgid ""
"Decode a null-terminated string from the :term:`filesystem encoding and "
"error handler`."
msgstr ""

#: ../../c-api/unicode.rst:910
msgid ""
"Use :c:func:`PyUnicode_DecodeFSDefaultAndSize` if you know the string length."
msgstr ""

#: ../../c-api/unicode.rst:918
msgid ""
"Encode a Unicode object to :c:data:`Py_FileSystemDefaultEncoding` with the :"
"c:data:`Py_FileSystemDefaultEncodeErrors` error handler, and return :class:"
"`bytes`. Note that the resulting :class:`bytes` object may contain null "
"bytes."
msgstr ""

#: ../../c-api/unicode.rst:926
msgid ""
":c:data:`Py_FileSystemDefaultEncoding` is initialized at startup from the "
"locale encoding and cannot be modified later. If you need to encode a string "
"to the current locale encoding, use :c:func:`PyUnicode_EncodeLocale`."
msgstr ""

#: ../../c-api/unicode.rst:940
msgid "wchar_t Support"
msgstr ""

#: ../../c-api/unicode.rst:942
msgid ":c:expr:`wchar_t` support for platforms which support it:"
msgstr ""

#: ../../c-api/unicode.rst:946
msgid ""
"Create a Unicode object from the :c:expr:`wchar_t` buffer *w* of the given "
"*size*. Passing ``-1`` as the *size* indicates that the function must itself "
"compute the length, using wcslen. Return ``NULL`` on failure."
msgstr ""

#: ../../c-api/unicode.rst:954
msgid ""
"Copy the Unicode object contents into the :c:expr:`wchar_t` buffer *w*.  At "
"most *size* :c:expr:`wchar_t` characters are copied (excluding a possibly "
"trailing null termination character).  Return the number of :c:expr:"
"`wchar_t` characters copied or ``-1`` in case of an error.  Note that the "
"resulting :c:expr:`wchar_t*` string may or may not be null-terminated.  It "
"is the responsibility of the caller to make sure that the :c:expr:`wchar_t*` "
"string is null-terminated in case this is required by the application. Also, "
"note that the :c:expr:`wchar_t*` string might contain null characters, which "
"would cause the string to be truncated when used with most C functions."
msgstr ""

#: ../../c-api/unicode.rst:967
msgid ""
"Convert the Unicode object to a wide character string. The output string "
"always ends with a null character. If *size* is not ``NULL``, write the "
"number of wide characters (excluding the trailing null termination "
"character) into *\\*size*. Note that the resulting :c:expr:`wchar_t` string "
"might contain null characters, which would cause the string to be truncated "
"when used with most C functions. If *size* is ``NULL`` and the :c:expr:"
"`wchar_t*` string contains null characters a :exc:`ValueError` is raised."
msgstr ""

#: ../../c-api/unicode.rst:975
msgid ""
"Returns a buffer allocated by :c:func:`PyMem_Alloc` (use :c:func:"
"`PyMem_Free` to free it) on success. On error, returns ``NULL`` and "
"*\\*size* is undefined. Raises a :exc:`MemoryError` if memory allocation is "
"failed."
msgstr ""

#: ../../c-api/unicode.rst:982
msgid ""
"Raises a :exc:`ValueError` if *size* is ``NULL`` and the :c:expr:`wchar_t*` "
"string contains null characters."
msgstr ""

#: ../../c-api/unicode.rst:990
msgid "Built-in Codecs"
msgstr ""

#: ../../c-api/unicode.rst:992
msgid ""
"Python provides a set of built-in codecs which are written in C for speed. "
"All of these codecs are directly usable via the following functions."
msgstr ""

#: ../../c-api/unicode.rst:995
msgid ""
"Many of the following APIs take two arguments encoding and errors, and they "
"have the same semantics as the ones of the built-in :func:`str` string "
"object constructor."
msgstr ""

#: ../../c-api/unicode.rst:999
msgid ""
"Setting encoding to ``NULL`` causes the default encoding to be used which is "
"UTF-8.  The file system calls should use :c:func:`PyUnicode_FSConverter` for "
"encoding file names. This uses the variable :c:data:"
"`Py_FileSystemDefaultEncoding` internally. This variable should be treated "
"as read-only: on some systems, it will be a pointer to a static string, on "
"others, it will change at run-time (such as when the application invokes "
"setlocale)."
msgstr ""

#: ../../c-api/unicode.rst:1007
msgid ""
"Error handling is set by errors which may also be set to ``NULL`` meaning to "
"use the default handling defined for the codec.  Default error handling for "
"all built-in codecs is \"strict\" (:exc:`ValueError` is raised)."
msgstr ""

#: ../../c-api/unicode.rst:1011
msgid ""
"The codecs all use a similar interface.  Only deviations from the following "
"generic ones are documented for simplicity."
msgstr ""

#: ../../c-api/unicode.rst:1016
msgid "Generic Codecs"
msgstr ""

#: ../../c-api/unicode.rst:1018
msgid "These are the generic codec APIs:"
msgstr ""

#: ../../c-api/unicode.rst:1024
msgid ""
"Create a Unicode object by decoding *size* bytes of the encoded string *s*. "
"*encoding* and *errors* have the same meaning as the parameters of the same "
"name in the :func:`str` built-in function.  The codec to be used is looked "
"up using the Python codec registry.  Return ``NULL`` if an exception was "
"raised by the codec."
msgstr ""

#: ../../c-api/unicode.rst:1034
msgid ""
"Encode a Unicode object and return the result as Python bytes object. "
"*encoding* and *errors* have the same meaning as the parameters of the same "
"name in the Unicode :meth:`~str.encode` method. The codec to be used is "
"looked up using the Python codec registry. Return ``NULL`` if an exception "
"was raised by the codec."
msgstr ""

#: ../../c-api/unicode.rst:1044
msgid ""
"Encode the :c:type:`Py_UNICODE` buffer *s* of the given *size* and return a "
"Python bytes object.  *encoding* and *errors* have the same meaning as the "
"parameters of the same name in the Unicode :meth:`~str.encode` method.  The "
"codec to be used is looked up using the Python codec registry.  Return "
"``NULL`` if an exception was raised by the codec."
msgstr ""

#: ../../c-api/unicode.rst:1052 ../../c-api/unicode.rst:1313
msgid ""
"Part of the old-style :c:type:`Py_UNICODE` API; please migrate to using :c:"
"func:`PyUnicode_AsEncodedString`."
msgstr ""

#: ../../c-api/unicode.rst:1056
msgid "UTF-8 Codecs"
msgstr ""

#: ../../c-api/unicode.rst:1058
msgid "These are the UTF-8 codec APIs:"
msgstr ""

#: ../../c-api/unicode.rst:1063
msgid ""
"Create a Unicode object by decoding *size* bytes of the UTF-8 encoded string "
"*s*. Return ``NULL`` if an exception was raised by the codec."
msgstr ""

#: ../../c-api/unicode.rst:1070
msgid ""
"If *consumed* is ``NULL``, behave like :c:func:`PyUnicode_DecodeUTF8`. If "
"*consumed* is not ``NULL``, trailing incomplete UTF-8 byte sequences will "
"not be treated as an error. Those bytes will not be decoded and the number "
"of bytes that have been decoded will be stored in *consumed*."
msgstr ""

#: ../../c-api/unicode.rst:1078
msgid ""
"Encode a Unicode object using UTF-8 and return the result as Python bytes "
"object.  Error handling is \"strict\".  Return ``NULL`` if an exception was "
"raised by the codec."
msgstr ""

#: ../../c-api/unicode.rst:1085
msgid ""
"Return a pointer to the UTF-8 encoding of the Unicode object, and store the "
"size of the encoded representation (in bytes) in *size*.  The *size* "
"argument can be ``NULL``; in this case no size will be stored.  The returned "
"buffer always has an extra null byte appended (not included in *size*), "
"regardless of whether there are any other null code points."
msgstr ""

#: ../../c-api/unicode.rst:1091
msgid ""
"In the case of an error, ``NULL`` is returned with an exception set and no "
"*size* is stored."
msgstr ""

#: ../../c-api/unicode.rst:1094
msgid ""
"This caches the UTF-8 representation of the string in the Unicode object, "
"and subsequent calls will return a pointer to the same buffer.  The caller "
"is not responsible for deallocating the buffer. The buffer is deallocated "
"and pointers to it become invalid when the Unicode object is garbage "
"collected."
msgstr ""

#: ../../c-api/unicode.rst:1101 ../../c-api/unicode.rst:1114
msgid "The return type is now ``const char *`` rather of ``char *``."
msgstr ""

#: ../../c-api/unicode.rst:1104
msgid "This function is a part of the :ref:`limited API <stable>`."
msgstr ""

#: ../../c-api/unicode.rst:1110
msgid "As :c:func:`PyUnicode_AsUTF8AndSize`, but does not store the size."
msgstr ""

#: ../../c-api/unicode.rst:1120
msgid ""
"Encode the :c:type:`Py_UNICODE` buffer *s* of the given *size* using UTF-8 "
"and return a Python bytes object.  Return ``NULL`` if an exception was "
"raised by the codec."
msgstr ""

#: ../../c-api/unicode.rst:1127
msgid ""
"Part of the old-style :c:type:`Py_UNICODE` API; please migrate to using :c:"
"func:`PyUnicode_AsUTF8String`, :c:func:`PyUnicode_AsUTF8AndSize` or :c:func:"
"`PyUnicode_AsEncodedString`."
msgstr ""

#: ../../c-api/unicode.rst:1131
msgid "UTF-32 Codecs"
msgstr ""

#: ../../c-api/unicode.rst:1133
msgid "These are the UTF-32 codec APIs:"
msgstr ""

#: ../../c-api/unicode.rst:1139
msgid ""
"Decode *size* bytes from a UTF-32 encoded buffer string and return the "
"corresponding Unicode object.  *errors* (if non-``NULL``) defines the error "
"handling. It defaults to \"strict\"."
msgstr ""

#: ../../c-api/unicode.rst:1143 ../../c-api/unicode.rst:1216
msgid ""
"If *byteorder* is non-``NULL``, the decoder starts decoding using the given "
"byte order::"
msgstr ""

#: ../../c-api/unicode.rst:1150
msgid ""
"If ``*byteorder`` is zero, and the first four bytes of the input data are a "
"byte order mark (BOM), the decoder switches to this byte order and the BOM "
"is not copied into the resulting Unicode string.  If ``*byteorder`` is "
"``-1`` or ``1``, any byte order mark is copied to the output."
msgstr ""

#: ../../c-api/unicode.rst:1155
msgid ""
"After completion, *\\*byteorder* is set to the current byte order at the end "
"of input data."
msgstr ""

#: ../../c-api/unicode.rst:1158 ../../c-api/unicode.rst:1232
msgid "If *byteorder* is ``NULL``, the codec starts in native order mode."
msgstr ""

#: ../../c-api/unicode.rst:1160 ../../c-api/unicode.rst:1196
#: ../../c-api/unicode.rst:1234 ../../c-api/unicode.rst:1271
msgid "Return ``NULL`` if an exception was raised by the codec."
msgstr ""

#: ../../c-api/unicode.rst:1166
msgid ""
"If *consumed* is ``NULL``, behave like :c:func:`PyUnicode_DecodeUTF32`. If "
"*consumed* is not ``NULL``, :c:func:`PyUnicode_DecodeUTF32Stateful` will not "
"treat trailing incomplete UTF-32 byte sequences (such as a number of bytes "
"not divisible by four) as an error. Those bytes will not be decoded and the "
"number of bytes that have been decoded will be stored in *consumed*."
msgstr ""

#: ../../c-api/unicode.rst:1175
msgid ""
"Return a Python byte string using the UTF-32 encoding in native byte order. "
"The string always starts with a BOM mark.  Error handling is \"strict\". "
"Return ``NULL`` if an exception was raised by the codec."
msgstr ""

#: ../../c-api/unicode.rst:1183
msgid ""
"Return a Python bytes object holding the UTF-32 encoded value of the Unicode "
"data in *s*.  Output is written according to the following byte order::"
msgstr ""

#: ../../c-api/unicode.rst:1190 ../../c-api/unicode.rst:1264
msgid ""
"If byteorder is ``0``, the output string will always start with the Unicode "
"BOM mark (U+FEFF). In the other two modes, no BOM mark is prepended."
msgstr ""

#: ../../c-api/unicode.rst:1193
msgid ""
"If ``Py_UNICODE_WIDE`` is not defined, surrogate pairs will be output as a "
"single code point."
msgstr ""

#: ../../c-api/unicode.rst:1200
msgid ""
"Part of the old-style :c:type:`Py_UNICODE` API; please migrate to using :c:"
"func:`PyUnicode_AsUTF32String` or :c:func:`PyUnicode_AsEncodedString`."
msgstr ""

#: ../../c-api/unicode.rst:1204
msgid "UTF-16 Codecs"
msgstr ""

#: ../../c-api/unicode.rst:1206
msgid "These are the UTF-16 codec APIs:"
msgstr ""

#: ../../c-api/unicode.rst:1212
msgid ""
"Decode *size* bytes from a UTF-16 encoded buffer string and return the "
"corresponding Unicode object.  *errors* (if non-``NULL``) defines the error "
"handling. It defaults to \"strict\"."
msgstr ""

#: ../../c-api/unicode.rst:1223
msgid ""
"If ``*byteorder`` is zero, and the first two bytes of the input data are a "
"byte order mark (BOM), the decoder switches to this byte order and the BOM "
"is not copied into the resulting Unicode string.  If ``*byteorder`` is "
"``-1`` or ``1``, any byte order mark is copied to the output (where it will "
"result in either a ``\\ufeff`` or a ``\\ufffe`` character)."
msgstr ""

#: ../../c-api/unicode.rst:1229
msgid ""
"After completion, ``*byteorder`` is set to the current byte order at the end "
"of input data."
msgstr ""

#: ../../c-api/unicode.rst:1240
msgid ""
"If *consumed* is ``NULL``, behave like :c:func:`PyUnicode_DecodeUTF16`. If "
"*consumed* is not ``NULL``, :c:func:`PyUnicode_DecodeUTF16Stateful` will not "
"treat trailing incomplete UTF-16 byte sequences (such as an odd number of "
"bytes or a split surrogate pair) as an error. Those bytes will not be "
"decoded and the number of bytes that have been decoded will be stored in "
"*consumed*."
msgstr ""

#: ../../c-api/unicode.rst:1249
msgid ""
"Return a Python byte string using the UTF-16 encoding in native byte order. "
"The string always starts with a BOM mark.  Error handling is \"strict\". "
"Return ``NULL`` if an exception was raised by the codec."
msgstr ""

#: ../../c-api/unicode.rst:1257
msgid ""
"Return a Python bytes object holding the UTF-16 encoded value of the Unicode "
"data in *s*.  Output is written according to the following byte order::"
msgstr ""

#: ../../c-api/unicode.rst:1267
msgid ""
"If ``Py_UNICODE_WIDE`` is defined, a single :c:type:`Py_UNICODE` value may "
"get represented as a surrogate pair. If it is not defined, each :c:type:"
"`Py_UNICODE` values is interpreted as a UCS-2 character."
msgstr ""

#: ../../c-api/unicode.rst:1275
msgid ""
"Part of the old-style :c:type:`Py_UNICODE` API; please migrate to using :c:"
"func:`PyUnicode_AsUTF16String` or :c:func:`PyUnicode_AsEncodedString`."
msgstr ""

#: ../../c-api/unicode.rst:1279
msgid "UTF-7 Codecs"
msgstr ""

#: ../../c-api/unicode.rst:1281
msgid "These are the UTF-7 codec APIs:"
msgstr ""

#: ../../c-api/unicode.rst:1286
msgid ""
"Create a Unicode object by decoding *size* bytes of the UTF-7 encoded string "
"*s*.  Return ``NULL`` if an exception was raised by the codec."
msgstr ""

#: ../../c-api/unicode.rst:1293
msgid ""
"If *consumed* is ``NULL``, behave like :c:func:`PyUnicode_DecodeUTF7`.  If "
"*consumed* is not ``NULL``, trailing incomplete UTF-7 base-64 sections will "
"not be treated as an error.  Those bytes will not be decoded and the number "
"of bytes that have been decoded will be stored in *consumed*."
msgstr ""

#: ../../c-api/unicode.rst:1302
msgid ""
"Encode the :c:type:`Py_UNICODE` buffer of the given size using UTF-7 and "
"return a Python bytes object.  Return ``NULL`` if an exception was raised by "
"the codec."
msgstr ""

#: ../../c-api/unicode.rst:1306
msgid ""
"If *base64SetO* is nonzero, \"Set O\" (punctuation that has no otherwise "
"special meaning) will be encoded in base-64.  If *base64WhiteSpace* is "
"nonzero, whitespace will be encoded in base-64.  Both are set to zero for "
"the Python \"utf-7\" codec."
msgstr ""

#: ../../c-api/unicode.rst:1317
msgid "Unicode-Escape Codecs"
msgstr ""

#: ../../c-api/unicode.rst:1319
msgid "These are the \"Unicode Escape\" codec APIs:"
msgstr ""

#: ../../c-api/unicode.rst:1325
msgid ""
"Create a Unicode object by decoding *size* bytes of the Unicode-Escape "
"encoded string *s*.  Return ``NULL`` if an exception was raised by the codec."
msgstr ""

#: ../../c-api/unicode.rst:1331
msgid ""
"Encode a Unicode object using Unicode-Escape and return the result as a "
"bytes object.  Error handling is \"strict\".  Return ``NULL`` if an "
"exception was raised by the codec."
msgstr ""

#: ../../c-api/unicode.rst:1338
msgid ""
"Encode the :c:type:`Py_UNICODE` buffer of the given *size* using Unicode-"
"Escape and return a bytes object.  Return ``NULL`` if an exception was "
"raised by the codec."
msgstr ""

#: ../../c-api/unicode.rst:1343
msgid ""
"Part of the old-style :c:type:`Py_UNICODE` API; please migrate to using :c:"
"func:`PyUnicode_AsUnicodeEscapeString`."
msgstr ""

#: ../../c-api/unicode.rst:1347
msgid "Raw-Unicode-Escape Codecs"
msgstr ""

#: ../../c-api/unicode.rst:1349
msgid "These are the \"Raw Unicode Escape\" codec APIs:"
msgstr ""

#: ../../c-api/unicode.rst:1355
msgid ""
"Create a Unicode object by decoding *size* bytes of the Raw-Unicode-Escape "
"encoded string *s*.  Return ``NULL`` if an exception was raised by the codec."
msgstr ""

#: ../../c-api/unicode.rst:1361
msgid ""
"Encode a Unicode object using Raw-Unicode-Escape and return the result as a "
"bytes object.  Error handling is \"strict\".  Return ``NULL`` if an "
"exception was raised by the codec."
msgstr ""

#: ../../c-api/unicode.rst:1369
msgid ""
"Encode the :c:type:`Py_UNICODE` buffer of the given *size* using Raw-Unicode-"
"Escape and return a bytes object.  Return ``NULL`` if an exception was "
"raised by the codec."
msgstr ""

#: ../../c-api/unicode.rst:1375
msgid ""
"Part of the old-style :c:type:`Py_UNICODE` API; please migrate to using :c:"
"func:`PyUnicode_AsRawUnicodeEscapeString` or :c:func:"
"`PyUnicode_AsEncodedString`."
msgstr ""

#: ../../c-api/unicode.rst:1379
msgid "Latin-1 Codecs"
msgstr ""

#: ../../c-api/unicode.rst:1381
msgid ""
"These are the Latin-1 codec APIs: Latin-1 corresponds to the first 256 "
"Unicode ordinals and only these are accepted by the codecs during encoding."
msgstr ""

#: ../../c-api/unicode.rst:1387
msgid ""
"Create a Unicode object by decoding *size* bytes of the Latin-1 encoded "
"string *s*.  Return ``NULL`` if an exception was raised by the codec."
msgstr ""

#: ../../c-api/unicode.rst:1393
msgid ""
"Encode a Unicode object using Latin-1 and return the result as Python bytes "
"object.  Error handling is \"strict\".  Return ``NULL`` if an exception was "
"raised by the codec."
msgstr ""

#: ../../c-api/unicode.rst:1400
msgid ""
"Encode the :c:type:`Py_UNICODE` buffer of the given *size* using Latin-1 and "
"return a Python bytes object.  Return ``NULL`` if an exception was raised by "
"the codec."
msgstr ""

#: ../../c-api/unicode.rst:1407
msgid ""
"Part of the old-style :c:type:`Py_UNICODE` API; please migrate to using :c:"
"func:`PyUnicode_AsLatin1String` or :c:func:`PyUnicode_AsEncodedString`."
msgstr ""

#: ../../c-api/unicode.rst:1411
msgid "ASCII Codecs"
msgstr ""

#: ../../c-api/unicode.rst:1413
msgid ""
"These are the ASCII codec APIs.  Only 7-bit ASCII data is accepted. All "
"other codes generate errors."
msgstr ""

#: ../../c-api/unicode.rst:1419
msgid ""
"Create a Unicode object by decoding *size* bytes of the ASCII encoded string "
"*s*.  Return ``NULL`` if an exception was raised by the codec."
msgstr ""

#: ../../c-api/unicode.rst:1425
msgid ""
"Encode a Unicode object using ASCII and return the result as Python bytes "
"object.  Error handling is \"strict\".  Return ``NULL`` if an exception was "
"raised by the codec."
msgstr ""

#: ../../c-api/unicode.rst:1432
msgid ""
"Encode the :c:type:`Py_UNICODE` buffer of the given *size* using ASCII and "
"return a Python bytes object.  Return ``NULL`` if an exception was raised by "
"the codec."
msgstr ""

#: ../../c-api/unicode.rst:1439
msgid ""
"Part of the old-style :c:type:`Py_UNICODE` API; please migrate to using :c:"
"func:`PyUnicode_AsASCIIString` or :c:func:`PyUnicode_AsEncodedString`."
msgstr ""

#: ../../c-api/unicode.rst:1443
msgid "Character Map Codecs"
msgstr ""

#: ../../c-api/unicode.rst:1445
msgid ""
"This codec is special in that it can be used to implement many different "
"codecs (and this is in fact what was done to obtain most of the standard "
"codecs included in the :mod:`encodings` package). The codec uses mappings to "
"encode and decode characters.  The mapping objects provided must support "
"the :meth:`__getitem__` mapping interface; dictionaries and sequences work "
"well."
msgstr ""

#: ../../c-api/unicode.rst:1451
msgid "These are the mapping codec APIs:"
msgstr ""

#: ../../c-api/unicode.rst:1456
msgid ""
"Create a Unicode object by decoding *size* bytes of the encoded string *s* "
"using the given *mapping* object.  Return ``NULL`` if an exception was "
"raised by the codec."
msgstr ""

#: ../../c-api/unicode.rst:1460
msgid ""
"If *mapping* is ``NULL``, Latin-1 decoding will be applied.  Else *mapping* "
"must map bytes ordinals (integers in the range from 0 to 255) to Unicode "
"strings, integers (which are then interpreted as Unicode ordinals) or "
"``None``.  Unmapped data bytes -- ones which cause a :exc:`LookupError`, as "
"well as ones which get mapped to ``None``, ``0xFFFE`` or ``'\\ufffe'``, are "
"treated as undefined mappings and cause an error."
msgstr ""

#: ../../c-api/unicode.rst:1471
msgid ""
"Encode a Unicode object using the given *mapping* object and return the "
"result as a bytes object.  Error handling is \"strict\".  Return ``NULL`` if "
"an exception was raised by the codec."
msgstr ""

#: ../../c-api/unicode.rst:1475
msgid ""
"The *mapping* object must map Unicode ordinal integers to bytes objects, "
"integers in the range from 0 to 255 or ``None``.  Unmapped character "
"ordinals (ones which cause a :exc:`LookupError`) as well as mapped to "
"``None`` are treated as \"undefined mapping\" and cause an error."
msgstr ""

#: ../../c-api/unicode.rst:1484
msgid ""
"Encode the :c:type:`Py_UNICODE` buffer of the given *size* using the given "
"*mapping* object and return the result as a bytes object.  Return ``NULL`` "
"if an exception was raised by the codec."
msgstr ""

#: ../../c-api/unicode.rst:1491
msgid ""
"Part of the old-style :c:type:`Py_UNICODE` API; please migrate to using :c:"
"func:`PyUnicode_AsCharmapString` or :c:func:`PyUnicode_AsEncodedString`."
msgstr ""

#: ../../c-api/unicode.rst:1494
msgid "The following codec API is special in that maps Unicode to Unicode."
msgstr ""

#: ../../c-api/unicode.rst:1498
msgid ""
"Translate a string by applying a character mapping table to it and return "
"the resulting Unicode object. Return ``NULL`` if an exception was raised by "
"the codec."
msgstr ""

#: ../../c-api/unicode.rst:1502
msgid ""
"The mapping table must map Unicode ordinal integers to Unicode ordinal "
"integers or ``None`` (causing deletion of the character)."
msgstr ""

#: ../../c-api/unicode.rst:1505
msgid ""
"Mapping tables need only provide the :meth:`__getitem__` interface; "
"dictionaries and sequences work well.  Unmapped character ordinals (ones "
"which cause a :exc:`LookupError`) are left untouched and are copied as-is."
msgstr ""

#: ../../c-api/unicode.rst:1509
msgid ""
"*errors* has the usual meaning for codecs. It may be ``NULL`` which "
"indicates to use the default error handling."
msgstr ""

#: ../../c-api/unicode.rst:1516
msgid ""
"Translate a :c:type:`Py_UNICODE` buffer of the given *size* by applying a "
"character *mapping* table to it and return the resulting Unicode object. "
"Return ``NULL`` when an exception was raised by the codec."
msgstr ""

#: ../../c-api/unicode.rst:1523
msgid ""
"Part of the old-style :c:type:`Py_UNICODE` API; please migrate to using :c:"
"func:`PyUnicode_Translate`. or :ref:`generic codec based API <codec-"
"registry>`"
msgstr ""

#: ../../c-api/unicode.rst:1527
msgid "MBCS codecs for Windows"
msgstr ""

#: ../../c-api/unicode.rst:1529
msgid ""
"These are the MBCS codec APIs. They are currently only available on Windows "
"and use the Win32 MBCS converters to implement the conversions.  Note that "
"MBCS (or DBCS) is a class of encodings, not just one.  The target encoding "
"is defined by the user settings on the machine running the codec."
msgstr ""

#: ../../c-api/unicode.rst:1536
msgid ""
"Create a Unicode object by decoding *size* bytes of the MBCS encoded string "
"*s*. Return ``NULL`` if an exception was raised by the codec."
msgstr ""

#: ../../c-api/unicode.rst:1543
msgid ""
"If *consumed* is ``NULL``, behave like :c:func:`PyUnicode_DecodeMBCS`. If "
"*consumed* is not ``NULL``, :c:func:`PyUnicode_DecodeMBCSStateful` will not "
"decode trailing lead byte and the number of bytes that have been decoded "
"will be stored in *consumed*."
msgstr ""

#: ../../c-api/unicode.rst:1551
msgid ""
"Encode a Unicode object using MBCS and return the result as Python bytes "
"object.  Error handling is \"strict\".  Return ``NULL`` if an exception was "
"raised by the codec."
msgstr ""

#: ../../c-api/unicode.rst:1558
msgid ""
"Encode the Unicode object using the specified code page and return a Python "
"bytes object.  Return ``NULL`` if an exception was raised by the codec. Use :"
"c:data:`CP_ACP` code page to get the MBCS encoder."
msgstr ""

#: ../../c-api/unicode.rst:1567
msgid ""
"Encode the :c:type:`Py_UNICODE` buffer of the given *size* using MBCS and "
"return a Python bytes object.  Return ``NULL`` if an exception was raised by "
"the codec."
msgstr ""

#: ../../c-api/unicode.rst:1574
msgid ""
"Part of the old-style :c:type:`Py_UNICODE` API; please migrate to using :c:"
"func:`PyUnicode_AsMBCSString`, :c:func:`PyUnicode_EncodeCodePage` or :c:func:"
"`PyUnicode_AsEncodedString`."
msgstr ""

#: ../../c-api/unicode.rst:1578
msgid "Methods & Slots"
msgstr ""

#: ../../c-api/unicode.rst:1584
msgid "Methods and Slot Functions"
msgstr ""

#: ../../c-api/unicode.rst:1586
msgid ""
"The following APIs are capable of handling Unicode objects and strings on "
"input (we refer to them as strings in the descriptions) and return Unicode "
"objects or integers as appropriate."
msgstr ""

#: ../../c-api/unicode.rst:1590
msgid "They all return ``NULL`` or ``-1`` if an exception occurs."
msgstr ""

#: ../../c-api/unicode.rst:1595
msgid "Concat two strings giving a new Unicode string."
msgstr ""

#: ../../c-api/unicode.rst:1600
msgid ""
"Split a string giving a list of Unicode strings.  If *sep* is ``NULL``, "
"splitting will be done at all whitespace substrings.  Otherwise, splits "
"occur at the given separator.  At most *maxsplit* splits will be done.  If "
"negative, no limit is set.  Separators are not included in the resulting "
"list."
msgstr ""

#: ../../c-api/unicode.rst:1608
msgid ""
"Split a Unicode string at line breaks, returning a list of Unicode strings. "
"CRLF is considered to be one line break.  If *keepend* is ``0``, the line "
"break characters are not included in the resulting strings."
msgstr ""

#: ../../c-api/unicode.rst:1615
msgid ""
"Join a sequence of strings using the given *separator* and return the "
"resulting Unicode string."
msgstr ""

#: ../../c-api/unicode.rst:1622
msgid ""
"Return ``1`` if *substr* matches ``str[start:end]`` at the given tail end "
"(*direction* == ``-1`` means to do a prefix match, *direction* == ``1`` a "
"suffix match), ``0`` otherwise. Return ``-1`` if an error occurred."
msgstr ""

#: ../../c-api/unicode.rst:1630
msgid ""
"Return the first position of *substr* in ``str[start:end]`` using the given "
"*direction* (*direction* == ``1`` means to do a forward search, *direction* "
"== ``-1`` a backward search).  The return value is the index of the first "
"match; a value of ``-1`` indicates that no match was found, and ``-2`` "
"indicates that an error occurred and an exception has been set."
msgstr ""

#: ../../c-api/unicode.rst:1640
msgid ""
"Return the first position of the character *ch* in ``str[start:end]`` using "
"the given *direction* (*direction* == ``1`` means to do a forward search, "
"*direction* == ``-1`` a backward search).  The return value is the index of "
"the first match; a value of ``-1`` indicates that no match was found, and "
"``-2`` indicates that an error occurred and an exception has been set."
msgstr ""

#: ../../c-api/unicode.rst:1648
msgid "*start* and *end* are now adjusted to behave like ``str[start:end]``."
msgstr ""

#: ../../c-api/unicode.rst:1655
msgid ""
"Return the number of non-overlapping occurrences of *substr* in ``str[start:"
"end]``.  Return ``-1`` if an error occurred."
msgstr ""

#: ../../c-api/unicode.rst:1662
msgid ""
"Replace at most *maxcount* occurrences of *substr* in *str* with *replstr* "
"and return the resulting Unicode object. *maxcount* == ``-1`` means replace "
"all occurrences."
msgstr ""

#: ../../c-api/unicode.rst:1669
msgid ""
"Compare two strings and return ``-1``, ``0``, ``1`` for less than, equal, "
"and greater than, respectively."
msgstr ""

#: ../../c-api/unicode.rst:1672
msgid ""
"This function returns ``-1`` upon failure, so one should call :c:func:"
"`PyErr_Occurred` to check for errors."
msgstr ""

#: ../../c-api/unicode.rst:1678
msgid ""
"Compare a Unicode object, *uni*, with *string* and return ``-1``, ``0``, "
"``1`` for less than, equal, and greater than, respectively. It is best to "
"pass only ASCII-encoded strings, but the function interprets the input "
"string as ISO-8859-1 if it contains non-ASCII characters."
msgstr ""

#: ../../c-api/unicode.rst:1683
msgid "This function does not raise exceptions."
msgstr ""

#: ../../c-api/unicode.rst:1688
msgid "Rich compare two Unicode strings and return one of the following:"
msgstr ""

#: ../../c-api/unicode.rst:1690
msgid "``NULL`` in case an exception was raised"
msgstr ""

#: ../../c-api/unicode.rst:1691
msgid ":const:`Py_True` or :const:`Py_False` for successful comparisons"
msgstr ""

#: ../../c-api/unicode.rst:1692
msgid ":const:`Py_NotImplemented` in case the type combination is unknown"
msgstr ""

#: ../../c-api/unicode.rst:1694
msgid ""
"Possible values for *op* are :const:`Py_GT`, :const:`Py_GE`, :const:"
"`Py_EQ`, :const:`Py_NE`, :const:`Py_LT`, and :const:`Py_LE`."
msgstr ""

#: ../../c-api/unicode.rst:1700
msgid ""
"Return a new string object from *format* and *args*; this is analogous to "
"``format % args``."
msgstr ""

#: ../../c-api/unicode.rst:1706
msgid ""
"Check whether *element* is contained in *container* and return true or false "
"accordingly."
msgstr ""

#: ../../c-api/unicode.rst:1709
msgid ""
"*element* has to coerce to a one element Unicode string. ``-1`` is returned "
"if there was an error."
msgstr ""

#: ../../c-api/unicode.rst:1715
msgid ""
"Intern the argument *\\*string* in place.  The argument must be the address "
"of a pointer variable pointing to a Python Unicode string object.  If there "
"is an existing interned string that is the same as *\\*string*, it sets "
"*\\*string* to it (releasing the reference to the old string object and "
"creating a new :term:`strong reference` to the interned string object), "
"otherwise it leaves *\\*string* alone and interns it (creating a new :term:"
"`strong reference`). (Clarification: even though there is a lot of talk "
"about references, think of this function as reference-neutral; you own the "
"object after the call if and only if you owned it before the call.)"
msgstr ""

#: ../../c-api/unicode.rst:1728
msgid ""
"A combination of :c:func:`PyUnicode_FromString` and :c:func:"
"`PyUnicode_InternInPlace`, returning either a new Unicode string object that "
"has been interned, or a new (\"owned\") reference to an earlier interned "
"string object with the same value."
msgstr ""
