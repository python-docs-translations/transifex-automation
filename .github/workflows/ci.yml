name: CI

on:
  push:
    branches:
      - 'main'
  pull_request:
    branches:
      - 'main'
  workflow_dispatch:
  schedule:
    - cron: '0 14 * * 5'

permissions:
  contents: read

env:
  TX_CLI_VERSION: '1.6.7'
  PYTHON_NEWEST: '3.12'      # Latest Python version being translated
  TX_PROJECT: python-newest  # Project name for the latest python version

jobs:
  trigger:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.version.outputs.matrix }}
    steps:
      - uses: actions/checkout@v3
      - id: version
        run: echo "matrix=$(cat .github/versions.txt)" >> $GITHUB_OUTPUT
  
  update:
    runs-on: ubuntu-latest
    needs: trigger
    strategy:
      max-parallel: 1
      fail-fast: false
      matrix:
        cpython_version: ${{fromJson(needs.trigger.outputs.matrix)}}
        # must match existent projects in Transifex
    
    steps:
      - name: Check out ${{ github.repository }}
        uses: actions/checkout@v3

      - name: Check out CPython
        uses: actions/checkout@v3
        with:
          repository: python/cpython
          persist-credentials: false
          ref: ${{ matrix.cpython_version }}
          path: cpython

      - name: Set up Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip'
          cache-dependency-path: |
            "requirements/*.txt'
            cpython/Doc/requirements.txt

      - name: Install Transifex CLI
        working-directory: /usr/local/bin
        run: |
          curl -o- https://raw.githubusercontent.com/transifex/cli/master/install.sh | bash -s -- v${{ env.TX_CLI_VERSION }}

      - name: Install dependencies
        run: |
          sudo apt update -y && sudo apt install gettext -y
          pip3 install --upgrade pip
          pip3 install -r requirements/requirements-ci.txt -r cpython/Doc/requirements.txt

      - name: Change Transifex project name if Python version != python-newest
        if: ${{ matrix.cpython_version != env.PYTHON_NEWEST }}
        shell: bash
        run: |
          ver=$(echo ${{ matrix.cpython_version }} | sed 's|\.||')
          echo "TX_PROJECT=python-$ver" >> $GITHUB_ENV

        # required for generating .tx/config
      - name: Generate POT files
        working-directory: cpython/Doc
        run: |
          sphinx-build -E -b gettext -D gettext_compact=0 -d build/.doctrees . locales/pot

      - name: Generate Transifex configuration file (.tx/config)
        working-directory: cpython/Doc/locales
        run: |
          sphinx-intl create-txconfig
          sphinx-intl update-txconfig-resources --pot-dir pot --locale-dir . --transifex-organization-name python-doc --transifex-project-name ${{ env.TX_PROJECT }}

      - name: Push source strings to Transifex
        if: ${{ !contains(fromJSON('["push", "pull_request"]'), github.event_name) ||
              (github.event_name == 'workflow_dispatch' && github.base_ref != 'main') }}
        working-directory: cpython/Doc/locales
        run: |
          tx push --source --skip
        env:
          TX_TOKEN: ${{ secrets.TX_TOKEN }}

      - name: Lock unused translations
        run: |
          python3 scripts/lock-translations.py cpython/Doc/locales/.tx/config ${{ env.TX_PROJECT }}
        env:
          TX_TOKEN: ${{ secrets.TX_TOKEN }}
