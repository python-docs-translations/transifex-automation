# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2023, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# eric R <trencyclopedia@gmail.com>, 2020
# Woko <banbooliu@gmail.com>, 2020
# Freesand Leo <yuqinju@163.com>, 2020
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-06-23 16:32+0000\n"
"PO-Revision-Date: 2020-05-30 12:16+0000\n"
"Last-Translator: Freesand Leo <yuqinju@163.com>, 2020\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/"
"teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../tutorial/interpreter.rst:5
msgid "Using the Python Interpreter"
msgstr "使用 Python 解释器"

#: ../../tutorial/interpreter.rst:11
msgid "Invoking the Interpreter"
msgstr "调用解释器"

#: ../../tutorial/interpreter.rst:13
msgid ""
"The Python interpreter is usually installed as :file:`/usr/local/bin/"
"python3.8` on those machines where it is available; putting :file:`/usr/"
"local/bin` in your Unix shell's search path makes it possible to start it by "
"typing the command:"
msgstr ""
"Python 解释器在其被使用的机器上通常安装为 :file:`/usr/local/bin/python3.8`；"
"将 :file:`/usr/local/bin` 加入你的 Unix 终端的搜索路径就可以通过键入以下命令"
"来启动它："

#: ../../tutorial/interpreter.rst:21
msgid ""
"to the shell. [#]_ Since the choice of the directory where the interpreter "
"lives is an installation option, other places are possible; check with your "
"local Python guru or system administrator.  (E.g., :file:`/usr/local/python` "
"is a popular alternative location.)"
msgstr ""
"就能运行了 [#]_ 。安装时可以选择安装目录，所以解释器也可能在别的地方；可以问"
"问你身边的 Python 大牛，或者你的系统管理员。（比如 :file:`/usr/local/python` "
"也是比较常用的备选路径）"

#: ../../tutorial/interpreter.rst:26
msgid ""
"On Windows machines where you have installed Python from the :ref:`Microsoft "
"Store <windows-store>`, the :file:`python3.8` command will be available. If "
"you have the :ref:`py.exe launcher <launcher>` installed, you can use the :"
"file:`py` command. See :ref:`setting-envvars` for other ways to launch "
"Python."
msgstr ""
"在 Windows 机器上当你从 :ref:`Microsoft Store <windows-store>` 安装 Python 之"
"后，:file:`python3.8` 命令将可使用。 如果你安装了 :ref:`py.exe 启动器 "
"<launcher>`，你将可以使用 :file:`py` 命令。 参阅 :ref:`setting-envvars` 了解"
"其他启动 Python 的方式。"

#: ../../tutorial/interpreter.rst:31
msgid ""
"Typing an end-of-file character (:kbd:`Control-D` on Unix, :kbd:`Control-Z` "
"on Windows) at the primary prompt causes the interpreter to exit with a zero "
"exit status.  If that doesn't work, you can exit the interpreter by typing "
"the following command: ``quit()``."
msgstr ""
"在主提示符中输入文件结束字符（在 Unix 系统中是 :kbd:`Control-D`，Windows 系统"
"中是 :kbd:`Control-Z`）就退出解释器并返回退出状态为0。如果这样不管用，你还可"
"以写这个命令退出：``quit()``。"

#: ../../tutorial/interpreter.rst:36
msgid ""
"The interpreter's line-editing features include interactive editing, history "
"substitution and code completion on systems that support the `GNU Readline "
"<https://tiswww.case.edu/php/chet/readline/rltop.html>`_ library. Perhaps "
"the quickest check to see whether command line editing is supported is "
"typing :kbd:`Control-P` to the first Python prompt you get.  If it beeps, "
"you have command line editing; see Appendix :ref:`tut-interacting` for an "
"introduction to the keys.  If nothing appears to happen, or if ``^P`` is "
"echoed, command line editing isn't available; you'll only be able to use "
"backspace to remove characters from the current line."
msgstr ""
"解释器的行编辑功能在支持 `GNU Readline <https://tiswww.case.edu/php/chet/"
"readline/rltop.html>`_ 库的系统中也包括交互式编辑，历史替换和代码补全等。 检"
"测是否支持行编辑最快速的方式是在首次出现 Python 提示符时输入 :kbd:`Control-"
"P`。 如果听到“哔”提示音，就说明支持行编辑；请参阅附录 :ref:`tut-interacting` "
"了解有关功能键的介绍。 如果什么都没发生，或是回显了 ``^P``，说明不支持行编"
"辑；你只能用退格键从当前行中删除字符。"

#: ../../tutorial/interpreter.rst:46
msgid ""
"The interpreter operates somewhat like the Unix shell: when called with "
"standard input connected to a tty device, it reads and executes commands "
"interactively; when called with a file name argument or with a file as "
"standard input, it reads and executes a *script* from that file."
msgstr ""
"解释器运行的时候有点像 Unix 命令行：在一个标准输入 tty 设备上调用，它能交互式"
"地读取和执行命令；调用时提供文件名参数，或者有个文件重定向到标准输入的话，它"
"就会读取和执行文件中的 *脚本*。"

#: ../../tutorial/interpreter.rst:51
msgid ""
"A second way of starting the interpreter is ``python -c command [arg] ...``, "
"which executes the statement(s) in *command*, analogous to the shell's :"
"option:`-c` option.  Since Python statements often contain spaces or other "
"characters that are special to the shell, it is usually advised to quote "
"*command* in its entirety with single quotes."
msgstr ""
"另一种启动解释器的方式是 ``python -c command [arg] ...``，其中 *command* 要换"
"成想执行的指令，就像命令行的 :option:`-c` 选项。由于 Python 代码中经常会包含"
"对终端来说比较特殊的字符，通常情况下都建议用英文单引号把 *command* 括起来。"

#: ../../tutorial/interpreter.rst:57
msgid ""
"Some Python modules are also useful as scripts.  These can be invoked using "
"``python -m module [arg] ...``, which executes the source file for *module* "
"as if you had spelled out its full name on the command line."
msgstr ""
"有些 Python 模块也可以作为脚本使用。可以这样输入：``python -m module "
"[arg] ...``，这会执行 *module* 的源文件，就跟你在命令行把路径写全了一样。"

#: ../../tutorial/interpreter.rst:61
msgid ""
"When a script file is used, it is sometimes useful to be able to run the "
"script and enter interactive mode afterwards.  This can be done by passing :"
"option:`-i` before the script."
msgstr ""
"在运行脚本的时候，有时可能也会需要在运行后进入交互模式。这种时候在文件参数"
"前，加上选项 :option:`-i` 就可以了。"

#: ../../tutorial/interpreter.rst:65
msgid "All command line options are described in :ref:`using-on-general`."
msgstr "关于所有的命令行选项，请参考 :ref:`using-on-general`。"

#: ../../tutorial/interpreter.rst:71
msgid "Argument Passing"
msgstr "传入参数"

#: ../../tutorial/interpreter.rst:73
msgid ""
"When known to the interpreter, the script name and additional arguments "
"thereafter are turned into a list of strings and assigned to the ``argv`` "
"variable in the ``sys`` module.  You can access this list by executing "
"``import sys``.  The length of the list is at least one; when no script and "
"no arguments are given, ``sys.argv[0]`` is an empty string.  When the script "
"name is given as ``'-'`` (meaning  standard input), ``sys.argv[0]`` is set "
"to ``'-'``.  When :option:`-c` *command* is used, ``sys.argv[0]`` is set to "
"``'-c'``.  When :option:`-m` *module* is used, ``sys.argv[0]``  is set to "
"the full name of the located module.  Options found after  :option:`-c` "
"*command* or :option:`-m` *module* are not consumed  by the Python "
"interpreter's option processing but left in ``sys.argv`` for  the command or "
"module to handle."
msgstr ""
"如果可能的话，解释器会读取命令行参数，转化为字符串列表存入 ``sys`` 模块中的 "
"``argv`` 变量中。执行命令 ``import sys`` 你可以导入这个模块并访问这个列表。这"
"个列表最少也会有一个元素；如果没有给定输入参数，``sys.argv[0]`` 就是个空字符"
"串。如果给定的脚本名是 ``'-'`` (表示标准输入)，``sys.argv[0]`` 就是 ``'-'``。"
"使用 :option:`-c` *command* 时，``sys.argv[0]`` 就会是 ``'-c'``。如果使用选"
"项 :option:`-m` *module*，``sys.argv[0]`` 就是包含目录的模块全名。在 :option:"
"`-c` *command* 或 :option:`-m` *module* 之后的选项不会被解释器处理，而会直接"
"留在 ``sys.argv`` 中给命令或模块来处理。"

#: ../../tutorial/interpreter.rst:89
msgid "Interactive Mode"
msgstr "交互模式"

#: ../../tutorial/interpreter.rst:91
msgid ""
"When commands are read from a tty, the interpreter is said to be in "
"*interactive mode*.  In this mode it prompts for the next command with the "
"*primary prompt*, usually three greater-than signs (``>>>``); for "
"continuation lines it prompts with the *secondary prompt*, by default three "
"dots (``...``). The interpreter prints a welcome message stating its version "
"number and a copyright notice before printing the first prompt:"
msgstr ""
"在终端（tty）输入并执行指令时，我们说解释器是运行在 *交互模式（interactive "
"mode）*。在这种模式中，它会显示 *主提示符（primary prompt）*，提示输入下一条"
"指令，通常用三个大于号（``>>>``）表示；连续输入行的时候，它会显示 *次要提示符"
"*，默认是三个点（``...``）。进入解释器时，它会先显示欢迎信息、版本信息、版权"
"声明，然后就会出现提示符："

#: ../../tutorial/interpreter.rst:108
msgid ""
"Continuation lines are needed when entering a multi-line construct. As an "
"example, take a look at this :keyword:`if` statement::"
msgstr "多行指令需要在连续的多行中输入。比如，以 :keyword:`if` 为例："

#: ../../tutorial/interpreter.rst:118
msgid "For more on interactive mode, see :ref:`tut-interac`."
msgstr "有关交互模式的更多内容，请见 :ref:`tut-interac`。"

#: ../../tutorial/interpreter.rst:124
msgid "The Interpreter and Its Environment"
msgstr "解释器的运行环境"

#: ../../tutorial/interpreter.rst:130
msgid "Source Code Encoding"
msgstr "源文件的字符编码"

#: ../../tutorial/interpreter.rst:132
msgid ""
"By default, Python source files are treated as encoded in UTF-8.  In that "
"encoding, characters of most languages in the world can be used "
"simultaneously in string literals, identifiers and comments --- although the "
"standard library only uses ASCII characters for identifiers, a convention "
"that any portable code should follow.  To display all these characters "
"properly, your editor must recognize that the file is UTF-8, and it must use "
"a font that supports all the characters in the file."
msgstr ""
"默认情况下，Python 源码文件以 UTF-8 编码方式处理。在这种编码方式中，世界上大"
"多数语言的字符都可以同时用于字符串字面值、变量或函数名称以及注释中——尽管标准"
"库中只用常规的 ASCII 字符作为变量或函数名，而且任何可移植的代码都应该遵守此约"
"定。要正确显示这些字符，你的编辑器必须能识别 UTF-8 编码，而且必须使用能支持打"
"开的文件中所有字符的字体。"

#: ../../tutorial/interpreter.rst:140
msgid ""
"To declare an encoding other than the default one, a special comment line "
"should be added as the *first* line of the file.  The syntax is as follows::"
msgstr ""
"如果不使用默认编码，要声明文件所使用的编码，文件的 *第一* 行要写成特殊的注"
"释。语法如下所示："

#: ../../tutorial/interpreter.rst:145
msgid "where *encoding* is one of the valid :mod:`codecs` supported by Python."
msgstr "其中 *encoding* 可以是 Python 支持的任意一种 :mod:`codecs`。"

#: ../../tutorial/interpreter.rst:147
msgid ""
"For example, to declare that Windows-1252 encoding is to be used, the first "
"line of your source code file should be::"
msgstr "比如，要声明使用 Windows-1252 编码，你的源码文件要写成："

#: ../../tutorial/interpreter.rst:152
msgid ""
"One exception to the *first line* rule is when the source code starts with "
"a :ref:`UNIX \"shebang\" line <tut-scripts>`.  In this case, the encoding "
"declaration should be added as the second line of the file.  For example::"
msgstr ""
"关于 *第一行* 规则的一种例外情况是，源码以 :ref:`UNIX \"shebang\" 行 <tut-"
"scripts>` 开头。这种情况下，编码声明就要写在文件的第二行。例如："

#: ../../tutorial/interpreter.rst:160
msgid "Footnotes"
msgstr "备注"

#: ../../tutorial/interpreter.rst:161
msgid ""
"On Unix, the Python 3.x interpreter is by default not installed with the "
"executable named ``python``, so that it does not conflict with a "
"simultaneously installed Python 2.x executable."
msgstr ""
"在Unix系统中，Python 3.x解释器默认安装后的执行文件并不叫作 ``python``，这样才"
"不会与同时安装的Python 2.x冲突。"
