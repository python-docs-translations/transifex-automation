# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2023, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Fred <fred.wei@foxmail.com>, 2019
# eric R <trencyclopedia@gmail.com>, 2019
# Woko <banbooliu@gmail.com>, 2019
# df2dc1c92e792f7ae8417c51df43db8f_594d92a <0f49be28017426edb1db1a2ab6e67088_717605>, 2019
# Konge <zkonge@outlook.com>, 2019
# Alpha Du <alphanow@gmail.com>, 2019
# Freesand Leo <yuqinju@163.com>, 2019
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-06-16 16:41+0000\n"
"PO-Revision-Date: 2019-09-01 02:42+0000\n"
"Last-Translator: Freesand Leo <yuqinju@163.com>, 2019\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/"
"teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:5
msgid "More Control Flow Tools"
msgstr "其他流程控制工具"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:7
msgid ""
"Besides the :keyword:`while` statement just introduced, Python uses the "
"usual flow control statements known from other languages, with some twists."
msgstr ""
"除了刚刚介绍过的 :keyword:`while` 语句，Python 中也会使用其他语言中常见的流程"
"控制语句，只是稍有变化。"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:14
msgid ":keyword:`!if` Statements"
msgstr ":keyword:`!if` 语句"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:16
msgid ""
"Perhaps the most well-known statement type is the :keyword:`if` statement.  "
"For example::"
msgstr "可能最为人所熟知的编程语句就是 :keyword:`if` 语句了。例如 ::"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:33
msgid ""
"There can be zero or more :keyword:`elif` parts, and the :keyword:`else` "
"part is optional.  The keyword ':keyword:`!elif`' is short for 'else if', "
"and is useful to avoid excessive indentation.  An  :keyword:`!if` ... :"
"keyword:`!elif` ... :keyword:`!elif` ... sequence is a substitute for the "
"``switch`` or ``case`` statements found in other languages."
msgstr ""
"可以有零个或多个 :keyword:`elif` 部分，以及一个可选的 :keyword:`else` 部分。 "
"关键字 ':keyword:`!elif`' 是 'else if' 的缩写，适合用于避免过多的缩进。 一"
"个 :keyword:`!if` ... :keyword:`!elif` ... :keyword:`!elif` ... 序列可以看作"
"是其他语言中的 ``switch`` 或 ``case`` 语句的替代。"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:43
msgid ":keyword:`!for` Statements"
msgstr ":keyword:`!for` 语句"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:48
msgid ""
"The :keyword:`for` statement in Python differs a bit from what you may be "
"used to in C or Pascal.  Rather than always iterating over an arithmetic "
"progression of numbers (like in Pascal), or giving the user the ability to "
"define both the iteration step and halting condition (as C), Python's :"
"keyword:`!for` statement iterates over the items of any sequence (a list or "
"a string), in the order that they appear in the sequence.  For example (no "
"pun intended):"
msgstr ""
"Python 中的 :keyword:`for` 语句与你在 C 或 Pascal 中可能用到的有所不同。 "
"Python 中的 :keyword:`!for` 语句并不总是对算术递增的数值进行迭代（如同 "
"Pascal），或是给予用户定义迭代步骤和暂停条件的能力（如同 C），而是对任意序列"
"进行迭代（例如列表或字符串），条目的迭代顺序与它们在序列中出现的顺序一致。 例"
"如（此处英文为双关语）:"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:69
msgid ""
"If you need to modify the sequence you are iterating over while inside the "
"loop (for example to duplicate selected items), it is recommended that you "
"first make a copy.  Iterating over a sequence does not implicitly make a "
"copy.  The slice notation makes this especially convenient::"
msgstr ""
"如果在循环内需要修改序列中的值（比如重复某些选中的元素），推荐你先拷贝一份副"
"本。对序列进行循环不代表制作了一个副本进行操作。切片操作使这件事非常简单："

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:81
msgid ""
"With ``for w in words:``, the example would attempt to create an infinite "
"list, inserting ``defenestrate`` over and over again."
msgstr ""
"如果写成 ``for w in words:``，这个示例就会创建无限长的列表，一次又一次重复地"
"插入 ``defenestrate``。"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:88
msgid "The :func:`range` Function"
msgstr ":func:`range` 函数"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:90
msgid ""
"If you do need to iterate over a sequence of numbers, the built-in function :"
"func:`range` comes in handy.  It generates arithmetic progressions::"
msgstr ""
"如果你确实需要遍历一个数字序列，内置函数 :func:`range`  会派上用场。它生成算"
"术级数::"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:102
msgid ""
"The given end point is never part of the generated sequence; ``range(10)`` "
"generates 10 values, the legal indices for items of a sequence of length "
"10.  It is possible to let the range start at another number, or to specify "
"a different increment (even negative; sometimes this is called the 'step')::"
msgstr ""
"给定的终止数值并不在要生成的序列里；``range(10)`` 会生成10个值，并且是以合法"
"的索引生成一个长度为10的序列。range也可以以另一个数字开头，或者以指定的幅度增"
"加（甚至是负数；有时这也被叫做 '步进'） ::"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:116
msgid ""
"To iterate over the indices of a sequence, you can combine :func:`range` "
"and :func:`len` as follows::"
msgstr "要以序列的索引来迭代，您可以将 :func:`range` 和 :func:`len` 组合如下::"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:129
msgid ""
"In most such cases, however, it is convenient to use the :func:`enumerate` "
"function, see :ref:`tut-loopidioms`."
msgstr ""
"然而，在大多数这类情况下，使用 :func:`enumerate` 函数比较方便，请参见 :ref:"
"`tut-loopidioms` 。"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:132
msgid "A strange thing happens if you just print a range::"
msgstr "如果你只打印 range，会出现奇怪的结果::"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:137
msgid ""
"In many ways the object returned by :func:`range` behaves as if it is a "
"list, but in fact it isn't. It is an object which returns the successive "
"items of the desired sequence when you iterate over it, but it doesn't "
"really make the list, thus saving space."
msgstr ""
":func:`range` 所返回的对象在许多方面表现得像一个列表，但实际上却并不是。此对"
"象会在你迭代它时基于所希望的序列返回连续的项，但它没有真正生成列表，这样就能"
"节省空间。"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:142
msgid ""
"We say such an object is *iterable*, that is, suitable as a target for "
"functions and constructs that expect something from which they can obtain "
"successive items until the supply is exhausted. We have seen that the :"
"keyword:`for` statement is such an *iterator*. The function :func:`list` is "
"another; it creates lists from iterables::"
msgstr ""
"我们说这样的对象是 *可迭代的* ，也就是说，适合作为函数和结构体的参数，这些函"
"数和结构体期望在迭代结束之前可以从中获取连续的元素。我们已经看到 :keyword:"
"`for` 语句就是这样一个迭代器。函数 :func:`list` 是另外一个；它从可迭代对象中"
"创建列表。"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:152
msgid ""
"Later we will see more functions that return iterables and take iterables as "
"argument."
msgstr ""
"后面，我们会看到更多返回可迭代对象的函数，和以可迭代对象作为参数的函数。"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:158
msgid ""
":keyword:`!break` and :keyword:`!continue` Statements, and :keyword:`!else` "
"Clauses on Loops"
msgstr ""
":keyword:`!break` 和 :keyword:`!continue` 语句，以及循环中的 :keyword:`!"
"else` 子句"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:160
msgid ""
"The :keyword:`break` statement, like in C, breaks out of the innermost "
"enclosing :keyword:`for` or :keyword:`while` loop."
msgstr ""
":keyword:`break` 语句，和 C 中的类似，用于跳出最近的 :keyword:`for` 或 :"
"keyword:`while` 循环."

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:163
msgid ""
"Loop statements may have an :keyword:`!else` clause; it is executed when the "
"loop terminates through exhaustion of the list (with :keyword:`for`) or when "
"the condition becomes false (with :keyword:`while`), but not when the loop "
"is terminated by a :keyword:`break` statement.  This is exemplified by the "
"following loop, which searches for prime numbers::"
msgstr ""
"循环语句可能带有一个 :keyword:`!else` 子句；它会在循环遍历完列表 (使用 :"
"keyword:`for`) 或是在条件变为假 (使用 :keyword:`while`) 的时候被执行，但是不"
"会在循环被 :keyword:`break` 语句终止时被执行。 这可以通过以下搜索素数的循环为"
"例来进行说明::"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:187
msgid ""
"(Yes, this is the correct code.  Look closely: the ``else`` clause belongs "
"to the :keyword:`for` loop, **not** the :keyword:`if` statement.)"
msgstr ""
"（是的，这是正确的代码。仔细看： ``else`` 子句属于 :keyword:`for` 循环， **不"
"属于** :keyword:`if` 语句。）"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:190
msgid ""
"When used with a loop, the ``else`` clause has more in common with the "
"``else`` clause of a :keyword:`try` statement than it does that of :keyword:"
"`if` statements: a :keyword:`!try` statement's ``else`` clause runs when no "
"exception occurs, and a loop's ``else`` clause runs when no ``break`` "
"occurs. For more on the :keyword:`!try` statement and exceptions, see :ref:"
"`tut-handling`."
msgstr ""
"当和循环一起使用时，``else`` 子句与 :keyword:`try` 语句中的 ``else`` 子句的共"
"同点多于 :keyword:`if` 语句中的子句: :keyword:`!try` 语句中的 ``else`` 子句会"
"在未发生异常时执行，而循环中的 ``else`` 子句则会在未发生 ``break`` 时执行。 "
"有关 :keyword:`!try` 语句和异常的更多信息，请参阅 :ref:`tut-handling`。"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:197
msgid ""
"The :keyword:`continue` statement, also borrowed from C, continues with the "
"next iteration of the loop::"
msgstr ""
":keyword:`continue` 语句也是借鉴自 C 语言，表示继续循环中的下一次迭代::"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:217
msgid ":keyword:`!pass` Statements"
msgstr ":keyword:`!pass` 语句"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:219
msgid ""
"The :keyword:`pass` statement does nothing. It can be used when a statement "
"is required syntactically but the program requires no action. For example::"
msgstr ""
":keyword:`pass` 语句什么也不做。当语法上需要一个语句，但程序需要什么动作也不"
"做时，可以使用它。例如::"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:226
msgid "This is commonly used for creating minimal classes::"
msgstr "这通常用于创建最小的类::"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:232
msgid ""
"Another place :keyword:`pass` can be used is as a place-holder for a "
"function or conditional body when you are working on new code, allowing you "
"to keep thinking at a more abstract level.  The :keyword:`!pass` is silently "
"ignored::"
msgstr ""
":keyword:`pass` 的另一个可以使用的场合是在你编写新的代码时作为一个函数或条件"
"子句体的占位符，允许你保持在更抽象的层次上进行思考。 :keyword:`!pass` 会被静"
"默地忽略::"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:243
msgid "Defining Functions"
msgstr "定义函数"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:245
msgid ""
"We can create a function that writes the Fibonacci series to an arbitrary "
"boundary::"
msgstr "我们可以创建一个输出任意范围内 Fibonacci 数列的函数::"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:265
msgid ""
"The keyword :keyword:`def` introduces a function *definition*.  It must be "
"followed by the function name and the parenthesized list of formal "
"parameters. The statements that form the body of the function start at the "
"next line, and must be indented."
msgstr ""
"关键字 :keyword:`def` 引入一个函数 *定义*。它必须后跟函数名称和带括号的形式参"
"数列表。构成函数体的语句从下一行开始，并且必须缩进。"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:270
msgid ""
"The first statement of the function body can optionally be a string literal; "
"this string literal is the function's documentation string, or :dfn:"
"`docstring`. (More about docstrings can be found in the section :ref:`tut-"
"docstrings`.) There are tools which use docstrings to automatically produce "
"online or printed documentation, or to let the user interactively browse "
"through code; it's good practice to include docstrings in code that you "
"write, so make a habit of it."
msgstr ""
"函数体的第一个语句可以（可选的）是字符串文字；这个字符串文字是函数的文档字符"
"串或 :dfn:`docstring` 。（有关文档字符串的更多信息，请参阅  :ref:`tut-"
"docstrings` 部分）有些工具使用文档字符串自动生成在线或印刷文档，或者让用户以"
"交互式的形式浏览代码；在你编写的代码中包含文档字符串是一种很好的做法，所以要"
"养成习惯。"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:277
msgid ""
"The *execution* of a function introduces a new symbol table used for the "
"local variables of the function.  More precisely, all variable assignments "
"in a function store the value in the local symbol table; whereas variable "
"references first look in the local symbol table, then in the local symbol "
"tables of enclosing functions, then in the global symbol table, and finally "
"in the table of built-in names. Thus, global variables and variables of "
"enclosing functions cannot be directly assigned a value within a function "
"(unless, for global variables, named in a :keyword:`global` statement, or, "
"for variables of enclosing functions, named in a :keyword:`nonlocal` "
"statement), although they may be referenced."
msgstr ""
"函数的 *执行* 会引入一个用于函数局部变量的新符号表。 更确切地说，函数中所有的"
"变量赋值都将存储在局部符号表中；而变量引用会首先在局部符号表中查找，然后是外"
"层函数的局部符号表，再然后是全局符号表，最后是内置名称的符号表。 因此，全局变"
"量和外层函数的变量不能在函数内部直接赋值（除非是在 :keyword:`global` 语句中定"
"义的全局变量，或者是在 :keyword:`nonlocal` 语句中定义的外层函数的变量），尽管"
"它们可以被引用。"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:288
msgid ""
"The actual parameters (arguments) to a function call are introduced in the "
"local symbol table of the called function when it is called; thus, arguments "
"are passed using *call by value* (where the *value* is always an object "
"*reference*, not the value of the object). [#]_ When a function calls "
"another function, a new local symbol table is created for that call."
msgstr ""
"在函数被调用时，实际参数（实参）会被引入被调用函数的本地符号表中；因此，实参"
"是通过 *按值调用* 传递的（其中 *值* 始终是对象 *引用* 而不是对象的值）。[#]_ "
"当一个函数调用另外一个函数时，将会为该调用创建一个新的本地符号表。"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:294
msgid ""
"A function definition introduces the function name in the current symbol "
"table. The value of the function name has a type that is recognized by the "
"interpreter as a user-defined function.  This value can be assigned to "
"another name which can then also be used as a function.  This serves as a "
"general renaming mechanism::"
msgstr ""
"函数定义会把函数名引入当前的符号表中。函数名称的值具有解释器将其识别为用户定"
"义函数的类型。这个值可以分配给另一个名称，该名称也可以作为一个函数使用。这用"
"作一般的重命名机制::"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:306
msgid ""
"Coming from other languages, you might object that ``fib`` is not a function "
"but a procedure since it doesn't return a value.  In fact, even functions "
"without a :keyword:`return` statement do return a value, albeit a rather "
"boring one.  This value is called ``None`` (it's a built-in name).  Writing "
"the value ``None`` is normally suppressed by the interpreter if it would be "
"the only value written. You can see it if you really want to using :func:"
"`print`::"
msgstr ""
"如果你学过其他语言，你可能会认为 ``fib`` 不是函数而是一个过程，因为它并不返回"
"值。事实上，即使没有 :keyword:`return` 语句的函数也会返回一个值，尽管它是一个"
"相当无聊的值。这个值称为 ``None`` （它是内置名称）。一般来说解释器不会打印出"
"单独的返回值 ``None`` ，如果你真想看到它，你可以使用 :func:`print` ::"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:317
msgid ""
"It is simple to write a function that returns a list of the numbers of the "
"Fibonacci series, instead of printing it::"
msgstr "写一个返回斐波那契数列的列表（而不是把它打印出来）的函数，非常简单::"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:333
msgid "This example, as usual, demonstrates some new Python features:"
msgstr "此示例中，像往常一样，演示了一些新的 Python 功能:"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:335
msgid ""
"The :keyword:`return` statement returns with a value from a function. :"
"keyword:`!return` without an expression argument returns ``None``. Falling "
"off the end of a function also returns ``None``."
msgstr ""
":keyword:`return` 语句会从函数内部返回一个值。 不带表达式参数的 :keyword:`!"
"return` 会返回 ``None``。 函数执行完毕退出也会返回 ``None``。"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:339
msgid ""
"The statement ``result.append(a)`` calls a *method* of the list object "
"``result``.  A method is a function that 'belongs' to an object and is named "
"``obj.methodname``, where ``obj`` is some object (this may be an "
"expression), and ``methodname`` is the name of a method that is defined by "
"the object's type. Different types define different methods.  Methods of "
"different types may have the same name without causing ambiguity.  (It is "
"possible to define your own object types and methods, using *classes*, see :"
"ref:`tut-classes`) The method :meth:`append` shown in the example is defined "
"for list objects; it adds a new element at the end of the list.  In this "
"example it is equivalent to ``result = result + [a]``, but more efficient."
msgstr ""
"``result.append(a)`` 语句调用了列表对象 ``result`` 的 *方法* 。方法是“属于”一"
"个对象的函数，它被命名为 ``obj.methodname`` ，其中 ``obj`` 是某个对象（也可能"
"是一个表达式）， ``methodname`` 是由对象类型中定义的方法的名称。不同的类型可"
"以定义不同的方法。不同类型的方法可以有相同的名称而不会引起歧义。（可以使用 *"
"类* 定义自己的对象类型和方法，请参阅 :ref:`tut-classes` ）示例中的方法 :meth:"
"`append` 是为列表对象定义的；它会在列表的最后添加一个新的元素。在这个示例中它"
"相当于 ``result = result + [a]`` ，但更高效。"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:354
msgid "More on Defining Functions"
msgstr "函数定义的更多形式"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:356
msgid ""
"It is also possible to define functions with a variable number of arguments. "
"There are three forms, which can be combined."
msgstr "给函数定义有可变数目的参数也是可行的。这里有三种形式，可以组合使用。"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:363
msgid "Default Argument Values"
msgstr "参数默认值"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:365
msgid ""
"The most useful form is to specify a default value for one or more "
"arguments. This creates a function that can be called with fewer arguments "
"than it is defined to allow.  For example::"
msgstr ""
"最有用的形式是对一个或多个参数指定一个默认值。这样创建的函数，可以用比定义时"
"允许的更少的参数调用，比如::"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:381
msgid "This function can be called in several ways:"
msgstr "这个函数可以通过几种方式调用:"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:383
msgid ""
"giving only the mandatory argument: ``ask_ok('Do you really want to quit?')``"
msgstr "只给出必需的参数：``ask_ok('Do you really want to quit?')``"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:385
msgid ""
"giving one of the optional arguments: ``ask_ok('OK to overwrite the file?', "
"2)``"
msgstr "给出一个可选的参数：``ask_ok('OK to overwrite the file?', 2)``"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:387
msgid ""
"or even giving all arguments: ``ask_ok('OK to overwrite the file?', 2, 'Come "
"on, only yes or no!')``"
msgstr ""
"或者给出所有的参数：``ask_ok('OK to overwrite the file?', 2, 'Come on, only "
"yes or no!')``"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:390
msgid ""
"This example also introduces the :keyword:`in` keyword. This tests whether "
"or not a sequence contains a certain value."
msgstr ""
"这个示例还介绍了 :keyword:`in` 关键字。它可以测试一个序列是否包含某个值。"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:393
msgid ""
"The default values are evaluated at the point of function definition in the "
"*defining* scope, so that ::"
msgstr "默认值是在 *定义过程* 中在函数定义处计算的，所以 ::"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:404
msgid "will print ``5``."
msgstr "会打印 ``5``。"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:406
msgid ""
"**Important warning:**  The default value is evaluated only once. This makes "
"a difference when the default is a mutable object such as a list, "
"dictionary, or instances of most classes.  For example, the following "
"function accumulates the arguments passed to it on subsequent calls::"
msgstr ""
"**重要警告：** 默认值只会执行一次。这条规则在默认值为可变对象（列表、字典以及"
"大多数类实例）时很重要。比如，下面的函数会存储在后续调用中传递给它的参数::"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:419
msgid "This will print ::"
msgstr "这将打印出 ::"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:425
msgid ""
"If you don't want the default to be shared between subsequent calls, you can "
"write the function like this instead::"
msgstr "如果你不想要在后续调用之间共享默认值，你可以这样写这个函数::"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:438
msgid "Keyword Arguments"
msgstr "关键字参数"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:440
msgid ""
"Functions can also be called using :term:`keyword arguments <keyword "
"argument>` of the form ``kwarg=value``.  For instance, the following "
"function::"
msgstr ""
"也可以使用形如 ``kwarg=value`` 的 :term:`关键字参数 <keyword argument>` 来调"
"用函数。例如下面的函数::"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:449
msgid ""
"accepts one required argument (``voltage``) and three optional arguments "
"(``state``, ``action``, and ``type``).  This function can be called in any "
"of the following ways::"
msgstr ""
"接受一个必需的参数（``voltage``）和三个可选的参数（``state``, ``action``，和 "
"``type``）。这个函数可以通过下面的任何一种方式调用::"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:460
msgid "but all the following calls would be invalid::"
msgstr "但下面的函数调用都是无效的::"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:467
msgid ""
"In a function call, keyword arguments must follow positional arguments. All "
"the keyword arguments passed must match one of the arguments accepted by the "
"function (e.g. ``actor`` is not a valid argument for the ``parrot`` "
"function), and their order is not important.  This also includes non-"
"optional arguments (e.g. ``parrot(voltage=1000)`` is valid too). No argument "
"may receive a value more than once. Here's an example that fails due to this "
"restriction::"
msgstr ""
"在函数调用中，关键字参数必须跟随在位置参数的后面。传递的所有关键字参数必须与"
"函数接受的其中一个参数匹配（比如 ``actor`` 不是函数 ``parrot`` 的有效参数），"
"它们的顺序并不重要。这也包括非可选参数，（比如 ``parrot(voltage=1000)`` 也是"
"有效的）。不能对同一个参数多次赋值。下面是一个因为此限制而失败的例子::"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:483
msgid ""
"When a final formal parameter of the form ``**name`` is present, it receives "
"a dictionary (see :ref:`typesmapping`) containing all keyword arguments "
"except for those corresponding to a formal parameter.  This may be combined "
"with a formal parameter of the form ``*name`` (described in the next "
"subsection) which receives a :ref:`tuple <tut-tuples>` containing the "
"positional arguments beyond the formal parameter list.  (``*name`` must "
"occur before ``**name``.) For example, if we define a function like this::"
msgstr ""
"当存在一个形式为 ``**name`` 的最后一个形参时，它会接收一个字典 (参见 :ref:"
"`typesmapping`)，其中包含除了与已有形参相对应的关键字参数以外的所有关键字参"
"数。 这可以与一个形式为 ``*name``，接收一个包含除了已有形参列表以外的位置参数"
"的 :ref:`元组 <tut-tuples>` 的形参 (将在下一小节介绍) 组合使用 (``*name`` 必"
"须出现在 ``**name`` 之前。) 例如，如果我们这样定义一个函数::"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:500
msgid "It could be called like this::"
msgstr "它可以像这样调用::"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:508
msgid "and of course it would print:"
msgstr "当然它会打印::"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:521
msgid ""
"Note that the order in which the keyword arguments are printed is guaranteed "
"to match the order in which they were provided in the function call."
msgstr "注意打印时关键字参数的顺序保证与调用函数时提供它们的顺序是相匹配的。"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:528
msgid "Arbitrary Argument Lists"
msgstr "任意的参数列表"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:533
msgid ""
"Finally, the least frequently used option is to specify that a function can "
"be called with an arbitrary number of arguments.  These arguments will be "
"wrapped up in a tuple (see :ref:`tut-tuples`).  Before the variable number "
"of arguments, zero or more normal arguments may occur. ::"
msgstr ""
"最后，最不常用的选项是可以使用任意数量的参数调用函数。这些参数会被包含在一个"
"元组里（参见 :ref:`tut-tuples` ）。在可变数量的参数之前，可能会出现零个或多个"
"普通参数。::"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:542
msgid ""
"Normally, these ``variadic`` arguments will be last in the list of formal "
"parameters, because they scoop up all remaining input arguments that are "
"passed to the function. Any formal parameters which occur after the "
"``*args`` parameter are 'keyword-only' arguments, meaning that they can only "
"be used as keywords rather than positional arguments. ::"
msgstr ""
"一般来说，这些 ``可变参数`` 将在形式参数列表的末尾，因为它们收集传递给函数的"
"所有剩余输入参数。出现在 ``*args`` 参数之后的任何形式参数都是 ‘仅关键字参"
"数’，也就是说它们只能作为关键字参数而不能是位置参数。::"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:559
msgid "Unpacking Argument Lists"
msgstr "解包参数列表"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:561
msgid ""
"The reverse situation occurs when the arguments are already in a list or "
"tuple but need to be unpacked for a function call requiring separate "
"positional arguments.  For instance, the built-in :func:`range` function "
"expects separate *start* and *stop* arguments.  If they are not available "
"separately, write the function call with the  ``*`` operator to unpack the "
"arguments out of a list or tuple::"
msgstr ""
"当参数已经在列表或元组中但需要为需要单独位置参数的函数调用解包时，会发生相反"
"的情况。例如，内置的 :func:`range` 函数需要单独的 *start* 和 *stop* 参数。如"
"果它们不能单独使用，请使用 ``*`` 运算符编写函数调用以从列表或元组中解包参数::"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:577
msgid ""
"In the same fashion, dictionaries can deliver keyword arguments with the "
"``**`` operator::"
msgstr "以同样的方式，字典可以使用 ``**`` 运算符来提供关键字参数::"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:593
msgid "Lambda Expressions"
msgstr "Lambda 表达式"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:595
msgid ""
"Small anonymous functions can be created with the :keyword:`lambda` keyword. "
"This function returns the sum of its two arguments: ``lambda a, b: a+b``. "
"Lambda functions can be used wherever function objects are required.  They "
"are syntactically restricted to a single expression.  Semantically, they are "
"just syntactic sugar for a normal function definition.  Like nested function "
"definitions, lambda functions can reference variables from the containing "
"scope::"
msgstr ""
"可以用 :keyword:`lambda` 关键字来创建一个小的匿名函数。这个函数返回两个参数的"
"和： ``lambda a, b: a+b`` 。Lambda函数可以在需要函数对象的任何地方使用。它们"
"在语法上限于单个表达式。从语义上来说，它们只是正常函数定义的语法糖。与嵌套函"
"数定义一样，lambda函数可以引用所包含域的变量::"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:612
msgid ""
"The above example uses a lambda expression to return a function.  Another "
"use is to pass a small function as an argument::"
msgstr ""
"上面的例子使用一个lambda表达式来返回一个函数。另一个用法是传递一个小函数作为"
"参数::"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:624
msgid "Documentation Strings"
msgstr "文档字符串"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:631
msgid ""
"Here are some conventions about the content and formatting of documentation "
"strings."
msgstr "以下是有关文档字符串的内容和格式的一些约定。"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:634
msgid ""
"The first line should always be a short, concise summary of the object's "
"purpose.  For brevity, it should not explicitly state the object's name or "
"type, since these are available by other means (except if the name happens "
"to be a verb describing a function's operation).  This line should begin "
"with a capital letter and end with a period."
msgstr ""
"第一行应该是对象目的的简要概述。为简洁起见，它不应显式声明对象的名称或类型，"
"因为这些可通过其他方式获得（除非名称恰好是描述函数操作的动词）。这一行应以大"
"写字母开头，以句点结尾。"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:640
msgid ""
"If there are more lines in the documentation string, the second line should "
"be blank, visually separating the summary from the rest of the description.  "
"The following lines should be one or more paragraphs describing the object's "
"calling conventions, its side effects, etc."
msgstr ""
"如果文档字符串中有更多行，则第二行应为空白，从而在视觉上将摘要与其余描述分"
"开。后面几行应该是一个或多个段落，描述对象的调用约定，它的副作用等。"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:645
msgid ""
"The Python parser does not strip indentation from multi-line string literals "
"in Python, so tools that process documentation have to strip indentation if "
"desired.  This is done using the following convention. The first non-blank "
"line *after* the first line of the string determines the amount of "
"indentation for the entire documentation string.  (We can't use the first "
"line since it is generally adjacent to the string's opening quotes so its "
"indentation is not apparent in the string literal.)  Whitespace "
"\"equivalent\" to this indentation is then stripped from the start of all "
"lines of the string.  Lines that are indented less should not occur, but if "
"they occur all their leading whitespace should be stripped.  Equivalence of "
"whitespace should be tested after expansion of tabs (to 8 spaces, normally)."
msgstr ""
"Python 解析器不会从 Python 中删除多行字符串文字的缩进，因此处理文档的工具必须"
"在需要时删除缩进。 这是使用以下约定完成的。 文档字符串第一行 *之后* 的第一个"
"非空行确定整个文档字符串的缩进量。（我们不能使用第一行，因为它通常与字符串的"
"开头引号相邻，因此它的缩进在字符串文字中不明显。）然后从字符串的所有行的开头"
"剥离与该缩进 \"等效\" 的空格。 缩进更少的行不应该出现，但是如果它们出现，则应"
"该剥离它们的所有前导空格。 应在转化制表符为空格后测试空格的等效性（通常转化为"
"8个空格）。"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:657
msgid "Here is an example of a multi-line docstring::"
msgstr "下面是一个多行文档字符串的例子::"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:675
msgid "Function Annotations"
msgstr "函数标注"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:683
msgid ""
":ref:`Function annotations <function>` are completely optional metadata "
"information about the types used by user-defined functions (see :pep:`3107` "
"and :pep:`484` for more information)."
msgstr ""
":ref:`函数标注 <function>` 是关于用户自定义函数中使用的类型的完全可选元数据信"
"息（有关详情请参阅 :pep:`3107` 和 :pep:`484` ）。"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:687
msgid ""
":term:`Annotations <function annotation>` are stored in the :attr:"
"`__annotations__` attribute of the function as a dictionary and have no "
"effect on any other part of the function.  Parameter annotations are defined "
"by a colon after the parameter name, followed by an expression evaluating to "
"the value of the annotation.  Return annotations are defined by a literal ``-"
">``, followed by an expression, between the parameter list and the colon "
"denoting the end of the :keyword:`def` statement.  The following example has "
"a positional argument, a keyword argument, and the return value annotated::"
msgstr ""
":term:`函数标注 <function annotation>` 以字典的形式存放在函数的 :attr:"
"`__annotations__` 属性中，并且不会影响函数的任何其他部分。 形参标注的定义方式"
"是在形参名称后加上冒号，后面跟一个表达式，该表达式会被求值为标注的值。 返回值"
"标注的定义方式是加上一个组合符号 ``->``，后面跟一个表达式，该标注位于形参列表"
"和表示 :keyword:`def` 语句结束的冒号之间。 下面的示例有一个位置参数，一个关键"
"字参数以及返回值带有相应标注::"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:709
msgid "Intermezzo: Coding Style"
msgstr "小插曲：编码风格"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:714
msgid ""
"Now that you are about to write longer, more complex pieces of Python, it is "
"a good time to talk about *coding style*.  Most languages can be written (or "
"more concise, *formatted*) in different styles; some are more readable than "
"others. Making it easy for others to read your code is always a good idea, "
"and adopting a nice coding style helps tremendously for that."
msgstr ""
"现在你将要写更长，更复杂的 Python 代码，是时候讨论一下 *代码风格* 了。 大多数"
"语言都能以不同的风格被编写（或更准确地说，被格式化）；有些比其他的更具有可读"
"性。 能让其他人轻松阅读你的代码总是一个好主意，采用一种好的编码风格对此有很大"
"帮助。"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:720
msgid ""
"For Python, :pep:`8` has emerged as the style guide that most projects "
"adhere to; it promotes a very readable and eye-pleasing coding style.  Every "
"Python developer should read it at some point; here are the most important "
"points extracted for you:"
msgstr ""
"对于Python，:pep:`8` 已经成为大多数项目所遵循的风格指南；它促进了一种非常易读"
"且令人赏心悦目的编码风格。每个Python开发人员都应该在某个时候阅读它；以下是为"
"你提取的最重要的几个要点："

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:725
msgid "Use 4-space indentation, and no tabs."
msgstr "使用4个空格缩进，不要使用制表符。"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:727
msgid ""
"4 spaces are a good compromise between small indentation (allows greater "
"nesting depth) and large indentation (easier to read).  Tabs introduce "
"confusion, and are best left out."
msgstr ""
"4个空格是一个在小缩进（允许更大的嵌套深度）和大缩进（更容易阅读）的一种很好的"
"折中方案。制表符会引入混乱，最好不要使用它。"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:731
msgid "Wrap lines so that they don't exceed 79 characters."
msgstr "换行，使一行不超过79个字符。"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:733
msgid ""
"This helps users with small displays and makes it possible to have several "
"code files side-by-side on larger displays."
msgstr ""
"这有助于使用小型显示器的用户，并且可以在较大的显示器上并排放置多个代码文件。"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:736
msgid ""
"Use blank lines to separate functions and classes, and larger blocks of code "
"inside functions."
msgstr "使用空行分隔函数和类，以及函数内的较大的代码块。"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:739
msgid "When possible, put comments on a line of their own."
msgstr "如果可能，把注释放到单独的一行。"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:741
msgid "Use docstrings."
msgstr "使用文档字符串。"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:743
msgid ""
"Use spaces around operators and after commas, but not directly inside "
"bracketing constructs: ``a = f(1, 2) + g(3, 4)``."
msgstr ""
"在运算符前后和逗号后使用空格，但不能直接在括号内使用： ``a = f(1, 2) + g(3, "
"4)``。"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:746
msgid ""
"Name your classes and functions consistently; the convention is to use "
"``UpperCamelCase`` for classes and ``lowercase_with_underscores`` for "
"functions and methods.  Always use ``self`` as the name for the first method "
"argument (see :ref:`tut-firstclasses` for more on classes and methods)."
msgstr ""
"以一致的规则为你的类和函数命名；按照惯例应使用 ``UpperCamelCase`` 来命名类，"
"而以 ``lowercase_with_underscores`` 来命名函数和方法。 始终应使用 ``self`` 来"
"命名第一个方法参数 (有关类和方法的更多信息请参阅 :ref:`tut-firstclasses`)。"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:751
msgid ""
"Don't use fancy encodings if your code is meant to be used in international "
"environments.  Python's default, UTF-8, or even plain ASCII work best in any "
"case."
msgstr ""
"如果你的代码旨在用于国际环境，请不要使用花哨的编码。Python 默认的 UTF-8 或者"
"纯 ASCII 在任何情况下都能有最好的表现。"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:755
msgid ""
"Likewise, don't use non-ASCII characters in identifiers if there is only the "
"slightest chance people speaking a different language will read or maintain "
"the code."
msgstr ""
"同样，哪怕只有很小的可能，遇到说不同语言的人阅读或维护代码，也不要在标识符中"
"使用非ASCII字符。"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:761
msgid "Footnotes"
msgstr "备注"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:762
msgid ""
"Actually, *call by object reference* would be a better description, since if "
"a mutable object is passed, the caller will see any changes the callee makes "
"to it (items inserted into a list)."
msgstr ""
"实际上，*通过对象引用调用* 会是一个更好的表述，因为如果传递的是可变对象，则调"
"用者将看到被调用者对其做出的任何更改（插入到列表中的元素）。"
