# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2023, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Fred <fred.wei@foxmail.com>, 2020
# eric R <trencyclopedia@gmail.com>, 2020
# Woko <banbooliu@gmail.com>, 2020
# df2dc1c92e792f7ae8417c51df43db8f_594d92a <0f49be28017426edb1db1a2ab6e67088_717605>, 2020
# Konge <zkonge@outlook.com>, 2020
# ppcfish <ppcfish@gmail.com>, 2020
# Hissy <aozora@live.cn>, 2020
# Freesand Leo <yuqinju@163.com>, 2021
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-06-02 14:43+0000\n"
"PO-Revision-Date: 2020-05-30 12:16+0000\n"
"Last-Translator: Freesand Leo <yuqinju@163.com>, 2021\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../tutorial/controlflow.rst:5
msgid "More Control Flow Tools"
msgstr "其他流程控制工具"

#: ../../tutorial/controlflow.rst:7
msgid ""
"Besides the :keyword:`while` statement just introduced, Python uses the "
"usual flow control statements known from other languages, with some twists."
msgstr "除了刚刚介绍过的 :keyword:`while` 语句，Python 中也会使用其他语言中常见的流程控制语句，只是稍有变化。"

#: ../../tutorial/controlflow.rst:14
msgid ":keyword:`!if` Statements"
msgstr ":keyword:`!if` 语句"

#: ../../tutorial/controlflow.rst:16
msgid ""
"Perhaps the most well-known statement type is the :keyword:`if` statement.  "
"For example::"
msgstr "可能最为人所熟知的编程语句就是 :keyword:`if` 语句了。例如 ::"

#: ../../tutorial/controlflow.rst:33
msgid ""
"There can be zero or more :keyword:`elif` parts, and the :keyword:`else` "
"part is optional.  The keyword ':keyword:`!elif`' is short for 'else if', "
"and is useful to avoid excessive indentation.  An  :keyword:`!if` ... "
":keyword:`!elif` ... :keyword:`!elif` ... sequence is a substitute for the "
"``switch`` or ``case`` statements found in other languages."
msgstr ""
"可以有零个或多个 :keyword:`elif` 部分，以及一个可选的 :keyword:`else` 部分。 关键字 "
"':keyword:`!elif`' 是 'else if' 的缩写，适合用于避免过多的缩进。 一个 :keyword:`!if` ... "
":keyword:`!elif` ... :keyword:`!elif` ... 序列可以看作是其他语言中的 ``switch`` 或 "
"``case`` 语句的替代。"

#: ../../tutorial/controlflow.rst:43
msgid ":keyword:`!for` Statements"
msgstr ":keyword:`!for` 语句"

#: ../../tutorial/controlflow.rst:48
msgid ""
"The :keyword:`for` statement in Python differs a bit from what you may be "
"used to in C or Pascal.  Rather than always iterating over an arithmetic "
"progression of numbers (like in Pascal), or giving the user the ability to "
"define both the iteration step and halting condition (as C), Python's "
":keyword:`!for` statement iterates over the items of any sequence (a list or"
" a string), in the order that they appear in the sequence.  For example (no "
"pun intended):"
msgstr ""
"Python 中的 :keyword:`for` 语句与你在 C 或 Pascal 中所用到的有所不同。 Python 中的 "
":keyword:`!for` 语句并不总是对算术递增的数值进行迭代（如同 Pascal），或是给予用户定义迭代步骤和暂停条件的能力（如同 "
"C），而是对任意序列进行迭代（例如列表或字符串），条目的迭代顺序与它们在序列中出现的顺序一致。 例如（此处英文为双关语）:"

#: ../../tutorial/controlflow.rst:69
msgid ""
"Code that modifies a collection while iterating over that same collection "
"can be tricky to get right.  Instead, it is usually more straight-forward to"
" loop over a copy of the collection or to create a new collection::"
msgstr "在遍历同一个集合时修改该集合的代码可能很难获得正确的结果。通常，更直接的做法是循环遍历该集合的副本或创建新集合："

#: ../../tutorial/controlflow.rst:88
msgid "The :func:`range` Function"
msgstr ":func:`range` 函数"

#: ../../tutorial/controlflow.rst:90
msgid ""
"If you do need to iterate over a sequence of numbers, the built-in function "
":func:`range` comes in handy.  It generates arithmetic progressions::"
msgstr "如果你确实需要遍历一个数字序列，内置函数 :func:`range`  会派上用场。它生成算术级数::"

#: ../../tutorial/controlflow.rst:102
msgid ""
"The given end point is never part of the generated sequence; ``range(10)`` "
"generates 10 values, the legal indices for items of a sequence of length 10."
"  It is possible to let the range start at another number, or to specify a "
"different increment (even negative; sometimes this is called the 'step')::"
msgstr ""
"给定的终止数值并不在要生成的序列里；``range(10)`` "
"会生成10个值，并且是以合法的索引生成一个长度为10的序列。range也可以以另一个数字开头，或者以指定的幅度增加（甚至是负数；有时这也被叫做 "
"'步进'） ::"

#: ../../tutorial/controlflow.rst:116
msgid ""
"To iterate over the indices of a sequence, you can combine :func:`range` and"
" :func:`len` as follows::"
msgstr "要以序列的索引来迭代，您可以将 :func:`range` 和 :func:`len` 组合如下::"

#: ../../tutorial/controlflow.rst:129
msgid ""
"In most such cases, however, it is convenient to use the :func:`enumerate` "
"function, see :ref:`tut-loopidioms`."
msgstr "然而，在大多数这类情况下，使用 :func:`enumerate` 函数比较方便，请参见 :ref:`tut-loopidioms` 。"

#: ../../tutorial/controlflow.rst:132
msgid "A strange thing happens if you just print a range::"
msgstr "如果你只打印 range，会出现奇怪的结果::"

#: ../../tutorial/controlflow.rst:137
msgid ""
"In many ways the object returned by :func:`range` behaves as if it is a "
"list, but in fact it isn't. It is an object which returns the successive "
"items of the desired sequence when you iterate over it, but it doesn't "
"really make the list, thus saving space."
msgstr ""
":func:`range` "
"所返回的对象在许多方面表现得像一个列表，但实际上却并不是。此对象会在你迭代它时基于所希望的序列返回连续的项，但它没有真正生成列表，这样就能节省空间。"

#: ../../tutorial/controlflow.rst:142
msgid ""
"We say such an object is :term:`iterable`, that is, suitable as a target for"
" functions and constructs that expect something from which they can obtain "
"successive items until the supply is exhausted.  We have seen that the "
":keyword:`for` statement is such a construct, while an example of a function"
" that takes an iterable is :func:`sum`::"
msgstr ""
"我们称这样对象为 :term:`iterable`，也就是说，适合作为这样的目标对象：函数和结构期望从中获取连续的项直到所提供的项全部耗尽。 "
"我们已经看到 :keyword:`for` 语句就是这样一种结构，而接受可迭代对象的函数的一个例子是 :func:`sum`::"

#: ../../tutorial/controlflow.rst:151
msgid ""
"Later we will see more functions that return iterables and take iterables as"
" arguments.  Lastly, maybe you are curious about how to get a list from a "
"range. Here is the solution::"
msgstr "稍后我们将看到更多返回可迭代对象以及将可迭代对象作为参数的函数。 最后，也许你会很好奇如何从一个指定范围内获取一个列表。 以下是解决方案："

#: ../../tutorial/controlflow.rst:158
msgid ""
"In chapter :ref:`tut-structures`, we will discuss in more detail about "
":func:`list`."
msgstr "在 :ref:`tut-structures` 章节中，我们将讨论 :func:`list` 的更多细节。"

#: ../../tutorial/controlflow.rst:164
msgid ""
":keyword:`!break` and :keyword:`!continue` Statements, and :keyword:`!else` "
"Clauses on Loops"
msgstr ""
":keyword:`!break` 和 :keyword:`!continue` 语句，以及循环中的 :keyword:`!else` 子句"

#: ../../tutorial/controlflow.rst:166
msgid ""
"The :keyword:`break` statement, like in C, breaks out of the innermost "
"enclosing :keyword:`for` or :keyword:`while` loop."
msgstr ""
":keyword:`break` 语句，和 C 中的类似，用于跳出最近的 :keyword:`for` 或 :keyword:`while` 循环."

#: ../../tutorial/controlflow.rst:169
msgid ""
"Loop statements may have an :keyword:`!else` clause; it is executed when the"
" loop terminates through exhaustion of the iterable (with :keyword:`for`) or"
" when the condition becomes false (with :keyword:`while`), but not when the "
"loop is terminated by a :keyword:`break` statement.  This is exemplified by "
"the following loop, which searches for prime numbers::"
msgstr ""
"循环语句可能带有 :keyword:`!else` 子句；它会在循环耗尽了可迭代对象 (使用 :keyword:`for`) 或循环条件变为假值 (使用"
" :keyword:`while`) 时被执行，但不会在循环被 :keyword:`break` 语句终止时被执行。 "
"以下搜索素数的循环就是这样的一个例子::"

#: ../../tutorial/controlflow.rst:193
msgid ""
"(Yes, this is the correct code.  Look closely: the ``else`` clause belongs "
"to the :keyword:`for` loop, **not** the :keyword:`if` statement.)"
msgstr ""
"（是的，这是正确的代码。仔细看： ``else`` 子句属于 :keyword:`for` 循环， **不属于** :keyword:`if` 语句。）"

#: ../../tutorial/controlflow.rst:196
msgid ""
"When used with a loop, the ``else`` clause has more in common with the "
"``else`` clause of a :keyword:`try` statement than it does with that of "
":keyword:`if` statements: a :keyword:`try` statement's ``else`` clause runs "
"when no exception occurs, and a loop's ``else`` clause runs when no "
"``break`` occurs. For more on the :keyword:`!try` statement and exceptions, "
"see :ref:`tut-handling`."
msgstr ""
"当和循环一起使用时，``else`` 子句与 :keyword:`try` 语句中的 ``else`` 子句的共同点多于 :keyword:`if` "
"语句中的同类子句: :keyword:`try` 语句中的 ``else`` 子句会在未发生异常时执行，而循环中的 ``else`` 子句则会在未发生 "
"``break`` 时执行。 有关 :keyword:`!try` 语句和异常的更多信息，请参阅 :ref:`tut-handling`。"

#: ../../tutorial/controlflow.rst:203
msgid ""
"The :keyword:`continue` statement, also borrowed from C, continues with the "
"next iteration of the loop::"
msgstr ":keyword:`continue` 语句也是借鉴自 C 语言，表示继续循环中的下一次迭代::"

#: ../../tutorial/controlflow.rst:223
msgid ":keyword:`!pass` Statements"
msgstr ":keyword:`!pass` 语句"

#: ../../tutorial/controlflow.rst:225
msgid ""
"The :keyword:`pass` statement does nothing. It can be used when a statement "
"is required syntactically but the program requires no action. For example::"
msgstr ":keyword:`pass` 语句什么也不做。当语法上需要一个语句，但程序需要什么动作也不做时，可以使用它。例如::"

#: ../../tutorial/controlflow.rst:232
msgid "This is commonly used for creating minimal classes::"
msgstr "这通常用于创建最小的类::"

#: ../../tutorial/controlflow.rst:238
msgid ""
"Another place :keyword:`pass` can be used is as a place-holder for a "
"function or conditional body when you are working on new code, allowing you "
"to keep thinking at a more abstract level.  The :keyword:`!pass` is silently"
" ignored::"
msgstr ""
":keyword:`pass` 的另一个可以使用的场合是在你编写新的代码时作为一个函数或条件子句体的占位符，允许你保持在更抽象的层次上进行思考。 "
":keyword:`!pass` 会被静默地忽略::"

#: ../../tutorial/controlflow.rst:249
msgid "Defining Functions"
msgstr "定义函数"

#: ../../tutorial/controlflow.rst:251
msgid ""
"We can create a function that writes the Fibonacci series to an arbitrary "
"boundary::"
msgstr "我们可以创建一个输出任意范围内 Fibonacci 数列的函数::"

#: ../../tutorial/controlflow.rst:271
msgid ""
"The keyword :keyword:`def` introduces a function *definition*.  It must be "
"followed by the function name and the parenthesized list of formal "
"parameters. The statements that form the body of the function start at the "
"next line, and must be indented."
msgstr ""
"关键字 :keyword:`def` 引入一个函数 *定义*。它必须后跟函数名称和带括号的形式参数列表。构成函数体的语句从下一行开始，并且必须缩进。"

#: ../../tutorial/controlflow.rst:276
msgid ""
"The first statement of the function body can optionally be a string literal;"
" this string literal is the function's documentation string, or "
":dfn:`docstring`. (More about docstrings can be found in the section "
":ref:`tut-docstrings`.) There are tools which use docstrings to "
"automatically produce online or printed documentation, or to let the user "
"interactively browse through code; it's good practice to include docstrings "
"in code that you write, so make a habit of it."
msgstr ""
"函数体的第一个语句可以（可选的）是字符串文字；这个字符串文字是函数的文档字符串或 :dfn:`docstring` 。（有关文档字符串的更多信息，请参阅"
"  :ref:`tut-docstrings` "
"部分）有些工具使用文档字符串自动生成在线或印刷文档，或者让用户以交互式的形式浏览代码；在你编写的代码中包含文档字符串是一种很好的做法，所以要养成习惯。"

#: ../../tutorial/controlflow.rst:283
msgid ""
"The *execution* of a function introduces a new symbol table used for the "
"local variables of the function.  More precisely, all variable assignments "
"in a function store the value in the local symbol table; whereas variable "
"references first look in the local symbol table, then in the local symbol "
"tables of enclosing functions, then in the global symbol table, and finally "
"in the table of built-in names. Thus, global variables and variables of "
"enclosing functions cannot be directly assigned a value within a function "
"(unless, for global variables, named in a :keyword:`global` statement, or, "
"for variables of enclosing functions, named in a :keyword:`nonlocal` "
"statement), although they may be referenced."
msgstr ""
"函数的 *执行* 会引入一个用于函数局部变量的新符号表。 "
"更确切地说，函数中所有的变量赋值都将存储在局部符号表中；而变量引用会首先在局部符号表中查找，然后是外层函数的局部符号表，再然后是全局符号表，最后是内置名称的符号表。"
" 因此，全局变量和外层函数的变量不能在函数内部直接赋值（除非是在 :keyword:`global` 语句中定义的全局变量，或者是在 "
":keyword:`nonlocal` 语句中定义的外层函数的变量），尽管它们可以被引用。"

#: ../../tutorial/controlflow.rst:294
msgid ""
"The actual parameters (arguments) to a function call are introduced in the "
"local symbol table of the called function when it is called; thus, arguments"
" are passed using *call by value* (where the *value* is always an object "
"*reference*, not the value of the object). [#]_ When a function calls "
"another function, or calls itself recursively, a new local symbol table is "
"created for that call."
msgstr ""
"在调用函数时会将实际参数（实参）引入到被调用函数的局部符号表中；因此，实参是使用 *按值调用* 来传递的（其中的 *值* 始终是对象的 *引用* "
"而不是对象的值）。 [#]_ 当一个函数调用另外一个函数时，会为该调用创建一个新的局部符号表。"

#: ../../tutorial/controlflow.rst:301
msgid ""
"A function definition associates the function name with the function object "
"in the current symbol table.  The interpreter recognizes the object pointed "
"to by that name as a user-defined function.  Other names can also point to "
"that same function object and can also be used to access the function::"
msgstr ""
"函数定义会将函数名称与函数对象在当前符号表中进行关联。 解释器会将该名称所指向的对象识别为用户自定义函数。 "
"其他名称也可指向同一个函数对象并可被用来访问访函数::"

#: ../../tutorial/controlflow.rst:312
msgid ""
"Coming from other languages, you might object that ``fib`` is not a function"
" but a procedure since it doesn't return a value.  In fact, even functions "
"without a :keyword:`return` statement do return a value, albeit a rather "
"boring one.  This value is called ``None`` (it's a built-in name).  Writing "
"the value ``None`` is normally suppressed by the interpreter if it would be "
"the only value written. You can see it if you really want to using "
":func:`print`::"
msgstr ""
"如果你学过其他语言，你可能会认为 ``fib`` 不是函数而是一个过程，因为它并不返回值。事实上，即使没有 :keyword:`return` "
"语句的函数也会返回一个值，尽管它是一个相当无聊的值。这个值称为 ``None`` （它是内置名称）。一般来说解释器不会打印出单独的返回值 "
"``None`` ，如果你真想看到它，你可以使用 :func:`print` ::"

#: ../../tutorial/controlflow.rst:323
msgid ""
"It is simple to write a function that returns a list of the numbers of the "
"Fibonacci series, instead of printing it::"
msgstr "写一个返回斐波那契数列的列表（而不是把它打印出来）的函数，非常简单::"

#: ../../tutorial/controlflow.rst:339
msgid "This example, as usual, demonstrates some new Python features:"
msgstr "此示例中，像往常一样，演示了一些新的 Python 功能:"

#: ../../tutorial/controlflow.rst:341
msgid ""
"The :keyword:`return` statement returns with a value from a function. "
":keyword:`!return` without an expression argument returns ``None``. Falling "
"off the end of a function also returns ``None``."
msgstr ""
":keyword:`return` 语句会从函数内部返回一个值。 不带表达式参数的 :keyword:`!return` 会返回 ``None``。 "
"函数执行完毕退出也会返回 ``None``。"

#: ../../tutorial/controlflow.rst:345
msgid ""
"The statement ``result.append(a)`` calls a *method* of the list object "
"``result``.  A method is a function that 'belongs' to an object and is named"
" ``obj.methodname``, where ``obj`` is some object (this may be an "
"expression), and ``methodname`` is the name of a method that is defined by "
"the object's type. Different types define different methods.  Methods of "
"different types may have the same name without causing ambiguity.  (It is "
"possible to define your own object types and methods, using *classes*, see "
":ref:`tut-classes`) The method :meth:`append` shown in the example is "
"defined for list objects; it adds a new element at the end of the list.  In "
"this example it is equivalent to ``result = result + [a]``, but more "
"efficient."
msgstr ""
"``result.append(a)`` 语句调用了列表对象 ``result`` 的 *方法* 。方法是“属于”一个对象的函数，它被命名为 "
"``obj.methodname`` ，其中 ``obj`` 是某个对象（也可能是一个表达式）， ``methodname`` "
"是由对象类型中定义的方法的名称。不同的类型可以定义不同的方法。不同类型的方法可以有相同的名称而不会引起歧义。（可以使用 *类* "
"定义自己的对象类型和方法，请参阅 :ref:`tut-classes` ）示例中的方法 :meth:`append` "
"是为列表对象定义的；它会在列表的最后添加一个新的元素。在这个示例中它相当于 ``result = result + [a]`` ，但更高效。"

#: ../../tutorial/controlflow.rst:360
msgid "More on Defining Functions"
msgstr "函数定义的更多形式"

#: ../../tutorial/controlflow.rst:362
msgid ""
"It is also possible to define functions with a variable number of arguments."
" There are three forms, which can be combined."
msgstr "给函数定义有可变数目的参数也是可行的。这里有三种形式，可以组合使用。"

#: ../../tutorial/controlflow.rst:369
msgid "Default Argument Values"
msgstr "参数默认值"

#: ../../tutorial/controlflow.rst:371
msgid ""
"The most useful form is to specify a default value for one or more "
"arguments. This creates a function that can be called with fewer arguments "
"than it is defined to allow.  For example::"
msgstr "最有用的形式是对一个或多个参数指定一个默认值。这样创建的函数，可以用比定义时允许的更少的参数调用，比如::"

#: ../../tutorial/controlflow.rst:387
msgid "This function can be called in several ways:"
msgstr "这个函数可以通过几种方式调用:"

#: ../../tutorial/controlflow.rst:389
msgid ""
"giving only the mandatory argument: ``ask_ok('Do you really want to "
"quit?')``"
msgstr "只给出必需的参数：``ask_ok('Do you really want to quit?')``"

#: ../../tutorial/controlflow.rst:391
msgid ""
"giving one of the optional arguments: ``ask_ok('OK to overwrite the file?', "
"2)``"
msgstr "给出一个可选的参数：``ask_ok('OK to overwrite the file?', 2)``"

#: ../../tutorial/controlflow.rst:393
msgid ""
"or even giving all arguments: ``ask_ok('OK to overwrite the file?', 2, 'Come"
" on, only yes or no!')``"
msgstr ""
"或者给出所有的参数：``ask_ok('OK to overwrite the file?', 2, 'Come on, only yes or "
"no!')``"

#: ../../tutorial/controlflow.rst:396
msgid ""
"This example also introduces the :keyword:`in` keyword. This tests whether "
"or not a sequence contains a certain value."
msgstr "这个示例还介绍了 :keyword:`in` 关键字。它可以测试一个序列是否包含某个值。"

#: ../../tutorial/controlflow.rst:399
msgid ""
"The default values are evaluated at the point of function definition in the "
"*defining* scope, so that ::"
msgstr "默认值是在 *定义过程* 中在函数定义处计算的，所以 ::"

#: ../../tutorial/controlflow.rst:410
msgid "will print ``5``."
msgstr "会打印 ``5``。"

#: ../../tutorial/controlflow.rst:412
msgid ""
"**Important warning:**  The default value is evaluated only once. This makes"
" a difference when the default is a mutable object such as a list, "
"dictionary, or instances of most classes.  For example, the following "
"function accumulates the arguments passed to it on subsequent calls::"
msgstr ""
"**重要警告：** "
"默认值只会执行一次。这条规则在默认值为可变对象（列表、字典以及大多数类实例）时很重要。比如，下面的函数会存储在后续调用中传递给它的参数::"

#: ../../tutorial/controlflow.rst:425
msgid "This will print ::"
msgstr "这将打印出 ::"

#: ../../tutorial/controlflow.rst:431
msgid ""
"If you don't want the default to be shared between subsequent calls, you can"
" write the function like this instead::"
msgstr "如果你不想要在后续调用之间共享默认值，你可以这样写这个函数::"

#: ../../tutorial/controlflow.rst:444
msgid "Keyword Arguments"
msgstr "关键字参数"

#: ../../tutorial/controlflow.rst:446
msgid ""
"Functions can also be called using :term:`keyword arguments <keyword "
"argument>` of the form ``kwarg=value``.  For instance, the following "
"function::"
msgstr ""
"也可以使用形如 ``kwarg=value`` 的 :term:`关键字参数 <keyword argument>` 来调用函数。例如下面的函数::"

#: ../../tutorial/controlflow.rst:455
msgid ""
"accepts one required argument (``voltage``) and three optional arguments "
"(``state``, ``action``, and ``type``).  This function can be called in any "
"of the following ways::"
msgstr ""
"接受一个必需的参数（``voltage``）和三个可选的参数（``state``, ``action``，和 "
"``type``）。这个函数可以通过下面的任何一种方式调用::"

#: ../../tutorial/controlflow.rst:466
msgid "but all the following calls would be invalid::"
msgstr "但下面的函数调用都是无效的::"

#: ../../tutorial/controlflow.rst:473
msgid ""
"In a function call, keyword arguments must follow positional arguments. All "
"the keyword arguments passed must match one of the arguments accepted by the"
" function (e.g. ``actor`` is not a valid argument for the ``parrot`` "
"function), and their order is not important.  This also includes non-"
"optional arguments (e.g. ``parrot(voltage=1000)`` is valid too). No argument"
" may receive a value more than once. Here's an example that fails due to "
"this restriction::"
msgstr ""
"在函数调用中，关键字参数必须跟随在位置参数的后面。传递的所有关键字参数必须与函数接受的其中一个参数匹配（比如 ``actor`` 不是函数 "
"``parrot`` 的有效参数），它们的顺序并不重要。这也包括非可选参数，（比如 ``parrot(voltage=1000)`` "
"也是有效的）。不能对同一个参数多次赋值。下面是一个因为此限制而失败的例子::"

#: ../../tutorial/controlflow.rst:489
msgid ""
"When a final formal parameter of the form ``**name`` is present, it receives"
" a dictionary (see :ref:`typesmapping`) containing all keyword arguments "
"except for those corresponding to a formal parameter.  This may be combined "
"with a formal parameter of the form ``*name`` (described in the next "
"subsection) which receives a :ref:`tuple <tut-tuples>` containing the "
"positional arguments beyond the formal parameter list.  (``*name`` must "
"occur before ``**name``.) For example, if we define a function like this::"
msgstr ""
"当存在一个形式为 ``**name`` 的最后一个形参时，它会接收一个字典 (参见 "
":ref:`typesmapping`)，其中包含除了与已有形参相对应的关键字参数以外的所有关键字参数。 这可以与一个形式为 "
"``*name``，接收一个包含除了已有形参列表以外的位置参数的 :ref:`元组 <tut-tuples>` 的形参 (将在下一小节介绍) 组合使用 "
"(``*name`` 必须出现在 ``**name`` 之前。) 例如，如果我们这样定义一个函数::"

#: ../../tutorial/controlflow.rst:506
msgid "It could be called like this::"
msgstr "它可以像这样调用::"

#: ../../tutorial/controlflow.rst:514
msgid "and of course it would print:"
msgstr "当然它会打印::"

#: ../../tutorial/controlflow.rst:527
msgid ""
"Note that the order in which the keyword arguments are printed is guaranteed"
" to match the order in which they were provided in the function call."
msgstr "注意打印时关键字参数的顺序保证与调用函数时提供它们的顺序是相匹配的。"

#: ../../tutorial/controlflow.rst:531
msgid "Special parameters"
msgstr "特殊参数"

#: ../../tutorial/controlflow.rst:533
msgid ""
"By default, arguments may be passed to a Python function either by position "
"or explicitly by keyword. For readability and performance, it makes sense to"
" restrict the way arguments can be passed so that a developer need only look"
" at the function definition to determine if items are passed by position, by"
" position or keyword, or by keyword."
msgstr ""
"默认情况下，函数的参数传递形式可以是位置参数或是显式的关键字参数。 "
"为了确保可读性和运行效率，限制允许的参数传递形式是有意义的，这样开发者只需查看函数定义即可确定参数项是仅按位置、按位置也按关键字，还是仅按关键字传递。"

#: ../../tutorial/controlflow.rst:539
msgid "A function definition may look like:"
msgstr "函数的定义看起来可以像是这样："

#: ../../tutorial/controlflow.rst:550
msgid ""
"where ``/`` and ``*`` are optional. If used, these symbols indicate the kind"
" of parameter by how the arguments may be passed to the function: "
"positional-only, positional-or-keyword, and keyword-only. Keyword parameters"
" are also referred to as named parameters."
msgstr ""
"在这里 ``/`` 和 ``*`` 是可选的。 如果使用这些符号则表明可以通过何种形参将参数值传递给函数：仅限位置、位置或关键字，以及仅限关键字。 "
"关键字形参也被称为命名形参。"

#: ../../tutorial/controlflow.rst:557
msgid "Positional-or-Keyword Arguments"
msgstr "位置或关键字参数"

#: ../../tutorial/controlflow.rst:559
msgid ""
"If ``/`` and ``*`` are not present in the function definition, arguments may"
" be passed to a function by position or by keyword."
msgstr "如果函数定义中未使用 ``/`` 和 ``*``，则参数可以按位置或按关键字传递给函数。"

#: ../../tutorial/controlflow.rst:564
msgid "Positional-Only Parameters"
msgstr "仅限位置参数"

#: ../../tutorial/controlflow.rst:566
msgid ""
"Looking at this in a bit more detail, it is possible to mark certain "
"parameters as *positional-only*. If *positional-only*, the parameters' order"
" matters, and the parameters cannot be passed by keyword. Positional-only "
"parameters are placed before a ``/`` (forward-slash). The ``/`` is used to "
"logically separate the positional-only parameters from the rest of the "
"parameters. If there is no ``/`` in the function definition, there are no "
"positional-only parameters."
msgstr ""
"在这里还可以发现更多细节，特定形参可以被标记为 *仅限位置*。 如果是 *仅限位置* 的形参，则其位置是重要的，并且该形参不能作为关键字传入。 "
"仅限位置形参要放在 ``/`` (正斜杠) 之前。 这个 ``/`` 被用来从逻辑上分隔仅限位置形参和其它形参。 如果函数定义中没有 "
"``/``，则表示没有仅限位置形参。"

#: ../../tutorial/controlflow.rst:574
msgid ""
"Parameters following the ``/`` may be *positional-or-keyword* or *keyword-"
"only*."
msgstr "在 ``/`` 之后的形参可以为 *位置或关键字* 或 *仅限关键字*。"

#: ../../tutorial/controlflow.rst:578
msgid "Keyword-Only Arguments"
msgstr "仅限关键字参数"

#: ../../tutorial/controlflow.rst:580
msgid ""
"To mark parameters as *keyword-only*, indicating the parameters must be "
"passed by keyword argument, place an ``*`` in the arguments list just before"
" the first *keyword-only* parameter."
msgstr ""
"要将形参标记为 *仅限关键字*，即指明该形参必须以关键字参数的形式传入，应在参数列表的第一个 *仅限关键字* 形参之前放置一个 ``*``。"

#: ../../tutorial/controlflow.rst:586
msgid "Function Examples"
msgstr "函数示例"

#: ../../tutorial/controlflow.rst:588
msgid ""
"Consider the following example function definitions paying close attention "
"to the markers ``/`` and ``*``::"
msgstr "请考虑以下示例函数定义并特别注意 ``/`` 和 ``*`` 标记::"

#: ../../tutorial/controlflow.rst:604
msgid ""
"The first function definition, ``standard_arg``, the most familiar form, "
"places no restrictions on the calling convention and arguments may be passed"
" by position or keyword::"
msgstr "第一个函数定义 ``standard_arg`` 是最常见的形式，对调用方式没有任何限制，参数可以按位置也可以按关键字传入::"

#: ../../tutorial/controlflow.rst:614
msgid ""
"The second function ``pos_only_arg`` is restricted to only use positional "
"parameters as there is a ``/`` in the function definition::"
msgstr "第二个函数 ``pos_only_arg`` 在函数定义中带有 ``/``，限制仅使用位置形参。::"

#: ../../tutorial/controlflow.rst:625
msgid ""
"The third function ``kwd_only_args`` only allows keyword arguments as "
"indicated by a ``*`` in the function definition::"
msgstr "第三个函数 ``kwd_only_args`` 在函数定义中通过 ``*`` 指明仅允许关键字参数::"

#: ../../tutorial/controlflow.rst:636
msgid ""
"And the last uses all three calling conventions in the same function "
"definition::"
msgstr "而最后一个则在同一函数定义中使用了全部三种调用方式::"

#: ../../tutorial/controlflow.rst:656
msgid ""
"Finally, consider this function definition which has a potential collision "
"between the positional argument ``name``  and ``**kwds`` which has ``name`` "
"as a key::"
msgstr ""
"最后，请考虑这个函数定义，它的位置参数 ``name``  和 ``**kwds`` 之间由于存在关键字名称 ``name`` 而可能产生潜在冲突::"

#: ../../tutorial/controlflow.rst:661
msgid ""
"There is no possible call that will make it return ``True`` as the keyword "
"``'name'`` will always bind to the first parameter. For example::"
msgstr "任何调用都不可能让它返回 ``True``，因为关键字 ``'name'`` 将总是绑定到第一个形参。 例如::"

#: ../../tutorial/controlflow.rst:670
msgid ""
"But using ``/`` (positional only arguments), it is possible since it allows "
"``name`` as a positional argument and ``'name'`` as a key in the keyword "
"arguments::"
msgstr ""
"但使用 ``/`` (仅限位置参数) 就可能做到，因为它允许 ``name`` 作为位置参数，也允许 ``'name'`` "
"作为关键字参数的关键字名称::"

#: ../../tutorial/controlflow.rst:677
msgid ""
"In other words, the names of positional-only parameters can be used in "
"``**kwds`` without ambiguity."
msgstr "换句话说，仅限位置形参的名称可以在 ``**kwds`` 中使用而不产生歧义。"

#: ../../tutorial/controlflow.rst:682
msgid "Recap"
msgstr "概括"

#: ../../tutorial/controlflow.rst:684
msgid ""
"The use case will determine which parameters to use in the function "
"definition::"
msgstr "用例将确定要在函数定义中使用的参数::"

#: ../../tutorial/controlflow.rst:688
msgid "As guidance:"
msgstr "作为指导："

#: ../../tutorial/controlflow.rst:690
msgid ""
"Use positional-only if you want the name of the parameters to not be "
"available to the user. This is useful when parameter names have no real "
"meaning, if you want to enforce the order of the arguments when the function"
" is called or if you need to take some positional parameters and arbitrary "
"keywords."
msgstr ""
"如果你希望形参名称对用户来说不可用，则使用仅限位置形参。 "
"这适用于形参名称没有实际意义，以及当你希望强制规定调用时的参数顺序，或是需要同时收受一些位置形参和任意关键字形参等情况。"

#: ../../tutorial/controlflow.rst:695
msgid ""
"Use keyword-only when names have meaning and the function definition is more"
" understandable by being explicit with names or you want to prevent users "
"relying on the position of the argument being passed."
msgstr "当形参名称有实际意义，以及显式指定形参名称可使函数定义更易理解，或者当你想要防止用户过于依赖传入参数的位置时，则使用仅限关键字形参。"

#: ../../tutorial/controlflow.rst:698
msgid ""
"For an API, use positional-only to prevent breaking API changes if the "
"parameter's name is modified in the future."
msgstr "对于 API 来说，使用仅限位置形参可以防止形参名称在未来被修改时造成破坏性的 API 变动。"

#: ../../tutorial/controlflow.rst:704
msgid "Arbitrary Argument Lists"
msgstr "任意的参数列表"

#: ../../tutorial/controlflow.rst:709
msgid ""
"Finally, the least frequently used option is to specify that a function can "
"be called with an arbitrary number of arguments.  These arguments will be "
"wrapped up in a tuple (see :ref:`tut-tuples`).  Before the variable number "
"of arguments, zero or more normal arguments may occur. ::"
msgstr ""
"最后，最不常用的选项是可以使用任意数量的参数调用函数。这些参数会被包含在一个元组里（参见 :ref:`tut-tuples` "
"）。在可变数量的参数之前，可能会出现零个或多个普通参数。::"

#: ../../tutorial/controlflow.rst:718
msgid ""
"Normally, these ``variadic`` arguments will be last in the list of formal "
"parameters, because they scoop up all remaining input arguments that are "
"passed to the function. Any formal parameters which occur after the "
"``*args`` parameter are 'keyword-only' arguments, meaning that they can only"
" be used as keywords rather than positional arguments. ::"
msgstr ""
"一般来说，这些 ``可变参数`` 将在形式参数列表的末尾，因为它们收集传递给函数的所有剩余输入参数。出现在 ``*args`` "
"参数之后的任何形式参数都是 ‘仅限关键字参数’，也就是说它们只能作为关键字参数而不能是位置参数。::"

#: ../../tutorial/controlflow.rst:735
msgid "Unpacking Argument Lists"
msgstr "解包参数列表"

#: ../../tutorial/controlflow.rst:737
msgid ""
"The reverse situation occurs when the arguments are already in a list or "
"tuple but need to be unpacked for a function call requiring separate "
"positional arguments.  For instance, the built-in :func:`range` function "
"expects separate *start* and *stop* arguments.  If they are not available "
"separately, write the function call with the  ``*``\\ -operator to unpack "
"the arguments out of a list or tuple::"
msgstr ""
"当参数已经在列表或元组中但要为需要单独位置参数的函数调用解包时，会发生相反的情况。例如，内置的 :func:`range` 函数需要单独的 "
"*start* 和 *stop* 参数。如果它们不能单独使用，可以使用 ``*`` 操作符 来编写函数调用以便从列表或元组中解包参数::"

#: ../../tutorial/controlflow.rst:753
msgid ""
"In the same fashion, dictionaries can deliver keyword arguments with the "
"``**``\\ -operator::"
msgstr "同样的方式，字典可使用 ``**`` 操作符 来提供关键字参数::"

#: ../../tutorial/controlflow.rst:769
msgid "Lambda Expressions"
msgstr "Lambda 表达式"

#: ../../tutorial/controlflow.rst:771
msgid ""
"Small anonymous functions can be created with the :keyword:`lambda` keyword."
" This function returns the sum of its two arguments: ``lambda a, b: a+b``. "
"Lambda functions can be used wherever function objects are required.  They "
"are syntactically restricted to a single expression.  Semantically, they are"
" just syntactic sugar for a normal function definition.  Like nested "
"function definitions, lambda functions can reference variables from the "
"containing scope::"
msgstr ""
"可以用 :keyword:`lambda` 关键字来创建一个小的匿名函数。这个函数返回两个参数的和： ``lambda a, b: a+b`` "
"。Lambda函数可以在需要函数对象的任何地方使用。它们在语法上限于单个表达式。从语义上来说，它们只是正常函数定义的语法糖。与嵌套函数定义一样，lambda函数可以引用所包含域的变量::"

#: ../../tutorial/controlflow.rst:788
msgid ""
"The above example uses a lambda expression to return a function.  Another "
"use is to pass a small function as an argument::"
msgstr "上面的例子使用一个lambda表达式来返回一个函数。另一个用法是传递一个小函数作为参数::"

#: ../../tutorial/controlflow.rst:800
msgid "Documentation Strings"
msgstr "文档字符串"

#: ../../tutorial/controlflow.rst:807
msgid ""
"Here are some conventions about the content and formatting of documentation "
"strings."
msgstr "以下是有关文档字符串的内容和格式的一些约定。"

#: ../../tutorial/controlflow.rst:810
msgid ""
"The first line should always be a short, concise summary of the object's "
"purpose.  For brevity, it should not explicitly state the object's name or "
"type, since these are available by other means (except if the name happens "
"to be a verb describing a function's operation).  This line should begin "
"with a capital letter and end with a period."
msgstr ""
"第一行应该是对象目的的简要概述。为简洁起见，它不应显式声明对象的名称或类型，因为这些可通过其他方式获得（除非名称恰好是描述函数操作的动词）。这一行应以大写字母开头，以句点结尾。"

#: ../../tutorial/controlflow.rst:816
msgid ""
"If there are more lines in the documentation string, the second line should "
"be blank, visually separating the summary from the rest of the description."
"  The following lines should be one or more paragraphs describing the "
"object's calling conventions, its side effects, etc."
msgstr ""
"如果文档字符串中有更多行，则第二行应为空白，从而在视觉上将摘要与其余描述分开。后面几行应该是一个或多个段落，描述对象的调用约定，它的副作用等。"

#: ../../tutorial/controlflow.rst:821
msgid ""
"The Python parser does not strip indentation from multi-line string literals"
" in Python, so tools that process documentation have to strip indentation if"
" desired.  This is done using the following convention. The first non-blank "
"line *after* the first line of the string determines the amount of "
"indentation for the entire documentation string.  (We can't use the first "
"line since it is generally adjacent to the string's opening quotes so its "
"indentation is not apparent in the string literal.)  Whitespace "
"\"equivalent\" to this indentation is then stripped from the start of all "
"lines of the string.  Lines that are indented less should not occur, but if "
"they occur all their leading whitespace should be stripped.  Equivalence of "
"whitespace should be tested after expansion of tabs (to 8 spaces, normally)."
msgstr ""
"Python 解析器不会从 Python 中删除多行字符串文字的缩进，因此处理文档的工具必须在需要时删除缩进。 这是使用以下约定完成的。 "
"文档字符串第一行 *之后* "
"的第一个非空行确定整个文档字符串的缩进量。（我们不能使用第一行，因为它通常与字符串的开头引号相邻，因此它的缩进在字符串文字中不明显。）然后从字符串的所有行的开头剥离与该缩进"
" \"等效\" 的空格。 缩进更少的行不应该出现，但是如果它们出现，则应该剥离它们的所有前导空格。 "
"应在转化制表符为空格后测试空格的等效性（通常转化为8个空格）。"

#: ../../tutorial/controlflow.rst:833
msgid "Here is an example of a multi-line docstring::"
msgstr "下面是一个多行文档字符串的例子::"

#: ../../tutorial/controlflow.rst:851
msgid "Function Annotations"
msgstr "函数标注"

#: ../../tutorial/controlflow.rst:859
msgid ""
":ref:`Function annotations <function>` are completely optional metadata "
"information about the types used by user-defined functions (see :pep:`3107` "
"and :pep:`484` for more information)."
msgstr ""
":ref:`函数标注 <function>` 是关于用户自定义函数中使用的类型的完全可选元数据信息（有关详情请参阅 :pep:`3107` 和 "
":pep:`484` ）。"

#: ../../tutorial/controlflow.rst:863
msgid ""
":term:`Annotations <function annotation>` are stored in the "
":attr:`__annotations__` attribute of the function as a dictionary and have "
"no effect on any other part of the function.  Parameter annotations are "
"defined by a colon after the parameter name, followed by an expression "
"evaluating to the value of the annotation.  Return annotations are defined "
"by a literal ``->``, followed by an expression, between the parameter list "
"and the colon denoting the end of the :keyword:`def` statement.  The "
"following example has a required argument, an optional argument, and the "
"return value annotated::"
msgstr ""
":term:`标注 <function annotation>` 以字典的形式存放在函数的 :attr:`__annotations__` "
"属性中，并且不会影响函数的任何其他部分。 形参标注的定义方式是在形参名后加冒号，后面跟一个表达式，该表达式会被求值为标注的值。 "
"返回值标注的定义方式是加组合符号 ``->``，后面跟一个表达式，该标注位于形参列表和表示 :keyword:`def` 语句结束的冒号之间。  "
"下面的示例有一个必须的参数，一个可选的关键字参数以及返回值都带有相应的标注::"

#: ../../tutorial/controlflow.rst:885
msgid "Intermezzo: Coding Style"
msgstr "小插曲：编码风格"

#: ../../tutorial/controlflow.rst:890
msgid ""
"Now that you are about to write longer, more complex pieces of Python, it is"
" a good time to talk about *coding style*.  Most languages can be written "
"(or more concise, *formatted*) in different styles; some are more readable "
"than others. Making it easy for others to read your code is always a good "
"idea, and adopting a nice coding style helps tremendously for that."
msgstr ""
"现在你将要写更长，更复杂的 Python 代码，是时候讨论一下 *代码风格* 了。 "
"大多数语言都能以不同的风格被编写（或更准确地说，被格式化）；有些比其他的更具有可读性。 "
"能让其他人轻松阅读你的代码总是一个好主意，采用一种好的编码风格对此有很大帮助。"

#: ../../tutorial/controlflow.rst:896
msgid ""
"For Python, :pep:`8` has emerged as the style guide that most projects "
"adhere to; it promotes a very readable and eye-pleasing coding style.  Every"
" Python developer should read it at some point; here are the most important "
"points extracted for you:"
msgstr ""
"对于Python，:pep:`8` "
"已经成为大多数项目所遵循的风格指南；它促进了一种非常易读且令人赏心悦目的编码风格。每个Python开发人员都应该在某个时候阅读它；以下是为你提取的最重要的几个要点："

#: ../../tutorial/controlflow.rst:901
msgid "Use 4-space indentation, and no tabs."
msgstr "使用4个空格缩进，不要使用制表符。"

#: ../../tutorial/controlflow.rst:903
msgid ""
"4 spaces are a good compromise between small indentation (allows greater "
"nesting depth) and large indentation (easier to read).  Tabs introduce "
"confusion, and are best left out."
msgstr "4个空格是一个在小缩进（允许更大的嵌套深度）和大缩进（更容易阅读）的一种很好的折中方案。制表符会引入混乱，最好不要使用它。"

#: ../../tutorial/controlflow.rst:907
msgid "Wrap lines so that they don't exceed 79 characters."
msgstr "换行，使一行不超过79个字符。"

#: ../../tutorial/controlflow.rst:909
msgid ""
"This helps users with small displays and makes it possible to have several "
"code files side-by-side on larger displays."
msgstr "这有助于使用小型显示器的用户，并且可以在较大的显示器上并排放置多个代码文件。"

#: ../../tutorial/controlflow.rst:912
msgid ""
"Use blank lines to separate functions and classes, and larger blocks of code"
" inside functions."
msgstr "使用空行分隔函数和类，以及函数内的较大的代码块。"

#: ../../tutorial/controlflow.rst:915
msgid "When possible, put comments on a line of their own."
msgstr "如果可能，把注释放到单独的一行。"

#: ../../tutorial/controlflow.rst:917
msgid "Use docstrings."
msgstr "使用文档字符串。"

#: ../../tutorial/controlflow.rst:919
msgid ""
"Use spaces around operators and after commas, but not directly inside "
"bracketing constructs: ``a = f(1, 2) + g(3, 4)``."
msgstr "在运算符前后和逗号后使用空格，但不能直接在括号内使用： ``a = f(1, 2) + g(3, 4)``。"

#: ../../tutorial/controlflow.rst:922
msgid ""
"Name your classes and functions consistently; the convention is to use "
"``UpperCamelCase`` for classes and ``lowercase_with_underscores`` for "
"functions and methods.  Always use ``self`` as the name for the first method"
" argument (see :ref:`tut-firstclasses` for more on classes and methods)."
msgstr ""
"以一致的规则为你的类和函数命名；按照惯例应使用 ``UpperCamelCase`` 来命名类，而以 "
"``lowercase_with_underscores`` 来命名函数和方法。 始终应使用 ``self`` 来命名第一个方法参数 "
"(有关类和方法的更多信息请参阅 :ref:`tut-firstclasses`)。"

#: ../../tutorial/controlflow.rst:927
msgid ""
"Don't use fancy encodings if your code is meant to be used in international "
"environments.  Python's default, UTF-8, or even plain ASCII work best in any"
" case."
msgstr "如果你的代码旨在用于国际环境，请不要使用花哨的编码。Python 默认的 UTF-8 或者纯 ASCII 在任何情况下都能有最好的表现。"

#: ../../tutorial/controlflow.rst:931
msgid ""
"Likewise, don't use non-ASCII characters in identifiers if there is only the"
" slightest chance people speaking a different language will read or maintain"
" the code."
msgstr "同样，哪怕只有很小的可能，遇到说不同语言的人阅读或维护代码，也不要在标识符中使用非ASCII字符。"

#: ../../tutorial/controlflow.rst:937
msgid "Footnotes"
msgstr "备注"

#: ../../tutorial/controlflow.rst:938
msgid ""
"Actually, *call by object reference* would be a better description, since if"
" a mutable object is passed, the caller will see any changes the callee "
"makes to it (items inserted into a list)."
msgstr ""
"实际上，*通过对象引用调用* 会是一个更好的表述，因为如果传递的是可变对象，则调用者将看到被调用者对其做出的任何更改（插入到列表中的元素）。"
