# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2023, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# 8af080f2e6702c64bedd01873aed27e8_25aec74 <fd99d14239138a1f987c22e7736dde81_777475>, 2021
# 1lin24 <1lin24@sina.com>, 2021
# 伟 裴 <sky_wander@outlook.com>, 2021
# Jiuh-star <jiuh.star@gmail.com>, 2021
# 高乐喆 <gaolezhe@outlook.com>, 2023
# 钢 彭 <szhairui@gmail.com>, 2023
# ppcfish <ppcfish@gmail.com>, 2023
# ww song <sww4718168@gmail.com>, 2023
# WH-2099 <wh2099@outlook.com>, 2023
# Freesand Leo <yuqinju@163.com>, 2023
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-11-17 14:14+0000\n"
"PO-Revision-Date: 2021-06-28 00:50+0000\n"
"Last-Translator: Freesand Leo <yuqinju@163.com>, 2023\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/"
"teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../c-api/unicode.rst:6
msgid "Unicode Objects and Codecs"
msgstr "Unicode对象和编码解码器"

#: ../../c-api/unicode.rst:12
msgid "Unicode Objects"
msgstr "Unicode对象"

#: ../../c-api/unicode.rst:14
msgid ""
"Since the implementation of :pep:`393` in Python 3.3, Unicode objects "
"internally use a variety of representations, in order to allow handling the "
"complete range of Unicode characters while staying memory efficient.  There "
"are special cases for strings where all code points are below 128, 256, or "
"65536; otherwise, code points must be below 1114112 (which is the full "
"Unicode range)."
msgstr ""
"自从python3.3中实现了 :pep:`393` 以来，Unicode对象在内部使用各种表示形式，以"
"便在保持内存效率的同时处理完整范围的Unicode字符。对于所有代码点都低于128、256"
"或65536的字符串，有一些特殊情况；否则，代码点必须低于1114112（这是完整的"
"Unicode范围）。"

#: ../../c-api/unicode.rst:20
msgid ""
"UTF-8 representation is created on demand and cached in the Unicode object."
msgstr "UTF-8 表示将按需创建并缓存在 Unicode 对象中。"

#: ../../c-api/unicode.rst:23
msgid ""
"The :c:type:`Py_UNICODE` representation has been removed since Python 3.12 "
"with deprecated APIs. See :pep:`623` for more information."
msgstr ""
":c:type:`Py_UNICODE` 表示形式在 Python 3.12 中同被弃用的 API 一起被移除了，查"
"阅 :pep:`623` 以获得更多信息。"

#: ../../c-api/unicode.rst:29
msgid "Unicode Type"
msgstr "Unicode类型"

#: ../../c-api/unicode.rst:31
msgid ""
"These are the basic Unicode object types used for the Unicode implementation "
"in Python:"
msgstr "以下是用于Python中Unicode实现的基本Unicode对象类型："

#: ../../c-api/unicode.rst:38
msgid ""
"These types are typedefs for unsigned integer types wide enough to contain "
"characters of 32 bits, 16 bits and 8 bits, respectively.  When dealing with "
"single Unicode characters, use :c:type:`Py_UCS4`."
msgstr ""
"这些类型是无符号整数类型的类型定义，其宽度足以分别包含 32 位、16 位和 8 位字"
"符。 当需要处理单个 Unicode 字符时，请使用 :c:type:`Py_UCS4`。"

#: ../../c-api/unicode.rst:47
msgid ""
"This is a typedef of :c:type:`wchar_t`, which is a 16-bit type or 32-bit "
"type depending on the platform."
msgstr ""
"这是 :c:type:`wchar_t` 的类型定义，根据平台的不同它可能为 16 位类型或 32 位类"
"型。"

#: ../../c-api/unicode.rst:50
msgid ""
"In previous versions, this was a 16-bit type or a 32-bit type depending on "
"whether you selected a \"narrow\" or \"wide\" Unicode version of Python at "
"build time."
msgstr ""
"在以前的版本中，这是16位类型还是32位类型，这取决于您在构建时选择的是“窄”还"
"是“宽”Unicode版本的Python。"

#: ../../c-api/unicode.rst:60
msgid ""
"These subtypes of :c:type:`PyObject` represent a Python Unicode object.  In "
"almost all cases, they shouldn't be used directly, since all API functions "
"that deal with Unicode objects take and return :c:type:`PyObject` pointers."
msgstr ""
"这些关于 :c:type:`PyObject` 的子类型表示了一个 Python Unicode 对象。 在几乎所"
"有情形下，它们不应该被直接使用，因为所有处理 Unicode 对象的 API 函数都接受并"
"返回 :c:type:`PyObject` 类型的指针。"

#: ../../c-api/unicode.rst:69
msgid ""
"This instance of :c:type:`PyTypeObject` represents the Python Unicode type.  "
"It is exposed to Python code as ``str``."
msgstr ""
"这个 :c:type:`PyTypeObject` 实例代表 Python Unicode 类型。 它作为 ``str`` 公"
"开给 Python 代码。"

#: ../../c-api/unicode.rst:73
msgid ""
"The following APIs are C macros and static inlined functions for fast checks "
"and access to internal read-only data of Unicode objects:"
msgstr ""
"以下API是C宏和静态内联函数，用于快速检查和访问Unicode对象的内部只读数据："

#: ../../c-api/unicode.rst:78
msgid ""
"Return true if the object *o* is a Unicode object or an instance of a "
"Unicode subtype.  This function always succeeds."
msgstr ""
"如果对象*o*是Unicode对象或Unicode子类型的实例，则返回“真\"。此函数始终成功。"

#: ../../c-api/unicode.rst:84
msgid ""
"Return true if the object *o* is a Unicode object, but not an instance of a "
"subtype.  This function always succeeds."
msgstr ""
"如果对象*o*是Unicode对象，但不是子类型的实例，则返回“真”。此函数始终成功。"

#: ../../c-api/unicode.rst:90
msgid "Returns ``0``. This API is kept only for backward compatibility."
msgstr "返回 ``0``。 此 API 仅为向下兼容而保留。"

#: ../../c-api/unicode.rst:94
msgid "This API does nothing since Python 3.12."
msgstr "此 API 从 Python 3.12 起将不做任何事。"

#: ../../c-api/unicode.rst:100
msgid ""
"Return the length of the Unicode string, in code points.  *o* has to be a "
"Unicode object in the \"canonical\" representation (not checked)."
msgstr ""
"返回Unicode字符串的长度（以代码点为单位）*o*必须是“规范”表达方式中的Unicode对"
"象（未选中）。"

#: ../../c-api/unicode.rst:110
msgid ""
"Return a pointer to the canonical representation cast to UCS1, UCS2 or UCS4 "
"integer types for direct character access.  No checks are performed if the "
"canonical representation has the correct character size; use :c:func:"
"`PyUnicode_KIND` to select the right function."
msgstr ""
"返回一个用于直接字符访问的指向转换为 UCS1、UCS2 或 UCS4 整数类型的规范表示的"
"指针。 如果规范表示具有正确的字符大小，则不执行检查；使用 :c:func:"
"`PyUnicode_KIND` 选择正确的函数。"

#: ../../c-api/unicode.rst:122
msgid "Return values of the :c:func:`PyUnicode_KIND` macro."
msgstr "返回 :c:func:`PyUnicode_KIND` 宏的值。"

#: ../../c-api/unicode.rst:126
msgid "``PyUnicode_WCHAR_KIND`` has been removed."
msgstr "``PyUnicode_WCHAR_KIND`` 已被移除。"

#: ../../c-api/unicode.rst:132
msgid ""
"Return one of the PyUnicode kind constants (see above) that indicate how "
"many bytes per character this Unicode object uses to store its data.  *o* "
"has to be a Unicode object in the \"canonical\" representation (not checked)."
msgstr ""
"返回一个PyUnicode类常量（见上文），指示此Unicode对象用于存储其数据的每个字符"
"的字节数*o*必须是“规范”表达方式中的Unicode对象（未选中）。"

#: ../../c-api/unicode.rst:141
msgid ""
"Return a void pointer to the raw Unicode buffer.  *o* has to be a Unicode "
"object in the \"canonical\" representation (not checked)."
msgstr ""
"返回指向原始Unicode缓冲区的空指针*o*必须是“规范”表达方式中的Unicode对象（未选"
"中）。"

#: ../../c-api/unicode.rst:150
msgid ""
"Write into a canonical representation *data* (as obtained with :c:func:"
"`PyUnicode_DATA`).  This function performs no sanity checks, and is intended "
"for usage in loops.  The caller should cache the *kind* value and *data* "
"pointer as obtained from other calls.  *index* is the index in the string "
"(starts at 0) and *value* is the new code point value which should be "
"written to that location."
msgstr ""
"写入一个规范表示的 *data* (如同用 :c:func:`PyUnicode_DATA` 获取)。 此函数不会"
"执行正确性检查，被设计为在循环中使用。 调用者应当如同从其他调用中获取一样缓"
"存 *kind* 值和 *data* 指针。 *index* 是字符串中的索引号 (从 0 开始) 而 "
"*value* 是应写入该位置的新码位值。"

#: ../../c-api/unicode.rst:163
msgid ""
"Read a code point from a canonical representation *data* (as obtained with :"
"c:func:`PyUnicode_DATA`).  No checks or ready calls are performed."
msgstr ""
"从规范表示的 *data* (如同用 :c:func:`PyUnicode_DATA` 获取) 中读取一个码位。 "
"不会执行检查或就绪调用。"

#: ../../c-api/unicode.rst:171
msgid ""
"Read a character from a Unicode object *o*, which must be in the "
"\"canonical\" representation.  This is less efficient than :c:func:"
"`PyUnicode_READ` if you do multiple consecutive reads."
msgstr ""
"从 Unicode 对象 *o* 读取一个字符，必须使用“规范”表示形式。 如果你执行行多次连"
"续读取则此函数的效率将低于 :c:func:`PyUnicode_READ`。"

#: ../../c-api/unicode.rst:180
msgid ""
"Return the maximum code point that is suitable for creating another string "
"based on *o*, which must be in the \"canonical\" representation.  This is "
"always an approximation but more efficient than iterating over the string."
msgstr ""
"返回适合于基于*o*创建另一个字符串的最大代码点，该字符串必须在“规范”表达方式"
"中。这始终是一种近似，但比在字符串上迭代更有效。"

#: ../../c-api/unicode.rst:189
msgid ""
"Return ``1`` if the string is a valid identifier according to the language "
"definition, section :ref:`identifiers`. Return ``0`` otherwise."
msgstr ""
"如果字符串按照语言定义是合法的标识符则返回 ``1``，参见 :ref:`identifiers` 小"
"节。 否则返回 ``0``。"

#: ../../c-api/unicode.rst:192
msgid ""
"The function does not call :c:func:`Py_FatalError` anymore if the string is "
"not ready."
msgstr "如果字符串尚未就绪则此函数不会再调用 :c:func:`Py_FatalError`。"

#: ../../c-api/unicode.rst:198
msgid "Unicode Character Properties"
msgstr "Unicode字符属性"

#: ../../c-api/unicode.rst:200
msgid ""
"Unicode provides many different character properties. The most often needed "
"ones are available through these macros which are mapped to C functions "
"depending on the Python configuration."
msgstr ""
"Unicode提供了许多不同的字符特性。最常需要的宏可以通过这些宏获得，这些宏根据"
"Python配置映射到C函数。"

#: ../../c-api/unicode.rst:207
msgid ""
"Return ``1`` or ``0`` depending on whether *ch* is a whitespace character."
msgstr "根据 *ch* 是否为空白字符返回 ``1`` 或 ``0``。"

#: ../../c-api/unicode.rst:212
msgid ""
"Return ``1`` or ``0`` depending on whether *ch* is a lowercase character."
msgstr "根据 *ch* 是否为小写字符返回 ``1`` 或 ``0``。"

#: ../../c-api/unicode.rst:217
msgid ""
"Return ``1`` or ``0`` depending on whether *ch* is an uppercase character."
msgstr "根据 *ch* 是否为大写字符返回 ``1`` 或 ``0``"

#: ../../c-api/unicode.rst:222
msgid ""
"Return ``1`` or ``0`` depending on whether *ch* is a titlecase character."
msgstr "根据 *ch* 是否为标题化的大小写返回 ``1`` 或 ``0``。"

#: ../../c-api/unicode.rst:227
msgid ""
"Return ``1`` or ``0`` depending on whether *ch* is a linebreak character."
msgstr "根据 *ch* 是否为换行类字符返回 ``1`` 或 ``0``。"

#: ../../c-api/unicode.rst:232
msgid "Return ``1`` or ``0`` depending on whether *ch* is a decimal character."
msgstr "根据 *ch* 是否为十进制数字符返回 ``1`` 或 ``0``。"

#: ../../c-api/unicode.rst:237
msgid "Return ``1`` or ``0`` depending on whether *ch* is a digit character."
msgstr "根据 *ch* 是否为数码类字符返回 ``1`` 或 ``0``。"

#: ../../c-api/unicode.rst:242
msgid "Return ``1`` or ``0`` depending on whether *ch* is a numeric character."
msgstr "根据 *ch* 是否为数值类字符返回 ``1`` 或 ``0``。"

#: ../../c-api/unicode.rst:247
msgid ""
"Return ``1`` or ``0`` depending on whether *ch* is an alphabetic character."
msgstr "根据 *ch* 是否为字母类字符返回 ``1`` 或 ``0``。"

#: ../../c-api/unicode.rst:252
msgid ""
"Return ``1`` or ``0`` depending on whether *ch* is an alphanumeric character."
msgstr "根据 *ch* 是否为字母数字类字符返回 ``1`` 或 ``0``。"

#: ../../c-api/unicode.rst:257
msgid ""
"Return ``1`` or ``0`` depending on whether *ch* is a printable character. "
"Nonprintable characters are those characters defined in the Unicode "
"character database as \"Other\" or \"Separator\", excepting the ASCII space "
"(0x20) which is considered printable.  (Note that printable characters in "
"this context are those which should not be escaped when :func:`repr` is "
"invoked on a string. It has no bearing on the handling of strings written "
"to :data:`sys.stdout` or :data:`sys.stderr`.)"
msgstr ""
"根据 *ch* 是否为可打印字符返回 ``1`` 或``0``。 不可打印字符是指在 Unicode 字"
"符数据库中被定义为 \"Other\" 或 \"Separator\" 的字符，例外情况是 ASCII 空格 "
"(0x20) 被视为可打印字符。 (请注意在此语境下可打印字符是指当在字符串上发起调"
"用 :func:`repr` 时不应被转义的字符。 它们字符串写入 :data:`sys.stdout` 或 :"
"data:`sys.stderr` 时所需的处理无关)。"

#: ../../c-api/unicode.rst:266
msgid "These APIs can be used for fast direct character conversions:"
msgstr "这些 API 可用于快速直接的字符转换："

#: ../../c-api/unicode.rst:271
msgid "Return the character *ch* converted to lower case."
msgstr "返回转换为小写形式的字符 *ch*。"

#: ../../c-api/unicode.rst:273 ../../c-api/unicode.rst:281
#: ../../c-api/unicode.rst:289
msgid "This function uses simple case mappings."
msgstr "此函数使用简单的大小写映射。"

#: ../../c-api/unicode.rst:279
msgid "Return the character *ch* converted to upper case."
msgstr "返回转换为大写形式的字符 *ch*。"

#: ../../c-api/unicode.rst:287
msgid "Return the character *ch* converted to title case."
msgstr "返回转换为标题大小写形式的字符 *ch*。"

#: ../../c-api/unicode.rst:295
msgid ""
"Return the character *ch* converted to a decimal positive integer.  Return "
"``-1`` if this is not possible.  This function does not raise exceptions."
msgstr ""
"将字符 *ch* 转换为十进制正整数返回。 如果无法转换则返回 ``-1``。 此函数不会引"
"发异常。"

#: ../../c-api/unicode.rst:301
msgid ""
"Return the character *ch* converted to a single digit integer. Return ``-1`` "
"if this is not possible.  This function does not raise exceptions."
msgstr ""
"将字符 *ch* 转换为单个数码位的整数返回。 如果无法转换则返回 ``-1``。 此函数不"
"会引发异常。"

#: ../../c-api/unicode.rst:307
msgid ""
"Return the character *ch* converted to a double. Return ``-1.0`` if this is "
"not possible.  This function does not raise exceptions."
msgstr ""
"将字符 *ch* 转换为双精度浮点数返回。 如果无法转换则返回 ``-1.0``。 此函数不会"
"引发异常。"

#: ../../c-api/unicode.rst:311
msgid "These APIs can be used to work with surrogates:"
msgstr "这些 API 可被用来操作代理项："

#: ../../c-api/unicode.rst:315
msgid "Check if *ch* is a surrogate (``0xD800 <= ch <= 0xDFFF``)."
msgstr "检测 *ch* 是否为代理项 (``0xD800 <= ch <= 0xDFFF``)。"

#: ../../c-api/unicode.rst:319
msgid "Check if *ch* is a high surrogate (``0xD800 <= ch <= 0xDBFF``)."
msgstr "检测 *ch* 是否为高代理项 (``0xD800 <= ch <= 0xDBFF``)。"

#: ../../c-api/unicode.rst:323
msgid "Check if *ch* is a low surrogate (``0xDC00 <= ch <= 0xDFFF``)."
msgstr "检测 *ch* 是否为低代理项 (``0xDC00 <= ch <= 0xDFFF``)。"

#: ../../c-api/unicode.rst:327
msgid ""
"Join two surrogate characters and return a single :c:type:`Py_UCS4` value. "
"*high* and *low* are respectively the leading and trailing surrogates in a "
"surrogate pair. *high* must be in the range [0xD800; 0xDBFF] and *low* must "
"be in the range [0xDC00; 0xDFFF]."
msgstr ""
"合并两个代理项字符并返回单个 :c:type:`Py_UCS4` 值。 *high* 和 *low* 分别为一"
"个代理项对的开头和末尾代理项。 *high* 取值范围必须为 [0xD800; 0xDBFF] 而 "
"*low* 取值范围必须为 [0xDC00; 0xDFFF]。"

#: ../../c-api/unicode.rst:334
msgid "Creating and accessing Unicode strings"
msgstr "创建和访问 Unicode 字符串"

#: ../../c-api/unicode.rst:336
msgid ""
"To create Unicode objects and access their basic sequence properties, use "
"these APIs:"
msgstr "要创建 Unicode 对象和访问其基本序列属性，请使用这些 API："

#: ../../c-api/unicode.rst:341
msgid ""
"Create a new Unicode object.  *maxchar* should be the true maximum code "
"point to be placed in the string.  As an approximation, it can be rounded up "
"to the nearest value in the sequence 127, 255, 65535, 1114111."
msgstr ""
"创建一个新的 Unicode 对象。 *maxchar* 应为可放入字符串的实际最大码位。 作为一"
"个近似值，它可被向上舍入到序列 127, 255, 65535, 1114111 中最接近的值。"

#: ../../c-api/unicode.rst:345
msgid ""
"This is the recommended way to allocate a new Unicode object.  Objects "
"created using this function are not resizable."
msgstr ""
"这是分配新的 Unicode 对象的推荐方式。 使用此函数创建的对象不可改变大小。"

#: ../../c-api/unicode.rst:354
msgid ""
"Create a new Unicode object with the given *kind* (possible values are :c:"
"macro:`PyUnicode_1BYTE_KIND` etc., as returned by :c:func:"
"`PyUnicode_KIND`).  The *buffer* must point to an array of *size* units of "
"1, 2 or 4 bytes per character, as given by the kind."
msgstr ""
"以给定的 *kind* 创建一个新的 Unicode 对象（可能的值为 :c:macro:"
"`PyUnicode_1BYTE_KIND` 等，即 :c:func:`PyUnicode_KIND` 所返回的值）。 "
"*buffer* 必须指向由此分类所给出的，以每字符 1, 2 或 4 字节单位的 *size* 大小"
"的数组。"

#: ../../c-api/unicode.rst:359
msgid ""
"If necessary, the input *buffer* is copied and transformed into the "
"canonical representation.  For example, if the *buffer* is a UCS4 string (:c:"
"macro:`PyUnicode_4BYTE_KIND`) and it consists only of codepoints in the UCS1 "
"range, it will be transformed into UCS1 (:c:macro:`PyUnicode_1BYTE_KIND`)."
msgstr ""
"如有必要，输入 *buffer* 将被拷贝并转换为规范表示形式。 例如，如果 *buffer* 是"
"一个 UCS4 字符串 (:c:macro:`PyUnicode_4BYTE_KIND`) 且仅由 UCS1 范围内的码位组"
"成，它将被转换为 UCS1 (:c:macro:`PyUnicode_1BYTE_KIND`)。"

#: ../../c-api/unicode.rst:370
msgid ""
"Create a Unicode object from the char buffer *u*.  The bytes will be "
"interpreted as being UTF-8 encoded.  The buffer is copied into the new "
"object. The return value might be a shared object, i.e. modification of the "
"data is not allowed."
msgstr ""
"根据字符缓冲区 *u* 创建一个 Unicode 对象。 字节数据将按 UTF-8 编码格式来解"
"读。 缓冲区将被拷贝到新的对象中。 返回值可能为共享对象，即数据不允许修改。"

#: ../../c-api/unicode.rst:376
msgid "This function raises :exc:`SystemError` when:"
msgstr "此函数会因以下情况而引发 :exc:`SystemError`:"

#: ../../c-api/unicode.rst:378
msgid "*size* < 0,"
msgstr "*size* < 0,"

#: ../../c-api/unicode.rst:379
msgid "*u* is ``NULL`` and *size* > 0"
msgstr "*u* 为 ``NULL`` 且 *size* > 0"

#: ../../c-api/unicode.rst:381
msgid "*u* == ``NULL`` with *size* > 0 is not allowed anymore."
msgstr "*u* == ``NULL`` 且 *size* > 0 不再被允许。"

#: ../../c-api/unicode.rst:387
msgid ""
"Create a Unicode object from a UTF-8 encoded null-terminated char buffer *u*."
msgstr "根据 UTF-8 编码的以空值结束的字符缓冲区 *u* 创建一个 Unicode 对象。"

#: ../../c-api/unicode.rst:393
msgid ""
"Take a C :c:func:`printf`\\ -style *format* string and a variable number of "
"arguments, calculate the size of the resulting Python Unicode string and "
"return a string with the values formatted into it.  The variable arguments "
"must be C types and must correspond exactly to the format characters in the "
"*format* ASCII-encoded string."
msgstr ""
"接受一个 C :c:func:`printf` 风格的 *format* 字符串和可变数量的参数，计算结果 "
"Python Unicode 字符串的大小并返回包含已格式化值的字符串。 可变数量的参数必须"
"均为 C 类型并且必须恰好与 *format* ASCII 编码字符串中的格式字符相对应。"

#: ../../c-api/unicode.rst:399
msgid ""
"A conversion specifier contains two or more characters and has the following "
"components, which must occur in this order:"
msgstr "转换标记符包含两个或更多字符并具有以下组成，且必须遵循此处规定的顺序："

#: ../../c-api/unicode.rst:402
msgid "The ``'%'`` character, which marks the start of the specifier."
msgstr "``'%'`` 字符，用于标记转换符的起始。"

#: ../../c-api/unicode.rst:404
msgid ""
"Conversion flags (optional), which affect the result of some conversion "
"types."
msgstr "转换旗标（可选），用于影响某些转换类型的结果。"

#: ../../c-api/unicode.rst:407
msgid ""
"Minimum field width (optional). If specified as an ``'*'`` (asterisk), the "
"actual width is given in the next argument, which must be of type :c:expr:"
"`int`, and the object to convert comes after the minimum field width and "
"optional precision."
msgstr ""
"最小字段宽度（可选）。 如果指定为 ``'*'`` (星号)，则实际宽度会在下一参数中给"
"出，该参数必须为 :c:expr:`int` 类型，要转换的对象则放在最小字段宽度和可选精度"
"之后。"

#: ../../c-api/unicode.rst:412
msgid ""
"Precision (optional), given as a ``'.'`` (dot) followed by the precision. If "
"specified as ``'*'`` (an asterisk), the actual precision is given in the "
"next argument, which must be of type :c:expr:`int`, and the value to convert "
"comes after the precision."
msgstr ""
"精度（可选），以在 ``'.'`` (点号) 之后加精度值的形式给出。 如果指定为 "
"``'*'`` (星号)，则实际精度会在下一参数中给出，该参数必须为 :c:expr:`int` 类"
"型，要转换的对象则放在精度之后。"

#: ../../c-api/unicode.rst:417
msgid "Length modifier (optional)."
msgstr "长度修饰符（可选）。"

#: ../../c-api/unicode.rst:419
msgid "Conversion type."
msgstr "转换类型。"

#: ../../c-api/unicode.rst:421
msgid "The conversion flag characters are:"
msgstr "转换旗标为："

#: ../../c-api/unicode.rst:426
msgid "Flag"
msgstr "标志"

#: ../../c-api/unicode.rst:426
msgid "Meaning"
msgstr "含意"

#: ../../c-api/unicode.rst:428
msgid "``0``"
msgstr "``0``"

#: ../../c-api/unicode.rst:428
msgid "The conversion will be zero padded for numeric values."
msgstr "转换将为数字值填充零字符。"

#: ../../c-api/unicode.rst:430
msgid "``-``"
msgstr "``-``"

#: ../../c-api/unicode.rst:430
msgid ""
"The converted value is left adjusted (overrides the ``0`` flag if both are "
"given)."
msgstr "转换值将靠左对齐（如果同时给出则会覆盖 ``0`` 旗标）。"

#: ../../c-api/unicode.rst:434
msgid ""
"The length modifiers for following integer conversions (``d``, ``i``, ``o``, "
"``u``, ``x``, or ``X``) specify the type of the argument (:c:expr:`int` by "
"default):"
msgstr ""
"以下整数转换的长度修饰符 (``d``, ``i``, ``o``, ``u``, ``x``, or ``X``) 指明参"
"数的类型 (默认为 :c:expr:`int`):"

#: ../../c-api/unicode.rst:441
msgid "Modifier"
msgstr "修饰符"

#: ../../c-api/unicode.rst:441
msgid "Types"
msgstr "类型"

#: ../../c-api/unicode.rst:443
msgid "``l``"
msgstr "``l``"

#: ../../c-api/unicode.rst:443
msgid ":c:expr:`long` or :c:expr:`unsigned long`"
msgstr ":c:expr:`long` 或 :c:expr:`unsigned long`"

#: ../../c-api/unicode.rst:445
msgid "``ll``"
msgstr "``ll``"

#: ../../c-api/unicode.rst:445
msgid ":c:expr:`long long` or :c:expr:`unsigned long long`"
msgstr ":c:expr:`long long` 或 :c:expr:`unsigned long long`"

#: ../../c-api/unicode.rst:447
msgid "``j``"
msgstr "``j``"

#: ../../c-api/unicode.rst:447
msgid ":c:type:`intmax_t` or :c:type:`uintmax_t`"
msgstr ":c:type:`intmax_t` 或 :c:type:`uintmax_t`"

#: ../../c-api/unicode.rst:449
msgid "``z``"
msgstr "``z``"

#: ../../c-api/unicode.rst:449
msgid ":c:type:`size_t` or :c:type:`ssize_t`"
msgstr ":c:type:`size_t` 或 :c:type:`ssize_t`"

#: ../../c-api/unicode.rst:451
msgid "``t``"
msgstr "``t``"

#: ../../c-api/unicode.rst:451
msgid ":c:type:`ptrdiff_t`"
msgstr ":c:type:`ptrdiff_t`"

#: ../../c-api/unicode.rst:454
msgid ""
"The length modifier ``l`` for following conversions ``s`` or ``V`` specify "
"that the type of the argument is :c:expr:`const wchar_t*`."
msgstr ""
"针对以下转换 ``s`` 或 ``V`` 的长度修饰符 ``l`` 指明参数的类型为 :c:expr:"
"`const wchar_t*`。"

#: ../../c-api/unicode.rst:457
msgid "The conversion specifiers are:"
msgstr "转换指示符如下:"

#: ../../c-api/unicode.rst:463
msgid "Conversion Specifier"
msgstr "转换指示符"

#: ../../c-api/unicode.rst:464
msgid "Type"
msgstr "类型"

#: ../../c-api/unicode.rst:465
msgid "Comment"
msgstr "注释"

#: ../../c-api/unicode.rst:467
msgid "``%``"
msgstr "``%``"

#: ../../c-api/unicode.rst:468
msgid "*n/a*"
msgstr "*不适用*"

#: ../../c-api/unicode.rst:469
msgid "The literal ``%`` character."
msgstr "字面的 ``%`` 字符。"

#: ../../c-api/unicode.rst:471
msgid "``d``, ``i``"
msgstr "``d``, ``i``"

#: ../../c-api/unicode.rst:472 ../../c-api/unicode.rst:476
#: ../../c-api/unicode.rst:480 ../../c-api/unicode.rst:484
#: ../../c-api/unicode.rst:488
msgid "Specified by the length modifier"
msgstr "由长度修饰符指明"

#: ../../c-api/unicode.rst:473
msgid "The decimal representation of a signed C integer."
msgstr "有符号 C 整数的十进制表示。"

#: ../../c-api/unicode.rst:475
msgid "``u``"
msgstr "``u``"

#: ../../c-api/unicode.rst:477
msgid "The decimal representation of an unsigned C integer."
msgstr "无符号 C 整数的十进制表示。"

#: ../../c-api/unicode.rst:479
msgid "``o``"
msgstr "``o``"

#: ../../c-api/unicode.rst:481
msgid "The octal representation of an unsigned C integer."
msgstr "无符号 C 整数的八进制表示。"

#: ../../c-api/unicode.rst:483
msgid "``x``"
msgstr "``x``"

#: ../../c-api/unicode.rst:485
msgid "The hexadecimal representation of an unsigned C integer (lowercase)."
msgstr "无符号 C 整数的十六进制表示（小写）。"

#: ../../c-api/unicode.rst:487
msgid "``X``"
msgstr "``X``"

#: ../../c-api/unicode.rst:489
msgid "The hexadecimal representation of an unsigned C integer (uppercase)."
msgstr "无符号 C 整数的十六进制表示（大写）。"

#: ../../c-api/unicode.rst:491
msgid "``c``"
msgstr "``c``"

#: ../../c-api/unicode.rst:492
msgid ":c:expr:`int`"
msgstr ":c:expr:`int`"

#: ../../c-api/unicode.rst:493
msgid "A single character."
msgstr "单个字符。"

#: ../../c-api/unicode.rst:495
msgid "``s``"
msgstr "``s``"

#: ../../c-api/unicode.rst:496
msgid ":c:expr:`const char*` or :c:expr:`const wchar_t*`"
msgstr ":c:expr:`const char*` 或 :c:expr:`const wchar_t*`"

#: ../../c-api/unicode.rst:497
msgid "A null-terminated C character array."
msgstr "以 null 为终止符的 C 字符数组。"

#: ../../c-api/unicode.rst:499
msgid "``p``"
msgstr "``p``"

#: ../../c-api/unicode.rst:500
msgid ":c:expr:`const void*`"
msgstr ":c:expr:`const void*`"

#: ../../c-api/unicode.rst:501
msgid ""
"The hex representation of a C  pointer. Mostly equivalent to "
"``printf(\"%p\")`` except that it is guaranteed to start with the literal "
"``0x`` regardless of what the platform's ``printf`` yields."
msgstr ""
"一个 C  指针的十六进制表示形式。 基本等价于 ``printf(\"%p\")`` 但它会确保以字"
"面值 ``0x`` 开头而不管系统平台上的 ``printf`` 输出是什么。"

#: ../../c-api/unicode.rst:506
msgid "``A``"
msgstr "``A``"

#: ../../c-api/unicode.rst:507 ../../c-api/unicode.rst:511
#: ../../c-api/unicode.rst:521 ../../c-api/unicode.rst:525
msgid ":c:expr:`PyObject*`"
msgstr ":c:expr:`PyObject*`"

#: ../../c-api/unicode.rst:508
msgid "The result of calling :func:`ascii`."
msgstr ":func:`ascii` 调用的结果。"

#: ../../c-api/unicode.rst:510
msgid "``U``"
msgstr "``U``"

#: ../../c-api/unicode.rst:512
msgid "A Unicode object."
msgstr "一个 Unicode 对象。"

#: ../../c-api/unicode.rst:514
msgid "``V``"
msgstr "``V``"

#: ../../c-api/unicode.rst:515
msgid ":c:expr:`PyObject*`, :c:expr:`const char*` or :c:expr:`const wchar_t*`"
msgstr ":c:expr:`PyObject*`, :c:expr:`const char*` 或 :c:expr:`const wchar_t*`"

#: ../../c-api/unicode.rst:516
msgid ""
"A Unicode object (which may be ``NULL``) and a null-terminated C character "
"array as a second parameter (which will be used, if the first parameter is "
"``NULL``)."
msgstr ""
"一个 Unicode 对象 (可以为 ``NULL``) 和一个以空值结束的 C 字符数组作为第二个形"
"参（如果第一个形参为 ``NULL``，第二个形参将被使用）。"

#: ../../c-api/unicode.rst:520
msgid "``S``"
msgstr "``S``"

#: ../../c-api/unicode.rst:522
msgid "The result of calling :c:func:`PyObject_Str`."
msgstr "调用 :c:func:`PyObject_Str` 的结果。"

#: ../../c-api/unicode.rst:524
msgid "``R``"
msgstr "``R``"

#: ../../c-api/unicode.rst:526
msgid "The result of calling :c:func:`PyObject_Repr`."
msgstr "调用 :c:func:`PyObject_Repr` 的结果。"

#: ../../c-api/unicode.rst:529
msgid ""
"The width formatter unit is number of characters rather than bytes. The "
"precision formatter unit is number of bytes or :c:type:`wchar_t` items (if "
"the length modifier ``l`` is used) for ``\"%s\"`` and ``\"%V\"`` (if the "
"``PyObject*`` argument is ``NULL``), and a number of characters for "
"``\"%A\"``, ``\"%U\"``, ``\"%S\"``, ``\"%R\"`` and ``\"%V\"`` (if the "
"``PyObject*`` argument is not ``NULL``)."
msgstr ""
"格式符的宽度单位是字符数而不是字节数。 格式符的精度单位对于 ``\"%s\"`` 和 "
"``\"%V\"`` (如果 ``PyObject*`` 参数为 ``NULL``) 是字节数或 :c:type:`wchar_t` "
"项数 (如果使用了长度修饰符 ``l``)，而对于 ``\"%A\"``, ``\"%U\"``, "
"``\"%S\"``, ``\"%R\"`` 和 ``\"%V\"`` (如果 ``PyObject*`` 参数不为 ``NULL``) "
"则为字符数。"

#: ../../c-api/unicode.rst:537
msgid ""
"Unlike to C :c:func:`printf` the ``0`` flag has effect even when a precision "
"is given for integer conversions (``d``, ``i``, ``u``, ``o``, ``x``, or "
"``X``)."
msgstr ""
"与 C :c:func:`printf` 不同的是 ``0`` 旗标即使在为整数转换 (``d``, ``i``, "
"``u``, ``o``, ``x``, or ``X``) 指定精度时也是有效的。"

#: ../../c-api/unicode.rst:541
msgid "Support for ``\"%lld\"`` and ``\"%llu\"`` added."
msgstr "增加了对 ``\"%lld\"`` 和 ``\"%llu\"`` 的支持。"

#: ../../c-api/unicode.rst:544
msgid "Support for ``\"%li\"``, ``\"%lli\"`` and ``\"%zi\"`` added."
msgstr "增加了对 ``\"%li\"``, ``\"%lli\"`` 和 ``\"%zi\"`` 的支持。"

#: ../../c-api/unicode.rst:547
msgid ""
"Support width and precision formatter for ``\"%s\"``, ``\"%A\"``, "
"``\"%U\"``, ``\"%V\"``, ``\"%S\"``, ``\"%R\"`` added."
msgstr ""
"增加了对 ``\"%s\"``, ``\"%A\"``, ``\"%U\"``, ``\"%V\"``, ``\"%S\"``, "
"``\"%R\"`` 的宽度和精度格式符支持。"

#: ../../c-api/unicode.rst:551
msgid ""
"Support for conversion specifiers ``o`` and ``X``. Support for length "
"modifiers ``j`` and ``t``. Length modifiers are now applied to all integer "
"conversions. Length modifier ``l`` is now applied to conversion specifiers "
"``s`` and ``V``. Support for variable width and precision ``*``. Support for "
"flag ``-``."
msgstr ""
"支持转换说明符 ``o`` 和 ``X``。 支持长度修饰符 ``j`` 和 ``t``。 长度修饰符现"
"在将应用于所有整数转换。 长度修饰符 ``l`` 现在将应用于转换说明符 ``s`` 和 "
"``V``。 支持可变宽度和精度 ``*``。 支持旗标 ``-``。"

#: ../../c-api/unicode.rst:559
msgid ""
"An unrecognized format character now sets a :exc:`SystemError`. In previous "
"versions it caused all the rest of the format string to be copied as-is to "
"the result string, and any extra arguments discarded."
msgstr ""
"不可识别的格式字符现在会设置一个 :exc:`SystemError`。 在之前版本中它会导致所"
"有剩余格式字符串被原样拷贝到结果字符串，并丢弃任何额外的参数。"

#: ../../c-api/unicode.rst:566
msgid ""
"Identical to :c:func:`PyUnicode_FromFormat` except that it takes exactly two "
"arguments."
msgstr "等同于 :c:func:`PyUnicode_FromFormat` 但它将接受恰好两个参数。"

#: ../../c-api/unicode.rst:572
msgid ""
"Copy an instance of a Unicode subtype to a new true Unicode object if "
"necessary. If *obj* is already a true Unicode object (not a subtype), return "
"a new :term:`strong reference` to the object."
msgstr ""
"如有必要将把一个 Unicode 子类型的实例拷贝为新的真实 Unicode 对象。 如果 "
"*obj* 已经是一个真实 Unicode 对象（而非子类型），则返回一个新的指向该对象的 :"
"term:`strong reference`。"

#: ../../c-api/unicode.rst:576
msgid ""
"Objects other than Unicode or its subtypes will cause a :exc:`TypeError`."
msgstr "非 Unicode 或其子类型的对象将导致 :exc:`TypeError`。"

#: ../../c-api/unicode.rst:582
msgid "Decode an encoded object *obj* to a Unicode object."
msgstr "将一个已编码的对象 *obj* 解码为 Unicode 对象。"

#: ../../c-api/unicode.rst:584
msgid ""
":class:`bytes`, :class:`bytearray` and other :term:`bytes-like objects "
"<bytes-like object>` are decoded according to the given *encoding* and using "
"the error handling defined by *errors*. Both can be ``NULL`` to have the "
"interface use the default values (see :ref:`builtincodecs` for details)."
msgstr ""
":class:`bytes`, :class:`bytearray` 和其他 :term:`字节类对象 <bytes-like "
"object>` 将按照给定的 *encoding* 来解码并使用由 *errors* 定义的错误处理方"
"式。 两者均可为 ``NULL`` 即让接口使用默认值（请参阅 :ref:`builtincodecs` 了解"
"详情）。"

#: ../../c-api/unicode.rst:590
msgid ""
"All other objects, including Unicode objects, cause a :exc:`TypeError` to be "
"set."
msgstr "所有其他对象，包括 Unicode 对象，都将导致设置 :exc:`TypeError`。"

#: ../../c-api/unicode.rst:593
msgid ""
"The API returns ``NULL`` if there was an error.  The caller is responsible "
"for decref'ing the returned objects."
msgstr ""
"如有错误该 API 将返回 ``NULL``。 调用方要负责递减指向所返回对象的引用。"

#: ../../c-api/unicode.rst:599
msgid "Return the length of the Unicode object, in code points."
msgstr "返回 Unicode 对象码位的长度。"

#: ../../c-api/unicode.rst:610
msgid ""
"Copy characters from one Unicode object into another.  This function "
"performs character conversion when necessary and falls back to :c:func:`!"
"memcpy` if possible.  Returns ``-1`` and sets an exception on error, "
"otherwise returns the number of copied characters."
msgstr ""
"将一个 Unicode 对象中的字符拷贝到另一个对象中。 此函数会在必要时执行字符转换"
"并会在可能的情况下回退到 :c:func:`!memcpy`。 在出错时将返回 ``-1`` 并设置一个"
"异常，在其他情况下将返回拷贝的字符数量。"

#: ../../c-api/unicode.rst:621
msgid ""
"Fill a string with a character: write *fill_char* into ``unicode[start:"
"start+length]``."
msgstr ""
"使用一个字符填充字符串：将 *fill_char* 写入 ``unicode[start:start+length]``。"

#: ../../c-api/unicode.rst:624
msgid ""
"Fail if *fill_char* is bigger than the string maximum character, or if the "
"string has more than 1 reference."
msgstr ""
"如果 *fill_char* 值大于字符串最大字符值，或者如果字符串有 1 以上的引用将执行"
"失败。"

#: ../../c-api/unicode.rst:627
msgid ""
"Return the number of written character, or return ``-1`` and raise an "
"exception on error."
msgstr "返回写入的字符数量，或者在出错时返回 ``-1`` 并引发一个异常。"

#: ../../c-api/unicode.rst:636
msgid ""
"Write a character to a string.  The string must have been created through :c:"
"func:`PyUnicode_New`.  Since Unicode strings are supposed to be immutable, "
"the string must not be shared, or have been hashed yet."
msgstr ""
"将一个字符写入到字符串。 字符串必须通过 :c:func:`PyUnicode_New` 创建。 由于 "
"Unicode 字符串应当是不可变的，因此该字符串不能被共享，或是被哈希。"

#: ../../c-api/unicode.rst:640
msgid ""
"This function checks that *unicode* is a Unicode object, that the index is "
"not out of bounds, and that the object can be modified safely (i.e. that it "
"its reference count is one)."
msgstr ""
"该函数将检查 *unicode* 是否为 Unicode 对象，索引是否未越界，并且对象是否可被"
"安全地修改（即其引用计数为一）。"

#: ../../c-api/unicode.rst:649
msgid ""
"Read a character from a string.  This function checks that *unicode* is a "
"Unicode object and the index is not out of bounds, in contrast to :c:func:"
"`PyUnicode_READ_CHAR`, which performs no error checking."
msgstr ""
"从字符串读取一个字符。 该函数将检查 *unicode* 是否为 Unicode 对象且索引是否未"
"越界，这不同于 :c:func:`PyUnicode_READ_CHAR`，后者不会执行任何错误检查。"

#: ../../c-api/unicode.rst:659
msgid ""
"Return a substring of *str*, from character index *start* (included) to "
"character index *end* (excluded).  Negative indices are not supported."
msgstr ""
"返回 *str* 的一个子串，从字符索引 *start* (包括) 到字符索引 *end* (不包括)。 "
"不支持负索引号。"

#: ../../c-api/unicode.rst:668
msgid ""
"Copy the string *u* into a UCS4 buffer, including a null character, if "
"*copy_null* is set.  Returns ``NULL`` and sets an exception on error (in "
"particular, a :exc:`SystemError` if *buflen* is smaller than the length of "
"*u*).  *buffer* is returned on success."
msgstr ""
"将字符串 *u* 拷贝到一个 UCS4 缓冲区，包括一个空字符，如果设置了 *copy_null* "
"的话。 出错时返回 ``NULL`` 并设置一个异常（特别是当 *buflen* 小于 *u* 的长度"
"时，:exc:`SystemError` 将被设置）。 成功时返回 *buffer*。"

#: ../../c-api/unicode.rst:678
msgid ""
"Copy the string *u* into a new UCS4 buffer that is allocated using :c:func:"
"`PyMem_Malloc`.  If this fails, ``NULL`` is returned with a :exc:"
"`MemoryError` set.  The returned buffer always has an extra null code point "
"appended."
msgstr ""

#: ../../c-api/unicode.rst:687
msgid "Locale Encoding"
msgstr ""

#: ../../c-api/unicode.rst:689
msgid ""
"The current locale encoding can be used to decode text from the operating "
"system."
msgstr ""

#: ../../c-api/unicode.rst:696
msgid ""
"Decode a string from UTF-8 on Android and VxWorks, or from the current "
"locale encoding on other platforms. The supported error handlers are "
"``\"strict\"`` and ``\"surrogateescape\"`` (:pep:`383`). The decoder uses "
"``\"strict\"`` error handler if *errors* is ``NULL``.  *str* must end with a "
"null character but cannot contain embedded null characters."
msgstr ""

#: ../../c-api/unicode.rst:703
msgid ""
"Use :c:func:`PyUnicode_DecodeFSDefaultAndSize` to decode a string from the :"
"term:`filesystem encoding and error handler`."
msgstr ""

#: ../../c-api/unicode.rst:706 ../../c-api/unicode.rst:741
msgid "This function ignores the :ref:`Python UTF-8 Mode <utf8-mode>`."
msgstr ""

#: ../../c-api/unicode.rst:710 ../../c-api/unicode.rst:807
msgid "The :c:func:`Py_DecodeLocale` function."
msgstr "The :c:func:`Py_DecodeLocale` 函数。"

#: ../../c-api/unicode.rst:714
msgid ""
"The function now also uses the current locale encoding for the "
"``surrogateescape`` error handler, except on Android. Previously, :c:func:"
"`Py_DecodeLocale` was used for the ``surrogateescape``, and the current "
"locale encoding was used for ``strict``."
msgstr ""

#: ../../c-api/unicode.rst:723
msgid ""
"Similar to :c:func:`PyUnicode_DecodeLocaleAndSize`, but compute the string "
"length using :c:func:`!strlen`."
msgstr ""

#: ../../c-api/unicode.rst:731
msgid ""
"Encode a Unicode object to UTF-8 on Android and VxWorks, or to the current "
"locale encoding on other platforms. The supported error handlers are "
"``\"strict\"`` and ``\"surrogateescape\"`` (:pep:`383`). The encoder uses "
"``\"strict\"`` error handler if *errors* is ``NULL``. Return a :class:"
"`bytes` object. *unicode* cannot contain embedded null characters."
msgstr ""

#: ../../c-api/unicode.rst:738
msgid ""
"Use :c:func:`PyUnicode_EncodeFSDefault` to encode a string to the :term:"
"`filesystem encoding and error handler`."
msgstr ""

#: ../../c-api/unicode.rst:745 ../../c-api/unicode.rst:838
msgid "The :c:func:`Py_EncodeLocale` function."
msgstr ""

#: ../../c-api/unicode.rst:749
msgid ""
"The function now also uses the current locale encoding for the "
"``surrogateescape`` error handler, except on Android. Previously, :c:func:"
"`Py_EncodeLocale` was used for the ``surrogateescape``, and the current "
"locale encoding was used for ``strict``."
msgstr ""

#: ../../c-api/unicode.rst:758
msgid "File System Encoding"
msgstr "文件系统编码格式"

#: ../../c-api/unicode.rst:760
msgid ""
"Functions encoding to and decoding from the :term:`filesystem encoding and "
"error handler` (:pep:`383` and :pep:`529`)."
msgstr ""

#: ../../c-api/unicode.rst:763
msgid ""
"To encode file names to :class:`bytes` during argument parsing, the "
"``\"O&\"`` converter should be used, passing :c:func:`PyUnicode_FSConverter` "
"as the conversion function:"
msgstr ""

#: ../../c-api/unicode.rst:769
msgid ""
"ParseTuple converter: encode :class:`str` objects -- obtained directly or "
"through the :class:`os.PathLike` interface -- to :class:`bytes` using :c:"
"func:`PyUnicode_EncodeFSDefault`; :class:`bytes` objects are output as-is. "
"*result* must be a :c:expr:`PyBytesObject*` which must be released when it "
"is no longer used."
msgstr ""

#: ../../c-api/unicode.rst:777 ../../c-api/unicode.rst:794
msgid "Accepts a :term:`path-like object`."
msgstr "接受一个 :term:`path-like object`。"

#: ../../c-api/unicode.rst:780
msgid ""
"To decode file names to :class:`str` during argument parsing, the ``\"O&\"`` "
"converter should be used, passing :c:func:`PyUnicode_FSDecoder` as the "
"conversion function:"
msgstr ""

#: ../../c-api/unicode.rst:786
msgid ""
"ParseTuple converter: decode :class:`bytes` objects -- obtained either "
"directly or indirectly through the :class:`os.PathLike` interface -- to :"
"class:`str` using :c:func:`PyUnicode_DecodeFSDefaultAndSize`; :class:`str` "
"objects are output as-is. *result* must be a :c:expr:`PyUnicodeObject*` "
"which must be released when it is no longer used."
msgstr ""

#: ../../c-api/unicode.rst:800
msgid "Decode a string from the :term:`filesystem encoding and error handler`."
msgstr ""

#: ../../c-api/unicode.rst:802
msgid ""
"If you need to decode a string from the current locale encoding, use :c:func:"
"`PyUnicode_DecodeLocaleAndSize`."
msgstr ""

#: ../../c-api/unicode.rst:809 ../../c-api/unicode.rst:822
#: ../../c-api/unicode.rst:842
msgid ""
"The :term:`filesystem error handler <filesystem encoding and error handler>` "
"is now used."
msgstr ""

#: ../../c-api/unicode.rst:816
msgid ""
"Decode a null-terminated string from the :term:`filesystem encoding and "
"error handler`."
msgstr ""

#: ../../c-api/unicode.rst:819
msgid ""
"If the string length is known, use :c:func:"
"`PyUnicode_DecodeFSDefaultAndSize`."
msgstr ""

#: ../../c-api/unicode.rst:829
msgid ""
"Encode a Unicode object to the :term:`filesystem encoding and error "
"handler`, and return :class:`bytes`. Note that the resulting :class:`bytes` "
"object can contain null bytes."
msgstr ""

#: ../../c-api/unicode.rst:833
msgid ""
"If you need to encode a string to the current locale encoding, use :c:func:"
"`PyUnicode_EncodeLocale`."
msgstr ""

#: ../../c-api/unicode.rst:847
msgid "wchar_t Support"
msgstr ""

#: ../../c-api/unicode.rst:849
msgid ":c:type:`wchar_t` support for platforms which support it:"
msgstr ""

#: ../../c-api/unicode.rst:853
msgid ""
"Create a Unicode object from the :c:type:`wchar_t` buffer *w* of the given "
"*size*. Passing ``-1`` as the *size* indicates that the function must itself "
"compute the length, using wcslen. Return ``NULL`` on failure."
msgstr ""

#: ../../c-api/unicode.rst:861
msgid ""
"Copy the Unicode object contents into the :c:type:`wchar_t` buffer *w*.  At "
"most *size* :c:type:`wchar_t` characters are copied (excluding a possibly "
"trailing null termination character).  Return the number of :c:type:"
"`wchar_t` characters copied or ``-1`` in case of an error.  Note that the "
"resulting :c:expr:`wchar_t*` string may or may not be null-terminated.  It "
"is the responsibility of the caller to make sure that the :c:expr:`wchar_t*` "
"string is null-terminated in case this is required by the application. Also, "
"note that the :c:expr:`wchar_t*` string might contain null characters, which "
"would cause the string to be truncated when used with most C functions."
msgstr ""

#: ../../c-api/unicode.rst:874
msgid ""
"Convert the Unicode object to a wide character string. The output string "
"always ends with a null character. If *size* is not ``NULL``, write the "
"number of wide characters (excluding the trailing null termination "
"character) into *\\*size*. Note that the resulting :c:type:`wchar_t` string "
"might contain null characters, which would cause the string to be truncated "
"when used with most C functions. If *size* is ``NULL`` and the :c:expr:"
"`wchar_t*` string contains null characters a :exc:`ValueError` is raised."
msgstr ""

#: ../../c-api/unicode.rst:882
msgid ""
"Returns a buffer allocated by :c:macro:`PyMem_New` (use :c:func:`PyMem_Free` "
"to free it) on success. On error, returns ``NULL`` and *\\*size* is "
"undefined. Raises a :exc:`MemoryError` if memory allocation is failed."
msgstr ""

#: ../../c-api/unicode.rst:889
msgid ""
"Raises a :exc:`ValueError` if *size* is ``NULL`` and the :c:expr:`wchar_t*` "
"string contains null characters."
msgstr ""

#: ../../c-api/unicode.rst:897
msgid "Built-in Codecs"
msgstr ""

#: ../../c-api/unicode.rst:899
msgid ""
"Python provides a set of built-in codecs which are written in C for speed. "
"All of these codecs are directly usable via the following functions."
msgstr ""

#: ../../c-api/unicode.rst:902
msgid ""
"Many of the following APIs take two arguments encoding and errors, and they "
"have the same semantics as the ones of the built-in :func:`str` string "
"object constructor."
msgstr ""

#: ../../c-api/unicode.rst:906
msgid ""
"Setting encoding to ``NULL`` causes the default encoding to be used which is "
"UTF-8.  The file system calls should use :c:func:`PyUnicode_FSConverter` for "
"encoding file names. This uses the :term:`filesystem encoding and error "
"handler` internally."
msgstr ""

#: ../../c-api/unicode.rst:911
msgid ""
"Error handling is set by errors which may also be set to ``NULL`` meaning to "
"use the default handling defined for the codec.  Default error handling for "
"all built-in codecs is \"strict\" (:exc:`ValueError` is raised)."
msgstr ""

#: ../../c-api/unicode.rst:915
msgid ""
"The codecs all use a similar interface.  Only deviations from the following "
"generic ones are documented for simplicity."
msgstr ""

#: ../../c-api/unicode.rst:920
msgid "Generic Codecs"
msgstr ""

#: ../../c-api/unicode.rst:922
msgid "These are the generic codec APIs:"
msgstr ""

#: ../../c-api/unicode.rst:928
msgid ""
"Create a Unicode object by decoding *size* bytes of the encoded string *s*. "
"*encoding* and *errors* have the same meaning as the parameters of the same "
"name in the :func:`str` built-in function.  The codec to be used is looked "
"up using the Python codec registry.  Return ``NULL`` if an exception was "
"raised by the codec."
msgstr ""

#: ../../c-api/unicode.rst:938
msgid ""
"Encode a Unicode object and return the result as Python bytes object. "
"*encoding* and *errors* have the same meaning as the parameters of the same "
"name in the Unicode :meth:`~str.encode` method. The codec to be used is "
"looked up using the Python codec registry. Return ``NULL`` if an exception "
"was raised by the codec."
msgstr ""

#: ../../c-api/unicode.rst:946
msgid "UTF-8 Codecs"
msgstr "UTF-8 编解码器"

#: ../../c-api/unicode.rst:948
msgid "These are the UTF-8 codec APIs:"
msgstr "以下是 UTF-8 编解码器 API:"

#: ../../c-api/unicode.rst:953
msgid ""
"Create a Unicode object by decoding *size* bytes of the UTF-8 encoded string "
"*s*. Return ``NULL`` if an exception was raised by the codec."
msgstr ""

#: ../../c-api/unicode.rst:960
msgid ""
"If *consumed* is ``NULL``, behave like :c:func:`PyUnicode_DecodeUTF8`. If "
"*consumed* is not ``NULL``, trailing incomplete UTF-8 byte sequences will "
"not be treated as an error. Those bytes will not be decoded and the number "
"of bytes that have been decoded will be stored in *consumed*."
msgstr ""

#: ../../c-api/unicode.rst:968
msgid ""
"Encode a Unicode object using UTF-8 and return the result as Python bytes "
"object.  Error handling is \"strict\".  Return ``NULL`` if an exception was "
"raised by the codec."
msgstr ""

#: ../../c-api/unicode.rst:975
msgid ""
"Return a pointer to the UTF-8 encoding of the Unicode object, and store the "
"size of the encoded representation (in bytes) in *size*.  The *size* "
"argument can be ``NULL``; in this case no size will be stored.  The returned "
"buffer always has an extra null byte appended (not included in *size*), "
"regardless of whether there are any other null code points."
msgstr ""

#: ../../c-api/unicode.rst:981
msgid ""
"In the case of an error, ``NULL`` is returned with an exception set and no "
"*size* is stored."
msgstr ""

#: ../../c-api/unicode.rst:984
msgid ""
"This caches the UTF-8 representation of the string in the Unicode object, "
"and subsequent calls will return a pointer to the same buffer.  The caller "
"is not responsible for deallocating the buffer. The buffer is deallocated "
"and pointers to it become invalid when the Unicode object is garbage "
"collected."
msgstr ""

#: ../../c-api/unicode.rst:991 ../../c-api/unicode.rst:1004
msgid "The return type is now ``const char *`` rather of ``char *``."
msgstr ""

#: ../../c-api/unicode.rst:994
msgid "This function is a part of the :ref:`limited API <limited-c-api>`."
msgstr ""

#: ../../c-api/unicode.rst:1000
msgid "As :c:func:`PyUnicode_AsUTF8AndSize`, but does not store the size."
msgstr ""

#: ../../c-api/unicode.rst:1009
msgid "UTF-32 Codecs"
msgstr ""

#: ../../c-api/unicode.rst:1011
msgid "These are the UTF-32 codec APIs:"
msgstr ""

#: ../../c-api/unicode.rst:1017
msgid ""
"Decode *size* bytes from a UTF-32 encoded buffer string and return the "
"corresponding Unicode object.  *errors* (if non-``NULL``) defines the error "
"handling. It defaults to \"strict\"."
msgstr ""

#: ../../c-api/unicode.rst:1021 ../../c-api/unicode.rst:1071
msgid ""
"If *byteorder* is non-``NULL``, the decoder starts decoding using the given "
"byte order::"
msgstr ""

#: ../../c-api/unicode.rst:1028
msgid ""
"If ``*byteorder`` is zero, and the first four bytes of the input data are a "
"byte order mark (BOM), the decoder switches to this byte order and the BOM "
"is not copied into the resulting Unicode string.  If ``*byteorder`` is "
"``-1`` or ``1``, any byte order mark is copied to the output."
msgstr ""

#: ../../c-api/unicode.rst:1033
msgid ""
"After completion, *\\*byteorder* is set to the current byte order at the end "
"of input data."
msgstr ""

#: ../../c-api/unicode.rst:1036 ../../c-api/unicode.rst:1087
msgid "If *byteorder* is ``NULL``, the codec starts in native order mode."
msgstr ""

#: ../../c-api/unicode.rst:1038 ../../c-api/unicode.rst:1089
msgid "Return ``NULL`` if an exception was raised by the codec."
msgstr ""

#: ../../c-api/unicode.rst:1044
msgid ""
"If *consumed* is ``NULL``, behave like :c:func:`PyUnicode_DecodeUTF32`. If "
"*consumed* is not ``NULL``, :c:func:`PyUnicode_DecodeUTF32Stateful` will not "
"treat trailing incomplete UTF-32 byte sequences (such as a number of bytes "
"not divisible by four) as an error. Those bytes will not be decoded and the "
"number of bytes that have been decoded will be stored in *consumed*."
msgstr ""

#: ../../c-api/unicode.rst:1053
msgid ""
"Return a Python byte string using the UTF-32 encoding in native byte order. "
"The string always starts with a BOM mark.  Error handling is \"strict\". "
"Return ``NULL`` if an exception was raised by the codec."
msgstr ""

#: ../../c-api/unicode.rst:1059
msgid "UTF-16 Codecs"
msgstr ""

#: ../../c-api/unicode.rst:1061
msgid "These are the UTF-16 codec APIs:"
msgstr ""

#: ../../c-api/unicode.rst:1067
msgid ""
"Decode *size* bytes from a UTF-16 encoded buffer string and return the "
"corresponding Unicode object.  *errors* (if non-``NULL``) defines the error "
"handling. It defaults to \"strict\"."
msgstr ""

#: ../../c-api/unicode.rst:1078
msgid ""
"If ``*byteorder`` is zero, and the first two bytes of the input data are a "
"byte order mark (BOM), the decoder switches to this byte order and the BOM "
"is not copied into the resulting Unicode string.  If ``*byteorder`` is "
"``-1`` or ``1``, any byte order mark is copied to the output (where it will "
"result in either a ``\\ufeff`` or a ``\\ufffe`` character)."
msgstr ""

#: ../../c-api/unicode.rst:1084
msgid ""
"After completion, ``*byteorder`` is set to the current byte order at the end "
"of input data."
msgstr ""

#: ../../c-api/unicode.rst:1095
msgid ""
"If *consumed* is ``NULL``, behave like :c:func:`PyUnicode_DecodeUTF16`. If "
"*consumed* is not ``NULL``, :c:func:`PyUnicode_DecodeUTF16Stateful` will not "
"treat trailing incomplete UTF-16 byte sequences (such as an odd number of "
"bytes or a split surrogate pair) as an error. Those bytes will not be "
"decoded and the number of bytes that have been decoded will be stored in "
"*consumed*."
msgstr ""

#: ../../c-api/unicode.rst:1104
msgid ""
"Return a Python byte string using the UTF-16 encoding in native byte order. "
"The string always starts with a BOM mark.  Error handling is \"strict\". "
"Return ``NULL`` if an exception was raised by the codec."
msgstr ""

#: ../../c-api/unicode.rst:1110
msgid "UTF-7 Codecs"
msgstr ""

#: ../../c-api/unicode.rst:1112
msgid "These are the UTF-7 codec APIs:"
msgstr ""

#: ../../c-api/unicode.rst:1117
msgid ""
"Create a Unicode object by decoding *size* bytes of the UTF-7 encoded string "
"*s*.  Return ``NULL`` if an exception was raised by the codec."
msgstr ""

#: ../../c-api/unicode.rst:1124
msgid ""
"If *consumed* is ``NULL``, behave like :c:func:`PyUnicode_DecodeUTF7`.  If "
"*consumed* is not ``NULL``, trailing incomplete UTF-7 base-64 sections will "
"not be treated as an error.  Those bytes will not be decoded and the number "
"of bytes that have been decoded will be stored in *consumed*."
msgstr ""

#: ../../c-api/unicode.rst:1131
msgid "Unicode-Escape Codecs"
msgstr "Unicode-Escape 编解码器"

#: ../../c-api/unicode.rst:1133
msgid "These are the \"Unicode Escape\" codec APIs:"
msgstr ""

#: ../../c-api/unicode.rst:1139
msgid ""
"Create a Unicode object by decoding *size* bytes of the Unicode-Escape "
"encoded string *s*.  Return ``NULL`` if an exception was raised by the codec."
msgstr ""

#: ../../c-api/unicode.rst:1145
msgid ""
"Encode a Unicode object using Unicode-Escape and return the result as a "
"bytes object.  Error handling is \"strict\".  Return ``NULL`` if an "
"exception was raised by the codec."
msgstr ""

#: ../../c-api/unicode.rst:1151
msgid "Raw-Unicode-Escape Codecs"
msgstr ""

#: ../../c-api/unicode.rst:1153
msgid "These are the \"Raw Unicode Escape\" codec APIs:"
msgstr ""

#: ../../c-api/unicode.rst:1159
msgid ""
"Create a Unicode object by decoding *size* bytes of the Raw-Unicode-Escape "
"encoded string *s*.  Return ``NULL`` if an exception was raised by the codec."
msgstr ""

#: ../../c-api/unicode.rst:1165
msgid ""
"Encode a Unicode object using Raw-Unicode-Escape and return the result as a "
"bytes object.  Error handling is \"strict\".  Return ``NULL`` if an "
"exception was raised by the codec."
msgstr ""

#: ../../c-api/unicode.rst:1171
msgid "Latin-1 Codecs"
msgstr ""

#: ../../c-api/unicode.rst:1173
msgid ""
"These are the Latin-1 codec APIs: Latin-1 corresponds to the first 256 "
"Unicode ordinals and only these are accepted by the codecs during encoding."
msgstr ""

#: ../../c-api/unicode.rst:1179
msgid ""
"Create a Unicode object by decoding *size* bytes of the Latin-1 encoded "
"string *s*.  Return ``NULL`` if an exception was raised by the codec."
msgstr ""

#: ../../c-api/unicode.rst:1185
msgid ""
"Encode a Unicode object using Latin-1 and return the result as Python bytes "
"object.  Error handling is \"strict\".  Return ``NULL`` if an exception was "
"raised by the codec."
msgstr ""

#: ../../c-api/unicode.rst:1191
msgid "ASCII Codecs"
msgstr ""

#: ../../c-api/unicode.rst:1193
msgid ""
"These are the ASCII codec APIs.  Only 7-bit ASCII data is accepted. All "
"other codes generate errors."
msgstr ""

#: ../../c-api/unicode.rst:1199
msgid ""
"Create a Unicode object by decoding *size* bytes of the ASCII encoded string "
"*s*.  Return ``NULL`` if an exception was raised by the codec."
msgstr ""

#: ../../c-api/unicode.rst:1205
msgid ""
"Encode a Unicode object using ASCII and return the result as Python bytes "
"object.  Error handling is \"strict\".  Return ``NULL`` if an exception was "
"raised by the codec."
msgstr ""

#: ../../c-api/unicode.rst:1211
msgid "Character Map Codecs"
msgstr ""

#: ../../c-api/unicode.rst:1213
msgid ""
"This codec is special in that it can be used to implement many different "
"codecs (and this is in fact what was done to obtain most of the standard "
"codecs included in the :mod:`!encodings` package). The codec uses mappings "
"to encode and decode characters.  The mapping objects provided must support "
"the :meth:`~object.__getitem__` mapping interface; dictionaries and "
"sequences work well."
msgstr ""

#: ../../c-api/unicode.rst:1219
msgid "These are the mapping codec APIs:"
msgstr ""

#: ../../c-api/unicode.rst:1224
msgid ""
"Create a Unicode object by decoding *size* bytes of the encoded string *s* "
"using the given *mapping* object.  Return ``NULL`` if an exception was "
"raised by the codec."
msgstr ""

#: ../../c-api/unicode.rst:1228
msgid ""
"If *mapping* is ``NULL``, Latin-1 decoding will be applied.  Else *mapping* "
"must map bytes ordinals (integers in the range from 0 to 255) to Unicode "
"strings, integers (which are then interpreted as Unicode ordinals) or "
"``None``.  Unmapped data bytes -- ones which cause a :exc:`LookupError`, as "
"well as ones which get mapped to ``None``, ``0xFFFE`` or ``'\\ufffe'``, are "
"treated as undefined mappings and cause an error."
msgstr ""

#: ../../c-api/unicode.rst:1239
msgid ""
"Encode a Unicode object using the given *mapping* object and return the "
"result as a bytes object.  Error handling is \"strict\".  Return ``NULL`` if "
"an exception was raised by the codec."
msgstr ""

#: ../../c-api/unicode.rst:1243
msgid ""
"The *mapping* object must map Unicode ordinal integers to bytes objects, "
"integers in the range from 0 to 255 or ``None``.  Unmapped character "
"ordinals (ones which cause a :exc:`LookupError`) as well as mapped to "
"``None`` are treated as \"undefined mapping\" and cause an error."
msgstr ""

#: ../../c-api/unicode.rst:1249
msgid "The following codec API is special in that maps Unicode to Unicode."
msgstr ""

#: ../../c-api/unicode.rst:1253
msgid ""
"Translate a string by applying a character mapping table to it and return "
"the resulting Unicode object. Return ``NULL`` if an exception was raised by "
"the codec."
msgstr ""

#: ../../c-api/unicode.rst:1257
msgid ""
"The mapping table must map Unicode ordinal integers to Unicode ordinal "
"integers or ``None`` (causing deletion of the character)."
msgstr ""

#: ../../c-api/unicode.rst:1260
msgid ""
"Mapping tables need only provide the :meth:`~object.__getitem__` interface; "
"dictionaries and sequences work well.  Unmapped character ordinals (ones "
"which cause a :exc:`LookupError`) are left untouched and are copied as-is."
msgstr ""

#: ../../c-api/unicode.rst:1264
msgid ""
"*errors* has the usual meaning for codecs. It may be ``NULL`` which "
"indicates to use the default error handling."
msgstr ""

#: ../../c-api/unicode.rst:1269
msgid "MBCS codecs for Windows"
msgstr ""

#: ../../c-api/unicode.rst:1271
msgid ""
"These are the MBCS codec APIs. They are currently only available on Windows "
"and use the Win32 MBCS converters to implement the conversions.  Note that "
"MBCS (or DBCS) is a class of encodings, not just one.  The target encoding "
"is defined by the user settings on the machine running the codec."
msgstr ""

#: ../../c-api/unicode.rst:1278
msgid ""
"Create a Unicode object by decoding *size* bytes of the MBCS encoded string "
"*s*. Return ``NULL`` if an exception was raised by the codec."
msgstr ""

#: ../../c-api/unicode.rst:1285
msgid ""
"If *consumed* is ``NULL``, behave like :c:func:`PyUnicode_DecodeMBCS`. If "
"*consumed* is not ``NULL``, :c:func:`PyUnicode_DecodeMBCSStateful` will not "
"decode trailing lead byte and the number of bytes that have been decoded "
"will be stored in *consumed*."
msgstr ""

#: ../../c-api/unicode.rst:1293
msgid ""
"Encode a Unicode object using MBCS and return the result as Python bytes "
"object.  Error handling is \"strict\".  Return ``NULL`` if an exception was "
"raised by the codec."
msgstr ""

#: ../../c-api/unicode.rst:1300
msgid ""
"Encode the Unicode object using the specified code page and return a Python "
"bytes object.  Return ``NULL`` if an exception was raised by the codec. Use :"
"c:macro:`!CP_ACP` code page to get the MBCS encoder."
msgstr ""

#: ../../c-api/unicode.rst:1308
msgid "Methods & Slots"
msgstr ""

#: ../../c-api/unicode.rst:1314
msgid "Methods and Slot Functions"
msgstr "方法与槽位函数"

#: ../../c-api/unicode.rst:1316
msgid ""
"The following APIs are capable of handling Unicode objects and strings on "
"input (we refer to them as strings in the descriptions) and return Unicode "
"objects or integers as appropriate."
msgstr ""

#: ../../c-api/unicode.rst:1320
msgid "They all return ``NULL`` or ``-1`` if an exception occurs."
msgstr ""

#: ../../c-api/unicode.rst:1325
msgid "Concat two strings giving a new Unicode string."
msgstr ""

#: ../../c-api/unicode.rst:1330
msgid ""
"Split a string giving a list of Unicode strings.  If *sep* is ``NULL``, "
"splitting will be done at all whitespace substrings.  Otherwise, splits "
"occur at the given separator.  At most *maxsplit* splits will be done.  If "
"negative, no limit is set.  Separators are not included in the resulting "
"list."
msgstr ""

#: ../../c-api/unicode.rst:1338
msgid ""
"Split a Unicode string at line breaks, returning a list of Unicode strings. "
"CRLF is considered to be one line break.  If *keepend* is ``0``, the line "
"break characters are not included in the resulting strings."
msgstr ""

#: ../../c-api/unicode.rst:1345
msgid ""
"Join a sequence of strings using the given *separator* and return the "
"resulting Unicode string."
msgstr ""

#: ../../c-api/unicode.rst:1352
msgid ""
"Return ``1`` if *substr* matches ``str[start:end]`` at the given tail end "
"(*direction* == ``-1`` means to do a prefix match, *direction* == ``1`` a "
"suffix match), ``0`` otherwise. Return ``-1`` if an error occurred."
msgstr ""

#: ../../c-api/unicode.rst:1360
msgid ""
"Return the first position of *substr* in ``str[start:end]`` using the given "
"*direction* (*direction* == ``1`` means to do a forward search, *direction* "
"== ``-1`` a backward search).  The return value is the index of the first "
"match; a value of ``-1`` indicates that no match was found, and ``-2`` "
"indicates that an error occurred and an exception has been set."
msgstr ""

#: ../../c-api/unicode.rst:1370
msgid ""
"Return the first position of the character *ch* in ``str[start:end]`` using "
"the given *direction* (*direction* == ``1`` means to do a forward search, "
"*direction* == ``-1`` a backward search).  The return value is the index of "
"the first match; a value of ``-1`` indicates that no match was found, and "
"``-2`` indicates that an error occurred and an exception has been set."
msgstr ""

#: ../../c-api/unicode.rst:1378
msgid "*start* and *end* are now adjusted to behave like ``str[start:end]``."
msgstr ""

#: ../../c-api/unicode.rst:1385
msgid ""
"Return the number of non-overlapping occurrences of *substr* in ``str[start:"
"end]``.  Return ``-1`` if an error occurred."
msgstr ""

#: ../../c-api/unicode.rst:1392
msgid ""
"Replace at most *maxcount* occurrences of *substr* in *str* with *replstr* "
"and return the resulting Unicode object. *maxcount* == ``-1`` means replace "
"all occurrences."
msgstr ""

#: ../../c-api/unicode.rst:1399
msgid ""
"Compare two strings and return ``-1``, ``0``, ``1`` for less than, equal, "
"and greater than, respectively."
msgstr ""

#: ../../c-api/unicode.rst:1402
msgid ""
"This function returns ``-1`` upon failure, so one should call :c:func:"
"`PyErr_Occurred` to check for errors."
msgstr ""

#: ../../c-api/unicode.rst:1408
msgid ""
"Compare a Unicode object, *uni*, with *string* and return ``-1``, ``0``, "
"``1`` for less than, equal, and greater than, respectively. It is best to "
"pass only ASCII-encoded strings, but the function interprets the input "
"string as ISO-8859-1 if it contains non-ASCII characters."
msgstr ""

#: ../../c-api/unicode.rst:1413
msgid "This function does not raise exceptions."
msgstr ""

#: ../../c-api/unicode.rst:1418
msgid "Rich compare two Unicode strings and return one of the following:"
msgstr "对两个 Unicode 字符串执行富比较并返回以下值之一:"

#: ../../c-api/unicode.rst:1420
msgid "``NULL`` in case an exception was raised"
msgstr ""

#: ../../c-api/unicode.rst:1421
msgid ":c:data:`Py_True` or :c:data:`Py_False` for successful comparisons"
msgstr ""

#: ../../c-api/unicode.rst:1422
msgid ":c:data:`Py_NotImplemented` in case the type combination is unknown"
msgstr ""

#: ../../c-api/unicode.rst:1424
msgid ""
"Possible values for *op* are :c:macro:`Py_GT`, :c:macro:`Py_GE`, :c:macro:"
"`Py_EQ`, :c:macro:`Py_NE`, :c:macro:`Py_LT`, and :c:macro:`Py_LE`."
msgstr ""

#: ../../c-api/unicode.rst:1430
msgid ""
"Return a new string object from *format* and *args*; this is analogous to "
"``format % args``."
msgstr ""

#: ../../c-api/unicode.rst:1436
msgid ""
"Check whether *element* is contained in *container* and return true or false "
"accordingly."
msgstr ""

#: ../../c-api/unicode.rst:1439
msgid ""
"*element* has to coerce to a one element Unicode string. ``-1`` is returned "
"if there was an error."
msgstr ""

#: ../../c-api/unicode.rst:1445
msgid ""
"Intern the argument *\\*string* in place.  The argument must be the address "
"of a pointer variable pointing to a Python Unicode string object.  If there "
"is an existing interned string that is the same as *\\*string*, it sets "
"*\\*string* to it (releasing the reference to the old string object and "
"creating a new :term:`strong reference` to the interned string object), "
"otherwise it leaves *\\*string* alone and interns it (creating a new :term:"
"`strong reference`). (Clarification: even though there is a lot of talk "
"about references, think of this function as reference-neutral; you own the "
"object after the call if and only if you owned it before the call.)"
msgstr ""

#: ../../c-api/unicode.rst:1458
msgid ""
"A combination of :c:func:`PyUnicode_FromString` and :c:func:"
"`PyUnicode_InternInPlace`, returning either a new Unicode string object that "
"has been interned, or a new (\"owned\") reference to an earlier interned "
"string object with the same value."
msgstr ""
