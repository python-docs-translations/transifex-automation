# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2024, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# 汪心禾 <wangxinhe06@gmail.com>, 2020
# helloworldSB <warningfor163@foxmail.com>, 2021
# Dai Xu <daixu61@hotmail.com>, 2021
# Freesand Leo <yuqinju@163.com>, 2021
# Rafael Fontenelle <rffontenelle@gmail.com>, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-04-20 00:12+0000\n"
"PO-Revision-Date: 2020-05-30 11:50+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2024\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/"
"teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../c-api/object.rst:6
msgid "Object Protocol"
msgstr "对象协议"

#: ../../c-api/object.rst:11
msgid ""
"The ``NotImplemented`` singleton, used to signal that an operation is not "
"implemented for the given type combination."
msgstr "``NotImplemented`` 单例，用于标记某个操作没有针对给定类型组合的实现。"

#: ../../c-api/object.rst:17
msgid ""
"Properly handle returning :c:data:`Py_NotImplemented` from within a C "
"function (that is, increment the reference count of NotImplemented and "
"return it)."
msgstr ""
"C 函数内部应正确处理 :c:data:`Py_NotImplemented` 的返回过程（即增加 "
"NotImplemented 的引用计数并返回之）。"

#: ../../c-api/object.rst:24
msgid ""
"Print an object *o*, on file *fp*.  Returns ``-1`` on error.  The flags "
"argument is used to enable certain printing options.  The only option "
"currently supported is :const:`Py_PRINT_RAW`; if given, the :func:`str` of "
"the object is written instead of the :func:`repr`."
msgstr ""
"将对象 *o* 写入到文件 *fp*。 出错时返回 ``-1`` 。 旗标参数被用于启用特定的输"
"出选项。 目前唯一支持的选项是 :const:`Py_PRINT_RAW`；如果给出该选项，则将写入"
"对象的 :func:`str` 而不是 :func:`repr`。"

#: ../../c-api/object.rst:32 ../../c-api/object.rst:43
msgid ""
"Returns ``1`` if *o* has the attribute *attr_name*, and ``0`` otherwise.  "
"This is equivalent to the Python expression ``hasattr(o, attr_name)``.  This "
"function always succeeds."
msgstr ""
"如果 *o* 带有属性 *attr_name*，则返回 ``1``，否则返回 ``0``。这相当于 Python "
"表达式 ``hasattr(o, attr_name)``。 此函数总是成功。"

#: ../../c-api/object.rst:36
msgid ""
"Note that exceptions which occur while calling :meth:`__getattr__` and :meth:"
"`__getattribute__` methods will get suppressed. To get error reporting use :"
"c:func:`PyObject_GetAttr()` instead."
msgstr ""
"注意，在调用 :meth:`__getattr__` 和 :meth:`__getattribute__` 方法时发生的异常"
"将被抑制。若要获得错误报告，请换用 :c:func:`PyObject_GetAttr()` 。"

#: ../../c-api/object.rst:47
msgid ""
"Note that exceptions which occur while calling :meth:`__getattr__` and :meth:"
"`__getattribute__` methods and creating a temporary string object will get "
"suppressed. To get error reporting use :c:func:`PyObject_GetAttrString()` "
"instead."
msgstr ""
"注意，在调用 :meth:`__getattr__` 和 :meth:`__getattribute__` 方法并创建一个临"
"时字符串对象时，异常将被抑制。若要获得错误报告，请换用 :c:func:"
"`PyObject_GetAttrString()` 。"

#: ../../c-api/object.rst:55
msgid ""
"Retrieve an attribute named *attr_name* from object *o*. Returns the "
"attribute value on success, or ``NULL`` on failure.  This is the equivalent "
"of the Python expression ``o.attr_name``."
msgstr ""
"从对象 *o* 中读取名为 *attr_name* 的属性。成功返回属性值，失败则返回  "
"``NULL``。 这相当于 Python 表达式 ``o.attr_name``。"

#: ../../c-api/object.rst:62
msgid ""
"Retrieve an attribute named *attr_name* from object *o*. Returns the "
"attribute value on success, or ``NULL`` on failure. This is the equivalent "
"of the Python expression ``o.attr_name``."
msgstr ""
"从对象 *o* 中读取一个名为 *attr_name* 的属性。成功时返回属性值，失败则返回 "
"``NULL``。这相当于 Python 表达式 ``o.attr_name``。"

#: ../../c-api/object.rst:69
msgid ""
"Generic attribute getter function that is meant to be put into a type "
"object's ``tp_getattro`` slot.  It looks for a descriptor in the dictionary "
"of classes in the object's MRO as well as an attribute in the object's :attr:"
"`~object.__dict__` (if present).  As outlined in :ref:`descriptors`, data "
"descriptors take preference over instance attributes, while non-data "
"descriptors don't.  Otherwise, an :exc:`AttributeError` is raised."
msgstr ""
"通用的属性获取函数，用于放入类型对象的 ``tp_getattro`` 槽中。它在类的字典中"
"（位于对象的 MRO 中）查找某个描述符，并在对象的 :attr:`~object.__dict__` 中查"
"找某个属性。正如 :ref:`descriptors` 所述，数据描述符优先于实例属性，而非数据"
"描述符则不优先。失败则会触发 :exc:`AttributeError` 。"

#: ../../c-api/object.rst:79 ../../c-api/object.rst:90
msgid ""
"Set the value of the attribute named *attr_name*, for object *o*, to the "
"value *v*. Raise an exception and return ``-1`` on failure; return ``0`` on "
"success.  This is the equivalent of the Python statement ``o.attr_name = v``."
msgstr ""
"将对象 *o* 中名为 *attr_name* 的属性值设为 *v* 。失败时引发异常并返回 "
"``-1``；成功时返 回 ``0`` 。这相当于 Python 语句 ``o.attr_name = v``。"

#: ../../c-api/object.rst:84
msgid ""
"If *v* is ``NULL``, the attribute is deleted, however this feature is "
"deprecated in favour of using :c:func:`PyObject_DelAttr`."
msgstr ""
"如果 *v* 为 ``NULL``，属性将被删除，但是此功能已被弃用，应改用 :c:func:"
"`PySequence_DelItem` 。"

#: ../../c-api/object.rst:95
msgid ""
"If *v* is ``NULL``, the attribute is deleted, however this feature is "
"deprecated in favour of using :c:func:`PyObject_DelAttrString`."
msgstr ""
"如果 *v* 为 ``NULL``，该属性将被删除，但是此功能已被弃用，应改用 :c:func:"
"`PySequence_DelItem` 。"

#: ../../c-api/object.rst:101
msgid ""
"Generic attribute setter and deleter function that is meant to be put into a "
"type object's :c:member:`~PyTypeObject.tp_setattro` slot.  It looks for a "
"data descriptor in the dictionary of classes in the object's MRO, and if "
"found it takes preference over setting or deleting the attribute in the "
"instance dictionary. Otherwise, the attribute is set or deleted in the "
"object's :attr:`~object.__dict__` (if present). On success, ``0`` is "
"returned, otherwise an :exc:`AttributeError` is raised and ``-1`` is "
"returned."
msgstr ""
"通用的属性设置和删除函数，用于放入类型对象的 :c:member:`~PyTypeObject."
"tp_setattro` 槽。它在类的字典中（位于对象的MRO中）查找数据描述器，如果找到，"
"则将比在实例字典中设置或删除属性优先执行。否则，该属性将在对象的 :attr:"
"`~object.__dict__` 中设置或删除。如果成功将返回 ``0``，否则将引发 :exc:"
"`AttributeError` 并返回 ``-1``。"

#: ../../c-api/object.rst:113 ../../c-api/object.rst:119
msgid ""
"Delete attribute named *attr_name*, for object *o*. Returns ``-1`` on "
"failure. This is the equivalent of the Python statement ``del o.attr_name``."
msgstr ""
"删除对象 *o* 中名为 *attr_name* 的属性。失败时返回 ``-1``。这相当于 Python 语"
"句 ``del o.attr_name``。"

#: ../../c-api/object.rst:125
msgid ""
"A generic implementation for the getter of a ``__dict__`` descriptor. It "
"creates the dictionary if necessary."
msgstr "``__dict__`` 描述符的获取函数的一种通用实现。必要时会创建该字典。"

#: ../../c-api/object.rst:133
msgid ""
"A generic implementation for the setter of a ``__dict__`` descriptor. This "
"implementation does not allow the dictionary to be deleted."
msgstr "``__dict__`` 描述符设置函数的一种通用实现。这里不允许删除该字典。"

#: ../../c-api/object.rst:141
msgid ""
"Compare the values of *o1* and *o2* using the operation specified by *opid*, "
"which must be one of :const:`Py_LT`, :const:`Py_LE`, :const:`Py_EQ`, :const:"
"`Py_NE`, :const:`Py_GT`, or :const:`Py_GE`, corresponding to ``<``, ``<=``, "
"``==``, ``!=``, ``>``, or ``>=`` respectively. This is the equivalent of the "
"Python expression ``o1 op o2``, where ``op`` is the operator corresponding "
"to *opid*. Returns the value of the comparison on success, or ``NULL`` on "
"failure."
msgstr ""
"用 *opid* 指定的操作比较 *o1* 和 *o2* 的值，必须是 :const:`Py_LT` 、 :const:"
"`Py_LE` 、 :const:`Py_EQ` 、 :const:`Py_NE` 、 :const:`Py_GT` 或 :const:"
"`Py_GE` 之一，分别对应于``<``、``<=`` 、``==`` 、 ``!=`` 、``>`` 或 ``>=``。"
"这相当于 Python 表达式 ``o1 op o2``，其中 ``op`` 是对应于 *opid* 的操作符。成"
"功时返回比较值，失败时返回 ``NULL``。"

#: ../../c-api/object.rst:151
msgid ""
"Compare the values of *o1* and *o2* using the operation specified by *opid*, "
"which must be one of :const:`Py_LT`, :const:`Py_LE`, :const:`Py_EQ`, :const:"
"`Py_NE`, :const:`Py_GT`, or :const:`Py_GE`, corresponding to ``<``, ``<=``, "
"``==``, ``!=``, ``>``, or ``>=`` respectively. Returns ``-1`` on error, "
"``0`` if the result is false, ``1`` otherwise. This is the equivalent of the "
"Python expression ``o1 op o2``, where ``op`` is the operator corresponding "
"to *opid*."
msgstr ""
"用 *opid* 指定的操作比较 *o1* 和 *o2* 的值，必须是 :const:`Py_LT` 、 :const:"
"`Py_LE` 、 :const:`Py_EQ` 、 :const:`Py_NE` 、 :const:`Py_GT` 或 :const:"
"`Py_GE` 之一，分别对应于 ``<`` 、``<=``、 ``==`` 、``!=`` 、``>`` 或 ``>=``。"
"错误时返回 ``-1``，若结果为 false 则返回 ``0``，否则返回 ``1``。这相当于 "
"Python 表达式 ``o1 op o2``，其中 ``op`` 是对应于 *opid* 的操作符。"

#: ../../c-api/object.rst:160
msgid ""
"If *o1* and *o2* are the same object, :c:func:`PyObject_RichCompareBool` "
"will always return ``1`` for :const:`Py_EQ` and ``0`` for :const:`Py_NE`."
msgstr ""
"如果 *o1* 和 *o2* 是同一个对象，:c:func:`PyObject_RichCompareBool` 为 :const:"
"`Py_EQ` 则返回 ``1`` ，为 :const:`Py_NE` 则返回 ``0``。"

#: ../../c-api/object.rst:167
msgid ""
"Compute a string representation of object *o*.  Returns the string "
"representation on success, ``NULL`` on failure.  This is the equivalent of "
"the Python expression ``repr(o)``.  Called by the :func:`repr` built-in "
"function."
msgstr ""
"计算对象 *o* 的字符串形式。 成功时返回字符串，失败时返回 ``NULL``。 这相当于 "
"Python 表达式 ``repr(o)``。 由内置函数 :func:`repr`  调用。"

#: ../../c-api/object.rst:171 ../../c-api/object.rst:195
msgid ""
"This function now includes a debug assertion to help ensure that it does not "
"silently discard an active exception."
msgstr "该函数现在包含一个调试断言，用以确保不会静默地丢弃活动的异常。"

#: ../../c-api/object.rst:179
msgid ""
"As :c:func:`PyObject_Repr`, compute a string representation of object *o*, "
"but escape the non-ASCII characters in the string returned by :c:func:"
"`PyObject_Repr` with ``\\x``, ``\\u`` or ``\\U`` escapes.  This generates a "
"string similar to that returned by :c:func:`PyObject_Repr` in Python 2. "
"Called by the :func:`ascii` built-in function."
msgstr ""
"与 :c:func:`PyObject_Repr` 一样，计算对象 *o* 的字符串形式，但在 :c:func:"
"`PyObject_Repr` 返回的字符串中用 ``\\x``、``\\u`` 或 ``\\U`` 转义非 ASCII 字"
"符。这将生成一个类似于 Python 2 中由 :c:func:`PyObject_Repr` 返回的字符串。由"
"内置函数 :func:`ascii` 调用。"

#: ../../c-api/object.rst:190
msgid ""
"Compute a string representation of object *o*.  Returns the string "
"representation on success, ``NULL`` on failure.  This is the equivalent of "
"the Python expression ``str(o)``.  Called by the :func:`str` built-in "
"function and, therefore, by the :func:`print` function."
msgstr ""
"计算对象 *o* 的字符串形式。 成功时返回字符串，失败时返回 ``NULL``。 这相当于 "
"Python 表达式 ``str(o)``。由内置函数 :func:`str` 调用，因此也由 :func:"
"`print` 函数调用。"

#: ../../c-api/object.rst:203
msgid ""
"Compute a bytes representation of object *o*.  ``NULL`` is returned on "
"failure and a bytes object on success.  This is equivalent to the Python "
"expression ``bytes(o)``, when *o* is not an integer.  Unlike ``bytes(o)``, a "
"TypeError is raised when *o* is an integer instead of a zero-initialized "
"bytes object."
msgstr ""
"计算对象 *o* 的字节形式。失败时返回 ``NULL``，成功时返回一个字节串对象。这相"
"当于 *o* 不是整数时的 Python 表达式 ``bytes(o)`` 。与 ``bytes(o)`` 不同的是，"
"当 *o* 是整数而不是初始为 0 的字节串对象时，会触发 TypeError。"

#: ../../c-api/object.rst:212
msgid ""
"Return ``1`` if the class *derived* is identical to or derived from the "
"class *cls*, otherwise return ``0``.  In case of an error, return ``-1``."
msgstr ""
"如果 *derived* 类与 *cls* 类相同或为其派生类，则返回 ``1``，否则返回 ``0``。 "
"如果出错则返回 ``-1``。"

#: ../../c-api/object.rst:215 ../../c-api/object.rst:234
msgid ""
"If *cls* is a tuple, the check will be done against every entry in *cls*. "
"The result will be ``1`` when at least one of the checks returns ``1``, "
"otherwise it will be ``0``."
msgstr ""
"如果 *cls* 是元组，则会对 *cls* 进行逐项检测。如果至少有一次检测返回 ``1``，"
"结果将为 ``1``，否则将是 ``0``。"

#: ../../c-api/object.rst:219
msgid ""
"If *cls* has a :meth:`~class.__subclasscheck__` method, it will be called to "
"determine the subclass status as described in :pep:`3119`.  Otherwise, "
"*derived* is a subclass of *cls* if it is a direct or indirect subclass, i."
"e. contained in ``cls.__mro__``."
msgstr ""
"正如 :pep:`3119` 所述，如果 *cls* 带有 :meth:`~class.__subclasscheck__` 方"
"法，将会被调用以确定子类的状态。 否则，如果 *derived* 是个直接或间接子类，即"
"包含在 ``cls.__mro__`` 中，那么它就是 *cls* 的一个子类。"

#: ../../c-api/object.rst:224
msgid ""
"Normally only class objects, i.e. instances of :class:`type` or a derived "
"class, are considered classes.  However, objects can override this by having "
"a :attr:`__bases__` attribute (which must be a tuple of base classes)."
msgstr ""
"通常只有类对象才会被视为类，即 :class:`type` 或派生类的实例。然而，对象可以通"
"过拥有 :attr:`__bases__` 属性（必须是基类的元组）来覆盖这一点。"

#: ../../c-api/object.rst:231
msgid ""
"Return ``1`` if *inst* is an instance of the class *cls* or a subclass of "
"*cls*, or ``0`` if not.  On error, returns ``-1`` and sets an exception."
msgstr ""
"如果 *inst* 是 *cls* 类或其子类的实例，则返回 ``1``，如果不是则返回 ``0``。 "
"如果出错则返回 ``-1`` 并设置一个异常。"

#: ../../c-api/object.rst:238
msgid ""
"If *cls* has a :meth:`~class.__instancecheck__` method, it will be called to "
"determine the subclass status as described in :pep:`3119`.  Otherwise, "
"*inst* is an instance of *cls* if its class is a subclass of *cls*."
msgstr ""
"正如 :pep:`3119` 所述，如果 *cls* 带有 :meth:`~class.__subclasscheck__` 方"
"法，将会被调用以确定子类的状态。 否则，如果 *derived* 是 *cls* 的子类，那么它"
"就是 *cls* 的一个实例。"

#: ../../c-api/object.rst:242
msgid ""
"An instance *inst* can override what is considered its class by having a :"
"attr:`__class__` attribute."
msgstr "实例 *inst* 可以通过 :attr:`__class__` 属性来覆盖其所属类。"

#: ../../c-api/object.rst:245
msgid ""
"An object *cls* can override if it is considered a class, and what its base "
"classes are, by having a :attr:`__bases__` attribute (which must be a tuple "
"of base classes)."
msgstr ""
"对象 *cls* 是否被认作类，以及基类是什么，均可通过 :attr:`__bases__` 属性（必"
"须是基类的元组）进行覆盖。"

#: ../../c-api/object.rst:252
msgid ""
"Determine if the object *o* is callable.  Return ``1`` if the object is "
"callable and ``0`` otherwise.  This function always succeeds."
msgstr ""
"确定对象 *o* 是可调对象。如果对象是可调对象则返回 ``1`` ，其他情况返回 "
"``0`` 。这个函数不会调用失败。"

#: ../../c-api/object.rst:258
msgid ""
"Call a callable Python object *callable*, with arguments given by the tuple "
"*args*, and named arguments given by the dictionary *kwargs*."
msgstr ""
"调用一个可调用的 Python 对象 *callable*，附带由元组 *args* 所给出的参数，以及"
"由字典 *kwargs* 所给出的关键字参数。"

#: ../../c-api/object.rst:261
msgid ""
"*args* must not be ``NULL``, use an empty tuple if no arguments are needed. "
"If no named arguments are needed, *kwargs* can be ``NULL``."
msgstr ""

#: ../../c-api/object.rst:264 ../../c-api/object.rst:276
#: ../../c-api/object.rst:288 ../../c-api/object.rst:308
#: ../../c-api/object.rst:327 ../../c-api/object.rst:341
#: ../../c-api/object.rst:365
msgid ""
"Return the result of the call on success, or raise an exception and return "
"``NULL`` on failure."
msgstr ""

#: ../../c-api/object.rst:267
msgid ""
"This is the equivalent of the Python expression: ``callable(*args, "
"**kwargs)``."
msgstr "这等价于 Python 表达式 ``callable(*args, **kwargs)``。"

#: ../../c-api/object.rst:273
msgid ""
"Call a callable Python object *callable*, with arguments given by the tuple "
"*args*.  If no arguments are needed, then *args* can be ``NULL``."
msgstr ""

#: ../../c-api/object.rst:279 ../../c-api/object.rst:291
msgid "This is the equivalent of the Python expression: ``callable(*args)``."
msgstr "这等价于 Python 表达式 ``callable(*args)``。"

#: ../../c-api/object.rst:284
msgid ""
"Call a callable Python object *callable*, with a variable number of C "
"arguments. The C arguments are described using a :c:func:`Py_BuildValue` "
"style format string.  The format can be ``NULL``, indicating that no "
"arguments are provided."
msgstr ""

#: ../../c-api/object.rst:293
msgid ""
"Note that if you only pass :c:type:`PyObject *` args, :c:func:"
"`PyObject_CallFunctionObjArgs` is a faster alternative."
msgstr ""
"请注意如果你只传入 :c:type:`PyObject *` 参数，则 :c:func:"
"`PyObject_CallFunctionObjArgs` 是更快速的选择。"

#: ../../c-api/object.rst:296
msgid "The type of *format* was changed from ``char *``."
msgstr "这个 *format* 类型已从 ``char *`` 更改。"

#: ../../c-api/object.rst:302
msgid ""
"Call the method named *name* of object *obj* with a variable number of C "
"arguments.  The C arguments are described by a :c:func:`Py_BuildValue` "
"format string that should  produce a tuple."
msgstr ""

#: ../../c-api/object.rst:306
msgid "The format can be ``NULL``, indicating that no arguments are provided."
msgstr ""

#: ../../c-api/object.rst:311
msgid ""
"This is the equivalent of the Python expression: ``obj.name(arg1, "
"arg2, ...)``."
msgstr "这和Python表达式 ``obj.name(arg1, arg2, ...)`` 是一样的。"

#: ../../c-api/object.rst:314
msgid ""
"Note that if you only pass :c:type:`PyObject *` args, :c:func:"
"`PyObject_CallMethodObjArgs` is a faster alternative."
msgstr ""
"请注意如果你只传入 :c:type:`PyObject *` 参数，则  :c:func:"
"`PyObject_CallMethodObjArgs` 是更快速的选择。"

#: ../../c-api/object.rst:317
msgid "The types of *name* and *format* were changed from ``char *``."
msgstr " *name* 和 *format* 类型已从 ``char *`` 更改。"

#: ../../c-api/object.rst:323
msgid ""
"Call a callable Python object *callable*, with a variable number of :c:type:"
"`PyObject*` arguments.  The arguments are provided as a variable number of "
"parameters followed by ``NULL``."
msgstr ""

#: ../../c-api/object.rst:330
msgid ""
"This is the equivalent of the Python expression: ``callable(arg1, "
"arg2, ...)``."
msgstr "这和Python表达式 ``callable(arg1, arg2, ...)`` 是一样的。"

#: ../../c-api/object.rst:336
msgid ""
"Calls a method of the Python object *obj*, where the name of the method is "
"given as a Python string object in *name*.  It is called with a variable "
"number of :c:type:`PyObject*` arguments.  The arguments are provided as a "
"variable number of parameters followed by ``NULL``."
msgstr ""

#: ../../c-api/object.rst:347
msgid ""
"Call a callable Python object *callable*, using :c:data:`vectorcall "
"<PyTypeObject.tp_vectorcall_offset>` if possible."
msgstr ""

#: ../../c-api/object.rst:350
msgid "*args* is a C array with the positional arguments."
msgstr ""

#: ../../c-api/object.rst:352
msgid ""
"*nargsf* is the number of positional arguments plus optionally the flag :"
"const:`PY_VECTORCALL_ARGUMENTS_OFFSET` (see below). To get actual number of "
"arguments, use :c:func:`PyVectorcall_NARGS(nargsf) <PyVectorcall_NARGS>`."
msgstr ""

#: ../../c-api/object.rst:357
msgid ""
"*kwnames* can be either ``NULL`` (no keyword arguments) or a tuple of "
"keyword names. In the latter case, the values of the keyword arguments are "
"stored in *args* after the positional arguments. The number of keyword "
"arguments does not influence *nargsf*."
msgstr ""

#: ../../c-api/object.rst:362
msgid ""
"*kwnames* must contain only objects of type ``str`` (not a subclass), and "
"all keys must be unique."
msgstr ""

#: ../../c-api/object.rst:368
msgid ""
"This uses the vectorcall protocol if the callable supports it; otherwise, "
"the arguments are converted to use :c:member:`~PyTypeObject.tp_call`."
msgstr ""

#: ../../c-api/object.rst:374 ../../c-api/object.rst:416
msgid ""
"This function is provisional and expected to become public in Python 3.9, "
"with a different name and, possibly, changed semantics. If you use the "
"function, plan for updating your code for Python 3.9."
msgstr ""

#: ../../c-api/object.rst:382
msgid ""
"If set in a vectorcall *nargsf* argument, the callee is allowed to "
"temporarily change ``args[-1]``. In other words, *args* points to argument 1 "
"(not 0) in the allocated vector. The callee must restore the value of "
"``args[-1]`` before returning."
msgstr ""

#: ../../c-api/object.rst:387
msgid ""
"Whenever they can do so cheaply (without additional allocation), callers are "
"encouraged to use :const:`PY_VECTORCALL_ARGUMENTS_OFFSET`. Doing so will "
"allow callables such as bound methods to make their onward calls (which "
"include a prepended *self* argument) cheaply."
msgstr ""

#: ../../c-api/object.rst:396
msgid ""
"Given a vectorcall *nargsf* argument, return the actual number of arguments. "
"Currently equivalent to ``nargsf & ~PY_VECTORCALL_ARGUMENTS_OFFSET``."
msgstr ""

#: ../../c-api/object.rst:404
msgid ""
"Same as :c:func:`_PyObject_Vectorcall` except that the keyword arguments are "
"passed as a dictionary in *kwdict*. This may be ``NULL`` if there are no "
"keyword arguments."
msgstr ""

#: ../../c-api/object.rst:408
msgid ""
"For callables supporting :c:data:`vectorcall <PyTypeObject."
"tp_vectorcall_offset>`, the arguments are internally converted to the "
"vectorcall convention. Therefore, this function adds some overhead compared "
"to :c:func:`_PyObject_Vectorcall`. It should only be used if the caller "
"already has a dictionary ready to use."
msgstr ""

#: ../../c-api/object.rst:427
msgid ""
"Compute and return the hash value of an object *o*.  On failure, return "
"``-1``. This is the equivalent of the Python expression ``hash(o)``."
msgstr ""
"计算并返回对象的哈希值 *o*。 失败时返回 ``-1``。这相当于 Python 表达式 "
"``hash(o)``。"

#: ../../c-api/object.rst:430
msgid ""
"The return type is now Py_hash_t.  This is a signed integer the same size as "
"Py_ssize_t."
msgstr ""
"现在的返回类型是 Py_hash_t。 这是一个带符号整数，与 Py_ssize_t 大小相同。"

#: ../../c-api/object.rst:437
msgid ""
"Set a :exc:`TypeError` indicating that ``type(o)`` is not hashable and "
"return ``-1``. This function receives special treatment when stored in a "
"``tp_hash`` slot, allowing a type to explicitly indicate to the interpreter "
"that it is not hashable."
msgstr ""
"设置一个 :exc:`TypeError` 表示 ``type(o)`` 是不可哈希的，并返回 ``-1`` 。该函"
"数保存在 ``tp_hash`` 槽中时会受到特别对待，允许某个类型向解释器显式表明它不可"
"散列。"

#: ../../c-api/object.rst:445
msgid ""
"Returns ``1`` if the object *o* is considered to be true, and ``0`` "
"otherwise. This is equivalent to the Python expression ``not not o``.  On "
"failure, return ``-1``."
msgstr ""
"如果对象 *o* 被认为是 true，则返回 ``1``，否则返回 ``0``。这相当于 Python 表"
"达式 ``not not o``。 失败则返回 ``-1``。"

#: ../../c-api/object.rst:452
msgid ""
"Returns ``0`` if the object *o* is considered to be true, and ``1`` "
"otherwise. This is equivalent to the Python expression ``not o``.  On "
"failure, return ``-1``."
msgstr ""
"如果对象 *o* 被认为是 true，则返回 ``1``，否则返回 ``0``。这相当于 Python 表"
"达式 ``not not o``。 失败则返回 ``-1``。"

#: ../../c-api/object.rst:461
msgid ""
"When *o* is non-``NULL``, returns a type object corresponding to the object "
"type of object *o*. On failure, raises :exc:`SystemError` and returns "
"``NULL``.  This is equivalent to the Python expression ``type(o)``. This "
"function increments the reference count of the return value. There's really "
"no reason to use this function instead of the common expression ``o-"
">ob_type``, which returns a pointer of type :c:type:`PyTypeObject*`, except "
"when the incremented reference count is needed."
msgstr ""
"当 *o* 非 ``NULL`` 时，返回一个与对象 *o* 的类型相对应的类型对象。失败时，引"
"发  :exc:`SystemError` 并返回 ``NULL``。这等同于 Python 表达式 ``type(o)``。"
"该函数会增加返回值的引用计数。实际上没有理由不去用普通的表达式 ``o-"
">ob_type`` 而使用该函数，表达式会返回一个类型指针 :c:type:`PyTypeObject*` ，"
"除非需要增加引用计数。"

#: ../../c-api/object.rst:472
msgid ""
"Return true if the object *o* is of type *type* or a subtype of *type*.  "
"Both parameters must be non-``NULL``."
msgstr ""
"如果对象 *o* 为 *type* 类型或 *type* 的子类型则返回真值。 两个参数都必须非 "
"``NULL``。"

#: ../../c-api/object.rst:481
msgid ""
"Return the length of object *o*.  If the object *o* provides either the "
"sequence and mapping protocols, the sequence length is returned.  On error, "
"``-1`` is returned.  This is the equivalent to the Python expression "
"``len(o)``."
msgstr ""
"返回对象 *o* 的长度。 如果对象 *o* 支持序列和映射协议，则返回序列长度。 出错"
"时返回 ``-1``。这等同于 Python 表达式 ``len(o)``。"

#: ../../c-api/object.rst:488
msgid ""
"Return an estimated length for the object *o*. First try to return its "
"actual length, then an estimate using :meth:`~object.__length_hint__`, and "
"finally return the default value. On error return ``-1``. This is the "
"equivalent to the Python expression ``operator.length_hint(o, default)``."
msgstr ""

#: ../../c-api/object.rst:498
msgid ""
"Return element of *o* corresponding to the object *key* or ``NULL`` on "
"failure. This is the equivalent of the Python expression ``o[key]``."
msgstr ""
"返回对象 *key* 对应的 *o* 元素，或在失败时返回 ``NULL``。这等同于 Python 表达"
"式 ``o[key]``。"

#: ../../c-api/object.rst:504
msgid ""
"Map the object *key* to the value *v*.  Raise an exception and return ``-1`` "
"on failure; return ``0`` on success.  This is the equivalent of the Python "
"statement ``o[key] = v``.  This function *does not* steal a reference to *v*."
msgstr ""
"将对象 *key* 映射到值 *v*。 失败时引发异常并返回 ``-1``；成功时返回 ``0``。 "
"这相当于 Python 语句 ``o[key] = v``。该函数 *不会* 偷取 *v* 的引用计数。"

#: ../../c-api/object.rst:512
msgid ""
"Remove the mapping for the object *key* from the object *o*.  Return ``-1`` "
"on failure.  This is equivalent to the Python statement ``del o[key]``."
msgstr ""
"从对象 *o* 中移除对象 *key* 的映射。失败时返回 ``-1``。 这相当于 Python 语句 "
"``del o[key]``。"

#: ../../c-api/object.rst:518
msgid ""
"This is equivalent to the Python expression ``dir(o)``, returning a "
"(possibly empty) list of strings appropriate for the object argument, or "
"``NULL`` if there was an error.  If the argument is ``NULL``, this is like "
"the Python ``dir()``, returning the names of the current locals; in this "
"case, if no execution frame is active then ``NULL`` is returned but :c:func:"
"`PyErr_Occurred` will return false."
msgstr ""
"相当于 Python 表达式 ``dir(o)``，返回一个（可能为空）适合对象参数的字符串列"
"表，如果出错则返回 ``NULL``。 如果参数为 ``NULL``，类似 Python 的 ``dir()``，"
"则返回当前 locals 的名字；这时如果没有活动的执行框架，则返回 ``NULL``，但 :c:"
"func:`PyErr_Occurred` 将返回 false。"

#: ../../c-api/object.rst:527
msgid ""
"This is equivalent to the Python expression ``iter(o)``. It returns a new "
"iterator for the object argument, or the object  itself if the object is "
"already an iterator.  Raises :exc:`TypeError` and returns ``NULL`` if the "
"object cannot be iterated."
msgstr ""
"等同于 Python 表达式 ``iter(o)``。为对象参数返回一个新的迭代器，如果该对象已"
"经是一个迭代器，则返回对象本身。如果对象不能被迭代，会引发  :exc:"
"`TypeError` ，并返回  ``NULL``。"
