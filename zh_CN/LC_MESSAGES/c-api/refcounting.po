# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2023, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2023
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-08-11 14:43+0000\n"
"PO-Revision-Date: 2023-05-24 02:09+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2023\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/"
"teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../c-api/refcounting.rst:8
msgid "Reference Counting"
msgstr "引用计数"

#: ../../c-api/refcounting.rst:10
msgid ""
"The macros in this section are used for managing reference counts of Python "
"objects."
msgstr "本节介绍的宏被用于管理 Python 对象的引用计数。"

#: ../../c-api/refcounting.rst:16
msgid ""
"Indicate taking a new :term:`strong reference` to object *o*, indicating it "
"is in use and should not be destroyed."
msgstr ""

#: ../../c-api/refcounting.rst:19
msgid ""
"This function is usually used to convert a :term:`borrowed reference` to a :"
"term:`strong reference` in-place. The :c:func:`Py_NewRef` function can be "
"used to create a new :term:`strong reference`."
msgstr ""
"此函数通常被用来将 :term:`borrowed reference` 原地转换为 :term:`strong "
"reference`。 :c:func:`Py_NewRef` 函数可被用来创建新的 :term:`strong "
"reference`。"

#: ../../c-api/refcounting.rst:23
msgid "When done using the object, release it by calling :c:func:`Py_DECREF`."
msgstr ""

#: ../../c-api/refcounting.rst:25
msgid ""
"The object must not be ``NULL``; if you aren't sure that it isn't ``NULL``, "
"use :c:func:`Py_XINCREF`."
msgstr ""
"此对象必须不为 ``NULL``；如果你不能确定它不为 ``NULL``，请使用 :c:func:"
"`Py_XINCREF`。"

#: ../../c-api/refcounting.rst:28 ../../c-api/refcounting.rst:89
msgid "Do not expect this function to actually modify *o* in any way."
msgstr ""

#: ../../c-api/refcounting.rst:33
msgid ""
"Similar to :c:func:`Py_INCREF`, but the object *o* can be ``NULL``, in which "
"case this has no effect."
msgstr ""

#: ../../c-api/refcounting.rst:36
msgid "See also :c:func:`Py_XNewRef`."
msgstr "另请参阅 :c:func:`Py_XNewRef`。"

#: ../../c-api/refcounting.rst:41
msgid ""
"Create a new :term:`strong reference` to an object: call :c:func:`Py_INCREF` "
"on *o* and return the object *o*."
msgstr ""

#: ../../c-api/refcounting.rst:44
msgid ""
"When the :term:`strong reference` is no longer needed, :c:func:`Py_DECREF` "
"should be called on it to release the reference."
msgstr ""

#: ../../c-api/refcounting.rst:47
msgid ""
"The object *o* must not be ``NULL``; use :c:func:`Py_XNewRef` if *o* can be "
"``NULL``."
msgstr ""
"对象 *o* 必须不为 ``NULL``；如果 *o* 可以为 ``NULL`` 则应改用 :c:func:"
"`Py_XNewRef`。"

#: ../../c-api/refcounting.rst:50
msgid "For example::"
msgstr "例如："

#: ../../c-api/refcounting.rst:55
msgid "can be written as::"
msgstr "可以写成::"

#: ../../c-api/refcounting.rst:59
msgid "See also :c:func:`Py_INCREF`."
msgstr "另请参阅 :c:func:`Py_INCREF`。"

#: ../../c-api/refcounting.rst:66
msgid "Similar to :c:func:`Py_NewRef`, but the object *o* can be NULL."
msgstr "类似于 :c:func:`Py_NewRef`，但对象 *o* 可以为 NULL。"

#: ../../c-api/refcounting.rst:68
msgid "If the object *o* is ``NULL``, the function just returns ``NULL``."
msgstr "如果对象 *o* 为 ``NULL``，该函数也·将返回 ``NULL``。"

#: ../../c-api/refcounting.rst:75
msgid ""
"Release a :term:`strong reference` to object *o*, indicating the reference "
"is no longer used."
msgstr ""

#: ../../c-api/refcounting.rst:78
msgid ""
"Once the last :term:`strong reference` is released (i.e. the object's "
"reference count reaches 0), the object's type's deallocation function (which "
"must not be ``NULL``) is invoked."
msgstr ""

#: ../../c-api/refcounting.rst:83
msgid ""
"This function is usually used to delete a :term:`strong reference` before "
"exiting its scope."
msgstr "此函数通常被用于在退出作用域之前删除一个 :term:`strong reference`。"

#: ../../c-api/refcounting.rst:86
msgid ""
"The object must not be ``NULL``; if you aren't sure that it isn't ``NULL``, "
"use :c:func:`Py_XDECREF`."
msgstr ""
"此对象必须不为 ``NULL``；如果你不能确定它不为 ``NULL``，请使用 :c:func:"
"`Py_XDECREF`。"

#: ../../c-api/refcounting.rst:93
msgid ""
"The deallocation function can cause arbitrary Python code to be invoked (e."
"g. when a class instance with a :meth:`~object.__del__` method is "
"deallocated).  While exceptions in such code are not propagated, the "
"executed code has free access to all Python global variables.  This means "
"that any object that is reachable from a global variable should be in a "
"consistent state before :c:func:`Py_DECREF` is invoked.  For example, code "
"to delete an object from a list should copy a reference to the deleted "
"object in a temporary variable, update the list data structure, and then "
"call :c:func:`Py_DECREF` for the temporary variable."
msgstr ""
"释放函数会导致任意 Python 代码被发起调用（例如当一个带有 :meth:`~object."
"__del__` 方法的类实例被释放时就是如此）。 虽然这些代码中的异常不会被传播，但"
"被执行的代码能够自由访问所有 Python 全局变量。 这意味着在调用 :c:func:"
"`Py_DECREF` 之前任何可通过全局变量获取的对象都应该处于完好的状态。 例如，从一"
"个列表中删除对象的代码应该将被删除对象的引用拷贝到一个临时变量中，更新列表数"
"据结构，然后再为临时变量调用 :c:func:`Py_DECREF`。"

#: ../../c-api/refcounting.rst:105
msgid ""
"Similar to :c:func:`Py_DECREF`, but the object *o* can be ``NULL``, in which "
"case this has no effect. The same warning from :c:func:`Py_DECREF` applies "
"here as well."
msgstr ""

#: ../../c-api/refcounting.rst:112
msgid ""
"Release a :term:`strong reference` for object *o*. The object may be "
"``NULL``, in which case the macro has no effect; otherwise the effect is the "
"same as for :c:func:`Py_DECREF`, except that the argument is also set to "
"``NULL``.  The warning for :c:func:`Py_DECREF` does not apply with respect "
"to the object passed because the macro carefully uses a temporary variable "
"and sets the argument to ``NULL`` before releasing the reference."
msgstr ""

#: ../../c-api/refcounting.rst:120
msgid ""
"It is a good idea to use this macro whenever releasing a reference to an "
"object that might be traversed during garbage collection."
msgstr ""

#: ../../c-api/refcounting.rst:125
msgid ""
"Indicate taking a new :term:`strong reference` to object *o*. A function "
"version of :c:func:`Py_XINCREF`. It can be used for runtime dynamic "
"embedding of Python."
msgstr ""

#: ../../c-api/refcounting.rst:132
msgid ""
"Release a :term:`strong reference` to object *o*. A function version of :c:"
"func:`Py_XDECREF`. It can be used for runtime dynamic embedding of Python."
msgstr ""

#: ../../c-api/refcounting.rst:137
msgid ""
"The following functions or macros are only for use within the interpreter "
"core: :c:func:`_Py_Dealloc`, :c:func:`_Py_ForgetReference`, :c:func:"
"`_Py_NewReference`, as well as the global variable :c:data:`_Py_RefTotal`."
msgstr ""
"以下函数或宏仅可在解释器核心内部使用: :c:func:`_Py_Dealloc`, :c:func:"
"`_Py_ForgetReference`, :c:func:`_Py_NewReference` 以及全局变量 :c:data:"
"`_Py_RefTotal`。"
