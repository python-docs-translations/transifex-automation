# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2023, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# jaystone776 <1732865113@qq.com>, 2021
# Freesand Leo <yuqinju@163.com>, 2023
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-05-29 16:50+0000\n"
"PO-Revision-Date: 2021-06-28 00:50+0000\n"
"Last-Translator: Freesand Leo <yuqinju@163.com>, 2023\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../c-api/refcounting.rst:8
msgid "Reference Counting"
msgstr "引用计数"

#: ../../c-api/refcounting.rst:10
msgid ""
"The functions and macros in this section are used for managing reference "
"counts of Python objects."
msgstr "本节介绍的函数和宏被用于管理 Python 对象的引用计数。"

#: ../../c-api/refcounting.rst:16
msgid "Get the reference count of the Python object *o*."
msgstr "获取 Python 对象 *o* 的引用计数。"

#: ../../c-api/refcounting.rst:18
msgid ""
"Use the :c:func:`Py_SET_REFCNT()` function to set an object reference count."
msgstr "使用 :c:func:`Py_SET_REFCNT()` 函数来设置一个对象引用计数。"

#: ../../c-api/refcounting.rst:20
msgid "The parameter type is no longer :c:expr:`const PyObject*`."
msgstr "形参类型不再是 :c:expr:`const PyObject*`。"

#: ../../c-api/refcounting.rst:23
msgid ":c:func:`Py_REFCNT()` is changed to the inline static function."
msgstr ":c:func:`Py_REFCNT()` 被改为内联的静态函数。"

#: ../../c-api/refcounting.rst:29
msgid "Set the object *o* reference counter to *refcnt*."
msgstr "将对象 *o* 的引用计数器设为 *refcnt*。"

#: ../../c-api/refcounting.rst:36
msgid "Increment the reference count for object *o*."
msgstr "增加对象 *o* 的引用计数。"

#: ../../c-api/refcounting.rst:38
msgid ""
"This function is usually used to convert a :term:`borrowed reference` to a "
":term:`strong reference` in-place. The :c:func:`Py_NewRef` function can be "
"used to create a new :term:`strong reference`."
msgstr ""
"此函数通常被用来将 :term:`borrowed reference` 原地转换为 :term:`strong reference`。 "
":c:func:`Py_NewRef` 函数可被用来创建新的 :term:`strong reference`。"

#: ../../c-api/refcounting.rst:42
msgid ""
"The object must not be ``NULL``; if you aren't sure that it isn't ``NULL``, "
"use :c:func:`Py_XINCREF`."
msgstr "此对象必须不为 ``NULL``；如果你不能确定它不为 ``NULL``，请使用 :c:func:`Py_XINCREF`。"

#: ../../c-api/refcounting.rst:48
msgid ""
"Increment the reference count for object *o*.  The object may be ``NULL``, "
"in which case the macro has no effect."
msgstr "增加对象 *o* 的引用计数。 对象可以为 ``NULL``，在此情况下该宏不产生任何效果。"

#: ../../c-api/refcounting.rst:51
msgid "See also :c:func:`Py_XNewRef`."
msgstr "另请参阅 :c:func:`Py_XNewRef`。"

#: ../../c-api/refcounting.rst:56
msgid ""
"Create a new :term:`strong reference` to an object: increment the reference "
"count of the object *o* and return the object *o*."
msgstr "新建指向一个对象的 :term:`strong reference`: 增加对象 *o* 的引用计数并返回对象 *o*。"

#: ../../c-api/refcounting.rst:59
msgid ""
"When the :term:`strong reference` is no longer needed, :c:func:`Py_DECREF` "
"should be called on it to decrement the object reference count."
msgstr ""
"当不再需要这个 :term:`strong reference` 时，应当在对象上调用 :c:func:`Py_DECREF` "
"来有减少该对象的引用计数。"

#: ../../c-api/refcounting.rst:62
msgid ""
"The object *o* must not be ``NULL``; use :c:func:`Py_XNewRef` if *o* can be "
"``NULL``."
msgstr "对象 *o* 必须不为 ``NULL``；如果 *o* 可以为 ``NULL`` 则应改用 :c:func:`Py_XNewRef`。"

#: ../../c-api/refcounting.rst:65
msgid "For example::"
msgstr "例如："

#: ../../c-api/refcounting.rst:70
msgid "can be written as::"
msgstr "可以写成::"

#: ../../c-api/refcounting.rst:74
msgid "See also :c:func:`Py_INCREF`."
msgstr "另请参阅 :c:func:`Py_INCREF`。"

#: ../../c-api/refcounting.rst:81
msgid "Similar to :c:func:`Py_NewRef`, but the object *o* can be NULL."
msgstr "类似于 :c:func:`Py_NewRef`，但对象 *o* 可以为 NULL。"

#: ../../c-api/refcounting.rst:83
msgid "If the object *o* is ``NULL``, the function just returns ``NULL``."
msgstr "如果对象 *o* 为 ``NULL``，该函数也·将返回 ``NULL``。"

#: ../../c-api/refcounting.rst:90
msgid "Decrement the reference count for object *o*."
msgstr "减少对象 *o* 的引用计数。"

#: ../../c-api/refcounting.rst:92
msgid ""
"If the reference count reaches zero, the object's type's deallocation "
"function (which must not be ``NULL``) is invoked."
msgstr "如果引用计数达到零，则会发起调用对象类型的撤销分配函数 (该函数必须不为 ``NULL``)。"

#: ../../c-api/refcounting.rst:95
msgid ""
"This function is usually used to delete a :term:`strong reference` before "
"exiting its scope."
msgstr "此函数通常被用于在退出作用域之前删除一个 :term:`strong reference`。"

#: ../../c-api/refcounting.rst:98
msgid ""
"The object must not be ``NULL``; if you aren't sure that it isn't ``NULL``, "
"use :c:func:`Py_XDECREF`."
msgstr "此对象必须不为 ``NULL``；如果你不能确定它不为 ``NULL``，请使用 :c:func:`Py_XDECREF`。"

#: ../../c-api/refcounting.rst:103
msgid ""
"The deallocation function can cause arbitrary Python code to be invoked "
"(e.g. when a class instance with a :meth:`__del__` method is deallocated).  "
"While exceptions in such code are not propagated, the executed code has free"
" access to all Python global variables.  This means that any object that is "
"reachable from a global variable should be in a consistent state before "
":c:func:`Py_DECREF` is invoked.  For example, code to delete an object from "
"a list should copy a reference to the deleted object in a temporary "
"variable, update the list data structure, and then call :c:func:`Py_DECREF` "
"for the temporary variable."
msgstr ""
"释放函数可导致任意 Python 代码被发起调用（例如当一个带有 :meth:`__del__` 方法的类实例被释放时就是如此）。 "
"虽然此类代码中的异常不会被传播，但被执行的代码能够自由访问所有 Python 全局变量。 这意味着任何可通过全局变量获取的对象在  "
":c:func:`Py_DECREF` 被发起调用之前都应当处于完好状态。 "
"例如，从一个列表中删除对象的代码应当将被删除对象的引用拷贝到一个临时变量中，更新列表数据结构，然后再为临时变量调用 "
":c:func:`Py_DECREF`。"

#: ../../c-api/refcounting.rst:115
msgid ""
"Decrement the reference count for object *o*.  The object may be ``NULL``, "
"in which case the macro has no effect; otherwise the effect is the same as "
"for :c:func:`Py_DECREF`, and the same warning applies."
msgstr ""
"减少对象 *o* 的引用计数。 对象可以为 ``NULL``，在此情况下该宏不产生任何效果；在其他情况下其效果与 :c:func:`Py_DECREF`"
" 相同，并会应用同样的警告。"

#: ../../c-api/refcounting.rst:122
msgid ""
"Decrement the reference count for object *o*.  The object may be ``NULL``, "
"in which case the macro has no effect; otherwise the effect is the same as "
"for :c:func:`Py_DECREF`, except that the argument is also set to ``NULL``.  "
"The warning for :c:func:`Py_DECREF` does not apply with respect to the "
"object passed because the macro carefully uses a temporary variable and sets"
" the argument to ``NULL`` before decrementing its reference count."
msgstr ""
"减少对象 *o* 的引用计数。 对象可以为 ``NULL``，在此情况下该宏不产生任何效果；在其他情况下其效果与 :c:func:`Py_DECREF`"
" 相同，区别在于其参数也会被设为 ``NULL``。 针对 :c:func:`Py_DECREF` "
"的警告不适用于所传递的对象，因为该宏会细心地使用一个临时变量并在减少其引用计数之前将参数设为 ``NULL``。"

#: ../../c-api/refcounting.rst:129
msgid ""
"It is a good idea to use this macro whenever decrementing the reference "
"count of an object that might be traversed during garbage collection."
msgstr "每当要减少在垃圾回收期间可能会被遍历的对象的引用计数时，使用该宏是一个好主意。"

#: ../../c-api/refcounting.rst:132
msgid ""
"The macro argument is now only evaluated once. If the argument has side "
"effects, these are no longer duplicated."
msgstr "该宏参数现在只会被求值一次。 如果该参数具有附带影响，它们将不会再被复制。"

#: ../../c-api/refcounting.rst:139
msgid ""
"Increment the reference count for object *o*. A function version of "
":c:func:`Py_XINCREF`. It can be used for runtime dynamic embedding of "
"Python."
msgstr "增加对象 *o* 的引用计数。 :c:func:`Py_XINCREF` 的函数版本。 它可被用于 Python 的运行时动态嵌入。"

#: ../../c-api/refcounting.rst:145
msgid ""
"Decrement the reference count for object *o*. A function version of "
":c:func:`Py_XDECREF`. It can be used for runtime dynamic embedding of "
"Python."
msgstr "增加对象 *o* 的引用计数。 :c:func:`Py_XDECREF` 的函数版本。 它可被用于 Python 的运行时动态嵌入。"

#: ../../c-api/refcounting.rst:151
msgid ""
"Macro safely decrementing the `dst` reference count and setting `dst` to "
"`src`."
msgstr "该宏将安全地递减 `dst` 引用计数并将 `dst` 设为 `src`。"

#: ../../c-api/refcounting.rst:154
msgid "As in case of :c:func:`Py_CLEAR`, \"the obvious\" code can be deadly::"
msgstr "在 :c:func:`Py_CLEAR` 的情况中，这样“直观”的代码可能会是致命的::"

#: ../../c-api/refcounting.rst:159
msgid "The safe way is::"
msgstr "安全的方式是这样::"

#: ../../c-api/refcounting.rst:163
msgid ""
"That arranges to set `dst` to `src` _before_ decrementing reference count of"
" *dst* old value, so that any code triggered as a side-effect of `dst` "
"getting torn down no longer believes `dst` points to a valid object."
msgstr ""

#: ../../c-api/refcounting.rst:169 ../../c-api/refcounting.rst:181
msgid ""
"The macro arguments are now only evaluated once. If an argument has side "
"effects, these are no longer duplicated."
msgstr ""

#: ../../c-api/refcounting.rst:176
msgid ""
"Variant of :c:macro:`Py_SETREF` macro that uses :c:func:`Py_XDECREF` instead"
" of :c:func:`Py_DECREF`."
msgstr ""
