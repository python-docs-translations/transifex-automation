# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2023, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2023
# Freesand Leo <yuqinju@163.com>, 2023
# Menghua Xiao <arieshout@gmail.com>, 2023
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-07-07 14:45+0000\n"
"PO-Revision-Date: 2023-05-24 02:09+0000\n"
"Last-Translator: Menghua Xiao <arieshout@gmail.com>, 2023\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/"
"teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../c-api/init_config.rst:7
msgid "Python Initialization Configuration"
msgstr "Python 初始化配置"

#: ../../c-api/init_config.rst:11
msgid ""
"Python can be initialized with :c:func:`Py_InitializeFromConfig` and the :c:"
"type:`PyConfig` structure. It can be preinitialized with :c:func:"
"`Py_PreInitialize` and the :c:type:`PyPreConfig` structure."
msgstr ""
"Python 可以使用 :c:func:`Py_InitializeFromConfig` 和 :c:type:`PyConfig` 结构"
"体来初始化。 它可以使用 :c:func:`Py_PreInitialize` 和 :c:type:`PyPreConfig` "
"结构体来预初始化。"

#: ../../c-api/init_config.rst:15
msgid "There are two kinds of configuration:"
msgstr "有两种配置方式："

#: ../../c-api/init_config.rst:17
msgid ""
"The :ref:`Python Configuration <init-python-config>` can be used to build a "
"customized Python which behaves as the regular Python. For example, "
"environment variables and command line arguments are used to configure "
"Python."
msgstr ""
"该 :ref:`Python 配置 <init-python-config>` 可被用来构建具有与常规 Python 相同"
"行为的定制版 Python。 例如，使用特定的环境变量和命令行参数来配置 Python。"

#: ../../c-api/init_config.rst:22
msgid ""
"The :ref:`Isolated Configuration <init-isolated-conf>` can be used to embed "
"Python into an application. It isolates Python from the system. For example, "
"environment variables are ignored, the LC_CTYPE locale is left unchanged and "
"no signal handler is registered."
msgstr ""
":ref:`隔离配置 <init-isolated-conf>` 可以用来将 Python 嵌入到一个应用程序中。"
"它将 Python 与系统隔离，比如，环境变量将被忽略、LC_CTYPE 区域设置不会改变以及"
"不会注册信号处理程序。"

#: ../../c-api/init_config.rst:27
msgid ""
"The :c:func:`Py_RunMain` function can be used to write a customized Python "
"program."
msgstr ":c:func:`Py_RunMain` 函数可被用来编写定制的 Python 程序。"

#: ../../c-api/init_config.rst:30
msgid ""
"See also :ref:`Initialization, Finalization, and Threads <initialization>`."
msgstr ""
"参见 :ref:`Initialization, Finalization, and Threads <initialization>`."

#: ../../c-api/init_config.rst:33
msgid ":pep:`587` \"Python Initialization Configuration\"."
msgstr ":pep:`587` \"Python 初始化配置\"."

#: ../../c-api/init_config.rst:37
msgid "Example"
msgstr "示例"

#: ../../c-api/init_config.rst:39
msgid "Example of customized Python always running in isolated mode::"
msgstr "定制的 Python 的示例总是会以隔离模式运行::"

#: ../../c-api/init_config.rst:76
msgid "PyWideStringList"
msgstr "PyWideStringList"

#: ../../c-api/init_config.rst:80
msgid "List of ``wchar_t*`` strings."
msgstr "由 ``wchar_t*`` 字符串组成的列表。"

#: ../../c-api/init_config.rst:82
msgid ""
"If *length* is non-zero, *items* must be non-``NULL`` and all strings must "
"be non-``NULL``."
msgstr ""
"如果 *length* 为非零值，则 *items* 必须不为 ``NULL`` 并且所有字符串均必须不"
"为 ``NULL``。"

#: ../../c-api/init_config.rst:85
msgid "Methods:"
msgstr "方法"

#: ../../c-api/init_config.rst:89
msgid "Append *item* to *list*."
msgstr "将 *item* 添加到 *list*。"

#: ../../c-api/init_config.rst:91 ../../c-api/init_config.rst:102
msgid "Python must be preinitialized to call this function."
msgstr "Python 必须被预初始化以便调用此函数。"

#: ../../c-api/init_config.rst:95
msgid "Insert *item* into *list* at *index*."
msgstr "将 *item* 插入到 *list* 的 *index* 位置上。"

#: ../../c-api/init_config.rst:97
msgid ""
"If *index* is greater than or equal to *list* length, append *item* to "
"*list*."
msgstr "如果 *index* 大于等于 *list* 的长度，则将 *item* 添加到 *list*。"

#: ../../c-api/init_config.rst:100
msgid "*index* must be greater than or equal to ``0``."
msgstr "*index* 必须大于等于 ``0``。"

#: ../../c-api/init_config.rst:104 ../../c-api/init_config.rst:124
#: ../../c-api/init_config.rst:225 ../../c-api/init_config.rst:530
msgid "Structure fields:"
msgstr "结构体字段:"

#: ../../c-api/init_config.rst:108
msgid "List length."
msgstr "List 长度。"

#: ../../c-api/init_config.rst:112
msgid "List items."
msgstr "列表项目。"

#: ../../c-api/init_config.rst:115
msgid "PyStatus"
msgstr "PyStatus"

#: ../../c-api/init_config.rst:119
msgid ""
"Structure to store an initialization function status: success, error or exit."
msgstr "存储初始函数状态：成功、错误或退出的结构体。"

#: ../../c-api/init_config.rst:122
msgid "For an error, it can store the C function name which created the error."
msgstr "对于错误，它可以存储造成错误的 C 函数的名称。"

#: ../../c-api/init_config.rst:128
msgid "Exit code. Argument passed to ``exit()``."
msgstr "退出码。 传给 ``exit()`` 的参数。"

#: ../../c-api/init_config.rst:132
msgid "Error message."
msgstr "错误信息"

#: ../../c-api/init_config.rst:136
msgid "Name of the function which created an error, can be ``NULL``."
msgstr "造成错误的函数的名称，可以为 ``NULL``。"

#: ../../c-api/init_config.rst:138
msgid "Functions to create a status:"
msgstr "创建状态的函数:"

#: ../../c-api/init_config.rst:142
msgid "Success."
msgstr "完成。"

#: ../../c-api/init_config.rst:146
msgid "Initialization error with a message."
msgstr "带消息的初始化错误。"

#: ../../c-api/init_config.rst:148
msgid "*err_msg* must not be ``NULL``."
msgstr "*err_msg* 不可为 ``NULL``。"

#: ../../c-api/init_config.rst:152
msgid "Memory allocation failure (out of memory)."
msgstr "内存分配失败（内存不足）。"

#: ../../c-api/init_config.rst:156
msgid "Exit Python with the specified exit code."
msgstr "以指定的退出代码退出 Python。"

#: ../../c-api/init_config.rst:158
msgid "Functions to handle a status:"
msgstr "处理状态的函数:"

#: ../../c-api/init_config.rst:162
msgid ""
"Is the status an error or an exit? If true, the exception must be handled; "
"by calling :c:func:`Py_ExitStatusException` for example."
msgstr ""
"状态为错误还是退出？如为真值，则异常必须被处理；例如通过调用 :c:func:"
"`Py_ExitStatusException`。"

#: ../../c-api/init_config.rst:167
msgid "Is the result an error?"
msgstr "结果错误吗？"

#: ../../c-api/init_config.rst:171
msgid "Is the result an exit?"
msgstr "结果是否退出？"

#: ../../c-api/init_config.rst:175
msgid ""
"Call ``exit(exitcode)`` if *status* is an exit. Print the error message and "
"exit with a non-zero exit code if *status* is an error.  Must only be called "
"if ``PyStatus_Exception(status)`` is non-zero."
msgstr ""
"如果 *status* 是退出，则调用 ``exit(exitcode)``。如果 *status* 是错误，打印错"
"误信息并以非零的退出代码退出。  只有在``PyStatus_Exception(status)`` 非零时才"
"调用这个方法。"

#: ../../c-api/init_config.rst:180
msgid ""
"Internally, Python uses macros which set ``PyStatus.func``, whereas "
"functions to create a status set ``func`` to ``NULL``."
msgstr ""
"在内部，Python 使用宏来设置 ``PyStatus.func``，而使用函数来创建的状态会把 "
"``func`` 设置为 ``NULL`` 。"

#: ../../c-api/init_config.rst:183
msgid "Example::"
msgstr "示例::"

#: ../../c-api/init_config.rst:207
msgid "PyPreConfig"
msgstr "PyPreConfig"

#: ../../c-api/init_config.rst:211
msgid "Structure used to preinitialize Python."
msgstr "用于预初始化 Python 的结构体。"

#: ../../c-api/init_config.rst:213
msgid "Function to initialize a preconfiguration:"
msgstr "用于初始化预先配置的函数:"

#: ../../c-api/init_config.rst:217
msgid ""
"Initialize the preconfiguration with :ref:`Python Configuration <init-python-"
"config>`."
msgstr "通过 :ref:`Python 配置 <init-python-config>` 来初始化预先配置。"

#: ../../c-api/init_config.rst:222
msgid ""
"Initialize the preconfiguration with :ref:`Isolated Configuration <init-"
"isolated-conf>`."
msgstr "通过 :ref:`隔离配置 <init-isolated-conf>` 来初始化预先配置。"

#: ../../c-api/init_config.rst:229
msgid "Name of the Python memory allocators:"
msgstr "Python 内存分配器名称:"

#: ../../c-api/init_config.rst:231
msgid ""
"``PYMEM_ALLOCATOR_NOT_SET`` (``0``): don't change memory allocators (use "
"defaults)."
msgstr "``PYMEM_ALLOCATOR_NOT_SET`` (``0``): 不改变内存分配器 (使用默认)。"

#: ../../c-api/init_config.rst:233
msgid ""
"``PYMEM_ALLOCATOR_DEFAULT`` (``1``): :ref:`default memory allocators "
"<default-memory-allocators>`."
msgstr ""
"``PYMEM_ALLOCATOR_DEFAULT`` (``1``): :ref:`默认内存分配器 <default-memory-"
"allocators>`。"

#: ../../c-api/init_config.rst:235
msgid ""
"``PYMEM_ALLOCATOR_DEBUG`` (``2``): :ref:`default memory allocators <default-"
"memory-allocators>` with :ref:`debug hooks <pymem-debug-hooks>`."
msgstr ""
"``PYMEM_ALLOCATOR_DEBUG`` (``2``): :ref:`默认内存分配器 <default-memory-"
"allocators>` 附带 :ref:`调试钩子 <pymem-debug-hooks>`。"

#: ../../c-api/init_config.rst:238
msgid "``PYMEM_ALLOCATOR_MALLOC`` (``3``): use ``malloc()`` of the C library."
msgstr "``PYMEM_ALLOCATOR_MALLOC`` (``3``): 使用 C 库的 ``malloc()``。"

#: ../../c-api/init_config.rst:239
msgid ""
"``PYMEM_ALLOCATOR_MALLOC_DEBUG`` (``4``): force usage of ``malloc()`` with :"
"ref:`debug hooks <pymem-debug-hooks>`."
msgstr ""
"``PYMEM_ALLOCATOR_MALLOC_DEBUG`` (``4``): 强制使用 ``malloc()`` 附带 :ref:`调"
"试钩子 <pymem-debug-hooks>`。"

#: ../../c-api/init_config.rst:241
msgid ""
"``PYMEM_ALLOCATOR_PYMALLOC`` (``5``): :ref:`Python pymalloc memory allocator "
"<pymalloc>`."
msgstr ""
"``PYMEM_ALLOCATOR_PYMALLOC`` (``5``): :ref:`Python pymalloc 内存分配器 "
"<pymalloc>`."

#: ../../c-api/init_config.rst:243
msgid ""
"``PYMEM_ALLOCATOR_PYMALLOC_DEBUG`` (``6``): :ref:`Python pymalloc memory "
"allocator <pymalloc>` with :ref:`debug hooks <pymem-debug-hooks>`."
msgstr ""
"``PYMEM_ALLOCATOR_PYMALLOC_DEBUG`` (``6``): 带 :ref:`调试钩子 <pymem-debug-"
"hooks>` 的 :ref:`Python pymalloc 内存分配器 <pymalloc>` ."

#: ../../c-api/init_config.rst:247
msgid ""
"``PYMEM_ALLOCATOR_PYMALLOC`` and ``PYMEM_ALLOCATOR_PYMALLOC_DEBUG`` are not "
"supported if Python is :option:`configured using --without-pymalloc <--"
"without-pymalloc>`."
msgstr ""
"如果 Python 是 :option:`使用 --without-pymalloc 配置 <--without-pymalloc>` "
"的，则不支持``PYMEM_ALLOCATOR_PYMALLOC`` 和 "
"``PYMEM_ALLOCATOR_PYMALLOC_DEBUG`` 。"

#: ../../c-api/init_config.rst:251
msgid "See :ref:`Memory Management <memory>`."
msgstr "参见 :ref:`Memory Management <memory>`."

#: ../../c-api/init_config.rst:253
msgid "Default: ``PYMEM_ALLOCATOR_NOT_SET``."
msgstr "默认值: ``PYMEM_ALLOCATOR_NOT_SET``。"

#: ../../c-api/init_config.rst:257
msgid "Set the LC_CTYPE locale to the user preferred locale."
msgstr "将 LC_CTYPE 语言区域设为用户选择的语言区域。"

#: ../../c-api/init_config.rst:259
msgid ""
"If equals to ``0``, set :c:member:`~PyPreConfig.coerce_c_locale` and :c:"
"member:`~PyPreConfig.coerce_c_locale_warn` members to ``0``."
msgstr ""
"如果等于 ``0``，则将 :c:member:`~PyPreConfig.coerce_c_locale` 和 :c:member:"
"`~PyPreConfig.coerce_c_locale_warn` 的成员设为 ``0``。"

#: ../../c-api/init_config.rst:262 ../../c-api/init_config.rst:273
msgid "See the :term:`locale encoding`."
msgstr "参见 :term:`locale encoding`。"

#: ../../c-api/init_config.rst:264 ../../c-api/init_config.rst:319
#: ../../c-api/init_config.rst:670
msgid "Default: ``1`` in Python config, ``0`` in isolated config."
msgstr "默认值: 在 Python 配置中为 ``1``，在隔离配置中为 ``0``。"

#: ../../c-api/init_config.rst:268
msgid "If equals to ``2``, coerce the C locale."
msgstr "如果等于 ``2``，强制转换 C 语言区域。"

#: ../../c-api/init_config.rst:270
msgid ""
"If equals to ``1``, read the LC_CTYPE locale to decide if it should be "
"coerced."
msgstr "如果等于 ``1``，则读取 LC_CTYPE 语言区域来确定其是否应当被强制转换。"

#: ../../c-api/init_config.rst:275 ../../c-api/init_config.rst:281
msgid "Default: ``-1`` in Python config, ``0`` in isolated config."
msgstr "默认值: 在 Python 配置中为 ``-1``，在隔离配置中为 ``0``。"

#: ../../c-api/init_config.rst:279
msgid "If non-zero, emit a warning if the C locale is coerced."
msgstr "如为非零值，则会在 C 语言区域被强制转换时发出警告。"

#: ../../c-api/init_config.rst:285
msgid ""
":ref:`Python Development Mode <devmode>`: see :c:member:`PyConfig.dev_mode`."
msgstr ":ref:`Python 开发模式 <devmode>`: 参见 :c:member:`PyConfig.dev_mode`。"

#: ../../c-api/init_config.rst:288 ../../c-api/init_config.rst:679
#: ../../c-api/init_config.rst:721 ../../c-api/init_config.rst:1150
msgid "Default: ``-1`` in Python mode, ``0`` in isolated mode."
msgstr "默认值: 在 Python 模式下为 ``-1``，在隔离模式下为 ``0``。"

#: ../../c-api/init_config.rst:292
msgid "Isolated mode: see :c:member:`PyConfig.isolated`."
msgstr "隔离模式：参见 :c:member:`PyConfig.isolated`。"

#: ../../c-api/init_config.rst:294 ../../c-api/init_config.rst:846
msgid "Default: ``0`` in Python mode, ``1`` in isolated mode."
msgstr "默认值：Python 模式下为``0`` ，隔离模式下为``1`` 。"

#: ../../c-api/init_config.rst:298
msgid "If non-zero:"
msgstr "如果不为零："

#: ../../c-api/init_config.rst:300
msgid "Set :c:member:`PyPreConfig.utf8_mode` to ``0``,"
msgstr "设置 :c:member:`PyPreConfig.utf8_mode` 为 ``0``,"

#: ../../c-api/init_config.rst:301
msgid "Set :c:member:`PyConfig.filesystem_encoding` to ``\"mbcs\"``,"
msgstr "设置 :c:member:`PyConfig.filesystem_encoding` 为 ``\"mbcs\"``,"

#: ../../c-api/init_config.rst:302
msgid "Set :c:member:`PyConfig.filesystem_errors` to ``\"replace\"``."
msgstr "设置 :c:member:`PyConfig.filesystem_errors` 为 ``\"replace\"``."

#: ../../c-api/init_config.rst:304
msgid ""
"Initialized the from :envvar:`PYTHONLEGACYWINDOWSFSENCODING` environment "
"variable value."
msgstr "使用 :envvar:`PYTHONLEGACYWINDOWSFSENCODING` 环境变量的值进行初始化。"

#: ../../c-api/init_config.rst:307 ../../c-api/init_config.rst:859
msgid ""
"Only available on Windows. ``#ifdef MS_WINDOWS`` macro can be used for "
"Windows specific code."
msgstr ""
"仅在 Windows上可用。``#ifdef MS_WINDOWS`` 宏可以用于 Windows 特定的代码。"

#: ../../c-api/init_config.rst:310 ../../c-api/init_config.rst:618
#: ../../c-api/init_config.rst:625 ../../c-api/init_config.rst:692
#: ../../c-api/init_config.rst:801 ../../c-api/init_config.rst:815
#: ../../c-api/init_config.rst:829 ../../c-api/init_config.rst:862
#: ../../c-api/init_config.rst:876 ../../c-api/init_config.rst:936
#: ../../c-api/init_config.rst:985 ../../c-api/init_config.rst:1045
#: ../../c-api/init_config.rst:1085 ../../c-api/init_config.rst:1114
#: ../../c-api/init_config.rst:1187
msgid "Default: ``0``."
msgstr "默认值: ``0``."

#: ../../c-api/init_config.rst:314
msgid ""
"If non-zero, :c:func:`Py_PreInitializeFromArgs` and :c:func:"
"`Py_PreInitializeFromBytesArgs` parse their ``argv`` argument the same way "
"the regular Python parses command line arguments: see :ref:`Command Line "
"Arguments <using-on-cmdline>`."
msgstr ""
"如为非零值，:c:func:`Py_PreInitializeFromArgs` 和 :c:func:"
"`Py_PreInitializeFromBytesArgs` 将以与常规 Python 解析命令行参数的相同方式解"
"析其 ``argv`` 参数：参见 :ref:`命令行参数 <using-on-cmdline>`。"

#: ../../c-api/init_config.rst:323
msgid ""
"Use :ref:`environment variables <using-on-envvars>`? See :c:member:`PyConfig."
"use_environment`."
msgstr ""
"使用 :ref:`环境变量 <using-on-envvars>` ？参见 :c:member:`PyConfig."
"use_environment`。"

#: ../../c-api/init_config.rst:326 ../../c-api/init_config.rst:1161
msgid "Default: ``1`` in Python config and ``0`` in isolated config."
msgstr "默认值: 在 Python 配置中为 ``1`` 而在隔离配置中为 ``0``。"

#: ../../c-api/init_config.rst:330
msgid "If non-zero, enable the :ref:`Python UTF-8 Mode <utf8-mode>`."
msgstr "如为非零值，则启用 :ref:`Python UTF-8 模式 <utf8-mode>`。"

#: ../../c-api/init_config.rst:332
msgid ""
"Set to ``0`` or ``1`` by the :option:`-X utf8 <-X>` command line option and "
"the :envvar:`PYTHONUTF8` environment variable."
msgstr ""
"通过命令行选项 :option:`-X utf8 <-X>` 和 :envvar:`PYTHONUTF8` 环境变量设为 "
"``0`` 或 ``1``。"

#: ../../c-api/init_config.rst:335
msgid "Also set to ``1`` if the ``LC_CTYPE`` locale is ``C`` or ``POSIX``."
msgstr "如果 ``LC_CTYPE`` 语言区域为 ``C`` 或 ``POSIX`` 也会被设为 ``1``。"

#: ../../c-api/init_config.rst:337
msgid "Default: ``-1`` in Python config and ``0`` in isolated config."
msgstr "默认值: 在 Python 配置中为 ``-1`` 而在隔离配置中为 ``0``。"

#: ../../c-api/init_config.rst:343
msgid "Preinitialize Python with PyPreConfig"
msgstr "使用 PyPreConfig 预初始化 Python"

#: ../../c-api/init_config.rst:345
msgid "The preinitialization of Python:"
msgstr "Python 的预初始化:"

#: ../../c-api/init_config.rst:347
msgid "Set the Python memory allocators (:c:member:`PyPreConfig.allocator`)"
msgstr "设置 Python 内存分配器 (:c:member:`PyPreConfig.allocator`)"

#: ../../c-api/init_config.rst:348
msgid "Configure the LC_CTYPE locale (:term:`locale encoding`)"
msgstr "配置 LC_CTYPE 语言区域 (:term:`locale encoding`)"

#: ../../c-api/init_config.rst:349
msgid ""
"Set the :ref:`Python UTF-8 Mode <utf8-mode>` (:c:member:`PyPreConfig."
"utf8_mode`)"
msgstr ""
"设置 :ref:`Python UTF-8 模式<utf8-mode>` (:c:member:`PyPreConfig.utf8_mode`)"

#: ../../c-api/init_config.rst:352
msgid ""
"The current preconfiguration (``PyPreConfig`` type) is stored in "
"``_PyRuntime.preconfig``."
msgstr "当前的预配置（``PyPreConfig`` 类型）存储在 ``_PyRuntime.preconfig``。"

#: ../../c-api/init_config.rst:355
msgid "Functions to preinitialize Python:"
msgstr "用于预初始化 Python 的函数："

#: ../../c-api/init_config.rst:359 ../../c-api/init_config.rst:365
#: ../../c-api/init_config.rst:374
msgid "Preinitialize Python from *preconfig* preconfiguration."
msgstr "从 *preconfig* 预配置中预初始化 Python。"

#: ../../c-api/init_config.rst:361 ../../c-api/init_config.rst:370
#: ../../c-api/init_config.rst:379
msgid "*preconfig* must not be ``NULL``."
msgstr "*preconfig* 不能是 ``NULL`` 。"

#: ../../c-api/init_config.rst:367
msgid ""
"Parse *argv* command line arguments (bytes strings) if :c:member:"
"`~PyPreConfig.parse_argv` of *preconfig* is non-zero."
msgstr ""
"如果 *preconfig* 中的 :c:member:`~PyPreConfig.parse_argv` 不为零，则解析 "
"*argv* 命令行参数（字节字符串）。"

#: ../../c-api/init_config.rst:376
msgid ""
"Parse *argv* command line arguments (wide strings) if :c:member:"
"`~PyPreConfig.parse_argv` of *preconfig* is non-zero."
msgstr ""
"如果 *preconfig* 中的 :c:member:`~PyPreConfig.parse_argv` 不为零，则解析 "
"*argv* 命令行参数（宽字符串）。"

#: ../../c-api/init_config.rst:381 ../../c-api/init_config.rst:1249
msgid ""
"The caller is responsible to handle exceptions (error or exit) using :c:func:"
"`PyStatus_Exception` and :c:func:`Py_ExitStatusException`."
msgstr ""
"调用者负责使用 :c:func:`PyStatus_Exception` 和 :c:func:"
"`Py_ExitStatusException` 来处理异常（错误或退出）。"

#: ../../c-api/init_config.rst:384
msgid ""
"For :ref:`Python Configuration <init-python-config>` (:c:func:"
"`PyPreConfig_InitPythonConfig`), if Python is initialized with command line "
"arguments, the command line arguments must also be passed to preinitialize "
"Python, since they have an effect on the pre-configuration like encodings. "
"For example, the :option:`-X utf8 <-X>` command line option enables the :ref:"
"`Python UTF-8 Mode <utf8-mode>`."
msgstr ""
"对于 :ref:`Python 配置 <init-python-config>` (:c:func:"
"`PyPreConfig_InitPythonConfig`)，如果 Python 是用命令行参数初始化的，那么在预"
"初始化Python时也必须传递命令行参数，因为它们对编码等预配置有影响。例如，命令"
"行选项 :option:`-X utf8<-X>` 启用 :ref:`Python UTF-8 模式<utf8-mode>`。"

#: ../../c-api/init_config.rst:391
msgid ""
"``PyMem_SetAllocator()`` can be called after :c:func:`Py_PreInitialize` and "
"before :c:func:`Py_InitializeFromConfig` to install a custom memory "
"allocator. It can be called before :c:func:`Py_PreInitialize` if :c:member:"
"`PyPreConfig.allocator` is set to ``PYMEM_ALLOCATOR_NOT_SET``."
msgstr ""
"``PyMem_SetAllocator()`` 可以在 :c:func:`Py_PreInitialize` 之后、:c:func:"
"`Py_InitializeFromConfig` 之前调用，以安装一个自定义的内存分配器。如果 :c:"
"member:`PyPreConfig.allocator` 被设置为 ``PYMEM_ALLOCATOR_NOT_SET``，它可以"
"在 :c:func:`Py_PreInitialize` 之前被调用。"

#: ../../c-api/init_config.rst:396
msgid ""
"Python memory allocation functions like :c:func:`PyMem_RawMalloc` must not "
"be used before the Python preinitialization, whereas calling directly "
"``malloc()`` and ``free()`` is always safe. :c:func:`Py_DecodeLocale` must "
"not be called before the Python preinitialization."
msgstr ""
"像 :c:func:`PyMem_RawMalloc` 这样的 Python 内存分配函数不能在 Python 预初始化"
"之前使用，而直接调用 ``malloc()`` 和 ``free()`` 总是可以的。:c:func:"
"`Py_DecodeLocale` 不能在 Python 预初始化之前调用。"

#: ../../c-api/init_config.rst:401
msgid ""
"Example using the preinitialization to enable the :ref:`Python UTF-8 Mode "
"<utf8-mode>`::"
msgstr "使用预初始化来启用 :ref:`Python UTF-8 模式<utf8-mode>` 的例子："

#: ../../c-api/init_config.rst:423
msgid "PyConfig"
msgstr "PyConfig"

#: ../../c-api/init_config.rst:427
msgid "Structure containing most parameters to configure Python."
msgstr "包含大多数用于配置 Python 的参数的结构。"

#: ../../c-api/init_config.rst:429
msgid ""
"When done, the :c:func:`PyConfig_Clear` function must be used to release the "
"configuration memory."
msgstr "完成后，必须使用:c:func:`PyConfig_Clear` 函数来释放配置占用的内存。"

#: ../../c-api/init_config.rst:432
msgid "Structure methods:"
msgstr "结构的方法："

#: ../../c-api/init_config.rst:436
msgid ""
"Initialize configuration with the :ref:`Python Configuration <init-python-"
"config>`."
msgstr "用 :ref:`Python 配置<init-python-config>` 来初始化配置。"

#: ../../c-api/init_config.rst:441
msgid ""
"Initialize configuration with the :ref:`Isolated Configuration <init-"
"isolated-conf>`."
msgstr "用 :ref:`隔离配置 <init-isolated-conf>` 初始化配置。"

#: ../../c-api/init_config.rst:446
msgid "Copy the wide character string *str* into ``*config_str``."
msgstr "将宽的字符串 *str* 复制到 ``*config_str`` 。"

#: ../../c-api/init_config.rst:448 ../../c-api/init_config.rst:455
#: ../../c-api/init_config.rst:462 ../../c-api/init_config.rst:470
#: ../../c-api/init_config.rst:476 ../../c-api/init_config.rst:493
msgid ":ref:`Preinitialize Python <c-preinit>` if needed."
msgstr "如果需要的话， :ref:`预初始化 Python<c-preinit>`。"

#: ../../c-api/init_config.rst:452
msgid ""
"Decode *str* using :c:func:`Py_DecodeLocale` and set the result into "
"``*config_str``."
msgstr ""
"使用 :c:func:`Py_DecodeLocale` 对 *str* 进行解码，并将结果放入 "
"``*config_str`` 。"

#: ../../c-api/init_config.rst:459
msgid ""
"Set command line arguments (:c:member:`~PyConfig.argv` member of *config*) "
"from the *argv* list of wide character strings."
msgstr ""
"从宽字符串列表 *argv* 设置命令行参数 (*config* 的成员:c:member:`~PyConfig."
"argv`)。"

#: ../../c-api/init_config.rst:466
msgid ""
"Set command line arguments (:c:member:`~PyConfig.argv` member of *config*) "
"from the *argv* list of bytes strings. Decode bytes using :c:func:"
"`Py_DecodeLocale`."
msgstr ""
"从字节字符串列表 *argv* 设置命令行参数（*config*的成员:c:member:`~PyConfig."
"argv`）。使用 :c:func:`Py_DecodeLocale` 对字节进行解码。"

#: ../../c-api/init_config.rst:474
msgid "Set the list of wide strings *list* to *length* and *items*."
msgstr "将宽字符串列表 *list* 设置为长为 *length* 的 *items* 列表。"

#: ../../c-api/init_config.rst:480
msgid "Read all Python configuration."
msgstr "读取所有的 Python 配置。"

#: ../../c-api/init_config.rst:482
msgid "Fields which are already initialized are left unchanged."
msgstr "已经初始化的字段保持不变。"

#: ../../c-api/init_config.rst:484
msgid ""
"Fields for :ref:`path configuration <init-path-config>` are no longer "
"calculated or modified when calling this function, as of Python 3.11."
msgstr ""
"从 Python 3.11 起，调用这个函数时，:ref:`路径配置 <init-path-config>` 的字段"
"不再被计算或修改。"

#: ../../c-api/init_config.rst:487 ../../c-api/init_config.rst:965
msgid ""
"The :c:func:`PyConfig_Read` function only parses :c:member:`PyConfig.argv` "
"arguments once: :c:member:`PyConfig.parse_argv` is set to ``2`` after "
"arguments are parsed. Since Python arguments are strippped from :c:member:"
"`PyConfig.argv`, parsing arguments twice would parse the application options "
"as Python options."
msgstr ""
":c:func:`PyConfig_Read` 函数只解析一次 :c:member:`PyConfig.argv` 参数： :c:"
"member:`PyConfig.parse_argv` 在解析参数后被设置为 ``2`` 。由于 Python 参数"
"从 :c:member:`PyConfig.argv` 被移除，解析参数两次将会把应用程序选项解析为 "
"Python 选项。"

#: ../../c-api/init_config.rst:495
msgid ""
"The :c:member:`PyConfig.argv` arguments are now only parsed once, :c:member:"
"`PyConfig.parse_argv` is set to ``2`` after arguments are parsed, and "
"arguments are only parsed if :c:member:`PyConfig.parse_argv` equals ``1``."
msgstr ""
":c:member:`PyConfig.argv` 参数现在只解析一次，:c:member:`PyConfig."
"parse_argv` 在解析参数后被设置为 ``2`` ，并且只有当 :c:member:`PyConfig."
"parse_argv` 等于 ``1`` 时才解析参数。"

#: ../../c-api/init_config.rst:501
msgid ""
":c:func:`PyConfig_Read` no longer calculates all paths, and so fields listed "
"under :ref:`Python Path Configuration <init-path-config>` may no longer be "
"updated until :c:func:`Py_InitializeFromConfig` is called."
msgstr ""
":c:func:`PyConfig_Read` 不再计算所有路径，因此在调用 :c:func:"
"`Py_InitializeFromConfig` 之前，:ref:`Python 路径配置 <init-path-config>` 下"
"列出的字段可能不再更新。 "

#: ../../c-api/init_config.rst:509
msgid "Release configuration memory."
msgstr "释放配置占用的内存。"

#: ../../c-api/init_config.rst:511
msgid ""
"Most ``PyConfig`` methods :ref:`preinitialize Python <c-preinit>` if needed. "
"In that case, the Python preinitialization configuration (:c:type:"
"`PyPreConfig`) in based on the :c:type:`PyConfig`. If configuration fields "
"which are in common with :c:type:`PyPreConfig` are tuned, they must be set "
"before calling a :c:type:`PyConfig` method:"
msgstr ""
"大多数 ``PyConfig`` 方法会在需要时 :ref:`预初始化 Python<c-preinit>`。在这种"
"情况下，Python 预初始化配置 (:c:type:`PyPreConfig`) 是基于 :c:type:"
"`PyConfig` 的。如果与 :c:type:`PyPreConfig` 共用的配置字段被调整，它们必须在"
"调用 :c:type:`PyConfig` 方法之前被设置："

#: ../../c-api/init_config.rst:517
msgid ":c:member:`PyConfig.dev_mode`"
msgstr ":c:member:`PyConfig.dev_mode`"

#: ../../c-api/init_config.rst:518
msgid ":c:member:`PyConfig.isolated`"
msgstr ":c:member:`PyConfig.isolated`"

#: ../../c-api/init_config.rst:519
msgid ":c:member:`PyConfig.parse_argv`"
msgstr ":c:member:`PyConfig.parse_argv`"

#: ../../c-api/init_config.rst:520
msgid ":c:member:`PyConfig.use_environment`"
msgstr ":c:member:`PyConfig.use_environment`"

#: ../../c-api/init_config.rst:522
msgid ""
"Moreover, if :c:func:`PyConfig_SetArgv` or :c:func:`PyConfig_SetBytesArgv` "
"is used, this method must be called before other methods, since the "
"preinitialization configuration depends on command line arguments (if :c:"
"member:`parse_argv` is non-zero)."
msgstr ""
"此外，如果使用 :c:func:`PyConfig_SetArgv` 或 :c:func:"
"`PyConfig_SetBytesArgv` ，必须在其他方法之前调用该方法，因为预初始化配置取决"
"于命令行参数（如果 :c:member:`parse_argv` 非零）。"

#: ../../c-api/init_config.rst:527
msgid ""
"The caller of these methods is responsible to handle exceptions (error or "
"exit) using ``PyStatus_Exception()`` and ``Py_ExitStatusException()``."
msgstr ""
"这些方法的调用者负责使用 ``PyStatus_Exception()`` 和 "
"``Py_ExitStatusException()`` 处理异常（错误或退出）。"

#: ../../c-api/init_config.rst:534
msgid "Command line arguments: :data:`sys.argv`."
msgstr "命令行参数：:data:`sys.argv`。"

#: ../../c-api/init_config.rst:536
msgid ""
"Set :c:member:`~PyConfig.parse_argv` to ``1`` to parse :c:member:`~PyConfig."
"argv` the same way the regular Python parses Python command line arguments "
"and then to strip Python arguments from :c:member:`~PyConfig.argv`."
msgstr ""
"与普通 Python 解析 Python 命令行参数的方式相同，设置 :c:member:`~PyConfig."
"parse_argv` 为 ``1`` 来解析 :c:member:`~PyConfig.argv` ，然后从 :c:member:"
"`~PyConfig.argv` 中移除 Python 参数。"

#: ../../c-api/init_config.rst:541
msgid ""
"If :c:member:`~PyConfig.argv` is empty, an empty string is added to ensure "
"that :data:`sys.argv` always exists and is never empty."
msgstr ""
"如果 :c:member:`~PyConfig.argv` 为空，则添加一个空字符串，以确保 :data:`sys."
"argv` 始终存在，并且永远不为空。"

#: ../../c-api/init_config.rst:544 ../../c-api/init_config.rst:571
#: ../../c-api/init_config.rst:583 ../../c-api/init_config.rst:591
#: ../../c-api/init_config.rst:699 ../../c-api/init_config.rst:708
#: ../../c-api/init_config.rst:790 ../../c-api/init_config.rst:906
#: ../../c-api/init_config.rst:1004 ../../c-api/init_config.rst:1022
#: ../../c-api/init_config.rst:1036 ../../c-api/init_config.rst:1053
#: ../../c-api/init_config.rst:1066 ../../c-api/init_config.rst:1074
msgid "Default: ``NULL``."
msgstr "默认值: ``NULL``."

#: ../../c-api/init_config.rst:546
msgid "See also the :c:member:`~PyConfig.orig_argv` member."
msgstr "另请参见 :c:member:`~PyConfig.orig_argv` 成员。"

#: ../../c-api/init_config.rst:550
msgid ""
"If equals to zero, ``Py_RunMain()`` prepends a potentially unsafe path to :"
"data:`sys.path` at startup:"
msgstr ""
"如果等于零，``Py_RunMain()`` 在启动时追加一个潜在的不安全路径到 :data:`sys."
"path` 头部："

#: ../../c-api/init_config.rst:553
msgid ""
"If :c:member:`argv[0] <PyConfig.argv>` is equal to ``L\"-m\"`` (``python -m "
"module``), prepend the current working directory."
msgstr ""
"如果 :c:member:`argv[0]<PyConfig.argv>` 等于 ``L\"-m\"`` (``python -m "
"module``)，则在头部加入当前工作目录。"

#: ../../c-api/init_config.rst:555
msgid ""
"If running a script (``python script.py``), prepend the script's directory.  "
"If it's a symbolic link, resolve symbolic links."
msgstr ""
"如果运行脚本 (``python script.py``)，则在头部追加脚本所在目录。如果这个目录是"
"个符号链接，则解析符号链接。"

#: ../../c-api/init_config.rst:557
msgid ""
"Otherwise (``python -c code`` and ``python``), prepend an empty string, "
"which means the current working directory."
msgstr ""
"否则 (``python -c code`` 和``python``)，在头部追加空字符串作为当前工作目录。"

#: ../../c-api/init_config.rst:560
msgid ""
"Set to ``1`` by the :option:`-P` command line option and the :envvar:"
"`PYTHONSAFEPATH` environment variable."
msgstr ""
"通过命令行选项 :option:`-P` 和 :envvar:`PYTHONSAFEPATH` 环境变量设置为 "
"``1`` 。"

#: ../../c-api/init_config.rst:563
msgid "Default: ``0`` in Python config, ``1`` in isolated config."
msgstr "默认值：在 Python 配置中为 ``0`` ，在隔离配置中为 ``1`` 。"

#: ../../c-api/init_config.rst:569
msgid ":data:`sys.base_exec_prefix`."
msgstr ":data:`sys.base_exec_prefix`."

#: ../../c-api/init_config.rst:573 ../../c-api/init_config.rst:585
#: ../../c-api/init_config.rst:593 ../../c-api/init_config.rst:701
#: ../../c-api/init_config.rst:710 ../../c-api/init_config.rst:923
#: ../../c-api/init_config.rst:1006
msgid "Part of the :ref:`Python Path Configuration <init-path-config>` output."
msgstr "部分 :ref:`Python 路径配置<init-path-config>` 输出。"

#: ../../c-api/init_config.rst:577
msgid "Python base executable: :data:`sys._base_executable`."
msgstr "Python 基本可执行文件：:data:`sys._base_executable`."

#: ../../c-api/init_config.rst:579
msgid "Set by the :envvar:`__PYVENV_LAUNCHER__` environment variable."
msgstr "由 :envvar:`__PYVENV_LAUNCHER__` 环境变量设置。"

#: ../../c-api/init_config.rst:581
msgid "Set from :c:member:`PyConfig.executable` if ``NULL``."
msgstr "如果是 ``NULL`` ，则从 :c:member:`PyConfig.executable` 设置。"

#: ../../c-api/init_config.rst:589
msgid ":data:`sys.base_prefix`."
msgstr ":data:`sys.base_prefix`."

#: ../../c-api/init_config.rst:597
msgid ""
"If equals to ``0`` and :c:member:`~PyConfig.configure_c_stdio` is non-zero, "
"disable buffering on the C streams stdout and stderr."
msgstr ""
"如果等于 ``0`` 且 :c:member:`~PyConfig.configure_c_stdio` 非零，则禁用 C 流 "
"stdout 和 stderr 上的缓冲。"

#: ../../c-api/init_config.rst:600
msgid ""
"Set to ``0`` by the :option:`-u` command line option and the :envvar:"
"`PYTHONUNBUFFERED` environment variable."
msgstr ""
"通过命令行选项 :option:`-u` 和 :envvar:`PYTHONUNBUFFERED` 环境变量设置为 "
"``0`` 。"

#: ../../c-api/init_config.rst:603
msgid "stdin is always opened in buffered mode."
msgstr "stdin 总是以缓冲模式打开。"

#: ../../c-api/init_config.rst:605 ../../c-api/init_config.rst:638
#: ../../c-api/init_config.rst:1102 ../../c-api/init_config.rst:1219
msgid "Default: ``1``."
msgstr "默认值: ``1``."

#: ../../c-api/init_config.rst:609
msgid ""
"If equals to ``1``, issue a warning when comparing :class:`bytes` or :class:"
"`bytearray` with :class:`str`, or comparing :class:`bytes` with :class:`int`."
msgstr ""
"如果等于 ``1`` ，在比较 :class:`bytes` 或 :class:`bytearray` 与 :class:"
"`str` ，或比较 :class:`bytes` 与 :class:`int` 时发出警告。"

#: ../../c-api/init_config.rst:613
msgid ""
"If equal or greater to ``2``, raise a :exc:`BytesWarning` exception in these "
"cases."
msgstr "如果等于或大于 ``2`` ，则在这些情况下抛出 :exc:`BytesWarning` 异常。"

#: ../../c-api/init_config.rst:616
msgid "Incremented by the :option:`-b` command line option."
msgstr "由命令行选项 :option:`-b` 递增。"

#: ../../c-api/init_config.rst:622
msgid ""
"If non-zero, emit a :exc:`EncodingWarning` warning when :class:`io."
"TextIOWrapper` uses its default encoding. See :ref:`io-encoding-warning` for "
"details."
msgstr ""
"如果非零，当 :class:`io.TextIOWrapper` 使用默认编码时发出:exc:"
"`EncodingWarning` 警告。详情请参见 :ref:`io-encoding-warning` 。"

#: ../../c-api/init_config.rst:631
msgid ""
"If equals to ``0``, disables the inclusion of the end line and column "
"mappings in code objects. Also disables traceback printing carets to "
"specific error locations."
msgstr ""
"如果等于 ``0``，则禁止在代码对象中包含结束行和列映射。还禁止在特定错误位置打"
"印回溯标记。"

#: ../../c-api/init_config.rst:635
msgid ""
"Set to ``0`` by the :envvar:`PYTHONNODEBUGRANGES` environment variable and "
"by the :option:`-X no_debug_ranges <-X>` command line option."
msgstr ""
"通过 :envvar:`PYTHONNODEBUGRANGES` 环境变量和 :option:`-X no_debug_ranges<-"
"X>` 命令行选项设置为 ``0`` 。"

#: ../../c-api/init_config.rst:644
msgid ""
"Control the validation behavior of hash-based ``.pyc`` files: value of the :"
"option:`--check-hash-based-pycs` command line option."
msgstr ""
"控制基于哈希值的 ``.pyc`` 文件的验证行为：命令行选项 :option:`--check-hash-"
"based-pycs` 的值。"

#: ../../c-api/init_config.rst:647
msgid "Valid values:"
msgstr "有效值："

#: ../../c-api/init_config.rst:649
msgid ""
"``L\"always\"``: Hash the source file for invalidation regardless of value "
"of the 'check_source' flag."
msgstr ""
"``L\"always\"``：无论 “check_source” 标志的值如何，对源文件进行散列验证确认是"
"否失效。"

#: ../../c-api/init_config.rst:651
msgid "``L\"never\"``: Assume that hash-based pycs always are valid."
msgstr "``L\"never\"``：假设基于哈希值的 pycs 总是有效的。"

#: ../../c-api/init_config.rst:652
msgid ""
"``L\"default\"``: The 'check_source' flag in hash-based pycs determines "
"invalidation."
msgstr ""
"``L\"default\"``：在基于散列的 pycs 中，“check_source” 标志决定是否失效。"

#: ../../c-api/init_config.rst:655
msgid "Default: ``L\"default\"``."
msgstr "默认值： ``L\"default\"``。"

#: ../../c-api/init_config.rst:657
msgid "See also :pep:`552` \"Deterministic pycs\"."
msgstr "参见 :pep:`552` \"Deterministic pycs\"。"

#: ../../c-api/init_config.rst:661
msgid "If non-zero, configure C standard streams:"
msgstr "如果非零，则配置 C 标准流："

#: ../../c-api/init_config.rst:663
msgid ""
"On Windows, set the binary mode (``O_BINARY``) on stdin, stdout and stderr."
msgstr ""
"在 Windows 中，在 stdin、stdout 和 stderr 上设置二进制模式（``O_BINARY`` ）。"

#: ../../c-api/init_config.rst:665
msgid ""
"If :c:member:`~PyConfig.buffered_stdio` equals zero, disable buffering of "
"stdin, stdout and stderr streams."
msgstr ""
"如果 :c:member:`~PyConfig.buffered_stdio` 等于 0，则禁用 stdin、stdout 和 "
"stderr 流的缓冲。"

#: ../../c-api/init_config.rst:667
msgid ""
"If :c:member:`~PyConfig.interactive` is non-zero, enable stream buffering on "
"stdin and stdout (only stdout on Windows)."
msgstr ""
"如果 :c:member:`~PyConfig.interactive` 非零，则启用 stdin 和 stdout（在 "
"Windows 下仅启用 stdout）上的流缓冲。"

#: ../../c-api/init_config.rst:674
msgid "If non-zero, enable the :ref:`Python Development Mode <devmode>`."
msgstr "如果非零，则启用 :ref:`Python 开发模式<devmode>`。"

#: ../../c-api/init_config.rst:676
msgid ""
"Set to ``1`` by the :option:`-X dev <-X>` option and the :envvar:"
"`PYTHONDEVMODE` environment variable."
msgstr ""
"通过 :option:`-X dev<-X>` 选项和 :envvar:`PYTHONDEVMODE` 环境变量设置为 "
"``1`` 。"

#: ../../c-api/init_config.rst:683
msgid "Dump Python references?"
msgstr "导出 Python 引用？"

#: ../../c-api/init_config.rst:685
msgid "If non-zero, dump all objects which are still alive at exit."
msgstr "如果非零，则导出所有在退出时仍然存活的对象。"

#: ../../c-api/init_config.rst:687
msgid "Set to ``1`` by the :envvar:`PYTHONDUMPREFS` environment variable."
msgstr "通过 :envvar:`PYTHONDUMPREFS` 环境变量设置为 ``1`` 。"

#: ../../c-api/init_config.rst:689
msgid ""
"Need a special build of Python with the ``Py_TRACE_REFS`` macro defined: see "
"the :option:`configure --with-trace-refs option <--with-trace-refs>`."
msgstr ""
"需要定义了 ``Py_TRACE_REFS`` 宏的特殊 Python 编译版本：参见 :option:`配置 --"
"with-trace-refs 选项 <--with-trace-refs>`。"

#: ../../c-api/init_config.rst:696
msgid ""
"The site-specific directory prefix where the platform-dependent Python files "
"are installed: :data:`sys.exec_prefix`."
msgstr ""
"平台相关的 Python 文件安装到的特定设备的目录前缀：:data:`sys.exec_prefix`。"

#: ../../c-api/init_config.rst:705
msgid ""
"The absolute path of the executable binary for the Python interpreter: :data:"
"`sys.executable`."
msgstr "Python 解释器可执行二进制文件的绝对路径：:data:`sys.executable`。"

#: ../../c-api/init_config.rst:714
msgid "Enable faulthandler?"
msgstr "启用故障处理程序?"

#: ../../c-api/init_config.rst:716
msgid "If non-zero, call :func:`faulthandler.enable` at startup."
msgstr "如果非零，则在启动时调用 :func:`faulthandler.enable` 。"

#: ../../c-api/init_config.rst:718
msgid ""
"Set to ``1`` by :option:`-X faulthandler <-X>` and the :envvar:"
"`PYTHONFAULTHANDLER` environment variable."
msgstr ""
"通过 :option:`-X faulthandler<-X>`  和 :envvar:`PYTHONFAULTHANDLER` 环境变量"
"设置为 ``1`` 。"

#: ../../c-api/init_config.rst:725
msgid ""
":term:`Filesystem encoding <filesystem encoding and error handler>`: :func:"
"`sys.getfilesystemencoding`."
msgstr ""
":term:`文件系统编码格式 <filesystem encoding and error handler>`：:func:`sys."
"getfilesystemencoding`。"

#: ../../c-api/init_config.rst:728
msgid "On macOS, Android and VxWorks: use ``\"utf-8\"`` by default."
msgstr "在 macOS、Android 和 VxWorks 上：默认使用 ``\"utf-8\"`` 。"

#: ../../c-api/init_config.rst:730
msgid ""
"On Windows: use ``\"utf-8\"`` by default, or ``\"mbcs\"`` if :c:member:"
"`~PyPreConfig.legacy_windows_fs_encoding` of :c:type:`PyPreConfig` is non-"
"zero."
msgstr ""
"在 Windows 上：默认使用 ``\"utf-8\"`` ，如果 :c:type:`PyPreConfig` 的 :c:"
"member:`~PyPreConfig.legacy_windows_fs_encoding` 非零，则使用 ``\"mbcs\"`` 。"

#: ../../c-api/init_config.rst:734
msgid "Default encoding on other platforms:"
msgstr "其他平台上的默认编码："

#: ../../c-api/init_config.rst:736
msgid "``\"utf-8\"`` if :c:member:`PyPreConfig.utf8_mode` is non-zero."
msgstr "``\"utf-8\"``：如果 :c:member:`PyPreConfig.utf8_mode` 为非零。 "

#: ../../c-api/init_config.rst:737
msgid ""
"``\"ascii\"`` if Python detects that ``nl_langinfo(CODESET)`` announces the "
"ASCII encoding, whereas the ``mbstowcs()`` function decodes from a different "
"encoding (usually Latin1)."
msgstr ""
"``\"ascii\"``：如果 Python 检测到 ``nl_langinfo(CODESET)`` 声明的是 ASCII 编"
"码，但 ``mbstowcs()`` 函数是从别的编码进行解码的 （通常是 Latin1）。  "

#: ../../c-api/init_config.rst:740
msgid "``\"utf-8\"`` if ``nl_langinfo(CODESET)`` returns an empty string."
msgstr "``\"utf-8\"``：如果 ``nl_langinfo(CODESET)`` 返回空字符串。 "

#: ../../c-api/init_config.rst:741
msgid ""
"Otherwise, use the :term:`locale encoding`: ``nl_langinfo(CODESET)`` result."
msgstr "否则，使用 :term:`语言区域编码格式`：``nl_langinfo(CODESET)`` 的结果。"

#: ../../c-api/init_config.rst:744
msgid ""
"At Python startup, the encoding name is normalized to the Python codec name. "
"For example, ``\"ANSI_X3.4-1968\"`` is replaced with ``\"ascii\"``."
msgstr ""
"在 Python 启动时，编码名标准化为 Python 编解码器名。例如，"
"``\"ANSI_X3.4-1968\"`` 被替换为 ``\"ascii\"`` 。"

#: ../../c-api/init_config.rst:747
msgid "See also the :c:member:`~PyConfig.filesystem_errors` member."
msgstr "参见 :c:member:`~PyConfig.filesystem_errors` 的成员。"

#: ../../c-api/init_config.rst:751
msgid ""
":term:`Filesystem error handler <filesystem encoding and error handler>`: :"
"func:`sys.getfilesystemencodeerrors`."
msgstr ""
":term:`文件系统错误处理程序 <filesystem encoding and error handler>`：:func:"
"`sys.getfilesystemencodeerrors`."

#: ../../c-api/init_config.rst:754
msgid ""
"On Windows: use ``\"surrogatepass\"`` by default, or ``\"replace\"``  if :c:"
"member:`~PyPreConfig.legacy_windows_fs_encoding` of :c:type:`PyPreConfig` is "
"non-zero."
msgstr ""
"在 Windows 上：默认使用 ``\"surrogatepass\"`` ，如果 :c:type:`PyPreConfig` "
"的:c:member:`~PyPreConfig.legacy_windows_fs_encoding` 非零，则使用 "
"``\"replace\"`` 。"

#: ../../c-api/init_config.rst:758
msgid "On other platforms: use ``\"surrogateescape\"`` by default."
msgstr "在其他平台上：默认使用 ``\"surrogateescape\"`` 。"

#: ../../c-api/init_config.rst:760
msgid "Supported error handlers:"
msgstr "支持的错误处理程序："

#: ../../c-api/init_config.rst:762
msgid "``\"strict\"``"
msgstr "``\"strict\"``"

#: ../../c-api/init_config.rst:763
msgid "``\"surrogateescape\"``"
msgstr "``\"surrogateescape\"``"

#: ../../c-api/init_config.rst:764
msgid "``\"surrogatepass\"`` (only supported with the UTF-8 encoding)"
msgstr "``\"surrogatepass\"`` (仅支持 UTF-8 编码格式)"

#: ../../c-api/init_config.rst:766
msgid "See also the :c:member:`~PyConfig.filesystem_encoding` member."
msgstr "参见 :c:member:`~PyConfig.filesystem_encoding` 的成员。"

#: ../../c-api/init_config.rst:771
msgid "Randomized hash function seed."
msgstr "随机的散列函数种子。"

#: ../../c-api/init_config.rst:773
msgid ""
"If :c:member:`~PyConfig.use_hash_seed` is zero, a seed is chosen randomly at "
"Python startup, and :c:member:`~PyConfig.hash_seed` is ignored."
msgstr ""
"如果 :c:member:`~PyConfig.use_hash_seed` 为零，在 Python 启动时随机选择一个种"
"子，并且 :c:member:`~PyConfig.hash_seed` 被忽略。"

#: ../../c-api/init_config.rst:776
msgid "Set by the :envvar:`PYTHONHASHSEED` environment variable."
msgstr "由 :envvar:`PYTHONHASHSEED` 环境变量设置。"

#: ../../c-api/init_config.rst:778
msgid ""
"Default *use_hash_seed* value: ``-1`` in Python mode, ``0`` in isolated mode."
msgstr ""
"默认的 *use_hash_seed* 值：在 Python 模式下为 ``-1`` ，在隔离模式下为 "
"``0`` 。"

#: ../../c-api/init_config.rst:783
msgid "Python home directory."
msgstr "Python 主目录。"

#: ../../c-api/init_config.rst:785
msgid ""
"If :c:func:`Py_SetPythonHome` has been called, use its argument if it is not "
"``NULL``."
msgstr ""
"如果 :c:func:`Py_SetPythonHome` 已被调用并且它的参数不为 ``NULL``，则使用这个"
"参数。"

#: ../../c-api/init_config.rst:788
msgid "Set by the :envvar:`PYTHONHOME` environment variable."
msgstr "由 :envvar:`PYTHONHOME` 环境变量设置。"

#: ../../c-api/init_config.rst:792 ../../c-api/init_config.rst:888
#: ../../c-api/init_config.rst:908 ../../c-api/init_config.rst:994
#: ../../c-api/init_config.rst:1024
msgid "Part of the :ref:`Python Path Configuration <init-path-config>` input."
msgstr "部分 :ref:`Python 路径配置 <init-path-config>` 的输入。"

#: ../../c-api/init_config.rst:796
msgid "If non-zero, profile import time."
msgstr "如果非零，则为配置导入时间。"

#: ../../c-api/init_config.rst:798
msgid ""
"Set the ``1`` by the :option:`-X importtime <-X>` option and the :envvar:"
"`PYTHONPROFILEIMPORTTIME` environment variable."
msgstr ""
"通过 :option:`-X importtime<-X>` 选项和 :envvar:`PYTHONPROFILEIMPORTTIME` 环"
"境变量设置 ``1`` 。"

#: ../../c-api/init_config.rst:805
msgid "Enter interactive mode after executing a script or a command."
msgstr "执行脚本或命令后进入交互模式。"

#: ../../c-api/init_config.rst:807
msgid ""
"If greater than ``0``, enable inspect: when a script is passed as first "
"argument or the -c option is used, enter interactive mode after executing "
"the script or the command, even when :data:`sys.stdin` does not appear to be "
"a terminal."
msgstr ""
"如果大于 ``0`` ，启用检查：当脚本作为第一个参数传递或使用 -c 选项时，在执行脚"
"本或命令后进入交互模式，即使 :data:`sys.stdin` 看起来不是终端。"

#: ../../c-api/init_config.rst:812
msgid ""
"Incremented by the :option:`-i` command line option. Set to ``1`` if the :"
"envvar:`PYTHONINSPECT` environment variable is non-empty."
msgstr ""
"由 :option:`-i` 命令行选项递增。如果 :envvar:`PYTHONINSPECT` 环境变量非空，则"
"设置为 ``1`` 。"

#: ../../c-api/init_config.rst:819
msgid "Install Python signal handlers?"
msgstr "安装 Python 信号处理器？"

#: ../../c-api/init_config.rst:821 ../../c-api/init_config.rst:971
#: ../../c-api/init_config.rst:992 ../../c-api/init_config.rst:1171
msgid "Default: ``1`` in Python mode, ``0`` in isolated mode."
msgstr "默认值：Python 模式下为 ``1`` ，隔离模式下为 ``0`` 。"

#: ../../c-api/init_config.rst:825
msgid "If greater than ``0``, enable the interactive mode (REPL)."
msgstr "如果大于 ``0`` ，则启用交互模式 (REPL)。"

#: ../../c-api/init_config.rst:827
msgid "Incremented by the :option:`-i` command line option."
msgstr "由 :option:`-i` 命令行选项递增。"

#: ../../c-api/init_config.rst:833
msgid "If greater than ``0``, enable isolated mode:"
msgstr "如果大于 ``0`` ，则启用隔离模式："

#: ../../c-api/init_config.rst:835
msgid ""
"Set :c:member:`~PyConfig.safe_path` to ``1``: don't prepend a potentially "
"unsafe path to :data:`sys.path` at Python startup."
msgstr ""
"将 :c:member:`~PyConfig.safe_path` 设置为 ``1``：不要在 Python 启动时将潜在的"
"不安全路径向前追加到 :data:`sys.path` 。"

#: ../../c-api/init_config.rst:838 ../../c-api/init_config.rst:1469
msgid "Set :c:member:`~PyConfig.use_environment` to ``0``."
msgstr "将 :c:member:`~PyConfig.use_environment` 设置为 ``0`` 。"

#: ../../c-api/init_config.rst:839
msgid ""
"Set :c:member:`~PyConfig.user_site_directory` to ``0``: don't add the user "
"site directory to :data:`sys.path`."
msgstr ""
"将 :c:member:`~PyConfig.user_site_directory` 设置为 ``0`` ：不要将用户站点目"
"录添加到 :data:`sys.path` 。"

#: ../../c-api/init_config.rst:841
msgid ""
"Python REPL doesn't import :mod:`readline` nor enable default readline "
"configuration on interactive prompts."
msgstr ""
"Python REPL 不会导入 :mod:`readline` ，也不会在交互式提示中启用默认的 "
"readline 配置。"

#: ../../c-api/init_config.rst:844
msgid "Set to ``1`` by the :option:`-I` command line option."
msgstr "通过 :option:`-I` 命令行选项设置为 ``1`` 。"

#: ../../c-api/init_config.rst:848
msgid "See also :c:member:`PyPreConfig.isolated`."
msgstr "另请参见 :c:member:`PyPreConfig.isolated` 。"

#: ../../c-api/init_config.rst:852
msgid ""
"If non-zero, use :class:`io.FileIO` instead of :class:`io.WindowsConsoleIO` "
"for :data:`sys.stdin`, :data:`sys.stdout` and :data:`sys.stderr`."
msgstr ""
"如果非零，则在 :data:`sys.stdin`、:data:`sys.stdout` 和 :data:`sys.stderr` 中"
"使用 :class:`io.FileIO` 而不是 :class:`io.WindowsConsoleIO` 。"

#: ../../c-api/init_config.rst:856
msgid ""
"Set to ``1`` if the :envvar:`PYTHONLEGACYWINDOWSSTDIO` environment variable "
"is set to a non-empty string."
msgstr ""
"如果 :envvar:`PYTHONLEGACYWINDOWSSTDIO` 环境变量设置为非空字符串，则设置为 "
"``1`` 。"

#: ../../c-api/init_config.rst:864
msgid "See also the :pep:`528` (Change Windows console encoding to UTF-8)."
msgstr "另请参阅 :pep:`528` (将 Windows 控制台编码更改为 UTF-8)."

#: ../../c-api/init_config.rst:868
msgid ""
"If non-zero, dump statistics on :ref:`Python pymalloc memory allocator "
"<pymalloc>` at exit."
msgstr ""
"如果非零，则在退出时导出 :ref:`Python pymalloc 内存分配器<pymalloc>`  的统计"
"数据。"

#: ../../c-api/init_config.rst:871
msgid "Set to ``1`` by the :envvar:`PYTHONMALLOCSTATS` environment variable."
msgstr "通过 :envvar:`PYTHONMALLOCSTATS` 环境变量设置为 ``1`` 。"

#: ../../c-api/init_config.rst:873
msgid ""
"The option is ignored if Python is :option:`configured using the --without-"
"pymalloc option <--without-pymalloc>`."
msgstr ""
"如果 Python 是 :option:`使用 --without-pymalloc 选项<--without-pymalloc>` 配"
"置的，则忽略该选项。"

#: ../../c-api/init_config.rst:880
msgid "Platform library directory name: :data:`sys.platlibdir`."
msgstr "平台库目录名称：:data:`sys.platlibdir` 。"

#: ../../c-api/init_config.rst:882
msgid "Set by the :envvar:`PYTHONPLATLIBDIR` environment variable."
msgstr "由 :envvar:`PYTHONPLATLIBDIR` 环境变量设置。"

#: ../../c-api/init_config.rst:884
msgid ""
"Default: value of the ``PLATLIBDIR`` macro which is set by the :option:"
"`configure --with-platlibdir option <--with-platlibdir>` (default: "
"``\"lib\"``, or ``\"DLLs\"`` on Windows)."
msgstr ""
"默认值：``PLATLIBDIR`` 宏的值，由 :option:`配置 --with-platlibdir 选项<--"
"with-platlibdir>` 设置（默认值：``\"lib\"``，或者在 Windows 下是 "
"``\"DLLs\"``）。"

#: ../../c-api/init_config.rst:892
msgid ""
"This macro is now used on Windows to locate the standard library extension "
"modules, typically under ``DLLs``. However, for compatibility, note that "
"this value is ignored for any non-standard layouts, including in-tree builds "
"and virtual environments."
msgstr ""
"这个宏现在在 Windows 下用来定位标准库扩展模块，通常在 ``DLLs`` 。然而，为了兼"
"容性，请注意对于任何非标准布局——包括树内构建和虚拟环境——该值将被忽略。"

#: ../../c-api/init_config.rst:901
msgid ""
"Module search paths (:data:`sys.path`) as a string separated by ``DELIM`` (:"
"data:`os.path.pathsep`)."
msgstr ""
"模块搜索路径（:data:`sys.path`）以字符串形式表示，用 ``DELIM``（:data:`os."
"path.pathsep`）分隔。"

#: ../../c-api/init_config.rst:904
msgid "Set by the :envvar:`PYTHONPATH` environment variable."
msgstr "由 :envvar:`PYTHONPATH` 环境变量设置。"

#: ../../c-api/init_config.rst:913
msgid "Module search paths: :data:`sys.path`."
msgstr "模块搜索路径：:data:`sys.path`。"

#: ../../c-api/init_config.rst:915
msgid ""
"If :c:member:`~PyConfig.module_search_paths_set` is equal to ``0``, :c:func:"
"`Py_InitializeFromConfig` will replace :c:member:`~PyConfig."
"module_search_paths` and sets :c:member:`~PyConfig.module_search_paths_set` "
"to ``1``."
msgstr ""
"如果 :c:member:`~PyConfig.module_search_paths_set` 等于 ``0``，:c:func:"
"`Py_InitializeFromConfig` 将取代 :c:member:`~PyConfig.module_search_paths` 并"
"将 :c:member:`~PyConfig.module_search_paths_set` 设为``1`` 。"

#: ../../c-api/init_config.rst:920
msgid ""
"Default: empty list (``module_search_paths``) and ``0`` "
"(``module_search_paths_set``)."
msgstr ""
"默认值：空列表（``module_search_paths``）和 ``0``"
"（``module_search_paths_set``）。"

#: ../../c-api/init_config.rst:927
msgid "Compilation optimization level:"
msgstr "编译优化级别："

#: ../../c-api/init_config.rst:929
msgid "``0``: Peephole optimizer, set ``__debug__`` to ``True``."
msgstr "``0``：窥孔优化器，将``__debug__`` 设置为 ``True`` 。"

#: ../../c-api/init_config.rst:930
msgid "``1``: Level 0, remove assertions, set ``__debug__`` to ``False``."
msgstr "``1``：0 级，删除断言，将 ``__debug__`` 设置为 ``False`` 。"

#: ../../c-api/init_config.rst:931
msgid "``2``: Level 1, strip docstrings."
msgstr "``2``：1 级，移除 docstrings。"

#: ../../c-api/init_config.rst:933
msgid ""
"Incremented by the :option:`-O` command line option. Set to the :envvar:"
"`PYTHONOPTIMIZE` environment variable value."
msgstr ""
"由 :option:`-O` 命令行选项递增。设置为 :envvar:`PYTHONOPTIMIZE` 环境变量的"
"值。"

#: ../../c-api/init_config.rst:940
msgid ""
"The list of the original command line arguments passed to the Python "
"executable: :data:`sys.orig_argv`."
msgstr "传递给 Python 可执行文件的原始命令行参数列表：:data:`sys.orig_argv`。"

#: ../../c-api/init_config.rst:943
msgid ""
"If :c:member:`~PyConfig.orig_argv` list is empty and :c:member:`~PyConfig."
"argv` is not a list only containing an empty string, :c:func:`PyConfig_Read` "
"copies :c:member:`~PyConfig.argv` into :c:member:`~PyConfig.orig_argv` "
"before modifying :c:member:`~PyConfig.argv` (if :c:member:`~PyConfig."
"parse_argv` is non-zero)."
msgstr ""

#: ../../c-api/init_config.rst:950
msgid ""
"See also the :c:member:`~PyConfig.argv` member and the :c:func:"
"`Py_GetArgcArgv` function."
msgstr ""

#: ../../c-api/init_config.rst:953 ../../c-api/init_config.rst:1206
#: ../../c-api/init_config.rst:1225
msgid "Default: empty list."
msgstr ""

#: ../../c-api/init_config.rst:959
msgid "Parse command line arguments?"
msgstr ""

#: ../../c-api/init_config.rst:961
msgid ""
"If equals to ``1``, parse :c:member:`~PyConfig.argv` the same way the "
"regular Python parses :ref:`command line arguments <using-on-cmdline>`, and "
"strip Python arguments from :c:member:`~PyConfig.argv`."
msgstr ""

#: ../../c-api/init_config.rst:973
msgid ""
"The :c:member:`PyConfig.argv` arguments are now only parsed if :c:member:"
"`PyConfig.parse_argv` equals to ``1``."
msgstr ""

#: ../../c-api/init_config.rst:979
msgid ""
"Parser debug mode. If greater than ``0``, turn on parser debugging output "
"(for expert only, depending on compilation options)."
msgstr ""

#: ../../c-api/init_config.rst:982
msgid ""
"Incremented by the :option:`-d` command line option. Set to the :envvar:"
"`PYTHONDEBUG` environment variable value."
msgstr ""

#: ../../c-api/init_config.rst:989
msgid ""
"If non-zero, calculation of path configuration is allowed to log warnings "
"into ``stderr``. If equals to ``0``, suppress these warnings."
msgstr ""

#: ../../c-api/init_config.rst:996
msgid "Now also applies on Windows."
msgstr ""

#: ../../c-api/init_config.rst:1001
msgid ""
"The site-specific directory prefix where the platform independent Python "
"files are installed: :data:`sys.prefix`."
msgstr ""

#: ../../c-api/init_config.rst:1010
msgid ""
"Program name used to initialize :c:member:`~PyConfig.executable` and in "
"early error messages during Python initialization."
msgstr ""

#: ../../c-api/init_config.rst:1013
msgid "If :func:`Py_SetProgramName` has been called, use its argument."
msgstr ""

#: ../../c-api/init_config.rst:1014
msgid "On macOS, use :envvar:`PYTHONEXECUTABLE` environment variable if set."
msgstr ""

#: ../../c-api/init_config.rst:1015
msgid ""
"If the ``WITH_NEXT_FRAMEWORK`` macro is defined, use :envvar:"
"`__PYVENV_LAUNCHER__` environment variable if set."
msgstr ""

#: ../../c-api/init_config.rst:1017
msgid ""
"Use ``argv[0]`` of :c:member:`~PyConfig.argv` if available and non-empty."
msgstr ""

#: ../../c-api/init_config.rst:1019
msgid ""
"Otherwise, use ``L\"python\"`` on Windows, or ``L\"python3\"`` on other "
"platforms."
msgstr ""

#: ../../c-api/init_config.rst:1028
msgid ""
"Directory where cached ``.pyc`` files are written: :data:`sys."
"pycache_prefix`."
msgstr ""

#: ../../c-api/init_config.rst:1031
msgid ""
"Set by the :option:`-X pycache_prefix=PATH <-X>` command line option and "
"the :envvar:`PYTHONPYCACHEPREFIX` environment variable."
msgstr ""

#: ../../c-api/init_config.rst:1034
msgid "If ``NULL``, :data:`sys.pycache_prefix` is set to ``None``."
msgstr ""

#: ../../c-api/init_config.rst:1040
msgid ""
"Quiet mode. If greater than ``0``, don't display the copyright and version "
"at Python startup in interactive mode."
msgstr ""

#: ../../c-api/init_config.rst:1043
msgid "Incremented by the :option:`-q` command line option."
msgstr ""

#: ../../c-api/init_config.rst:1049
msgid "Value of the :option:`-c` command line option."
msgstr ""

#: ../../c-api/init_config.rst:1051 ../../c-api/init_config.rst:1072
msgid "Used by :c:func:`Py_RunMain`."
msgstr ""

#: ../../c-api/init_config.rst:1057
msgid ""
"Filename passed on the command line: trailing command line argument without :"
"option:`-c` or :option:`-m`. It is used by the :c:func:`Py_RunMain` function."
msgstr ""

#: ../../c-api/init_config.rst:1061
msgid ""
"For example, it is set to ``script.py`` by the ``python3 script.py arg`` "
"command line."
msgstr ""

#: ../../c-api/init_config.rst:1064
msgid "See also the :c:member:`PyConfig.skip_source_first_line` option."
msgstr ""

#: ../../c-api/init_config.rst:1070
msgid "Value of the :option:`-m` command line option."
msgstr ""

#: ../../c-api/init_config.rst:1078
msgid "Show total reference count at exit?"
msgstr ""

#: ../../c-api/init_config.rst:1080
msgid "Set to ``1`` by :option:`-X showrefcount <-X>` command line option."
msgstr ""

#: ../../c-api/init_config.rst:1082
msgid ""
"Need a :ref:`debug build of Python <debug-build>` (the ``Py_REF_DEBUG`` "
"macro must be defined)."
msgstr ""

#: ../../c-api/init_config.rst:1089
msgid "Import the :mod:`site` module at startup?"
msgstr ""

#: ../../c-api/init_config.rst:1091
msgid ""
"If equal to zero, disable the import of the module site and the site-"
"dependent manipulations of :data:`sys.path` that it entails."
msgstr ""

#: ../../c-api/init_config.rst:1094
msgid ""
"Also disable these manipulations if the :mod:`site` module is explicitly "
"imported later (call :func:`site.main` if you want them to be triggered)."
msgstr ""

#: ../../c-api/init_config.rst:1097
msgid "Set to ``0`` by the :option:`-S` command line option."
msgstr ""

#: ../../c-api/init_config.rst:1099
msgid ""
":data:`sys.flags.no_site` is set to the inverted value of :c:member:"
"`~PyConfig.site_import`."
msgstr ""

#: ../../c-api/init_config.rst:1106
msgid ""
"If non-zero, skip the first line of the :c:member:`PyConfig.run_filename` "
"source."
msgstr ""

#: ../../c-api/init_config.rst:1109
msgid ""
"It allows the usage of non-Unix forms of ``#!cmd``. This is intended for a "
"DOS specific hack only."
msgstr ""

#: ../../c-api/init_config.rst:1112
msgid "Set to ``1`` by the :option:`-x` command line option."
msgstr ""

#: ../../c-api/init_config.rst:1119
msgid ""
"Encoding and encoding errors of :data:`sys.stdin`, :data:`sys.stdout` and :"
"data:`sys.stderr` (but :data:`sys.stderr` always uses "
"``\"backslashreplace\"`` error handler)."
msgstr ""

#: ../../c-api/init_config.rst:1123
msgid ""
"If :c:func:`Py_SetStandardStreamEncoding` has been called, use its *error* "
"and *errors* arguments if they are not ``NULL``."
msgstr ""

#: ../../c-api/init_config.rst:1126
msgid ""
"Use the :envvar:`PYTHONIOENCODING` environment variable if it is non-empty."
msgstr ""

#: ../../c-api/init_config.rst:1129
msgid "Default encoding:"
msgstr ""

#: ../../c-api/init_config.rst:1131
msgid "``\"UTF-8\"`` if :c:member:`PyPreConfig.utf8_mode` is non-zero."
msgstr ""

#: ../../c-api/init_config.rst:1132
msgid "Otherwise, use the :term:`locale encoding`."
msgstr ""

#: ../../c-api/init_config.rst:1134
msgid "Default error handler:"
msgstr ""

#: ../../c-api/init_config.rst:1136
msgid "On Windows: use ``\"surrogateescape\"``."
msgstr ""

#: ../../c-api/init_config.rst:1137
msgid ""
"``\"surrogateescape\"`` if :c:member:`PyPreConfig.utf8_mode` is non-zero, or "
"if the LC_CTYPE locale is \"C\" or \"POSIX\"."
msgstr ""

#: ../../c-api/init_config.rst:1139
msgid "``\"strict\"`` otherwise."
msgstr ""

#: ../../c-api/init_config.rst:1143
msgid "Enable tracemalloc?"
msgstr ""

#: ../../c-api/init_config.rst:1145
msgid "If non-zero, call :func:`tracemalloc.start` at startup."
msgstr ""

#: ../../c-api/init_config.rst:1147
msgid ""
"Set by :option:`-X tracemalloc=N <-X>` command line option and by the :"
"envvar:`PYTHONTRACEMALLOC` environment variable."
msgstr ""

#: ../../c-api/init_config.rst:1154
msgid "Use :ref:`environment variables <using-on-envvars>`?"
msgstr ""

#: ../../c-api/init_config.rst:1156
msgid ""
"If equals to zero, ignore the :ref:`environment variables <using-on-"
"envvars>`."
msgstr ""

#: ../../c-api/init_config.rst:1159
msgid "Set to ``0`` by the :option:`-E` environment variable."
msgstr ""

#: ../../c-api/init_config.rst:1165
msgid "If non-zero, add the user site directory to :data:`sys.path`."
msgstr ""

#: ../../c-api/init_config.rst:1167
msgid "Set to ``0`` by the :option:`-s` and :option:`-I` command line options."
msgstr ""

#: ../../c-api/init_config.rst:1169
msgid "Set to ``0`` by the :envvar:`PYTHONNOUSERSITE` environment variable."
msgstr ""

#: ../../c-api/init_config.rst:1175
msgid ""
"Verbose mode. If greater than ``0``, print a message each time a module is "
"imported, showing the place (filename or built-in module) from which it is "
"loaded."
msgstr ""

#: ../../c-api/init_config.rst:1179
msgid ""
"If greater or equal to ``2``, print a message for each file that is checked "
"for when searching for a module. Also provides information on module cleanup "
"at exit."
msgstr ""

#: ../../c-api/init_config.rst:1183
msgid "Incremented by the :option:`-v` command line option."
msgstr ""

#: ../../c-api/init_config.rst:1185
msgid "Set to the :envvar:`PYTHONVERBOSE` environment variable value."
msgstr ""

#: ../../c-api/init_config.rst:1191
msgid ""
"Options of the :mod:`warnings` module to build warnings filters, lowest to "
"highest priority: :data:`sys.warnoptions`."
msgstr ""

#: ../../c-api/init_config.rst:1194
msgid ""
"The :mod:`warnings` module adds :data:`sys.warnoptions` in the reverse "
"order: the last :c:member:`PyConfig.warnoptions` item becomes the first item "
"of :data:`warnings.filters` which is checked first (highest priority)."
msgstr ""

#: ../../c-api/init_config.rst:1199
msgid ""
"The :option:`-W` command line options adds its value to :c:member:`~PyConfig."
"warnoptions`, it can be used multiple times."
msgstr ""

#: ../../c-api/init_config.rst:1202
msgid ""
"The :envvar:`PYTHONWARNINGS` environment variable can also be used to add "
"warning options. Multiple options can be specified, separated by commas (``,"
"``)."
msgstr ""

#: ../../c-api/init_config.rst:1210
msgid ""
"If equal to ``0``, Python won't try to write ``.pyc`` files on the import of "
"source modules."
msgstr ""

#: ../../c-api/init_config.rst:1213
msgid ""
"Set to ``0`` by the :option:`-B` command line option and the :envvar:"
"`PYTHONDONTWRITEBYTECODE` environment variable."
msgstr ""

#: ../../c-api/init_config.rst:1216
msgid ""
":data:`sys.dont_write_bytecode` is initialized to the inverted value of :c:"
"member:`~PyConfig.write_bytecode`."
msgstr ""

#: ../../c-api/init_config.rst:1223
msgid "Values of the :option:`-X` command line options: :data:`sys._xoptions`."
msgstr ""

#: ../../c-api/init_config.rst:1227
msgid ""
"If :c:member:`~PyConfig.parse_argv` is non-zero, :c:member:`~PyConfig.argv` "
"arguments are parsed the same way the regular Python parses :ref:`command "
"line arguments <using-on-cmdline>`, and Python arguments are stripped from :"
"c:member:`~PyConfig.argv`."
msgstr ""

#: ../../c-api/init_config.rst:1232
msgid ""
"The :c:member:`~PyConfig.xoptions` options are parsed to set other options: "
"see the :option:`-X` command line option."
msgstr ""

#: ../../c-api/init_config.rst:1237
msgid "The ``show_alloc_count`` field has been removed."
msgstr ""

#: ../../c-api/init_config.rst:1241
msgid "Initialization with PyConfig"
msgstr ""

#: ../../c-api/init_config.rst:1243
msgid "Function to initialize Python:"
msgstr ""

#: ../../c-api/init_config.rst:1247
msgid "Initialize Python from *config* configuration."
msgstr ""

#: ../../c-api/init_config.rst:1252
msgid ""
"If :c:func:`PyImport_FrozenModules`, :c:func:`PyImport_AppendInittab` or :c:"
"func:`PyImport_ExtendInittab` are used, they must be set or called after "
"Python preinitialization and before the Python initialization. If Python is "
"initialized multiple times, :c:func:`PyImport_AppendInittab` or :c:func:"
"`PyImport_ExtendInittab` must be called before each Python initialization."
msgstr ""

#: ../../c-api/init_config.rst:1259
msgid ""
"The current configuration (``PyConfig`` type) is stored in "
"``PyInterpreterState.config``."
msgstr ""

#: ../../c-api/init_config.rst:1262
msgid "Example setting the program name::"
msgstr ""

#: ../../c-api/init_config.rst:1290
msgid ""
"More complete example modifying the default configuration, read the "
"configuration, and then override some parameters. Note that since 3.11, many "
"parameters are not calculated until initialization, and so values cannot be "
"read from the configuration structure. Any values set before initialize is "
"called will be left unchanged by initialization::"
msgstr ""

#: ../../c-api/init_config.rst:1353
msgid "Isolated Configuration"
msgstr ""

#: ../../c-api/init_config.rst:1355
msgid ""
":c:func:`PyPreConfig_InitIsolatedConfig` and :c:func:"
"`PyConfig_InitIsolatedConfig` functions create a configuration to isolate "
"Python from the system. For example, to embed Python into an application."
msgstr ""

#: ../../c-api/init_config.rst:1360
msgid ""
"This configuration ignores global configuration variables, environment "
"variables, command line arguments (:c:member:`PyConfig.argv` is not parsed) "
"and user site directory. The C standard streams (ex: ``stdout``) and the "
"LC_CTYPE locale are left unchanged. Signal handlers are not installed."
msgstr ""

#: ../../c-api/init_config.rst:1365
msgid ""
"Configuration files are still used with this configuration to determine "
"paths that are unspecified. Ensure :c:member:`PyConfig.home` is specified to "
"avoid computing the default path configuration."
msgstr ""

#: ../../c-api/init_config.rst:1373
msgid "Python Configuration"
msgstr ""

#: ../../c-api/init_config.rst:1375
msgid ""
":c:func:`PyPreConfig_InitPythonConfig` and :c:func:"
"`PyConfig_InitPythonConfig` functions create a configuration to build a "
"customized Python which behaves as the regular Python."
msgstr ""

#: ../../c-api/init_config.rst:1379
msgid ""
"Environments variables and command line arguments are used to configure "
"Python, whereas global configuration variables are ignored."
msgstr ""

#: ../../c-api/init_config.rst:1382
msgid ""
"This function enables C locale coercion (:pep:`538`) and :ref:`Python UTF-8 "
"Mode <utf8-mode>` (:pep:`540`) depending on the LC_CTYPE locale, :envvar:"
"`PYTHONUTF8` and :envvar:`PYTHONCOERCECLOCALE` environment variables."
msgstr ""

#: ../../c-api/init_config.rst:1391
msgid "Python Path Configuration"
msgstr ""

#: ../../c-api/init_config.rst:1393
msgid ":c:type:`PyConfig` contains multiple fields for the path configuration:"
msgstr ""

#: ../../c-api/init_config.rst:1395
msgid "Path configuration inputs:"
msgstr "路径配置输入："

#: ../../c-api/init_config.rst:1397
msgid ":c:member:`PyConfig.home`"
msgstr ":c:member:`PyConfig.home`"

#: ../../c-api/init_config.rst:1398
msgid ":c:member:`PyConfig.platlibdir`"
msgstr ""

#: ../../c-api/init_config.rst:1399
msgid ":c:member:`PyConfig.pathconfig_warnings`"
msgstr ":c:member:`PyConfig.pathconfig_warnings`"

#: ../../c-api/init_config.rst:1400
msgid ":c:member:`PyConfig.program_name`"
msgstr ":c:member:`PyConfig.program_name`"

#: ../../c-api/init_config.rst:1401
msgid ":c:member:`PyConfig.pythonpath_env`"
msgstr ":c:member:`PyConfig.pythonpath_env`"

#: ../../c-api/init_config.rst:1402
msgid "current working directory: to get absolute paths"
msgstr ""

#: ../../c-api/init_config.rst:1403
msgid ""
"``PATH`` environment variable to get the program full path (from :c:member:"
"`PyConfig.program_name`)"
msgstr ""

#: ../../c-api/init_config.rst:1405
msgid "``__PYVENV_LAUNCHER__`` environment variable"
msgstr ""

#: ../../c-api/init_config.rst:1406
msgid ""
"(Windows only) Application paths in the registry under "
"\"Software\\Python\\PythonCore\\X.Y\\PythonPath\" of HKEY_CURRENT_USER and "
"HKEY_LOCAL_MACHINE (where X.Y is the Python version)."
msgstr ""

#: ../../c-api/init_config.rst:1410
msgid "Path configuration output fields:"
msgstr ""

#: ../../c-api/init_config.rst:1412
msgid ":c:member:`PyConfig.base_exec_prefix`"
msgstr ":c:member:`PyConfig.base_exec_prefix`"

#: ../../c-api/init_config.rst:1413
msgid ":c:member:`PyConfig.base_executable`"
msgstr ":c:member:`PyConfig.base_executable`"

#: ../../c-api/init_config.rst:1414
msgid ":c:member:`PyConfig.base_prefix`"
msgstr ":c:member:`PyConfig.base_prefix`"

#: ../../c-api/init_config.rst:1415
msgid ":c:member:`PyConfig.exec_prefix`"
msgstr ":c:member:`PyConfig.exec_prefix`"

#: ../../c-api/init_config.rst:1416
msgid ":c:member:`PyConfig.executable`"
msgstr ":c:member:`PyConfig.executable`"

#: ../../c-api/init_config.rst:1417
msgid ""
":c:member:`PyConfig.module_search_paths_set`, :c:member:`PyConfig."
"module_search_paths`"
msgstr ""
":c:member:`PyConfig.module_search_paths_set`, :c:member:`PyConfig."
"module_search_paths`"

#: ../../c-api/init_config.rst:1419
msgid ":c:member:`PyConfig.prefix`"
msgstr ":c:member:`PyConfig.prefix`"

#: ../../c-api/init_config.rst:1421
msgid ""
"If at least one \"output field\" is not set, Python calculates the path "
"configuration to fill unset fields. If :c:member:`~PyConfig."
"module_search_paths_set` is equal to ``0``, :c:member:`~PyConfig."
"module_search_paths` is overridden and :c:member:`~PyConfig."
"module_search_paths_set` is set to ``1``."
msgstr ""

#: ../../c-api/init_config.rst:1427
msgid ""
"It is possible to completely ignore the function calculating the default "
"path configuration by setting explicitly all path configuration output "
"fields listed above. A string is considered as set even if it is non-empty. "
"``module_search_paths`` is considered as set if ``module_search_paths_set`` "
"is set to ``1``. In this case, ``module_search_paths`` will be used without "
"modification."
msgstr ""

#: ../../c-api/init_config.rst:1434
msgid ""
"Set :c:member:`~PyConfig.pathconfig_warnings` to ``0`` to suppress warnings "
"when calculating the path configuration (Unix only, Windows does not log any "
"warning)."
msgstr ""

#: ../../c-api/init_config.rst:1437
msgid ""
"If :c:member:`~PyConfig.base_prefix` or :c:member:`~PyConfig."
"base_exec_prefix` fields are not set, they inherit their value from :c:"
"member:`~PyConfig.prefix` and :c:member:`~PyConfig.exec_prefix` respectively."
msgstr ""

#: ../../c-api/init_config.rst:1441
msgid ":c:func:`Py_RunMain` and :c:func:`Py_Main` modify :data:`sys.path`:"
msgstr ""

#: ../../c-api/init_config.rst:1443
msgid ""
"If :c:member:`~PyConfig.run_filename` is set and is a directory which "
"contains a ``__main__.py`` script, prepend :c:member:`~PyConfig."
"run_filename` to :data:`sys.path`."
msgstr ""

#: ../../c-api/init_config.rst:1446
msgid "If :c:member:`~PyConfig.isolated` is zero:"
msgstr ""

#: ../../c-api/init_config.rst:1448
msgid ""
"If :c:member:`~PyConfig.run_module` is set, prepend the current directory "
"to :data:`sys.path`. Do nothing if the current directory cannot be read."
msgstr ""

#: ../../c-api/init_config.rst:1450
msgid ""
"If :c:member:`~PyConfig.run_filename` is set, prepend the directory of the "
"filename to :data:`sys.path`."
msgstr ""

#: ../../c-api/init_config.rst:1452
msgid "Otherwise, prepend an empty string to :data:`sys.path`."
msgstr ""

#: ../../c-api/init_config.rst:1454
msgid ""
"If :c:member:`~PyConfig.site_import` is non-zero, :data:`sys.path` can be "
"modified by the :mod:`site` module. If :c:member:`~PyConfig."
"user_site_directory` is non-zero and the user's site-package directory "
"exists, the :mod:`site` module appends the user's site-package directory to :"
"data:`sys.path`."
msgstr ""

#: ../../c-api/init_config.rst:1460
msgid "The following configuration files are used by the path configuration:"
msgstr ""

#: ../../c-api/init_config.rst:1462
msgid "``pyvenv.cfg``"
msgstr "``pyvenv.cfg``"

#: ../../c-api/init_config.rst:1463
msgid "``._pth`` file (ex: ``python._pth``)"
msgstr ""

#: ../../c-api/init_config.rst:1464
msgid "``pybuilddir.txt`` (Unix only)"
msgstr "``pybuilddir.txt`` (仅Unix)"

#: ../../c-api/init_config.rst:1466
msgid "If a ``._pth`` file is present:"
msgstr ""

#: ../../c-api/init_config.rst:1468
msgid "Set :c:member:`~PyConfig.isolated` to ``1``."
msgstr ""

#: ../../c-api/init_config.rst:1470
msgid "Set :c:member:`~PyConfig.site_import` to ``0``."
msgstr ""

#: ../../c-api/init_config.rst:1471
msgid "Set :c:member:`~PyConfig.safe_path` to ``1``."
msgstr ""

#: ../../c-api/init_config.rst:1473
msgid ""
"The ``__PYVENV_LAUNCHER__`` environment variable is used to set :c:member:"
"`PyConfig.base_executable`"
msgstr ""

#: ../../c-api/init_config.rst:1478
msgid "Py_RunMain()"
msgstr ""

#: ../../c-api/init_config.rst:1482
msgid ""
"Execute the command (:c:member:`PyConfig.run_command`), the script (:c:"
"member:`PyConfig.run_filename`) or the module (:c:member:`PyConfig."
"run_module`) specified on the command line or in the configuration."
msgstr ""

#: ../../c-api/init_config.rst:1487
msgid "By default and when if :option:`-i` option is used, run the REPL."
msgstr ""

#: ../../c-api/init_config.rst:1489
msgid ""
"Finally, finalizes Python and returns an exit status that can be passed to "
"the ``exit()`` function."
msgstr ""

#: ../../c-api/init_config.rst:1492
msgid ""
"See :ref:`Python Configuration <init-python-config>` for an example of "
"customized Python always running in isolated mode using :c:func:`Py_RunMain`."
msgstr ""

#: ../../c-api/init_config.rst:1498
msgid "Py_GetArgcArgv()"
msgstr ""

#: ../../c-api/init_config.rst:1502
msgid "Get the original command line arguments, before Python modified them."
msgstr ""

#: ../../c-api/init_config.rst:1504
msgid "See also :c:member:`PyConfig.orig_argv` member."
msgstr ""

#: ../../c-api/init_config.rst:1508
msgid "Multi-Phase Initialization Private Provisional API"
msgstr ""

#: ../../c-api/init_config.rst:1510
msgid ""
"This section is a private provisional API introducing multi-phase "
"initialization, the core feature of :pep:`432`:"
msgstr ""

#: ../../c-api/init_config.rst:1513
msgid "\"Core\" initialization phase, \"bare minimum Python\":"
msgstr ""

#: ../../c-api/init_config.rst:1515
msgid "Builtin types;"
msgstr ""

#: ../../c-api/init_config.rst:1516
msgid "Builtin exceptions;"
msgstr ""

#: ../../c-api/init_config.rst:1517
msgid "Builtin and frozen modules;"
msgstr ""

#: ../../c-api/init_config.rst:1518
msgid ""
"The :mod:`sys` module is only partially initialized (ex: :data:`sys.path` "
"doesn't exist yet)."
msgstr ""

#: ../../c-api/init_config.rst:1521
msgid "\"Main\" initialization phase, Python is fully initialized:"
msgstr ""

#: ../../c-api/init_config.rst:1523
msgid "Install and configure :mod:`importlib`;"
msgstr ""

#: ../../c-api/init_config.rst:1524
msgid "Apply the :ref:`Path Configuration <init-path-config>`;"
msgstr ""

#: ../../c-api/init_config.rst:1525
msgid "Install signal handlers;"
msgstr ""

#: ../../c-api/init_config.rst:1526
msgid ""
"Finish :mod:`sys` module initialization (ex: create :data:`sys.stdout` and :"
"data:`sys.path`);"
msgstr ""

#: ../../c-api/init_config.rst:1528
msgid ""
"Enable optional features like :mod:`faulthandler` and :mod:`tracemalloc`;"
msgstr ""

#: ../../c-api/init_config.rst:1529
msgid "Import the :mod:`site` module;"
msgstr ""

#: ../../c-api/init_config.rst:1530
msgid "etc."
msgstr "等等."

#: ../../c-api/init_config.rst:1532
msgid "Private provisional API:"
msgstr "私有临时API："

#: ../../c-api/init_config.rst:1534
msgid ""
":c:member:`PyConfig._init_main`: if set to ``0``, :c:func:"
"`Py_InitializeFromConfig` stops at the \"Core\" initialization phase."
msgstr ""

#: ../../c-api/init_config.rst:1536
msgid ""
":c:member:`PyConfig._isolated_interpreter`: if non-zero, disallow threads, "
"subprocesses and fork."
msgstr ""

#: ../../c-api/init_config.rst:1541
msgid ""
"Move to the \"Main\" initialization phase, finish the Python initialization."
msgstr ""

#: ../../c-api/init_config.rst:1543
msgid ""
"No module is imported during the \"Core\" phase and the ``importlib`` module "
"is not configured: the :ref:`Path Configuration <init-path-config>` is only "
"applied during the \"Main\" phase. It may allow to customize Python in "
"Python to override or tune the :ref:`Path Configuration <init-path-config>`, "
"maybe install a custom :data:`sys.meta_path` importer or an import hook, etc."
msgstr ""

#: ../../c-api/init_config.rst:1549
msgid ""
"It may become possible to calculatin the :ref:`Path Configuration <init-path-"
"config>` in Python, after the Core phase and before the Main phase, which is "
"one of the :pep:`432` motivation."
msgstr ""

#: ../../c-api/init_config.rst:1553
msgid ""
"The \"Core\" phase is not properly defined: what should be and what should "
"not be available at this phase is not specified yet. The API is marked as "
"private and provisional: the API can be modified or even be removed anytime "
"until a proper public API is designed."
msgstr ""

#: ../../c-api/init_config.rst:1558
msgid ""
"Example running Python code between \"Core\" and \"Main\" initialization "
"phases::"
msgstr ""
