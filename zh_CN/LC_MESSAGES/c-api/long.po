# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2024, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# 8af080f2e6702c64bedd01873aed27e8_25aec74 <fd99d14239138a1f987c22e7736dde81_777475>, 2021
# Sean Chao <seanchao0804@gmail.com>, 2021
# Dai Xu <daixu61@hotmail.com>, 2022
# Jiuh.star <jiuh.star@gmail.com>, 2023
# Alpha Du <alphanow@gmail.com>, 2024
# 钢 彭 <szhairui@gmail.com>, 2024
# Zombie110year <zombie110year@gmail.com>, 2024
# Rafael Fontenelle <rffontenelle@gmail.com>, 2024
# 稀饭~~ <wangwhai@qq.com>, 2024
# Freesand Leo <yuqinju@163.com>, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-07-05 14:16+0000\n"
"PO-Revision-Date: 2021-06-28 00:49+0000\n"
"Last-Translator: Freesand Leo <yuqinju@163.com>, 2024\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/"
"teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../c-api/long.rst:6
msgid "Integer Objects"
msgstr "整数型对象"

#: ../../c-api/long.rst:11
msgid ""
"All integers are implemented as \"long\" integer objects of arbitrary size."
msgstr "所有整数都实现为长度任意的长整数对象。"

#: ../../c-api/long.rst:13
msgid ""
"On error, most ``PyLong_As*`` APIs return ``(return type)-1`` which cannot "
"be distinguished from a number.  Use :c:func:`PyErr_Occurred` to "
"disambiguate."
msgstr ""
"在出错时，大多数 ``PyLong_As*`` API 都会返回  ``(return type)-1``，这与数字无"
"法区分开。请采用 :c:func:`PyErr_Occurred` 来加以区分。"

#: ../../c-api/long.rst:18
msgid "This subtype of :c:type:`PyObject` represents a Python integer object."
msgstr "表示 Python 整数对象的 :c:type:`PyObject` 子类型。"

#: ../../c-api/long.rst:23
msgid ""
"This instance of :c:type:`PyTypeObject` represents the Python integer type. "
"This is the same object as :class:`int` in the Python layer."
msgstr ""
"这个 :c:type:`PyTypeObject` 的实例表示 Python 的整数类型。与 Python 语言中"
"的 :class:`int` 相同。"

#: ../../c-api/long.rst:29
msgid ""
"Return true if its argument is a :c:type:`PyLongObject` or a subtype of :c:"
"type:`PyLongObject`.  This function always succeeds."
msgstr ""
"如果参数是 :c:type:`PyLongObject` 或 :c:type:`PyLongObject` 的子类型，则返回 "
"True。该函数一定能够执行成功。"

#: ../../c-api/long.rst:35
msgid ""
"Return true if its argument is a :c:type:`PyLongObject`, but not a subtype "
"of :c:type:`PyLongObject`.  This function always succeeds."
msgstr ""
"如果其参数属于 :c:type:`PyLongObject`，但不是 :c:type:`PyLongObject` 的子类型"
"则返回真值。 此函数总是会成功执行。"

#: ../../c-api/long.rst:41
msgid ""
"Return a new :c:type:`PyLongObject` object from *v*, or ``NULL`` on failure."
msgstr ""
"由 *v* 返回一个新的 :c:type:`PyLongObject` 对象，失败时返回 ``NULL`` 。"

#: ../../c-api/long.rst:43
msgid ""
"The current implementation keeps an array of integer objects for all "
"integers between ``-5`` and ``256``. When you create an int in that range "
"you actually just get back a reference to the existing object."
msgstr ""
"当前的实现维护着一个整数对象数组，包含 ``-5`` 和 ``256`` 之间的所有整数对"
"象。 若创建一个位于该区间的 int 时，实际得到的将是对已有对象的引用。"

#: ../../c-api/long.rst:50
msgid ""
"Return a new :c:type:`PyLongObject` object from a C :c:expr:`unsigned long`, "
"or ``NULL`` on failure."
msgstr ""
"基于 C :c:expr:`unsigned long` 返回一个新的 :c:type:`PyLongObject` 对象，失败"
"时返回 ``NULL``。"

#: ../../c-api/long.rst:56
msgid ""
"Return a new :c:type:`PyLongObject` object from a C :c:type:`Py_ssize_t`, or "
"``NULL`` on failure."
msgstr ""
"由 C :c:type:`Py_ssize_t`  返回一个新的 :c:type:`PyLongObject` 对象，失败时返"
"回 ``NULL`` 。"

#: ../../c-api/long.rst:62
msgid ""
"Return a new :c:type:`PyLongObject` object from a C :c:type:`size_t`, or "
"``NULL`` on failure."
msgstr ""
"由 C :c:type:`size_t` 返回一个新的 :c:type:`PyLongObject` 对象，失败则返回 "
"``NULL`` 。"

#: ../../c-api/long.rst:68
msgid ""
"Return a new :c:type:`PyLongObject` object from a C :c:expr:`long long`, or "
"``NULL`` on failure."
msgstr ""
"基于 C :c:expr:`long long` 返回一个新的 :c:type:`PyLongObject`，失败时返回 "
"``NULL``。"

#: ../../c-api/long.rst:74
msgid ""
"Return a new :c:type:`PyLongObject` object from a C :c:expr:`unsigned long "
"long`, or ``NULL`` on failure."
msgstr ""
"基于 C :c:expr:`unsigned long long` 返回一个新的 :c:type:`PyLongObject` 对"
"象，失败时返回 ``NULL``。"

#: ../../c-api/long.rst:80
msgid ""
"Return a new :c:type:`PyLongObject` object from the integer part of *v*, or "
"``NULL`` on failure."
msgstr ""
"由 *v* 的整数部分返回一个新的 :c:type:`PyLongObject` 对象，失败则返回 "
"``NULL`` 。"

#: ../../c-api/long.rst:86
msgid ""
"Return a new :c:type:`PyLongObject` based on the string value in *str*, "
"which is interpreted according to the radix in *base*, or ``NULL`` on "
"failure.  If *pend* is non-``NULL``, *\\*pend* will point to the end of "
"*str* on success or to the first character that could not be processed on "
"error.  If *base* is ``0``, *str* is interpreted using the :ref:`integers` "
"definition; in this case, leading zeros in a non-zero decimal number raises "
"a :exc:`ValueError`.  If *base* is not ``0``, it must be between ``2`` and "
"``36``, inclusive.  Leading and trailing whitespace and single underscores "
"after a base specifier and between digits are ignored.  If there are no "
"digits or *str* is not NULL-terminated following the digits and trailing "
"whitespace, :exc:`ValueError` will be raised."
msgstr ""
"根据 *str* 字符串值返回一个新的 :c:type:`PyLongObject`，它将根据 *base* 指定"
"的基数来解读，或是在失败时返回 ``NULL``。 如果 *pend* 不为 ``NULL``，则在成功"
"时 *\\*pend* 将指向 *str* 中末尾而在出错时将指向第一个无法处理的字符。 如果 "
"*base* 为 ``0``，则 *str* 将使用 :ref:`integers` 定义来解读；在此情况下，非零"
"十进制数以零开头将会引发 :exc:`ValueError`。 如果 *base* 不为 ``0``，则必须"
"在 ``2`` 和 ``36``，包括这两个值。 开头和末尾的空格以及基数标示符之后和数码之"
"间的单下划线将被忽略。 如果没有数码或 *str* 中数码和末尾空格之后不以 NULL 结"
"束，则将引发 :exc:`ValueError`。"

#: ../../c-api/long.rst:97
msgid ""
"Python methods :meth:`int.to_bytes` and :meth:`int.from_bytes` to convert a :"
"c:type:`PyLongObject` to/from an array of bytes in base ``256``. You can "
"call those from C using :c:func:`PyObject_CallMethod`."
msgstr ""
"Python 方法 :meth:`int.to_bytes` 和 :meth:`int.from_bytes` 用于 :c:type:"
"`PyLongObject` 到/从字节数组之间以 ``256`` 为基数进行转换。 你可以使用 :c:"
"func:`PyObject_CallMethod` 从 C 调用它们。"

#: ../../c-api/long.rst:104
msgid ""
"Convert a sequence of Unicode digits in the string *u* to a Python integer "
"value."
msgstr "将字符串 *u* 中的 Unicode 数字序列转换为 Python 整数值。"

#: ../../c-api/long.rst:112
msgid ""
"Create a Python integer from the pointer *p*. The pointer value can be "
"retrieved from the resulting value using :c:func:`PyLong_AsVoidPtr`."
msgstr ""
"从指针 *p* 创建一个 Python 整数。可以使用 :c:func:`PyLong_AsVoidPtr` 返回的指"
"针值。"

#: ../../c-api/long.rst:118
msgid ""
"Create a Python integer from the value contained in the first *n_bytes* of "
"*buffer*, interpreted as a two's-complement signed number."
msgstr ""

#: ../../c-api/long.rst:121
msgid ""
"*flags* are as for :c:func:`PyLong_AsNativeBytes`. Passing ``-1`` will "
"select the native endian that CPython was compiled with and assume that the "
"most-significant bit is a sign bit. Passing "
"``Py_ASNATIVEBYTES_UNSIGNED_BUFFER`` will produce the same result as "
"calling :c:func:`PyLong_FromUnsignedNativeBytes`. Other flags are ignored."
msgstr ""

#: ../../c-api/long.rst:132
msgid ""
"Create a Python integer from the value contained in the first *n_bytes* of "
"*buffer*, interpreted as an unsigned number."
msgstr ""

#: ../../c-api/long.rst:135
msgid ""
"*flags* are as for :c:func:`PyLong_AsNativeBytes`. Passing ``-1`` will "
"select the native endian that CPython was compiled with and assume that the "
"most-significant bit is not a sign bit. Flags other than endian are ignored."
msgstr ""

#: ../../c-api/long.rst:149 ../../c-api/long.rst:175
msgid ""
"Return a C :c:expr:`long` representation of *obj*.  If *obj* is not an "
"instance of :c:type:`PyLongObject`, first call its :meth:`~object.__index__` "
"method (if present) to convert it to a :c:type:`PyLongObject`."
msgstr ""
"返回 *obj* 的 C :c:expr:`long` 表示形式。 如果 *obj* 不是 :c:type:"
"`PyLongObject` 的实例，则会先调用其 :meth:`~object.__index__` 方法（如果存"
"在）将其转换为 :c:type:`PyLongObject`。"

#: ../../c-api/long.rst:153
msgid ""
"Raise :exc:`OverflowError` if the value of *obj* is out of range for a :c:"
"expr:`long`."
msgstr ""
"如果 *obj* 的值超出了 :c:expr:`long` 的取值范围则会引发 :exc:"
"`OverflowError`。"

#: ../../c-api/long.rst:156 ../../c-api/long.rst:184 ../../c-api/long.rst:205
#: ../../c-api/long.rst:225 ../../c-api/long.rst:248
msgid "Returns ``-1`` on error.  Use :c:func:`PyErr_Occurred` to disambiguate."
msgstr "出错则返回 ``-1`` 。请用 :c:func:`PyErr_Occurred` 找出具体问题。"

#: ../../c-api/long.rst:158 ../../c-api/long.rst:186 ../../c-api/long.rst:207
#: ../../c-api/long.rst:229 ../../c-api/long.rst:313 ../../c-api/long.rst:333
msgid "Use :meth:`~object.__index__` if available."
msgstr "如果可能将使用 :meth:`~object.__index__`。"

#: ../../c-api/long.rst:161 ../../c-api/long.rst:189 ../../c-api/long.rst:210
#: ../../c-api/long.rst:232 ../../c-api/long.rst:316 ../../c-api/long.rst:336
msgid "This function will no longer use :meth:`~object.__int__`."
msgstr "此函数将不再使用 :meth:`~object.__int__`。"

#: ../../c-api/long.rst:167
msgid ""
"Similar to :c:func:`PyLong_AsLong`, but store the result in a C :c:expr:"
"`int` instead of a C :c:expr:`long`."
msgstr ""

#: ../../c-api/long.rst:179
msgid ""
"If the value of *obj* is greater than :c:macro:`LONG_MAX` or less than :c:"
"macro:`LONG_MIN`, set *\\*overflow* to ``1`` or ``-1``, respectively, and "
"return ``-1``; otherwise, set *\\*overflow* to ``0``.  If any other "
"exception occurs set *\\*overflow* to ``0`` and return ``-1`` as usual."
msgstr ""
"如果 *obj* 的值大于 :c:macro:`LONG_MAX` 或小于 :c:macro:`LONG_MIN`，则会把 "
"*\\*overflow* 分别置为 ``1`` 或 ``-1``，并返回 ``-1``；否则，将 "
"*\\*overflow* 置为 ``0``。 如果发生其他异常则按常规把 *\\*overflow* 置为 "
"``0`` 并返回 ``-1``。"

#: ../../c-api/long.rst:198 ../../c-api/long.rst:216
msgid ""
"Return a C :c:expr:`long long` representation of *obj*.  If *obj* is not an "
"instance of :c:type:`PyLongObject`, first call its :meth:`~object.__index__` "
"method (if present) to convert it to a :c:type:`PyLongObject`."
msgstr ""
"返回 *obj* 的 C :c:expr:`long long` 表示形式。 如果 *obj* 不是 :c:type:"
"`PyLongObject` 的实例，则会先调用其 :meth:`~object.__index__` 方法（如果存"
"在）将其转换为 :c:type:`PyLongObject`。"

#: ../../c-api/long.rst:202
msgid ""
"Raise :exc:`OverflowError` if the value of *obj* is out of range for a :c:"
"expr:`long long`."
msgstr ""
"如果 *obj* 值超出 :c:expr:`long long` 的取值范围则会引发 :exc:"
"`OverflowError`。"

#: ../../c-api/long.rst:220
msgid ""
"If the value of *obj* is greater than :c:macro:`LLONG_MAX` or less than :c:"
"macro:`LLONG_MIN`, set *\\*overflow* to ``1`` or ``-1``, respectively, and "
"return ``-1``; otherwise, set *\\*overflow* to ``0``.  If any other "
"exception occurs set *\\*overflow* to ``0`` and return ``-1`` as usual."
msgstr ""
"如果 *obj* 的值大于 :c:macro:`LLONG_MAX` 或小于 :c:macro:`LLONG_MIN`，则会把 "
"*\\*overflow* 分别置为 ``1`` 或 ``-1``，并返回 ``-1``；否则，将 "
"*\\*overflow* 置为 ``0``。 如果发生其他异常则按常规把 *\\*overflow* 置为 "
"``0`` 并返回 ``-1``。"

#: ../../c-api/long.rst:242
msgid ""
"Return a C :c:type:`Py_ssize_t` representation of *pylong*.  *pylong* must "
"be an instance of :c:type:`PyLongObject`."
msgstr ""
"返回 *pylong* 的 C 语言 :c:type:`Py_ssize_t` 形式。*pylong* 必须是 :c:type:"
"`PyLongObject` 的实例。"

#: ../../c-api/long.rst:245
msgid ""
"Raise :exc:`OverflowError` if the value of *pylong* is out of range for a :c:"
"type:`Py_ssize_t`."
msgstr ""
"如果 *pylong* 的值超出了 :c:type:`Py_ssize_t` 的取值范围则会引发 :exc:"
"`OverflowError`。"

#: ../../c-api/long.rst:257
msgid ""
"Return a C :c:expr:`unsigned long` representation of *pylong*.  *pylong* "
"must be an instance of :c:type:`PyLongObject`."
msgstr ""
"返回 *pylong* 的 C :c:expr:`unsigned long` 表示形式。 *pylong* 必须是 :c:"
"type:`PyLongObject` 的实例。"

#: ../../c-api/long.rst:260
msgid ""
"Raise :exc:`OverflowError` if the value of *pylong* is out of range for a :c:"
"expr:`unsigned long`."
msgstr ""
"如果 *pylong* 的值超出了 :c:expr:`unsigned long` 的取值范围则会引发 :exc:"
"`OverflowError`。"

#: ../../c-api/long.rst:263
msgid ""
"Returns ``(unsigned long)-1`` on error. Use :c:func:`PyErr_Occurred` to "
"disambiguate."
msgstr ""
"出错时返回 ``(unsigned long)-1`` ，请利用 :c:func:`PyErr_Occurred` 辨别具体问"
"题。"

#: ../../c-api/long.rst:273
msgid ""
"Return a C :c:type:`size_t` representation of *pylong*.  *pylong* must be an "
"instance of :c:type:`PyLongObject`."
msgstr ""
"返回 *pylong* 的 C 语言 :c:type:`size_t` 形式。*pylong* 必须是 :c:type:"
"`PyLongObject` 的实例。"

#: ../../c-api/long.rst:276
msgid ""
"Raise :exc:`OverflowError` if the value of *pylong* is out of range for a :c:"
"type:`size_t`."
msgstr ""
"如果 *pylong* 的值超出了 :c:type:`size_t` 的取值范围则会引发 :exc:"
"`OverflowError`。"

#: ../../c-api/long.rst:279
msgid ""
"Returns ``(size_t)-1`` on error. Use :c:func:`PyErr_Occurred` to "
"disambiguate."
msgstr ""
"出错时返回  ``(size_t)-1`` ，请利用 :c:func:`PyErr_Occurred` 辨别具体问题。"

#: ../../c-api/long.rst:288
msgid ""
"Return a C :c:expr:`unsigned long long` representation of *pylong*.  "
"*pylong* must be an instance of :c:type:`PyLongObject`."
msgstr ""
"返回 *pylong* 的 C :c:expr:`unsigned long long` 表示形式。 *pylong* 必须是 :"
"c:type:`PyLongObject` 的实例。"

#: ../../c-api/long.rst:291
msgid ""
"Raise :exc:`OverflowError` if the value of *pylong* is out of range for an :"
"c:expr:`unsigned long long`."
msgstr ""
"如果 *pylong* 的值超出 :c:expr:`unsigned long long` 的取值范围则会引发 :exc:"
"`OverflowError`。"

#: ../../c-api/long.rst:294
msgid ""
"Returns ``(unsigned long long)-1`` on error. Use :c:func:`PyErr_Occurred` to "
"disambiguate."
msgstr ""
"出错时返回 ``(unsigned long long)-1``，请利用 :c:func:`PyErr_Occurred` 辨别具"
"体问题。"

#: ../../c-api/long.rst:297
msgid ""
"A negative *pylong* now raises :exc:`OverflowError`, not :exc:`TypeError`."
msgstr ""
"现在 *pylong* 为负值会触发  :exc:`OverflowError`，而不是 :exc:`TypeError`。"

#: ../../c-api/long.rst:303
msgid ""
"Return a C :c:expr:`unsigned long` representation of *obj*.  If *obj* is not "
"an instance of :c:type:`PyLongObject`, first call its :meth:`~object."
"__index__` method (if present) to convert it to a :c:type:`PyLongObject`."
msgstr ""
"返回 *obj* 的 C :c:expr:`unsigned long` 表示形式。 如果 *obj* 不是 :c:type:"
"`PyLongObject` 的实例，则会先调用其 :meth:`~object.__index__` 方法（如果存"
"在）将其转换为 :c:type:`PyLongObject`。"

#: ../../c-api/long.rst:307
msgid ""
"If the value of *obj* is out of range for an :c:expr:`unsigned long`, return "
"the reduction of that value modulo ``ULONG_MAX + 1``."
msgstr ""
"如果 *obj* 的值超出了 :c:expr:`unsigned long` 的取值范围，则返回该值对 "
"``ULONG_MAX + 1`` 求模的余数。"

#: ../../c-api/long.rst:310
msgid ""
"Returns ``(unsigned long)-1`` on error.  Use :c:func:`PyErr_Occurred` to "
"disambiguate."
msgstr ""
"出错时返回 ``(unsigned long)-1``，请利用 :c:func:`PyErr_Occurred` 辨别具体问"
"题。"

#: ../../c-api/long.rst:322
msgid ""
"Return a C :c:expr:`unsigned long long` representation of *obj*.  If *obj* "
"is not an instance of :c:type:`PyLongObject`, first call its :meth:`~object."
"__index__` method (if present) to convert it to a :c:type:`PyLongObject`."
msgstr ""
"返回 *obj* 的 C :c:expr:`unsigned long long` 表示形式。 如果 *obj* 不是 :c:"
"type:`PyLongObject` 的实例，则会先调用其 :meth:`~object.__index__` 方法（如果"
"存在）将其转换为 :c:type:`PyLongObject`。"

#: ../../c-api/long.rst:327
msgid ""
"If the value of *obj* is out of range for an :c:expr:`unsigned long long`, "
"return the reduction of that value modulo ``ULLONG_MAX + 1``."
msgstr ""
"如果 *obj* 的值超出了 :c:expr:`unsigned long long` 的取值范围，则返回该值对 "
"``ULLONG_MAX + 1`` 求模的余数。"

#: ../../c-api/long.rst:330
msgid ""
"Returns ``(unsigned long long)-1`` on error.  Use :c:func:`PyErr_Occurred` "
"to disambiguate."
msgstr ""
"出错时返回 ``(unsigned long long)-1``，请利用 :c:func:`PyErr_Occurred` 辨别具"
"体问题。"

#: ../../c-api/long.rst:342
msgid ""
"Return a C :c:expr:`double` representation of *pylong*.  *pylong* must be an "
"instance of :c:type:`PyLongObject`."
msgstr ""
"返回 *pylong* 的 C :c:expr:`double` 表示形式。 *pylong* 必须是 :c:type:"
"`PyLongObject` 的实例。"

#: ../../c-api/long.rst:345
msgid ""
"Raise :exc:`OverflowError` if the value of *pylong* is out of range for a :c:"
"expr:`double`."
msgstr ""
"如果 *pylong* 的值超出了 :c:expr:`double` 的取值范围则会引发 :exc:"
"`OverflowError`。"

#: ../../c-api/long.rst:348
msgid ""
"Returns ``-1.0`` on error.  Use :c:func:`PyErr_Occurred` to disambiguate."
msgstr "出错时返回  ``-1.0`` ，请利用 :c:func:`PyErr_Occurred` 辨别具体问题。"

#: ../../c-api/long.rst:353
msgid ""
"Convert a Python integer *pylong* to a C :c:expr:`void` pointer. If *pylong* "
"cannot be converted, an :exc:`OverflowError` will be raised.  This is only "
"assured to produce a usable :c:expr:`void` pointer for values created with :"
"c:func:`PyLong_FromVoidPtr`."
msgstr ""
"将一个 Python 整数 *pylong* 转换为 C :c:expr:`void` 指针。 如果 *pylong* 无法"
"被转换，则将引发 :exc:`OverflowError`。 这只是为了保证将通过 :c:func:"
"`PyLong_FromVoidPtr` 创建的值产生一个可用的 :c:expr:`void` 指针。"

#: ../../c-api/long.rst:358
msgid ""
"Returns ``NULL`` on error.  Use :c:func:`PyErr_Occurred` to disambiguate."
msgstr "出错时返回  ``NULL``，请利用 :c:func:`PyErr_Occurred` 辨别具体问题。"

#: ../../c-api/long.rst:363
msgid ""
"Copy the Python integer value *pylong* to a native *buffer* of size "
"*n_bytes*. The *flags* can be set to ``-1`` to behave similarly to a C cast, "
"or to values documented below to control the behavior."
msgstr ""

#: ../../c-api/long.rst:367
msgid ""
"Returns ``-1`` with an exception raised on error.  This may happen if "
"*pylong* cannot be interpreted as an integer, or if *pylong* was negative "
"and the ``Py_ASNATIVEBYTES_REJECT_NEGATIVE`` flag was set."
msgstr ""

#: ../../c-api/long.rst:371
msgid ""
"Otherwise, returns the number of bytes required to store the value. If this "
"is equal to or less than *n_bytes*, the entire value was copied. All "
"*n_bytes* of the buffer are written: large buffers are padded with zeroes."
msgstr ""

#: ../../c-api/long.rst:376
msgid ""
"If the returned value is greater than than *n_bytes*, the value was "
"truncated: as many of the lowest bits of the value as could fit are written, "
"and the higher bits are ignored. This matches the typical behavior of a C-"
"style downcast."
msgstr ""

#: ../../c-api/long.rst:383
msgid ""
"Overflow is not considered an error. If the returned value is larger than "
"*n_bytes*, most significant bits were discarded."
msgstr ""

#: ../../c-api/long.rst:386
msgid "``0`` will never be returned."
msgstr ""

#: ../../c-api/long.rst:388
msgid "Values are always copied as two's-complement."
msgstr ""

#: ../../c-api/long.rst:390
msgid "Usage example::"
msgstr ""

#: ../../c-api/long.rst:406
msgid ""
"Passing zero to *n_bytes* will return the size of a buffer that would be "
"large enough to hold the value. This may be larger than technically "
"necessary, but not unreasonably so. If *n_bytes=0*, *buffer* may be ``NULL``."
msgstr ""

#: ../../c-api/long.rst:413
msgid ""
"Passing *n_bytes=0* to this function is not an accurate way to determine the "
"bit length of the value."
msgstr ""

#: ../../c-api/long.rst:416
msgid ""
"To get at the entire Python value of an unknown size, the function can be "
"called twice: first to determine the buffer size, then to fill it::"
msgstr ""

#: ../../c-api/long.rst:447
msgid ""
"*flags* is either ``-1`` (``Py_ASNATIVEBYTES_DEFAULTS``) to select defaults "
"that behave most like a C cast, or a combintation of the other flags in the "
"table below. Note that ``-1`` cannot be combined with other flags."
msgstr ""

#: ../../c-api/long.rst:452
msgid ""
"Currently, ``-1`` corresponds to ``Py_ASNATIVEBYTES_NATIVE_ENDIAN | "
"Py_ASNATIVEBYTES_UNSIGNED_BUFFER``."
msgstr ""

#: ../../c-api/long.rst:456
msgid "Flag"
msgstr "标志位"

#: ../../c-api/long.rst:456
msgid "Value"
msgstr "值"

#: ../../c-api/long.rst:458
msgid "``-1``"
msgstr "``-1``"

#: ../../c-api/long.rst:459
msgid "``0``"
msgstr "``0``"

#: ../../c-api/long.rst:460
msgid "``1``"
msgstr "``1``"

#: ../../c-api/long.rst:461
msgid "``3``"
msgstr "``3``"

#: ../../c-api/long.rst:462
msgid "``4``"
msgstr "``4``"

#: ../../c-api/long.rst:463
msgid "``8``"
msgstr "``8``"

#: ../../c-api/long.rst:464
msgid "``16``"
msgstr ""

#: ../../c-api/long.rst:467
msgid ""
"Specifying ``Py_ASNATIVEBYTES_NATIVE_ENDIAN`` will override any other endian "
"flags. Passing ``2`` is reserved."
msgstr ""

#: ../../c-api/long.rst:470
msgid ""
"By default, sufficient buffer will be requested to include a sign bit. For "
"example, when converting 128 with *n_bytes=1*, the function will return 2 "
"(or more) in order to store a zero sign bit."
msgstr ""

#: ../../c-api/long.rst:474
msgid ""
"If ``Py_ASNATIVEBYTES_UNSIGNED_BUFFER`` is specified, a zero sign bit will "
"be omitted from size calculations. This allows, for example, 128 to fit in a "
"single-byte buffer. If the destination buffer is later treated as signed, a "
"positive input value may become negative. Note that the flag does not affect "
"handling of negative values: for those, space for a sign bit is always "
"requested."
msgstr ""

#: ../../c-api/long.rst:481
msgid ""
"Specifying ``Py_ASNATIVEBYTES_REJECT_NEGATIVE`` causes an exception to be "
"set if *pylong* is negative. Without this flag, negative values will be "
"copied provided there is enough space for at least one sign bit, regardless "
"of whether ``Py_ASNATIVEBYTES_UNSIGNED_BUFFER`` was specified."
msgstr ""

#: ../../c-api/long.rst:486
msgid ""
"If ``Py_ASNATIVEBYTES_ALLOW_INDEX`` is specified and a non-integer value is "
"passed, its :meth:`~object.__index__` method will be called first. This may "
"result in Python code executing and other threads being allowed to run, "
"which could cause changes to other objects or values in use. When *flags* is "
"``-1``, this option is not set, and non-integer values will raise :exc:"
"`TypeError`."
msgstr ""

#: ../../c-api/long.rst:495
msgid ""
"With the default *flags* (``-1``, or *UNSIGNED_BUFFER*  without "
"*REJECT_NEGATIVE*), multiple Python integers can map to a single value "
"without overflow. For example, both ``255`` and ``-1`` fit a single-byte "
"buffer and set all its bits. This matches typical C cast behavior."
msgstr ""

#: ../../c-api/long.rst:506
msgid "Return 1 if *op* is compact, 0 otherwise."
msgstr "如果 *op* 为紧凑形式则返回 1，否则返回 0。"

#: ../../c-api/long.rst:508
msgid ""
"This function makes it possible for performance-critical code to implement a "
"“fast path” for small integers. For compact values use :c:func:"
"`PyUnstable_Long_CompactValue`; for others fall back to a :c:func:"
"`PyLong_As* <PyLong_AsSize_t>` function or :c:func:`PyLong_AsNativeBytes`."
msgstr ""

#: ../../c-api/long.rst:514
msgid "The speedup is expected to be negligible for most users."
msgstr "此项加速对于大多数用户来说是可以忽略的。"

#: ../../c-api/long.rst:516
msgid ""
"Exactly what values are considered compact is an implementation detail and "
"is subject to change."
msgstr "具体有哪些值会被视为紧凑形式属于实现细节并可能发生改变。"

#: ../../c-api/long.rst:521
msgid ""
"If *op* is compact, as determined by :c:func:`PyUnstable_Long_IsCompact`, "
"return its value."
msgstr ""
"如果 *op* 为紧凑形式，如 :c:func:`PyUnstable_Long_IsCompact` 所确定的，则返回"
"它的值。"

#: ../../c-api/long.rst:524
msgid "Otherwise, the return value is undefined."
msgstr "在其他情况下，返回值是未定义的。"

#: ../../c-api/long.rst:8
msgid "object"
msgstr "object -- 对象"

#: ../../c-api/long.rst:8
msgid "long integer"
msgstr "长整型"

#: ../../c-api/long.rst:8
msgid "integer"
msgstr "integer"

#: ../../c-api/long.rst:145
msgid "LONG_MAX (C macro)"
msgstr "LONG_MAX (C 宏)"

#: ../../c-api/long.rst:145 ../../c-api/long.rst:195 ../../c-api/long.rst:238
#: ../../c-api/long.rst:253 ../../c-api/long.rst:269 ../../c-api/long.rst:285
msgid "OverflowError (built-in exception)"
msgstr "OverflowError (内置异常)"

#: ../../c-api/long.rst:238
msgid "PY_SSIZE_T_MAX (C macro)"
msgstr "PY_SSIZE_T_MAX (C 宏)"

#: ../../c-api/long.rst:253
msgid "ULONG_MAX (C macro)"
msgstr "ULONG_MAX (C 宏)"

#: ../../c-api/long.rst:269
msgid "SIZE_MAX (C macro)"
msgstr "SIZE_MAX (C 宏)"
