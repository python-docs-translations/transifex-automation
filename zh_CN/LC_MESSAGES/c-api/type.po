# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2024, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# ppcfish <ppcfish@gmail.com>, 2020
# stone jing <stonejing1817@gmail.com>, 2020
# Freesand Leo <yuqinju@163.com>, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-04-26 23:55+0000\n"
"PO-Revision-Date: 2020-05-30 11:51+0000\n"
"Last-Translator: Freesand Leo <yuqinju@163.com>, 2024\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/"
"teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../c-api/type.rst:6
msgid "Type Objects"
msgstr "类型对象"

#: ../../c-api/type.rst:13
msgid "The C structure of the objects used to describe built-in types."
msgstr "对象的 C 结构用于描述 built-in 类型。"

#: ../../c-api/type.rst:18
msgid ""
"This is the type object for type objects; it is the same object as :class:"
"`type` in the Python layer."
msgstr ""
"这是属于 type 对象的 type object，它在 Python 层面和 :class:`type` 是相同的对"
"象。"

#: ../../c-api/type.rst:24
msgid ""
"Return true if the object *o* is a type object, including instances of types "
"derived from the standard type object.  Return false in all other cases."
msgstr ""
"如果对象 *o* 是一个类型对象，包括继承于标准类型对象的类型实例，返回真。在其它"
"所有情况下返回假。"

#: ../../c-api/type.rst:30
msgid ""
"Return true if the object *o* is a type object, but not a subtype of the "
"standard type object.  Return false in all other cases."
msgstr ""
"如果对象 *o* 是一个类型对象，但不是标准类型对象的子类型时，返回真。在其它所有"
"情况下返回假。"

#: ../../c-api/type.rst:36
msgid "Clear the internal lookup cache. Return the current version tag."
msgstr "清空内部查找缓存。 返回当前版本标签。"

#: ../../c-api/type.rst:40
msgid ""
"Return the :c:member:`~PyTypeObject.tp_flags` member of *type*. This "
"function is primarily meant for use with `Py_LIMITED_API`; the individual "
"flag bits are guaranteed to be stable across Python releases, but access to :"
"c:member:`~PyTypeObject.tp_flags` itself is not part of the limited API."
msgstr ""
"返回 *type* 的 :c:member:`~PyTypeObject.tp_flags` 成员。 此函数主要是配合 "
"`Py_LIMITED_API` 使用；单独的旗标位会确保在各个 Python 发行版之间保持稳定，但"
"对 :c:member:`~PyTypeObject.tp_flags` 本身的访问并不是受限 API 的一部分。"

#: ../../c-api/type.rst:47
msgid "The return type is now ``unsigned long`` rather than ``long``."
msgstr "返回类型现在是 ``unsigned long`` 而不是 ``long``。"

#: ../../c-api/type.rst:53
msgid ""
"Invalidate the internal lookup cache for the type and all of its subtypes.  "
"This function must be called after any manual modification of the attributes "
"or base classes of the type."
msgstr ""
"使该类型及其所有子类型的内部查找缓存失效。 此函数必须在对该类型的属性或基类进"
"行任何手动修改之后调用。"

#: ../../c-api/type.rst:60
msgid ""
"Return true if the type object *o* sets the feature *feature*.  Type "
"features are denoted by single bit flags."
msgstr ""

#: ../../c-api/type.rst:66
msgid ""
"Return true if the type object includes support for the cycle detector; this "
"tests the type flag :const:`Py_TPFLAGS_HAVE_GC`."
msgstr ""
"如果类型对象包括对循环检测器的支持则返回真值；这会测试类型旗标 :const:"
"`Py_TPFLAGS_HAVE_GC`。"

#: ../../c-api/type.rst:72
msgid "Return true if *a* is a subtype of *b*."
msgstr "如果 *a* 是 *b* 的子类型则返回真值。"

#: ../../c-api/type.rst:74
msgid ""
"This function only checks for actual subtypes, which means that :meth:"
"`~class.__subclasscheck__` is not called on *b*.  Call :c:func:"
"`PyObject_IsSubclass` to do the same check that :func:`issubclass` would do."
msgstr ""
"此函数只检查实际的子类型，这意味着 :meth:`~class.__subclasscheck__` 不会在 "
"*b* 上被调用。 请调用 :c:func:`PyObject_IsSubclass` 来执行与 :func:"
"`issubclass` 所做的相同检查。"

#: ../../c-api/type.rst:82
msgid ""
"Generic handler for the :c:member:`~PyTypeObject.tp_alloc` slot of a type "
"object.  Use Python's default memory allocation mechanism to allocate a new "
"instance and initialize all its contents to ``NULL``."
msgstr ""
"类型对象的 :c:member:`~PyTypeObject.tp_alloc` 槽位的通用处理器。 请使用 "
"Python 的默认内存分配机制来分配一个新的实例并将其所有内容初始化为 ``NULL``。"

#: ../../c-api/type.rst:88
msgid ""
"Generic handler for the :c:member:`~PyTypeObject.tp_new` slot of a type "
"object.  Create a new instance using the type's :c:member:`~PyTypeObject."
"tp_alloc` slot."
msgstr ""
"类型对象的 :c:member:`~PyTypeObject.tp_new` 槽位的通用处理器。 请使用类型的 :"
"c:member:`~PyTypeObject.tp_alloc` 槽位来创建一个新的实例。"

#: ../../c-api/type.rst:93
msgid ""
"Finalize a type object.  This should be called on all type objects to finish "
"their initialization.  This function is responsible for adding inherited "
"slots from a type's base class.  Return ``0`` on success, or return ``-1`` "
"and sets an exception on error."
msgstr ""
"最终化一个类型对象。 这应当在所有类型对象上调用以完成它们的初始化。 此函数会"
"负责从一个类型的基类添加被继承的槽位。 成功时返回 ``0``，或是在出错时返回 "
"``-1`` 并设置一个异常。"

#: ../../c-api/type.rst:100
msgid ""
"Return the function pointer stored in the given slot. If the result is "
"``NULL``, this indicates that either the slot is ``NULL``, or that the "
"function was called with invalid parameters. Callers will typically cast the "
"result pointer into the appropriate function type."
msgstr ""
"返回存储在给定槽位中的函数指针。 如果结果为 ``NULL``，则表示或者该槽位为 "
"``NULL``，或者该函数调用传入了无效的形参。 调用方通常要将结果指针转换到适当的"
"函数类型。"

#: ../../c-api/type.rst:106
msgid ""
"See :c:member:`PyType_Slot.slot` for possible values of the *slot* argument."
msgstr "请参阅 :c:member:`PyType_Slot.slot` 查看可用的 *slot* 参数值。"

#: ../../c-api/type.rst:108
msgid "An exception is raised if *type* is not a heap type."
msgstr ""

#: ../../c-api/type.rst:114
msgid "Creating Heap-Allocated Types"
msgstr "创建堆分配类型"

#: ../../c-api/type.rst:116
msgid ""
"The following functions and structs are used to create :ref:`heap types "
"<heap-types>`."
msgstr "下列函数和结构体可被用来创建 :ref:`堆类型 <heap-types>`。"

#: ../../c-api/type.rst:121
msgid ""
"Creates and returns a heap type object from the *spec* (:const:"
"`Py_TPFLAGS_HEAPTYPE`)."
msgstr ""

#: ../../c-api/type.rst:124
msgid ""
"If *bases* is a tuple, the created heap type contains all types contained in "
"it as base types."
msgstr ""

#: ../../c-api/type.rst:127
msgid ""
"If *bases* is ``NULL``, the *Py_tp_bases* slot is used instead. If that also "
"is ``NULL``, the *Py_tp_base* slot is used instead. If that also is "
"``NULL``, the new type derives from :class:`object`."
msgstr ""

#: ../../c-api/type.rst:131
msgid "This function calls :c:func:`PyType_Ready` on the new type."
msgstr "此函数会在新类型上调用 :c:func:`PyType_Ready`。"

#: ../../c-api/type.rst:137
msgid "Equivalent to ``PyType_FromSpecWithBases(spec, NULL)``."
msgstr "等价于 ``PyType_FromSpecWithBases(spec, NULL)``。"

#: ../../c-api/type.rst:141
msgid "Structure defining a type's behavior."
msgstr "定义一个类型的行为的结构体。"

#: ../../c-api/type.rst:145
msgid "Name of the type, used to set :c:member:`PyTypeObject.tp_name`."
msgstr "类型的名称，用来设置 :c:member:`PyTypeObject.tp_name`。"

#: ../../c-api/type.rst:150
msgid ""
"Size of the instance in bytes, used to set :c:member:`PyTypeObject."
"tp_basicsize` and :c:member:`PyTypeObject.tp_itemsize`."
msgstr ""
"以字节数表示的实例大小，用来设置 :c:member:`PyTypeObject.tp_basicsize` 和 :c:"
"member:`PyTypeObject.tp_itemsize`。"

#: ../../c-api/type.rst:156
msgid "Type flags, used to set :c:member:`PyTypeObject.tp_flags`."
msgstr "类型旗标，用来设置 :c:member:`PyTypeObject.tp_flags`。"

#: ../../c-api/type.rst:158
msgid ""
"If the ``Py_TPFLAGS_HEAPTYPE`` flag is not set, :c:func:"
"`PyType_FromSpecWithBases` sets it automatically."
msgstr ""
"如果未设置 ``Py_TPFLAGS_HEAPTYPE`` 旗标，则 :c:func:"
"`PyType_FromSpecWithBases` 会自动设置它。"

#: ../../c-api/type.rst:163
msgid ""
"Array of :c:type:`PyType_Slot` structures. Terminated by the special slot "
"value ``{0, NULL}``."
msgstr ""
":c:type:`PyType_Slot` 结构体的数组。 以特殊槽位值 ``{0, NULL}`` 来结束。"

#: ../../c-api/type.rst:168
msgid ""
"Structure defining optional functionality of a type, containing a slot ID "
"and a value pointer."
msgstr "定义一个类型的可选功能的结构体，包含一个槽位 ID 和一个值指针。"

#: ../../c-api/type.rst:173
msgid "A slot ID."
msgstr "槽位 ID。"

#: ../../c-api/type.rst:175
msgid ""
"Slot IDs are named like the field names of the structures :c:type:"
"`PyTypeObject`, :c:type:`PyNumberMethods`, :c:type:`PySequenceMethods`, :c:"
"type:`PyMappingMethods` and :c:type:`PyAsyncMethods` with an added ``Py_`` "
"prefix. For example, use:"
msgstr ""
"槽位 ID 的类名像是结构体 :c:type:`PyTypeObject`, :c:type:`PyNumberMethods`, :"
"c:type:`PySequenceMethods`, :c:type:`PyMappingMethods` 和 :c:type:"
"`PyAsyncMethods` 的字段名附加一个 ``Py_`` 前缀。 举例来说，使用:"

#: ../../c-api/type.rst:181
msgid "``Py_tp_dealloc`` to set :c:member:`PyTypeObject.tp_dealloc`"
msgstr "``Py_tp_dealloc`` 设置 :c:member:`PyTypeObject.tp_dealloc`"

#: ../../c-api/type.rst:182
msgid "``Py_nb_add`` to set :c:member:`PyNumberMethods.nb_add`"
msgstr "``Py_nb_add`` 设置 :c:member:`PyNumberMethods.nb_add`"

#: ../../c-api/type.rst:183
msgid "``Py_sq_length`` to set :c:member:`PySequenceMethods.sq_length`"
msgstr "``Py_sq_length`` 设置 :c:member:`PySequenceMethods.sq_length`"

#: ../../c-api/type.rst:185
msgid ""
"The following fields cannot be set using :c:type:`PyType_Spec` and :c:type:"
"`PyType_Slot`:"
msgstr ""

#: ../../c-api/type.rst:187
msgid ":c:member:`~PyTypeObject.tp_dict`"
msgstr ":c:member:`~PyTypeObject.tp_dict`"

#: ../../c-api/type.rst:188
msgid ":c:member:`~PyTypeObject.tp_mro`"
msgstr ":c:member:`~PyTypeObject.tp_mro`"

#: ../../c-api/type.rst:189
msgid ":c:member:`~PyTypeObject.tp_cache`"
msgstr ":c:member:`~PyTypeObject.tp_cache`"

#: ../../c-api/type.rst:190
msgid ":c:member:`~PyTypeObject.tp_subclasses`"
msgstr ":c:member:`~PyTypeObject.tp_subclasses`"

#: ../../c-api/type.rst:191
msgid ":c:member:`~PyTypeObject.tp_weaklist`"
msgstr ":c:member:`~PyTypeObject.tp_weaklist`"

#: ../../c-api/type.rst:192
msgid ":c:member:`~PyTypeObject.tp_print`"
msgstr ""

#: ../../c-api/type.rst:193
msgid ":c:member:`~PyTypeObject.tp_weaklistoffset`"
msgstr ":c:member:`~PyTypeObject.tp_weaklistoffset`"

#: ../../c-api/type.rst:194
msgid ":c:member:`~PyTypeObject.tp_dictoffset`"
msgstr ":c:member:`~PyTypeObject.tp_dictoffset`"

#: ../../c-api/type.rst:195
msgid ":c:member:`~PyBufferProcs.bf_getbuffer`"
msgstr ":c:member:`~PyBufferProcs.bf_getbuffer`"

#: ../../c-api/type.rst:196
msgid ":c:member:`~PyBufferProcs.bf_releasebuffer`"
msgstr ":c:member:`~PyBufferProcs.bf_releasebuffer`"

#: ../../c-api/type.rst:198
msgid ""
"Setting :c:data:`Py_tp_bases` or :c:data:`Py_tp_base` may be problematic on "
"some platforms. To avoid issues, use the *bases* argument of :py:func:"
"`PyType_FromSpecWithBases` instead."
msgstr ""
"设置 :c:data:`Py_tp_bases` 或 :c:data:`Py_tp_base` 在某些平台上可能会有问"
"题。 为了避免问题，请改用 :py:func:`PyType_FromSpecWithBases` 的 *bases* 参"
"数。"

#: ../../c-api/type.rst:205
msgid ""
"The desired value of the slot. In most cases, this is a pointer to a "
"function."
msgstr "该槽位的预期值。 在大多数情况下，这将是一个指向函数的指针。"

#: ../../c-api/type.rst:208
msgid "May not be ``NULL``."
msgstr ""
