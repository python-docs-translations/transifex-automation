# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2023, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Shengjing Zhu <zsj950618@gmail.com>, 2021
# df2dc1c92e792f7ae8417c51df43db8f_594d92a <0f49be28017426edb1db1a2ab6e67088_717605>, 2021
# telnetning <telnetning@gmail.com>, 2021
# Sonny <758896823@qq.com>, 2021
# ppcfish <ppcfish@gmail.com>, 2021
# Alpha Du <alphanow@gmail.com>, 2021
# Bryan不可思议, 2023
# Freesand Leo <yuqinju@163.com>, 2023
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-11-10 14:13+0000\n"
"PO-Revision-Date: 2021-06-28 00:53+0000\n"
"Last-Translator: Freesand Leo <yuqinju@163.com>, 2023\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/"
"teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../howto/pyporting.rst:5
msgid "How to port Python 2 Code to Python 3"
msgstr "如何将 Python 2 代码移植到 Python 3"

#: ../../howto/pyporting.rst:0
msgid "author"
msgstr "作者"

#: ../../howto/pyporting.rst:7
msgid "Brett Cannon"
msgstr "Brett Cannon"

#: ../../howto/pyporting.rstNone
msgid "Abstract"
msgstr "摘要"

#: ../../howto/pyporting.rst:11
msgid ""
"Python 2 reached its official end-of-life at the start of 2020. This means "
"that no new bug reports, fixes, or changes will be made to Python 2 - it's "
"no longer supported."
msgstr ""
"Python 2 生命期在 2020 年初正式结束。 这意味着 Python 2 将不再接受新的错误报"
"告、修复或更改。"

#: ../../howto/pyporting.rst:15
msgid ""
"This guide is intended to provide you with a path to Python 3 for your code, "
"that includes compatibility with Python 2 as a first step."
msgstr ""
"本指南旨在为你的代码提供一条通往 Python 3 的路径，其中包括作为第一步的如何与 "
"Python 2 兼容。"

#: ../../howto/pyporting.rst:18
msgid ""
"If you are looking to port an extension module instead of pure Python code, "
"please see :ref:`cporting-howto`."
msgstr ""
"如果您希望迁移扩展模块而不是纯 Python 代码，请参阅 :ref:`cporting-howto`。"

#: ../../howto/pyporting.rst:21
msgid ""
"The archived python-porting_ mailing list may contain some useful guidance."
msgstr "已归档的 python-porting_ 邮件列表可能包含一些有用的指导。"

#: ../../howto/pyporting.rst:25
msgid "The Short Explanation"
msgstr "简要说明"

#: ../../howto/pyporting.rst:27
msgid ""
"To achieve Python 2/3 compatibility in a single code base, the basic steps "
"are:"
msgstr "要在单一代码库中实现 Python 2/3 兼容性，基本步骤如下："

#: ../../howto/pyporting.rst:30
msgid "Only worry about supporting Python 2.7"
msgstr "只担心支持Python 2.7的问题"

#: ../../howto/pyporting.rst:31
msgid ""
"Make sure you have good test coverage (coverage.py_ can help; ``python -m "
"pip install coverage``)"
msgstr ""
"确保你有良好的测试覆盖率（可以用 coverage.py_；``python -m pip install "
"coverage``）。"

#: ../../howto/pyporting.rst:33
msgid "Learn the differences between Python 2 and 3"
msgstr "了解 Python 2 和 Python 3 之间的区别"

#: ../../howto/pyporting.rst:34
msgid ""
"Use Futurize_ (or Modernize_) to update your code (e.g. ``python -m pip "
"install future``)"
msgstr ""
"使用 Futurize_ (或Modernize_) 来更新你的代码 (例如 ``python -m pip install "
"future``)。"

#: ../../howto/pyporting.rst:35
msgid ""
"Use Pylint_ to help make sure you don't regress on your Python 3 support "
"(``python -m pip install pylint``)"
msgstr ""
"使用 Pylint_ 来帮助确保你在Python 3支持上不倒退(``python -m pip install "
"pylint``)"

#: ../../howto/pyporting.rst:37
msgid ""
"Use caniusepython3_ to find out which of your dependencies are blocking your "
"use of Python 3 (``python -m pip install caniusepython3``)"
msgstr ""
"使用 caniusepython3_ 来找出你的哪些依赖关系阻碍了你对 Python 3 的使用 "
"(``python -m pip install caniusepython3``)"

#: ../../howto/pyporting.rst:39
msgid ""
"Once your dependencies are no longer blocking you, use continuous "
"integration to make sure you stay compatible with Python 2 and 3 (tox_ can "
"help test against multiple versions of Python; ``python -m pip install tox``)"
msgstr ""
"一旦你的依赖关系不再阻碍你，请使用持续集成来确保 Python 2 与 3 的兼容 (tox_ "
"可以帮助针对多个 Python 版本进行测试; ``python -m pip install tox``)"

#: ../../howto/pyporting.rst:42
msgid ""
"Consider using optional :term:`static type checking <static type checker>` "
"to make sure your type usage works in both Python 2 and 3 (e.g. use mypy_ to "
"check your typing under both Python 2 and Python 3; ``python -m pip install "
"mypy``)."
msgstr ""
"考虑使用可选的 :term:`静态类型检查 <static type checker>` 来确保你的类型用法"
"在 Python 2 和 3 中都能正常工作 (例如使用 mypy_ 同时在 Python 2 和 Python 3 "
"中检查你的类型标注; ``python -m pip install mypy``)。"

#: ../../howto/pyporting.rst:49
msgid ""
"Note: Using ``python -m pip install`` guarantees that the ``pip`` you invoke "
"is the one installed for the Python currently in use, whether it be a system-"
"wide ``pip`` or one installed within a :ref:`virtual environment <tut-venv>`."
msgstr ""
"注意：使用 ``python -m pip install`` 来确保你发起调用的 ``pip`` 就是当前使用"
"的 Python 所安装的那一个，无论它是系统级的 ``pip`` 还是安装在 :ref:`虚拟环境 "
"<tut-venv>` 中的。"

#: ../../howto/pyporting.rst:55
msgid "Details"
msgstr "详情"

#: ../../howto/pyporting.rst:57
msgid ""
"Even if other factors - say, dependencies over which you have no control - "
"still require you to support Python 2, that does not prevent you taking the "
"step of including Python 3 support."
msgstr ""
"即使有其他因素 —— 比如说，你无法控制的依赖关系 —— 仍然要求你支持 Python 2，也"
"不妨碍你着手包括对 Python 3 的支持。"

#: ../../howto/pyporting.rst:61
msgid ""
"Most changes required to support Python 3 lead to cleaner code using newer "
"practices even in Python 2 code."
msgstr ""
"支持 Python 3 所需的大多数更改都会使得代码更简洁，甚至在 Python 2 代码中也能"
"应用新的实践。"

#: ../../howto/pyporting.rst:66
msgid "Different versions of Python 2"
msgstr "Python 2 的不同版本"

#: ../../howto/pyporting.rst:68
msgid ""
"Ideally, your code should be compatible with Python 2.7, which was the last "
"supported version of Python 2."
msgstr ""
"在理想情况下，你的代码应当兼容 Python 2.7，这是 Python 2 最后一个受支持的版"
"本。"

#: ../../howto/pyporting.rst:71
msgid ""
"Some of the tools mentioned in this guide will not work with Python 2.6."
msgstr "本指南中提到的某些工具将不适用于 Python 2.6。"

#: ../../howto/pyporting.rst:73
msgid ""
"If absolutely necessary, the six_ project can help you support Python 2.5 "
"and 3 simultaneously. Do realize, though, that nearly all the projects "
"listed in this guide will not be available to you."
msgstr ""
"如果有绝对的必要，six_ 项目可以帮助您同时支持 Python 2.5 和 3。 但是，需要注"
"意，本指南中列出的几乎所有项目你都将无法使用。"

#: ../../howto/pyporting.rst:77
msgid ""
"If you are able to skip Python 2.5 and older, the required changes to your "
"code will be minimal. At worst you will have to use a function instead of a "
"method in some instances or have to import a function instead of using a "
"built-in one."
msgstr ""
"如果你能跳过 Python 2.5 或更早版本，那么对代码的修改将是极其微小的。 在最坏的"
"情况下你将必须使用函数来代替某些实例的方法或者必须导入函数而不是使用某个内置"
"函数。"

#: ../../howto/pyporting.rst:84
msgid ""
"Make sure you specify the proper version support in your ``setup.py`` file"
msgstr "确保你在你的 ``setup.py`` 文件中指定适当的版本支持"

#: ../../howto/pyporting.rst:86
msgid ""
"In your ``setup.py`` file you should have the proper `trove classifier`_ "
"specifying what versions of Python you support. As your project does not "
"support Python 3 yet you should at least have ``Programming Language :: "
"Python :: 2 :: Only`` specified. Ideally you should also specify each major/"
"minor version of Python that you do support, e.g. ``Programming Language :: "
"Python :: 2.7``."
msgstr ""
"在你的 ``setup.py`` 文件中，你应该有适当的 `trove classifier`_ 指定你支持哪些"
"版本的 Python。由于你的项目还不支持 Python 3，你至少应该指定 ``Programming "
"Language :: Python :: 2 :: Only``。理想情况下，你还应该指定你所支持的Python的"
"每个主要/次要版本，例如：``Programming Language :: Python :: 2.7``。."

#: ../../howto/pyporting.rst:95
msgid "Have good test coverage"
msgstr "良好的测试覆盖率"

#: ../../howto/pyporting.rst:97
msgid ""
"Once you have your code supporting the oldest version of Python 2 you want "
"it to, you will want to make sure your test suite has good coverage. A good "
"rule of thumb is that if you want to be confident enough in your test suite "
"that any failures that appear after having tools rewrite your code are "
"actual bugs in the tools and not in your code. If you want a number to aim "
"for, try to get over 80% coverage (and don't feel bad if you find it hard to "
"get better than 90% coverage). If you don't already have a tool to measure "
"test coverage then coverage.py_ is recommended."
msgstr ""
"一旦你的代码支持了你希望的Python 2的最老版本，你将希望确保你的测试套件有良好"
"的覆盖率。一个好的经验法则是，如果你想对你的测试套件有足够的信心，在让工具重"
"写你的代码后出现的任何故障都是工具中的实际错误，而不是你的代码中的错误。如果"
"你想要一个目标数字，试着获得超过80%的覆盖率（如果你发现很难获得好于90%的覆盖"
"率，也不要感到遗憾）。如果你还没有一个测量测试覆盖率的工具，那么推荐使用"
"coverage.py_。"

#: ../../howto/pyporting.rst:108
msgid "Be aware of the differences between Python 2 and 3"
msgstr "了解 Python 2 和 Python 3 之间的区别"

#: ../../howto/pyporting.rst:110
msgid ""
"Once you have your code well-tested you are ready to begin porting your code "
"to Python 3! But to fully understand how your code is going to change and "
"what you want to look out for while you code, you will want to learn what "
"changes Python 3 makes in terms of Python 2."
msgstr ""
"当你的代码经过充分的测试之后你就可以开始将代码移植到 Python 3 了！ 但是为了充"
"分理解你的代码将如何变化以及在编写代码时需要注意什么，你需要学习 Python 3 对 "
"Python 2 做了哪些改变。"

#: ../../howto/pyporting.rst:115
msgid ""
"Some resources for understanding the differences and their implications for "
"you code:"
msgstr "一些有助于理解这些差异及其对代码影响的资源："

#: ../../howto/pyporting.rst:118
msgid ""
"the :ref:`\"What's New\" <whatsnew-index>` doc for each release of Python 3"
msgstr "Python 3 每个发布版的 :ref:`“有什么新变化” <whatsnew-index>` 文档"

#: ../../howto/pyporting.rst:119
msgid "the `Porting to Python 3`_ book (which is free online)"
msgstr "`Porting to Python 3`_ 电子书（免费在线版）"

#: ../../howto/pyporting.rst:120
msgid "the handy `cheat sheet`_ from the Python-Future project."
msgstr "来自 Python-Future 项目的方便的 `cheat sheet`_。"

#: ../../howto/pyporting.rst:124
msgid "Update your code"
msgstr "更新代码"

#: ../../howto/pyporting.rst:126
msgid "There are tools available that can port your code automatically."
msgstr "有一些工具可以自动移植你的代码。"

#: ../../howto/pyporting.rst:128
msgid ""
"Futurize_ does its best to make Python 3 idioms and practices exist in "
"Python 2, e.g. backporting the ``bytes`` type from Python 3 so that you have "
"semantic parity between the major versions of Python. This is the better "
"approach for most cases."
msgstr ""
"Futurize_ 尽其所能地让 Python 3 的惯用语法和实践在 Python 2 中存在，例如从 "
"Python 3 反向移植 ``bytes`` 类型从而使 Python 的主要版本在语义上保持一致。 在"
"大多数情况下这是更好的做法。"

#: ../../howto/pyporting.rst:133
msgid ""
"Modernize_, on the other hand, is more conservative and targets a Python 2/3 "
"subset of Python, directly relying on six_ to help provide compatibility."
msgstr ""
"而在另一方面，Modernize_ 更为保守并以 Python 2/3 的 Python 子集为目标，它直接"
"依赖 six_ 来帮助提供兼容性。"

#: ../../howto/pyporting.rst:136
msgid ""
"A good approach is to run the tool over your test suite first and visually "
"inspect the diff to make sure the transformation is accurate. After you have "
"transformed your test suite and verified that all the tests still pass as "
"expected, then you can transform your application code knowing that any "
"tests which fail is a translation failure."
msgstr ""
"一个很的做法是先在测试套件上运行工具然后可视化地检查差异以确保转换准确无误。 "
"在转换测试套件并验证所有测试都能按预期通过后，你就可以转换应用程序代码了，因"
"为你知道任何测试失败都是是转译的错误。"

#: ../../howto/pyporting.rst:142
msgid ""
"Unfortunately the tools can't automate everything to make your code work "
"under Python 3, and you will also need to read the tools' documentation in "
"case some options you need are turned off by default."
msgstr ""
"不幸的是这些工具并不能自动化任何操作来使你的代码能在 Python 3 下运行，而且你"
"还需要阅读工具的文档以防某些你所需要的选项被默认关闭。"

#: ../../howto/pyporting.rst:146
msgid "Key issues to be aware of and check for:"
msgstr "需要注意和检查的关键问题："

#: ../../howto/pyporting.rst:149
msgid "Division"
msgstr "除法"

#: ../../howto/pyporting.rst:151
msgid ""
"In Python 3, ``5 / 2 == 2.5`` and not ``2`` as it was in Python 2; all "
"division between ``int`` values result in a ``float``. This change has "
"actually been planned since Python 2.2 which was released in 2002. Since "
"then users have been encouraged to add ``from __future__ import division`` "
"to any and all files which use the ``/`` and ``//`` operators or to be "
"running the interpreter with the ``-Q`` flag. If you have not been doing "
"this then you will need to go through your code and do two things:"
msgstr ""
"在 Python 3 中，``5 / 2 == 2.5`` 而不是 Python 2 中 ``2``；所有 ``int`` 值之"
"间的除法都会得到一个 ``float`` 值。 这个变化实际上从 2002 年发布的 Python "
"2.2 就已经计划好了。 从那时起我们就鼓励用户在所有使用 ``/`` 和 ``//`` 运算符"
"的文件中添加 ``from __future__ import division``，或者附带 ``-Q`` 旗标运行解"
"释器。 如果你没有这样做，那么你需要检查你的代码并做两件事："

#: ../../howto/pyporting.rst:159
msgid "Add ``from __future__ import division`` to your files"
msgstr "添加 ``from __future__ import division`` 到你的文件。"

#: ../../howto/pyporting.rst:160
msgid ""
"Update any division operator as necessary to either use ``//`` to use floor "
"division or continue using ``/`` and expect a float"
msgstr ""
"根据需要更新任何除法运算符，要么使用 ``//`` 来使用向下取整除法，要么继续使用 "
"``/`` 并得到一个浮点数"

#: ../../howto/pyporting.rst:163
msgid ""
"The reason that ``/`` isn't simply translated to ``//`` automatically is "
"that if an object defines a ``__truediv__`` method but not ``__floordiv__`` "
"then your code would begin to fail (e.g. a user-defined class that uses ``/"
"`` to signify some operation but not ``//`` for the same thing or at all)."
msgstr ""
"之所以没有简单地将 ``/`` 自动翻译成 ``//``，是因为如果一个对象定义了一个 "
"``__truediv__`` 方法，但没有定义 ``__floordiv__``，那么你的代码就会运行失败"
"（例如，一个用户定义的类用 ``/`` 来表示一些操作，但没有用 ``//`` 来表示同样的"
"事情或根本没有定义）。"

#: ../../howto/pyporting.rst:170
msgid "Text versus binary data"
msgstr "文本与二进制数据"

#: ../../howto/pyporting.rst:172
msgid ""
"In Python 2 you could use the ``str`` type for both text and binary data. "
"Unfortunately this confluence of two different concepts could lead to "
"brittle code which sometimes worked for either kind of data, sometimes not. "
"It also could lead to confusing APIs if people didn't explicitly state that "
"something that accepted ``str`` accepted either text or binary data instead "
"of one specific type. This complicated the situation especially for anyone "
"supporting multiple languages as APIs wouldn't bother explicitly supporting "
"``unicode`` when they claimed text data support."
msgstr ""
"在Python 2中，你可以对文本和二进制数据都使用 ``str``类型。不幸的是，这两个不"
"同概念的融合可能会导致脆弱的代码，有时对任何一种数据都有效，有时则无效。如果"
"人们没有明确说明某种接受``str``东西可以接受文本或二进制数据，而不是一种特定的"
"类型，这也会导致API的混乱。这使情况变得复杂，特别是对于任何支持多种语言的人来"
"说，因为API在声称支持文本数据时不会显式支持``unicode``。"

#: ../../howto/pyporting.rst:181
msgid ""
"Python 3 made text and binary data distinct types that cannot simply be "
"mixed together. For any code that deals only with text or only binary data, "
"this separation doesn't pose an issue. But for code that has to deal with "
"both, it does mean you might have to now care about when you are using text "
"compared to binary data, which is why this cannot be entirely automated."
msgstr ""
"Python 3 将文本和二进制数据区分为不同的类型而不能简单地混合在一起。 对于任何"
"只处理文本或二进制数据的代码来说，这种区分并不构成问题。 但对于必须同时处理这"
"两者的代码来说，这就意味着你现在可能必须关注何时使用文本而不是二进制数据，这"
"也是为什么这无法完全自动化地操作。"

#: ../../howto/pyporting.rst:187
msgid ""
"Decide which APIs take text and which take binary (it is **highly** "
"recommended you don't design APIs that can take both due to the difficulty "
"of keeping the code working; as stated earlier it is difficult to do well). "
"In Python 2 this means making sure the APIs that take text can work with "
"``unicode`` and those that work with binary data work with the ``bytes`` "
"type from Python 3 (which is a subset of ``str`` in Python 2 and acts as an "
"alias for ``bytes`` type in Python 2). Usually the biggest issue is "
"realizing which methods exist on which types in Python 2 and 3 "
"simultaneously (for text that's ``unicode`` in Python 2 and ``str`` in "
"Python 3, for binary that's ``str``/``bytes`` in Python 2 and ``bytes`` in "
"Python 3)."
msgstr ""
"决定哪些 API 接受文本而哪些接受二进制数据 (**强烈** 建议不要设计同时接受这两"
"种数据的 API 因为这很难保证代码正常工作；如前所述这一点是很难做好的)。 在 "
"Python 2 中这意味着要确保处理文本的 API 可以使用 ``unicode`` 而处理二进制数据"
"的 API 可以使用来自 Python 3 的 ``bytes`` 类型 (它是 Python 2 中 ``str`` 的子"
"集并被作为 Python 2 中 ``bytes`` 类型的别名)。 通常最大的问题是要意识到哪些方"
"法在 Python 2 和 Python 3 的哪些类型中同时存在 (对于文本来说在 Python 2 中是 "
"``unicode`` 而在 Python 3 中则是 ``str``，对于二进制数据来说在 Python 2 中是 "
"``str``/``bytes`` 而在 Python 3 中则是 ``bytes``)。"

#: ../../howto/pyporting.rst:198
msgid ""
"The following table lists the **unique** methods of each data type across "
"Python 2 and 3 (e.g., the ``decode()`` method is usable on the equivalent "
"binary data type in either Python 2 or 3, but it can't be used by the "
"textual data type consistently between Python 2 and 3 because ``str`` in "
"Python 3 doesn't have the method). Do note that as of Python 3.5 the "
"``__mod__`` method was added to the bytes type."
msgstr ""
"下表列出了每种数据类型在 Python 2 和 3 中的 **特有** 方法（例如，"
"``decode()`` 方法在 Python 2 或 3 中都可用于等价的二进制数据类型，但文本数据"
"类型无法在 Python 2 和 3 之间以一致的方式使用它因为 Python 3 中的 ``str`` 没"
"有该方法）。 请注意从 Python 3.5 起 bytes 类型增加了 ``__mod__`` 方法。"

#: ../../howto/pyporting.rst:206
msgid "**Text data**"
msgstr "**文本数据**"

#: ../../howto/pyporting.rst:206
msgid "**Binary data**"
msgstr "**二进制数据**"

#: ../../howto/pyporting.rst:208
msgid "\\"
msgstr "\\"

#: ../../howto/pyporting.rst:208
msgid "decode"
msgstr "decode"

#: ../../howto/pyporting.rst:210
msgid "encode"
msgstr "encode"

#: ../../howto/pyporting.rst:212
msgid "format"
msgstr "format"

#: ../../howto/pyporting.rst:214
msgid "isdecimal"
msgstr "isdecimal"

#: ../../howto/pyporting.rst:216
msgid "isnumeric"
msgstr "isnumeric"

#: ../../howto/pyporting.rst:219
msgid ""
"Making the distinction easier to handle can be accomplished by encoding and "
"decoding between binary data and text at the edge of your code. This means "
"that when you receive text in binary data, you should immediately decode it. "
"And if your code needs to send text as binary data then encode it as late as "
"possible. This allows your code to work with only text internally and thus "
"eliminates having to keep track of what type of data you are working with."
msgstr ""
"通过在你的代码边缘对二进制数据和文本进行编码和解码，可以使这种区分更容易处"
"理。这意味着，当你收到二进制数据的文本时，你应该立即对其进行解码。而如果你的"
"代码需要将文本作为二进制数据发送，那么就尽可能晚地对其进行编码。这使得你的代"
"码在内部只与文本打交道，从而不必再去跟踪你所处理的数据类型。"

#: ../../howto/pyporting.rst:226
msgid ""
"The next issue is making sure you know whether the string literals in your "
"code represent text or binary data. You should add a ``b`` prefix to any "
"literal that presents binary data. For text you should add a ``u`` prefix to "
"the text literal. (There is a :mod:`__future__` import to force all "
"unspecified literals to be Unicode, but usage has shown it isn't as "
"effective as adding a ``b`` or ``u`` prefix to all literals explicitly)"
msgstr ""
"下一个问题是确保你知道你的代码中的字符串字面值是代表文本还是二进制数据。 你应"
"当给任何代表二进制数据的字面值添加 ``b`` 前缀。 对于文本则应当给文本字面值添"
"加 ``u`` 前缀。 （有一个 :mod:`__future__` 导入可以强制所有未指定前缀的字面值"
"为 Unicode，但实际使用情况表明它并不像给所有字面值显式地添加 ``b`` 或 ``u`` "
"前缀那样有效）。"

#: ../../howto/pyporting.rst:233
msgid ""
"You also need to be careful about opening files. Possibly you have not "
"always bothered to add the ``b`` mode when opening a binary file (e.g., "
"``rb`` for binary reading).  Under Python 3, binary files and text files are "
"clearly distinct and mutually incompatible; see the :mod:`io` module for "
"details. Therefore, you **must** make a decision of whether a file will be "
"used for binary access (allowing binary data to be read and/or written) or "
"textual access (allowing text data to be read and/or written). You should "
"also use :func:`io.open` for opening files instead of the built-in :func:"
"`open` function as the :mod:`io` module is consistent from Python 2 to 3 "
"while the built-in :func:`open` function is not (in Python 3 it's actually :"
"func:`io.open`). Do not bother with the outdated practice of using :func:"
"`codecs.open` as that's only necessary for keeping compatibility with Python "
"2.5."
msgstr ""
"对于打开文件你也需要小心。 在打开二进制文件时你可能并不总是会特意添加 ``b`` "
"模式 (例如，``rb`` 表示二进制读取)。 在 Python 3 中，二进制文件和文本文件是截"
"然不同且互不兼容的；详情参见 :mod:`io` 模块。 因此，你 **必须** 决定一个文件"
"要用于二进制访问 (允许读取和/或写入二进制数据) 还是文本访问 (允许读取和/或写"
"入文本数据)。 你还应当使用 :func:`io.open` 来打开文件而不是使用内置的 :func:"
"`open` 函数因为 :mod:`io` 模块从 Python 2 到 3 是保持一致的而内置的 :func:"
"`open` 函数并非如此 (在 Python 3 中它实际上是 :func:`io.open`)。 请不要使用 :"
"func:`codecs.open` 这种过时的做法因为它仅在保持与 Python 2.5 的兼容时才是必要"
"的。"

#: ../../howto/pyporting.rst:246
msgid ""
"The constructors of both ``str`` and ``bytes`` have different semantics for "
"the same arguments between Python 2 and 3. Passing an integer to ``bytes`` "
"in Python 2 will give you the string representation of the integer: "
"``bytes(3) == '3'``. But in Python 3, an integer argument to ``bytes`` will "
"give you a bytes object as long as the integer specified, filled with null "
"bytes: ``bytes(3) == b'\\x00\\x00\\x00'``. A similar worry is necessary when "
"passing a bytes object to ``str``. In Python 2 you just get the bytes object "
"back: ``str(b'3') == b'3'``. But in Python 3 you get the string "
"representation of the bytes object: ``str(b'3') == \"b'3'\"``."
msgstr ""
"``str`` 和 ``bytes`` 的构造器在 Python 2 和 3 中对相同的参数有不同的语义。 "
"在 Python 2 中，向 ``bytes`` 传入一个整数会得到该整数的字符串表示形式: "
"``bytes(3) == '3'``。 但在 Python 3 中，向 ``bytes`` 传入一个整数参数则会得到"
"一个该整数所指定的长度的字节对象，并空字节填充: ``bytes(3) == "
"b'\\x00\\x00\\x00'``。 当向 ``str`` 传入字节串对象时也同样需要注意。 在 "
"Python 2 中你只是得到该字节串对象: ``str(b'3') == b'3'``。 但在 Python 3 中你"
"将得到该字节串对象的字符串表示形式: ``str(b'3') == \"b'3'\"``。"

#: ../../howto/pyporting.rst:256
msgid ""
"Finally, the indexing of binary data requires careful handling (slicing does "
"**not** require any special handling). In Python 2, ``b'123'[1] == b'2'`` "
"while in Python 3 ``b'123'[1] == 50``. Because binary data is simply a "
"collection of binary numbers, Python 3 returns the integer value for the "
"byte you index on. But in Python 2 because ``bytes == str``, indexing "
"returns a one-item slice of bytes. The six_ project has a function named "
"``six.indexbytes()`` which will return an integer like in Python 3: ``six."
"indexbytes(b'123', 1)``."
msgstr ""
"最后，二进制数据的索引需要仔细处理（切片 **不需要** 任何特殊处理）。在 "
"Python 2 中 ``b'123'[1] == b'2'``，而在 Python 3 中 ``b'123'[1] == 50``。 因"
"为二进制数据只是二进制数的集合，Python 3 会返回你索引的字节的整数值。 但是在 "
"Python 2 中，因为 ``bytes == str``，索引会返回一个单项的字节片断。 six_ 项目"
"有一个名为 ``six.indexbytes()`` 的函数，它将像在 Python 3 中一样返回一个整"
"数: ``six.indexbytes(b'123', 1)``。"

#: ../../howto/pyporting.rst:265
msgid "To summarize:"
msgstr "总结一下："

#: ../../howto/pyporting.rst:267
msgid "Decide which of your APIs take text and which take binary data"
msgstr "决定你的API中哪些采用文本，哪些采用二进制数据"

#: ../../howto/pyporting.rst:268
msgid ""
"Make sure that your code that works with text also works with ``unicode`` "
"and code for binary data works with ``bytes`` in Python 2 (see the table "
"above for what methods you cannot use for each type)"
msgstr ""
"确保你对文本工作的代码也能对 ``unicode`` 工作，对二进制数据的代码在Python 2中"
"能对 ``bytes`` 工作（关于每种类型不能使用的方法，见上表）。"

#: ../../howto/pyporting.rst:271
msgid ""
"Mark all binary literals with a ``b`` prefix, textual literals with a ``u`` "
"prefix"
msgstr "用 ``b`` 前缀标记所有二进制字词，用 ``u`` 前缀标记文本字词"

#: ../../howto/pyporting.rst:273
msgid ""
"Decode binary data to text as soon as possible, encode text as binary data "
"as late as possible"
msgstr "尽快将二进制数据解码为文本，尽可能晚地将文本编码为二进制数据"

#: ../../howto/pyporting.rst:275
msgid ""
"Open files using :func:`io.open` and make sure to specify the ``b`` mode "
"when appropriate"
msgstr "使用 :func:`io.open` 打开文件，并确保在适当时候指定 ``b`` 模式。"

#: ../../howto/pyporting.rst:277
msgid "Be careful when indexing into binary data"
msgstr "在对二进制数据进行索引时要小心"

#: ../../howto/pyporting.rst:281
msgid "Use feature detection instead of version detection"
msgstr "使用特征检测而不是版本检测"

#: ../../howto/pyporting.rst:283
msgid ""
"Inevitably you will have code that has to choose what to do based on what "
"version of Python is running. The best way to do this is with feature "
"detection of whether the version of Python you're running under supports "
"what you need. If for some reason that doesn't work then you should make the "
"version check be against Python 2 and not Python 3. To help explain this, "
"let's look at an example."
msgstr ""
"你不可避免地会有一些代码需要根据运行的 Python 版本来选择要做什么。做到这一点"
"的最好方法是对你运行的 Python 版本是否支持你所需要的东西进行特征检测。如果由"
"于某种原因这不起作用，那么你应该让版本检测针对 Python 2 而不是 Python 3。为了"
"帮助解释这个问题，让我们看一个例子。"

#: ../../howto/pyporting.rst:290
msgid ""
"Let's pretend that you need access to a feature of :mod:`importlib` that is "
"available in Python's standard library since Python 3.3 and available for "
"Python 2 through importlib2_ on PyPI. You might be tempted to write code to "
"access e.g. the :mod:`importlib.abc` module by doing the following::"
msgstr ""
"假设你需要访问 :mod:`importlib` 的一个功能，该功能自Python 3.3开始在Python的"
"标准库中提供，并且通过PyPI上的 importlib2_ 提供给Python 2。你可能会想写代码来"
"访问例如 :mod:`importlib.abc` 模块，方法如下::"

#: ../../howto/pyporting.rst:302
msgid ""
"The problem with this code is what happens when Python 4 comes out? It would "
"be better to treat Python 2 as the exceptional case instead of Python 3 and "
"assume that future Python versions will be more compatible with Python 3 "
"than Python 2::"
msgstr ""
"这段代码的问题是，当Python 4出来的时候会发生什么？最好是将Python 2作为例外情"
"况，而不是Python 3，并假设未来的Python版本与Python 3的兼容性比Python 2更强::"

#: ../../howto/pyporting.rst:314
msgid ""
"The best solution, though, is to do no version detection at all and instead "
"rely on feature detection. That avoids any potential issues of getting the "
"version detection wrong and helps keep you future-compatible::"
msgstr ""
"不过，最好的解决办法是根本不做版本检测，而是依靠特征检测。这就避免了任何潜在"
"的版本检测错误的问题，并有助于保持你对未来的兼容::"

#: ../../howto/pyporting.rst:325
msgid "Prevent compatibility regressions"
msgstr "防止兼容性退步"

#: ../../howto/pyporting.rst:327
msgid ""
"Once you have fully translated your code to be compatible with Python 3, you "
"will want to make sure your code doesn't regress and stop working under "
"Python 3. This is especially true if you have a dependency which is blocking "
"you from actually running under Python 3 at the moment."
msgstr ""
"一旦你完全翻译了你的代码，使之与 Python 3 兼容，你将希望确保你的代码不会退"
"步，不会在 Python 3上停止工作。如果你有一个依赖关系阻碍了你目前在Python 3上的"
"实际运行，那就更是如此了。"

#: ../../howto/pyporting.rst:332
msgid ""
"To help with staying compatible, any new modules you create should have at "
"least the following block of code at the top of it::"
msgstr "为了帮助保持兼容，你创建的任何新模块都应该在其顶部至少有以下代码块::"

#: ../../howto/pyporting.rst:339
msgid ""
"You can also run Python 2 with the ``-3`` flag to be warned about various "
"compatibility issues your code triggers during execution. If you turn "
"warnings into errors with ``-Werror`` then you can make sure that you don't "
"accidentally miss a warning."
msgstr ""
"你也可以在运行Python 2时使用 ``-3`` 标志，对你的代码在执行过程中引发的各种兼"
"容性问题进行警告。如果你用 ``-Werror`` 把警告变成错误，那么你可以确保你不会意"
"外地错过一个警告。"

#: ../../howto/pyporting.rst:344
msgid ""
"You can also use the Pylint_ project and its ``--py3k`` flag to lint your "
"code to receive warnings when your code begins to deviate from Python 3 "
"compatibility. This also prevents you from having to run Modernize_ or "
"Futurize_ over your code regularly to catch compatibility regressions. This "
"does require you only support Python 2.7 and Python 3.4 or newer as that is "
"Pylint's minimum Python version support."
msgstr ""
"你也可以使用 Pylint_ 项目和它的 ``--py3k`` 标志来提示你的代码，当你的代码开始"
"偏离 Python 3 的兼容性时，就会收到警告。这也避免了你不得不定期在你的代码上运"
"行 Modernize_ 或 Futurize_ 来捕捉兼容性的退步。这确实要求你只支持Python 2.7和"
"Python 3.4或更新的版本，因为这是Pylint支持的最小Python版本。"

#: ../../howto/pyporting.rst:353
msgid "Check which dependencies block your transition"
msgstr "检查哪些依赖性会阻碍你的过渡"

#: ../../howto/pyporting.rst:355
msgid ""
"**After** you have made your code compatible with Python 3 you should begin "
"to care about whether your dependencies have also been ported. The "
"caniusepython3_ project was created to help you determine which projects -- "
"directly or indirectly -- are blocking you from supporting Python 3. There "
"is both a command-line tool as well as a web interface at https://"
"caniusepython3.com."
msgstr ""
"在你使你的代码与 Python 3 兼容**之后**，你应该开始关心你的依赖关系是否也被移"
"植了。 caniusepython3_ 项目的建立是为了帮助你确定哪些项目——直接或间接地——阻碍"
"了你对Python 3的支持。它既有一个命令行工具，也有一个在 https://"
"caniusepython3.com 的网页界面。"

#: ../../howto/pyporting.rst:362
msgid ""
"The project also provides code which you can integrate into your test suite "
"so that you will have a failing test when you no longer have dependencies "
"blocking you from using Python 3. This allows you to avoid having to "
"manually check your dependencies and to be notified quickly when you can "
"start running on Python 3."
msgstr ""
"该项目还提供了一些代码，你可以将其集成到你的测试套件中，这样，当你不再有依赖"
"关系阻碍你使用Python 3时，你将有一个失败的测试。这使你不必手动检查你的依赖"
"性，并在你可以开始在Python 3上运行时迅速得到通知。"

#: ../../howto/pyporting.rst:369
msgid "Update your ``setup.py`` file to denote Python 3 compatibility"
msgstr "更新你的 ``setup.py`` 文件以表示对Python 3的兼容"

#: ../../howto/pyporting.rst:371
msgid ""
"Once your code works under Python 3, you should update the classifiers in "
"your ``setup.py`` to contain ``Programming Language :: Python :: 3`` and to "
"not specify sole Python 2 support. This will tell anyone using your code "
"that you support Python 2 **and** 3. Ideally you will also want to add "
"classifiers for each major/minor version of Python you now support."
msgstr ""
"一旦你的代码在 Python 3 下工作，你应该更新你 ``setup.py`` 中的分类器，使其包"
"含 ``Programming Language :: Python :: 3`` 并不指定单独的 Python 2 支持。这将"
"告诉使用你的代码的人，你支持Python 2 **和** 3。理想情况下，你也希望为你现在支"
"持的Python的每个主要/次要版本添加分类器。"

#: ../../howto/pyporting.rst:379
msgid "Use continuous integration to stay compatible"
msgstr "使用持续集成以保持兼容"

#: ../../howto/pyporting.rst:381
msgid ""
"Once you are able to fully run under Python 3 you will want to make sure "
"your code always works under both Python 2 and 3. Probably the best tool for "
"running your tests under multiple Python interpreters is tox_. You can then "
"integrate tox with your continuous integration system so that you never "
"accidentally break Python 2 or 3 support."
msgstr ""
"一旦你能够完全在 Python 3 下运行，你将会希望确保你的代码在 Python 2 和 3 下总"
"是能够正常工作。 在多个 Python 解释器下运行测试的最佳工具可能就是 tox_。 然后"
"你可以将 tox 集成到你的持续集成系统中，这样你就不会意外地破坏对 Python 2 或 "
"3 的支持。"

#: ../../howto/pyporting.rst:387
msgid ""
"You may also want to use the ``-bb`` flag with the Python 3 interpreter to "
"trigger an exception when you are comparing bytes to strings or bytes to an "
"int (the latter is available starting in Python 3.5). By default type-"
"differing comparisons simply return ``False``, but if you made a mistake in "
"your separation of text/binary data handling or indexing on bytes you "
"wouldn't easily find the mistake. This flag will raise an exception when "
"these kinds of comparisons occur, making the mistake much easier to track "
"down."
msgstr ""
"你可能还想在 Python 3 解释器中使用 ``-bb``标志，以便在你将bytes与string或"
"bytes与int进行比较时触发一个异常（后者从 Python 3.5 开始可用）。默认情况下，"
"类型不同的比较只是简单地返回``False``，但是如果你在文本/二进制数据处理或字节"
"的索引分离中犯了一个错误，你就不容易发现这个错误。当这些类型的比较发生时，这"
"个标志会触发一个异常，使错误更容易被发现。"

#: ../../howto/pyporting.rst:397
msgid "Consider using optional static type checking"
msgstr "考虑使用可选的静态类型检查"

#: ../../howto/pyporting.rst:399
msgid ""
"Another way to help port your code is to use a :term:`static type checker` "
"like mypy_ or pytype_ on your code. These tools can be used to analyze your "
"code as if it's being run under Python 2, then you can run the tool a second "
"time as if your code is running under Python 3. By running a static type "
"checker twice like this you can discover if you're e.g. misusing binary data "
"type in one version of Python compared to another. If you add optional type "
"hints to your code you can also explicitly state whether your APIs use "
"textual or binary data, helping to make sure everything functions as "
"expected in both versions of Python."
msgstr ""
