# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2023, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Kade For, 2019
# 汪心禾 <wangxinhe06@gmail.com>, 2019
# ww song <sww4718168@gmail.com>, 2019
# eric R <trencyclopedia@gmail.com>, 2019
# df2dc1c92e792f7ae8417c51df43db8f_594d92a <0f49be28017426edb1db1a2ab6e67088_717605>, 2019
# 钢 彭 <szhairui@gmail.com>, 2019
# Yi Cao <1783250036@qq.com>, 2019
# Shengjing Zhu <zsj950618@gmail.com>, 2019
# Jiuh-star <jiuh.star@gmail.com>, 2021
# Dai Xu <daixu61@hotmail.com>, 2021
# Freesand Leo <yuqinju@163.com>, 2021
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-06-02 14:49+0000\n"
"PO-Revision-Date: 2019-09-01 03:37+0000\n"
"Last-Translator: Freesand Leo <yuqinju@163.com>, 2021\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/howto/urllib2.rst:5
msgid "HOWTO Fetch Internet Resources Using The urllib Package"
msgstr "HOWTO 使用 urllib 包获取网络资源"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/howto/urllib2.rst:0
msgid "Author"
msgstr "作者"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/howto/urllib2.rst:7
msgid "`Michael Foord <http://www.voidspace.org.uk/python/index.shtml>`_"
msgstr "`Michael Foord <http://www.voidspace.org.uk/python/index.shtml>`_"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/howto/urllib2.rst:11
msgid ""
"There is a French translation of an earlier revision of this HOWTO, "
"available at `urllib2 - Le Manuel manquant "
"<http://www.voidspace.org.uk/python/articles/urllib2_francais.shtml>`_."
msgstr ""
"这份 HOWTO 文档的早期版本有一份法语的译文，可在 `urllib2 - Le Manuel manquant "
"<http://www.voidspace.org.uk/python/articles/urllib2_francais.shtml>`_ 处查阅。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/howto/urllib2.rst:18
msgid "Introduction"
msgstr "概述"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/howto/urllib2.rst:22
msgid ""
"You may also find useful the following article on fetching web resources "
"with Python:"
msgstr "关于使用 Python 获取网页资源，你或许还可以找到下列有用的文章："

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/howto/urllib2.rst:25
msgid ""
"`Basic Authentication "
"<http://www.voidspace.org.uk/python/articles/authentication.shtml>`_"
msgstr ""
"`基本的验证 <http://www.voidspace.org.uk/python/articles/authentication.shtml>`_"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/howto/urllib2.rst:27
msgid "A tutorial on *Basic Authentication*, with examples in Python."
msgstr "关于 *基本的验证* 的入门指南，带有一些 Python 的示例。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/howto/urllib2.rst:29
msgid ""
"**urllib.request** is a Python module for fetching URLs (Uniform Resource "
"Locators). It offers a very simple interface, in the form of the *urlopen* "
"function. This is capable of fetching URLs using a variety of different "
"protocols. It also offers a slightly more complex interface for handling "
"common situations - like basic authentication, cookies, proxies and so on. "
"These are provided by objects called handlers and openers."
msgstr ""
"**urllib.request** 是一个用于获取 URL （统一资源定位地址）的 Python 模块。它以 *urlopen* "
"函数的形式提供了一个非常简单的接口。该接口能够使用不同的协议获取 "
"URL。同时它也提供了一个略微复杂的接口来处理常见情形——如：基本验证、cookies、代理等等。这些功能是通过叫做 handlers 和 opener"
" 的对象来提供的。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/howto/urllib2.rst:36
msgid ""
"urllib.request supports fetching URLs for many \"URL schemes\" (identified "
"by the string before the ``\":\"`` in URL - for example ``\"ftp\"`` is the "
"URL scheme of ``\"ftp://python.org/\"``) using their associated network "
"protocols (e.g. FTP, HTTP). This tutorial focuses on the most common case, "
"HTTP."
msgstr ""
"urllib.request 支持多种  \"URL 网址方案\" （通过 URL中 ``\":\"`` 之前的字符串加以区分——如 URL 地址 "
"``\"ftp://python.org/\"` 中的 ``\"ftp\"```） ，使用与之相关的网络协议（如：FTP、 HTTP）来获取 URL "
"资源。本指南重点关注最常用的情形—— HTTP。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/howto/urllib2.rst:41
msgid ""
"For straightforward situations *urlopen* is very easy to use. But as soon as"
" you encounter errors or non-trivial cases when opening HTTP URLs, you will "
"need some understanding of the HyperText Transfer Protocol. The most "
"comprehensive and authoritative reference to HTTP is :rfc:`2616`. This is a "
"technical document and not intended to be easy to read. This HOWTO aims to "
"illustrate using *urllib*, with enough detail about HTTP to help you "
"through. It is not intended to replace the :mod:`urllib.request` docs, but "
"is supplementary to them."
msgstr ""
"对于简单场景而言， *urlopen* 用起来十分容易。但只要在打开 HTTP URL "
"时遇到错误或非常情况，就需要对超文本传输协议有所了解才行。最全面、最权威的 HTTP 参考是 :rfc:`2616` "
"。那是一份技术文档，并没有追求可读性。本 文旨在说明 *urllib* 的用法，为了便于阅读也附带了足够详细的 HTTP 信息。本文并不是为了替代 "
":mod:`urllib.request` 文档，只是其补充说明而已。 "

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/howto/urllib2.rst:51
msgid "Fetching URLs"
msgstr "提取URL"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/howto/urllib2.rst:53
msgid "The simplest way to use urllib.request is as follows::"
msgstr "下面是使用 urllib.request 最简单的方式："

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/howto/urllib2.rst:59
msgid ""
"If you wish to retrieve a resource via URL and store it in a temporary "
"location, you can do so via the :func:`shutil.copyfileobj` and "
":func:`tempfile.NamedTemporaryFile` functions::"
msgstr ""
"如果你想通过 URL 获取资源并保存某个临时的地方，你可以通过 :func:`shutil.copyfileobj` 和 "
":func:`tempfile.NamedTemporaryFile` 函数::"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/howto/urllib2.rst:74
msgid ""
"Many uses of urllib will be that simple (note that instead of an 'http:' URL"
" we could have used a URL starting with 'ftp:', 'file:', etc.).  However, "
"it's the purpose of this tutorial to explain the more complicated cases, "
"concentrating on HTTP."
msgstr ""
"urllib很易于使用（注意URL不仅仅可以以'http:'开头，也可以是'ftp:'，'file:'等）。但是，这篇教程的目的是介绍更加复杂的用法，大多数是以HTTP举例。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/howto/urllib2.rst:79
msgid ""
"HTTP is based on requests and responses - the client makes requests and "
"servers send responses. urllib.request mirrors this with a ``Request`` "
"object which represents the HTTP request you are making. In its simplest "
"form you create a Request object that specifies the URL you want to fetch. "
"Calling ``urlopen`` with this Request object returns a response object for "
"the URL requested. This response is a file-like object, which means you can "
"for example call ``.read()`` on the response::"
msgstr ""
"HTTP基于请求和回应——客户端像服务器请求，服务器回应。urllib.request将你的HTTP请求保存为一个``Request``对象。在最简单的情况下，一个Request对象里包含你所请求的特定URL。以当前的Request对象作为参数调用``urlopen``返回服务器对你正在请求的URL的回应。回应是个文件类对象，所以你可以调用如``.read()``等命令。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/howto/urllib2.rst:93
msgid ""
"Note that urllib.request makes use of the same Request interface to handle "
"all URL schemes.  For example, you can make an FTP request like so::"
msgstr "注意urllib.request中的Request接口也支持处理所有的协议。比如，你可以像这样做一个 FTP 请求："

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/howto/urllib2.rst:98
msgid ""
"In the case of HTTP, there are two extra things that Request objects allow "
"you to do: First, you can pass data to be sent to the server.  Second, you "
"can pass extra information (\"metadata\") *about* the data or the about "
"request itself, to the server - this information is sent as HTTP "
"\"headers\".  Let's look at each of these in turn."
msgstr ""
"在 HTTP 的情况下，Request 对象允许你做两件额外的事：一，你可以向服务器发送数据。二，你可以向服务器发送额外的信息（“元数据”）： *关于*"
" 数据或请求本身的。信息将以“HTTP头”的方式发过去。让我们一个个看过去。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/howto/urllib2.rst:105
msgid "Data"
msgstr "数据"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/howto/urllib2.rst:107
msgid ""
"Sometimes you want to send data to a URL (often the URL will refer to a CGI "
"(Common Gateway Interface) script or other web application). With HTTP, this"
" is often done using what's known as a **POST** request. This is often what "
"your browser does when you submit a HTML form that you filled in on the web."
" Not all POSTs have to come from forms: you can use a POST to transmit "
"arbitrary data to your own application. In the common case of HTML forms, "
"the data needs to be encoded in a standard way, and then passed to the "
"Request object as the ``data`` argument. The encoding is done using a "
"function from the :mod:`urllib.parse` library. ::"
msgstr ""
"有时候你想要给一个 URL 发送数据（通常这个URL指向一个CGI（通用网关接口）脚本或者其他 web 应用）。 对于 HTTP，这通常使用一个 "
"**POST** 请求来完成。 比如在浏览器上提交一个 HTML 表单。 但并不是所有的 POST 都来自表单：你能使用一个 POST "
"来传输任何数据到你自己的应用上。 在使用常见的 HTML 表单的情况下，数据需要以标准的方式编码，然后再作为 ``data`` 参数传给 Request"
" 对象。 编码需要使用一个来自 :mod:`urllib.parse` 库的函数。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/howto/urllib2.rst:131
msgid ""
"Note that other encodings are sometimes required (e.g. for file upload from "
"HTML forms - see `HTML Specification, Form Submission "
"<https://www.w3.org/TR/REC-html40/interact/forms.html#h-17.13>`_ for more "
"details)."
msgstr ""
"请注意，有时还需要采用其他编码，比如由 HTML 表单上传文件——更多细节请参见 `HTML 规范，提交表单 "
"<https://www.w3.org/TR/REC-html40/interact/forms.html#h-17.13>`_ 。 "

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/howto/urllib2.rst:136
msgid ""
"If you do not pass the ``data`` argument, urllib uses a **GET** request. One"
" way in which GET and POST requests differ is that POST requests often have "
"\"side-effects\": they change the state of the system in some way (for "
"example by placing an order with the website for a hundredweight of tinned "
"spam to be delivered to your door).  Though the HTTP standard makes it clear"
" that POSTs are intended to *always* cause side-effects, and GET requests "
"*never* to cause side-effects, nothing prevents a GET request from having "
"side-effects, nor a POST requests from having no side-effects. Data can also"
" be passed in an HTTP GET request by encoding it in the URL itself."
msgstr ""
"如果不传递 ``data`` 参数，urllib 将采用 **GET** 请求。GET 和 POST 请求有一点不同，POST "
"请求往往具有“副作用”，他们会以某种方式改变系统的状态。例如，从网站下一个订单，购买一大堆罐装垃圾并运送到家。 尽管 HTTP 标准明确指出 POST "
"*总是* 要导致副作用，而 GET 请求 *从来不会* 导致副作用。但没有什么办法能阻止 GET 和 POST 请求的副作用。数据也可以在 HTTP "
"GET 请求中传递，只要把数据编码到 URL 中即可。 "

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/howto/urllib2.rst:146
msgid "This is done as follows::"
msgstr "具体操作如下::"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/howto/urllib2.rst:161
msgid ""
"Notice that the full URL is created by adding a ``?`` to the URL, followed "
"by the encoded values."
msgstr "请注意，完整的 URL 是通过在其中添加 ``?`` 创建的，后面跟着经过编码的数据。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/howto/urllib2.rst:165
msgid "Headers"
msgstr "HTTP 头部信息"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/howto/urllib2.rst:167
msgid ""
"We'll discuss here one particular HTTP header, to illustrate how to add "
"headers to your HTTP request."
msgstr "下面介绍一个具体的 HTTP 头部信息，以此说明如何在 HTTP 请求加入头部信息。 "

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/howto/urllib2.rst:170
msgid ""
"Some websites [#]_ dislike being browsed by programs, or send different "
"versions to different browsers [#]_. By default urllib identifies itself as "
"``Python-urllib/x.y`` (where ``x`` and ``y`` are the major and minor version"
" numbers of the Python release, e.g. ``Python-urllib/2.5``), which may "
"confuse the site, or just plain not work. The way a browser identifies "
"itself is through the ``User-Agent`` header [#]_. When you create a Request "
"object you can pass a dictionary of headers in. The following example makes "
"the same request as above, but identifies itself as a version of Internet "
"Explorer [#]_. ::"
msgstr ""
"有些网站 [#]_ 不愿被程序浏览到，或者要向不同的浏览器发送不同版本 [#]_ 的网页。默认情况下，urllib 将自身标识为“Python-"
"urllib/xy”（其中 ``x`` 、 ``y`` 是 Python 版本的主、次版本号，例如  ``Python-"
"urllib/2.5``），这可能会让网站不知所措，或者干脆就使其无法正常工作。浏览器是通过头部信息 ``User-Agent`` [#]_ "
"来标识自己的。在创建 Request 对象时，可以传入字典形式的头部信息。以下示例将生成与之前相同的请求，只是将自身标识为某个版本的 Internet "
"Explorer [#]_ ："

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/howto/urllib2.rst:197
msgid ""
"The response also has two useful methods. See the section on `info and "
"geturl`_ which comes after we have a look at what happens when things go "
"wrong."
msgstr "响应对象也有两个很有用的方法。请参阅有关 `info 和 geturl`_ 部分，了解出现问题时会发生什么。 "

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/howto/urllib2.rst:202
msgid "Handling Exceptions"
msgstr "处理异常"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/howto/urllib2.rst:204
msgid ""
"*urlopen* raises :exc:`URLError` when it cannot handle a response (though as"
" usual with Python APIs, built-in exceptions such as :exc:`ValueError`, "
":exc:`TypeError` etc. may also be raised)."
msgstr ""
"如果 *urlopen* 无法处理响应信息，就会触发 :exc:`URLError` 。尽管与通常的 Python API 一样，也可能触发 "
":exc:`ValueError` 、 :exc:`TypeError` 等内置异常。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/howto/urllib2.rst:208
msgid ""
":exc:`HTTPError` is the subclass of :exc:`URLError` raised in the specific "
"case of HTTP URLs."
msgstr ":exc:`HTTPError` 是 :exc:`URLError` 的子类，当 URL 是 HTTP 的情况时将会触发。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/howto/urllib2.rst:211
msgid ""
"The exception classes are exported from the :mod:`urllib.error` module."
msgstr "异常类从 :mod:`urllib.error` 模块中导出。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/howto/urllib2.rst:214
msgid "URLError"
msgstr "URLError"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/howto/urllib2.rst:216
msgid ""
"Often, URLError is raised because there is no network connection (no route "
"to the specified server), or the specified server doesn't exist.  In this "
"case, the exception raised will have a 'reason' attribute, which is a tuple "
"containing an error code and a text error message."
msgstr ""
"通常，引发 URLError 的原因是没有网络连接（或者没有到指定服务器的路由），或者指定的服务器不存在。该情况下，将会引发该异常，并带有一个 "
"'reason' 属性，该属性是一个包含错误代码和文本错误信息的元组。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/howto/urllib2.rst:221
msgid "e.g. ::"
msgstr "例如 ::"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/howto/urllib2.rst:232
msgid "HTTPError"
msgstr "HTTPError"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/howto/urllib2.rst:234
msgid ""
"Every HTTP response from the server contains a numeric \"status code\". "
"Sometimes the status code indicates that the server is unable to fulfil the "
"request. The default handlers will handle some of these responses for you "
"(for example, if the response is a \"redirection\" that requests the client "
"fetch the document from a different URL, urllib will handle that for you). "
"For those it can't handle, urlopen will raise an :exc:`HTTPError`. Typical "
"errors include '404' (page not found), '403' (request forbidden), and '401' "
"(authentication required)."
msgstr ""
"从服务器返回的每个 HTTP 响应都包含一个数字的 "
"“状态码”。有时该状态码表明服务器无法完成该请求。默认的处理器（函数？）将会为你处理这其中的一些响应。（例如，如果响应包含了 "
"\"redirection\"，将会要求客户端去向另外的 URL 获取文档，urllib "
"将会为你处理该情形）。对于那些它无法处理的（状态代码），urlopen 将会引发一个  :exc:`HTTPError` "
"。典型的错误包括：‘404’（页面无法找到）、‘403’（请求遭拒绝）和 ’401‘ （需要身份验证）。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/howto/urllib2.rst:242
msgid ""
"See section 10 of :rfc:`2616` for a reference on all the HTTP error codes."
msgstr "全部的 HTTP 错误码请参阅 :rfc:`2616` 。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/howto/urllib2.rst:244
msgid ""
"The :exc:`HTTPError` instance raised will have an integer 'code' attribute, "
"which corresponds to the error sent by the server."
msgstr ":exc:`HTTPError` 实例将包含一个整数型的“code”属性，对应于服务器发来的错误。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/howto/urllib2.rst:248
msgid "Error Codes"
msgstr "错误代码"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/howto/urllib2.rst:250
msgid ""
"Because the default handlers handle redirects (codes in the 300 range), and "
"codes in the 100--299 range indicate success, you will usually only see "
"error codes in the 400--599 range."
msgstr ""
"由于默认处理函数会自行处理重定向（300 以内的错误码），而且 100--299 的状态码表示成功，因此通常只会出现 400--599 的错误码。 "

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/howto/urllib2.rst:254
msgid ""
":attr:`http.server.BaseHTTPRequestHandler.responses` is a useful dictionary "
"of response codes in that shows all the response codes used by :rfc:`2616`. "
"The dictionary is reproduced here for convenience ::"
msgstr ""
":attr:`http.server.BaseHTTPRequestHandler.responses` 是很有用的响应码字典，其中给出了 "
":rfc:`2616` 用到的所有响应代码。为方便起见，下面将此字典转载如下："

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/howto/urllib2.rst:326
msgid ""
"When an error is raised the server responds by returning an HTTP error code "
"*and* an error page. You can use the :exc:`HTTPError` instance as a response"
" on the page returned. This means that as well as the code attribute, it "
"also has read, geturl, and info, methods as returned by the "
"``urllib.response`` module::"
msgstr ""
"当触发错误时，服务器通过返回 HTTP 错误码 *和* 错误页面进行响应。可以将 :exc:`HTTPError` 实例用作返回页面的响应。这意味着除了"
" code 属性之外，错误对象还像 ``urllib.response`` 模块返回的那样具有 read、geturl 和 info 方法： "

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/howto/urllib2.rst:346
msgid "Wrapping it Up"
msgstr "包装起来"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/howto/urllib2.rst:348
msgid ""
"So if you want to be prepared for :exc:`HTTPError` *or* :exc:`URLError` "
"there are two basic approaches. I prefer the second approach."
msgstr "若要准备处理 :exc:`HTTPError`  *或* :exc:`URLError` ，有两种简单的方案。推荐使用第二种方案。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/howto/urllib2.rst:352
msgid "Number 1"
msgstr "数字1"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/howto/urllib2.rst:374
msgid ""
"The ``except HTTPError`` *must* come first, otherwise ``except URLError`` "
"will *also* catch an :exc:`HTTPError`."
msgstr ""
"``except HTTPError`` *必须* 首先处理，否则 ``except URLError`` 将会 *同时* 捕获  "
":exc:`HTTPError` 。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/howto/urllib2.rst:378
msgid "Number 2"
msgstr "第二种方案"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/howto/urllib2.rst:399
msgid "info and geturl"
msgstr "info and geturl"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/howto/urllib2.rst:401
msgid ""
"The response returned by urlopen (or the :exc:`HTTPError` instance) has two "
"useful methods :meth:`info` and :meth:`geturl` and is defined in the module "
":mod:`urllib.response`.."
msgstr ""
"由 urlopen （或者 :exc:`HTTPError` 实例）所返回的响应包含两个有用的方法： :meth:`info` 和 "
":meth:`geturl`，该响应由模块 :mod:`urllib.response` 定义。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/howto/urllib2.rst:405
msgid ""
"**geturl** - this returns the real URL of the page fetched. This is useful "
"because ``urlopen`` (or the opener object used) may have followed a "
"redirect. The URL of the page fetched may not be the same as the URL "
"requested."
msgstr ""
"**geturl** - 返回所获取页面的真实 URL。该方法很有用，因为 ``urlopen`` （或者所使用的 opener "
"对象）可能回包括一次重定向。所获取页面的 URL 未必就是所请求的 URL 。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/howto/urllib2.rst:409
msgid ""
"**info** - this returns a dictionary-like object that describes the page "
"fetched, particularly the headers sent by the server. It is currently an "
":class:`http.client.HTTPMessage` instance."
msgstr ""
"**info** - 该方法返回一个类似字典的对象，描述了所获取的页面，特别是由服务器送出的头部信息（headers） 。目前它是一个 "
":class:`http.client.HTTPMessage` 实例。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/howto/urllib2.rst:413
msgid ""
"Typical headers include 'Content-length', 'Content-type', and so on. See the"
" `Quick Reference to HTTP Headers <http://jkorpela.fi/http.html>`_ for a "
"useful listing of HTTP headers with brief explanations of their meaning and "
"use."
msgstr ""
"典型的 HTTP  头部信息包括“Content-length”、“Content-type”等。有关 HTTP "
"头部信息的清单，包括含义和用途的简要说明，请参阅 `HTTP Header 快速参考 <http://jkorpela.fi/http.html>`_ "
"。 "

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/howto/urllib2.rst:420
msgid "Openers and Handlers"
msgstr "Opener 和 Handler"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/howto/urllib2.rst:422
msgid ""
"When you fetch a URL you use an opener (an instance of the perhaps "
"confusingly-named :class:`urllib.request.OpenerDirector`). Normally we have "
"been using the default opener - via ``urlopen`` - but you can create custom "
"openers. Openers use handlers. All the \"heavy lifting\" is done by the "
"handlers. Each handler knows how to open URLs for a particular URL scheme "
"(http, ftp, etc.), or how to handle an aspect of URL opening, for example "
"HTTP redirections or HTTP cookies."
msgstr ""
"当获取 URL 时，会用到了一个 opener（一个类名可能经过混淆的 :class:`urllib.request.OpenerDirector` "
"的实例）。通常一直会用默认的 opener   ——通过 ``urlopen`` ——但也可以创建自定义的 opener 。opener 会用到 "
"handler。所有的“繁重工作”都由 handler 完成。每种 handler 知道某种 URL 方案（http、ftp 等）的 URL "
"的打开方式，或是某方面 URL 的打开方式，例如 HTTP 重定向或 HTTP cookie。 "

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/howto/urllib2.rst:430
msgid ""
"You will want to create openers if you want to fetch URLs with specific "
"handlers installed, for example to get an opener that handles cookies, or to"
" get an opener that does not handle redirections."
msgstr ""
"若要用已安装的某个 handler 获取 URL，需要创建一个 opener 对象，例如处理 cookie 的 handler，或对重定向不做处理的 "
"handler。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/howto/urllib2.rst:434
msgid ""
"To create an opener, instantiate an ``OpenerDirector``, and then call "
"``.add_handler(some_handler_instance)`` repeatedly."
msgstr ""
"若要创建 opener，请实例化一个 ``OpenerDirector`` ，然后重复调用 "
"``.add_handler(some_handler_instance)`` 。 "

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/howto/urllib2.rst:437
msgid ""
"Alternatively, you can use ``build_opener``, which is a convenience function"
" for creating opener objects with a single function call.  ``build_opener`` "
"adds several handlers by default, but provides a quick way to add more "
"and/or override the default handlers."
msgstr ""
"或者也可以用 ``build_opener`` ，这是个用单次调用创建 opener 对象的便捷函数。``build_opener`` 默认会添加几个"
"  handler，不过还提供了一种快速添加和/或覆盖默认 handler 的方法。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/howto/urllib2.rst:442
msgid ""
"Other sorts of handlers you might want to can handle proxies, "
"authentication, and other common but slightly specialised situations."
msgstr "可能还需要其他类型的 handler，以便处理代理、身份认证和其他常见但稍微特殊的情况。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/howto/urllib2.rst:445
msgid ""
"``install_opener`` can be used to make an ``opener`` object the (global) "
"default opener. This means that calls to ``urlopen`` will use the opener you"
" have installed."
msgstr ""
"``install_opener`` 可用于让 ``opener`` 对象成为（全局）默认 opener。这意味着调用 ``urlopen`` "
"时会采用已安装的 opener。 "

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/howto/urllib2.rst:449
msgid ""
"Opener objects have an ``open`` method, which can be called directly to "
"fetch urls in the same way as the ``urlopen`` function: there's no need to "
"call ``install_opener``, except as a convenience."
msgstr ""
"opener 对象带有一个 ```open`` 方法，可供直接调用以获取 url，方式与 ``urlopen`` "
"函数相同。除非是为了调用方便，否则没必要去调用 ``install_opener`` 。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/howto/urllib2.rst:455
msgid "Basic Authentication"
msgstr "基本认证"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/howto/urllib2.rst:457
msgid ""
"To illustrate creating and installing a handler we will use the "
"``HTTPBasicAuthHandler``. For a more detailed discussion of this subject -- "
"including an explanation of how Basic Authentication works - see the `Basic "
"Authentication Tutorial "
"<http://www.voidspace.org.uk/python/articles/authentication.shtml>`_."
msgstr ""

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/howto/urllib2.rst:463
msgid ""
"When authentication is required, the server sends a header (as well as the "
"401 error code) requesting authentication.  This specifies the "
"authentication scheme and a 'realm'. The header looks like: ``WWW-"
"Authenticate: SCHEME realm=\"REALM\"``."
msgstr ""
"如果需要身份认证，服务器会发送一条请求身份认证的头部信息（以及 401 "
"错误代码）。这条信息中指明了身份认证方式和“安全区域（realm）”。格式如下所示：``WWW-Authenticate: SCHEME "
"realm=\"REALM\"`` 。 "

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/howto/urllib2.rst:468
msgid "e.g."
msgstr "例如"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/howto/urllib2.rst:475
msgid ""
"The client should then retry the request with the appropriate name and "
"password for the realm included as a header in the request. This is 'basic "
"authentication'. In order to simplify this process we can create an instance"
" of ``HTTPBasicAuthHandler`` and an opener to use this handler."
msgstr ""
"然后，客户端应重试发起请求，请求数据中的头部信息应包含安全区域对应的用户名和密码。这就是“基本身份认证”。为了简化此过程，可以创建 "
"``HTTPBasicAuthHandler`` 的一个实例及使用它的 opener。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/howto/urllib2.rst:480
msgid ""
"The ``HTTPBasicAuthHandler`` uses an object called a password manager to "
"handle the mapping of URLs and realms to passwords and usernames. If you "
"know what the realm is (from the authentication header sent by the server), "
"then you can use a ``HTTPPasswordMgr``. Frequently one doesn't care what the"
" realm is. In that case, it is convenient to use "
"``HTTPPasswordMgrWithDefaultRealm``. This allows you to specify a default "
"username and password for a URL. This will be supplied in the absence of you"
" providing an alternative combination for a specific realm. We indicate this"
" by providing ``None`` as the realm argument to the ``add_password`` method."
msgstr ""
"``HTTPBasicAuthHandler`` 用一个名为密码管理器的对象来管理 "
"URL、安全区域与密码、用户名之间的映射关系。如果知道确切的安全区域（来自服务器发送的身份认证头部信息），那就可以用到 "
"``HTTPPasswordMgr`` 。通常人们并不关心安全区域是什么，这时用``HTTPPasswordMgrWithDefaultRealm`` "
"就很方便，允许为 URL 指定默认的用户名和密码。当没有为某个安全区域提供用户名和密码时，就会用到默认值。下面用 ``None`` 作为 "
"``add_password`` 方法的安全区域参数，表明采用默认用户名和密码。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/howto/urllib2.rst:490
msgid ""
"The top-level URL is the first URL that requires authentication. URLs "
"\"deeper\" than the URL you pass to .add_password() will also match. ::"
msgstr "首先需要身份认证的是顶级 URL。比传给 .add_password() 的 URL 级别“更深”的 URL 也会得以匹配："

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/howto/urllib2.rst:515
msgid ""
"In the above example we only supplied our ``HTTPBasicAuthHandler`` to "
"``build_opener``. By default openers have the handlers for normal situations"
" -- ``ProxyHandler`` (if a proxy setting such as an :envvar:`http_proxy` "
"environment variable is set), ``UnknownHandler``, ``HTTPHandler``, "
"``HTTPDefaultErrorHandler``, ``HTTPRedirectHandler``, ``FTPHandler``, "
"``FileHandler``, ``DataHandler``, ``HTTPErrorProcessor``."
msgstr ""
"在以上例子中，只向 ``build_opener`` 给出了 ``HTTPBasicAuthHandler`` 。默认情况下，opener "
"会有用于处理常见状况的 handler ——``ProxyHandler`` （如果设置代理的话，比如设置了环境变量 "
":envvar:`http_proxy` ），``UnknownHandler`` 、``HTTPHandler`` 、 "
"``HTTPDefaultErrorHandler`` 、 ``HTTPRedirectHandler`` 、 ``FTPHandler`` 、 "
"``FileHandler`` 、 ``DataHandler`` 、 ``HTTPErrorProcessor`` 。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/howto/urllib2.rst:522
msgid ""
"``top_level_url`` is in fact *either* a full URL (including the 'http:' "
"scheme component and the hostname and optionally the port number) e.g. "
"``\"http://example.com/\"`` *or* an \"authority\" (i.e. the hostname, "
"optionally including the port number) e.g. ``\"example.com\"`` or "
"``\"example.com:8080\"`` (the latter example includes a port number).  The "
"authority, if present, must NOT contain the \"userinfo\" component - for "
"example ``\"joe:password@example.com\"`` is not correct."
msgstr ""
"``top_level_url`` 其实 *要么* 是一条完整的 URL（包括 “http:” 部分和主机名及可选的端口号），比如 "
"``\"http://example.com/\"`` ， *要么* 是一条“访问权限”（即主机名，及可选的端口号），比如 "
"``\"example.com\"`` 或 ``\"example.com:8080\"`` （后一个示例包含了端口号）。访问权限 **不得** "
"包含“用户信息”部分——比如 ``\"joe:password@example.com\"`` 就不正确。 "

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/howto/urllib2.rst:532
msgid "Proxies"
msgstr "代理"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/howto/urllib2.rst:534
msgid ""
"**urllib** will auto-detect your proxy settings and use those. This is "
"through the ``ProxyHandler``, which is part of the normal handler chain when"
" a proxy setting is detected.  Normally that's a good thing, but there are "
"occasions when it may not be helpful [#]_. One way to do this is to setup "
"our own ``ProxyHandler``, with no proxies defined. This is done using "
"similar steps to setting up a `Basic Authentication`_ handler: ::"
msgstr ""
"**urllib** 将自动检测并使用代理设置。 这是通过 ``ProxyHandler`` 实现的，当检测到代理设置时，是正常 handler "
"链中的一部分。通常这是一件好事，但有时也可能会无效 [#]_。 一种方案是配置自己的 ``ProxyHandler`` ，不要定义代理。 设置的步骤与 "
"`Basic Authentication`_ handler 类似: ::"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/howto/urllib2.rst:547
msgid ""
"Currently ``urllib.request`` *does not* support fetching of ``https`` "
"locations through a proxy.  However, this can be enabled by extending "
"urllib.request as shown in the recipe [#]_."
msgstr ""
"目前 ``urllib.request`` *尚不* 支持通过代理抓取 ``https`` 链接地址。 但此功能可以通过扩展 "
"urllib.request 来启用，如以下例程所示 [#]_。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/howto/urllib2.rst:553
msgid ""
"``HTTP_PROXY`` will be ignored if a variable ``REQUEST_METHOD`` is set; see "
"the documentation on :func:`~urllib.request.getproxies`."
msgstr ""
"如果设置了 ``REQUEST_METHOD`` 变量，则会忽略 ``HTTP_PROXY`` ；参阅 "
":func:`~urllib.request.getproxies` 文档。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/howto/urllib2.rst:558
msgid "Sockets and Layers"
msgstr "套接字与分层"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/howto/urllib2.rst:560
msgid ""
"The Python support for fetching resources from the web is layered.  urllib "
"uses the :mod:`http.client` library, which in turn uses the socket library."
msgstr "Python 获取 Web 资源的能力是分层的。urllib 用到的是 :mod:`http.client` 库，而后者又用到了套接字库。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/howto/urllib2.rst:563
msgid ""
"As of Python 2.3 you can specify how long a socket should wait for a "
"response before timing out. This can be useful in applications which have to"
" fetch web pages. By default the socket module has *no timeout* and can "
"hang. Currently, the socket timeout is not exposed at the http.client or "
"urllib.request levels. However, you can set the default timeout globally for"
" all sockets using ::"
msgstr ""
"从 Python 2.3 开始，可以指定套接字等待响应的超时时间。这对必须要读到网页数据的应用程序会很有用。默认情况下，套接字模块 *不会超时* "
"并且可以挂起。目前，套接字超时机制未暴露给 http.client 或 urllib.request "
"层使用。不过可以为所有用到的套接字设置默认的全局超时。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/howto/urllib2.rst:586
msgid "Footnotes"
msgstr "备注"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/howto/urllib2.rst:588
msgid "This document was reviewed and revised by John Lee."
msgstr "这篇文档由 John Lee 审订。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/howto/urllib2.rst:590
msgid "Google for example."
msgstr "例如 Google。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/howto/urllib2.rst:591
msgid ""
"Browser sniffing is a very bad practice for website design - building sites "
"using web standards is much more sensible. Unfortunately a lot of sites "
"still send different versions to different browsers."
msgstr ""
"对于网站设计而言，探测不同的浏览器是非常糟糕的做法——更为明智的做法是采用 web "
"标准构建网站。不幸的是，很多网站依然向不同的浏览器发送不同版本的网页。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/howto/urllib2.rst:594
msgid ""
"The user agent for MSIE 6 is *'Mozilla/4.0 (compatible; MSIE 6.0; Windows NT"
" 5.1; SV1; .NET CLR 1.1.4322)'*"
msgstr ""
"MSIE 6 的 user-agent 信息是 *“Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1;"
" SV1; .NET CLR 1.1.4322)”*"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/howto/urllib2.rst:596
msgid ""
"For details of more HTTP request headers, see `Quick Reference to HTTP "
"Headers`_."
msgstr "有关 HTTP 请求的头部信息，详情请参阅 `Quick Reference to HTTP Headers`_。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/howto/urllib2.rst:598
msgid ""
"In my case I have to use a proxy to access the internet at work. If you "
"attempt to fetch *localhost* URLs through this proxy it blocks them. IE is "
"set to use the proxy, which urllib picks up on. In order to test scripts "
"with a localhost server, I have to prevent urllib from using the proxy."
msgstr ""
"本人必须使用代理才能在工作中访问互联网。如果尝试通过代理获取 *localhost* URL，将会遭到阻止。IE 设置为代理模式，urllib "
"就会获取到配置信息。为了用 localhost 服务器测试脚本，我必须阻止 urllib 使用代理。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/howto/urllib2.rst:603
msgid ""
"urllib opener for SSL proxy (CONNECT method): `ASPN Cookbook Recipe "
"<https://code.activestate.com/recipes/456195/>`_."
msgstr ""
"urllib 的 SSL 代理 opener（CONNECT  方法）： `ASPN Cookbook Recipe "
"<https://code.activestate.com/recipes/456195/>`_ 。"
