# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2023, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# ww song <sww4718168@gmail.com>, 2021
# df2dc1c92e792f7ae8417c51df43db8f_594d92a <0f49be28017426edb1db1a2ab6e67088_717605>, 2021
# Aloxaf <aloxafx@gmail.com>, 2021
# Siyuan Xu, 2021
# WH-2099 <wh2099@outlook.com>, 2021
# Alpha Du <alphanow@gmail.com>, 2022
# Freesand Leo <yuqinju@163.com>, 2022
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-05-19 14:13+0000\n"
"PO-Revision-Date: 2021-06-28 00:53+0000\n"
"Last-Translator: Freesand Leo <yuqinju@163.com>, 2022\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../howto/sorting.rst:4
msgid "Sorting HOW TO"
msgstr "排序指南"

#: ../../howto/sorting.rst:0
msgid "Author"
msgstr "作者"

#: ../../howto/sorting.rst:6
msgid "Andrew Dalke and Raymond Hettinger"
msgstr "Andrew Dalke 和 Raymond Hettinger"

#: ../../howto/sorting.rst:0
msgid "Release"
msgstr "发布版本"

#: ../../howto/sorting.rst:7
msgid "0.1"
msgstr "0.1"

#: ../../howto/sorting.rst:10
msgid ""
"Python lists have a built-in :meth:`list.sort` method that modifies the list"
" in-place.  There is also a :func:`sorted` built-in function that builds a "
"new sorted list from an iterable."
msgstr ""
"Python 列表有一个内置的 :meth:`list.sort` 方法可以直接修改列表。还有一个 :func:`sorted` "
"内置函数，它会从一个可迭代对象构建一个新的排序列表。"

#: ../../howto/sorting.rst:14
msgid ""
"In this document, we explore the various techniques for sorting data using "
"Python."
msgstr "在本文档中，我们将探索使用Python对数据进行排序的各种技术。"

#: ../../howto/sorting.rst:18
msgid "Sorting Basics"
msgstr "基本排序"

#: ../../howto/sorting.rst:20
msgid ""
"A simple ascending sort is very easy: just call the :func:`sorted` function."
" It returns a new sorted list:"
msgstr "简单的升序排序非常简单：只需调用 :func:`sorted` 函数。它返回一个新的排序后列表："

#: ../../howto/sorting.rst:28
msgid ""
"You can also use the :meth:`list.sort` method. It modifies the list in-place"
" (and returns ``None`` to avoid confusion). Usually it's less convenient "
"than :func:`sorted` - but if you don't need the original list, it's slightly"
" more efficient."
msgstr ""
"你也可以使用 :func:`list.sort` 方法，它会直接修改原列表（并返回 ``None`` 以避免混淆），通常来说它不如 "
":func:`sorted` 方便 ——— 但如果你不需要原列表，它会更有效率。"

#: ../../howto/sorting.rst:40
msgid ""
"Another difference is that the :meth:`list.sort` method is only defined for "
"lists. In contrast, the :func:`sorted` function accepts any iterable."
msgstr "另外一个区别是， :meth:`list.sort` 方法只是为列表定义的，而 :func:`sorted` 函数可以接受任何可迭代对象。"

#: ../../howto/sorting.rst:49
msgid "Key Functions"
msgstr "关键函数"

#: ../../howto/sorting.rst:51
msgid ""
"Both :meth:`list.sort` and :func:`sorted` have a *key* parameter to specify "
"a function (or other callable) to be called on each list element prior to "
"making comparisons."
msgstr ""
":meth:`list.sort` 和 :func:`sorted` 都有一个 *key* "
"形参用来指定在进行比较前要在每个列表元素上调用的函数（或其他可调用对象）。"

#: ../../howto/sorting.rst:55
msgid "For example, here's a case-insensitive string comparison:"
msgstr "例如，下面是一个不区分大小写的字符串比较："

#: ../../howto/sorting.rst:62
msgid ""
"The value of the *key* parameter should be a function (or other callable) "
"that takes a single argument and returns a key to use for sorting purposes. "
"This technique is fast because the key function is called exactly once for "
"each input record."
msgstr ""
"*key* 形参的值应该是个函数（或其他可调用对象），它接受一个参数并返回一个用于排序的键。 这种机制速度很快，因为对于每个输入记录只会调用一次键函数。"

#: ../../howto/sorting.rst:67
msgid ""
"A common pattern is to sort complex objects using some of the object's "
"indices as keys. For example:"
msgstr "一种常见的模式是使用对象的一些索引作为键对复杂对象进行排序。例如："

#: ../../howto/sorting.rst:80
msgid ""
"The same technique works for objects with named attributes. For example:"
msgstr "同样的技术也适用于具有命名属性的对象。例如："

#: ../../howto/sorting.rst:101
msgid "Operator Module Functions"
msgstr "Operator 模块函数"

#: ../../howto/sorting.rst:103
msgid ""
"The key-function patterns shown above are very common, so Python provides "
"convenience functions to make accessor functions easier and faster. The "
":mod:`operator` module has :func:`~operator.itemgetter`, "
":func:`~operator.attrgetter`, and a :func:`~operator.methodcaller` function."
msgstr ""
"上面显示的键函数模式非常常见，因此 Python 提供了便利功能，使访问器功能更容易，更快捷。  :mod:`operator` 模块有 "
":func:`~operator.itemgetter` 、 :func:`~operator.attrgetter` 和 "
":func:`~operator.methodcaller` 函数。"

#: ../../howto/sorting.rst:108
msgid "Using those functions, the above examples become simpler and faster:"
msgstr "使用这些函数，上述示例变得更简单，更快捷："

#: ../../howto/sorting.rst:120
msgid ""
"The operator module functions allow multiple levels of sorting. For example,"
" to sort by *grade* then by *age*:"
msgstr "Operator 模块功能允许多级排序。 例如，按 *grade* 排序，然后按 *age* 排序："

#: ../../howto/sorting.rst:132
msgid "Ascending and Descending"
msgstr "升序和降序"

#: ../../howto/sorting.rst:134
msgid ""
"Both :meth:`list.sort` and :func:`sorted` accept a *reverse* parameter with "
"a boolean value. This is used to flag descending sorts. For example, to get "
"the student data in reverse *age* order:"
msgstr ""
":meth:`list.sort` 和 :func:`sorted` 接受布尔值的 *reverse* 参数。这用于标记降序排序。 例如，要以反向 "
"*age* 顺序获取学生数据："

#: ../../howto/sorting.rst:147
msgid "Sort Stability and Complex Sorts"
msgstr "排序稳定性和排序复杂度"

#: ../../howto/sorting.rst:149
msgid ""
"Sorts are guaranteed to be `stable "
"<https://en.wikipedia.org/wiki/Sorting_algorithm#Stability>`_\\. That means "
"that when multiple records have the same key, their original order is "
"preserved."
msgstr ""
"排序保证是 `稳定 <https://en.wikipedia.org/wiki/Sorting_algorithm#Stability>`_ \\ "
"的。 这意味着当多个记录具有相同的键值时，将保留其原始顺序。"

#: ../../howto/sorting.rst:159
msgid ""
"Notice how the two records for *blue* retain their original order so that "
"``('blue', 1)`` is guaranteed to precede ``('blue', 2)``."
msgstr "注意 *blue* 的两个记录如何保留它们的原始顺序，以便 ``('blue', 1)`` 保证在 ``('blue', 2)`` 之前。"

#: ../../howto/sorting.rst:162
msgid ""
"This wonderful property lets you build complex sorts in a series of sorting "
"steps. For example, to sort the student data by descending *grade* and then "
"ascending *age*, do the *age* sort first and then sort again using *grade*:"
msgstr ""
"这个美妙的属性允许你在一系列排序步骤中构建复杂的排序。例如，要按 *grade* 降序然后 *age* 升序对学生数据进行排序，请先 *age* "
"排序，然后再使用 *grade* 排序："

#: ../../howto/sorting.rst:172
msgid ""
"This can be abstracted out into a wrapper function that can take a list and "
"tuples of field and order to sort them on multiple passes."
msgstr "这可以被抽象为一个包装函数，该函数能接受一个列表以及字段和顺序的元组，以对它们进行多重排序。"

#: ../../howto/sorting.rst:185
msgid ""
"The `Timsort <https://en.wikipedia.org/wiki/Timsort>`_ algorithm used in "
"Python does multiple sorts efficiently because it can take advantage of any "
"ordering already present in a dataset."
msgstr ""
"Python 中使用的 `Timsort <https://en.wikipedia.org/wiki/Timsort>`_ "
"算法可以有效地进行多种排序，因为它可以利用数据集中已存在的任何排序。"

#: ../../howto/sorting.rst:190
msgid "Decorate-Sort-Undecorate"
msgstr "装饰-排序-取消装饰"

#: ../../howto/sorting.rst:192
msgid "This idiom is called Decorate-Sort-Undecorate after its three steps:"
msgstr "这个三个步骤被称为 Decorate-Sort-Undecorate ："

#: ../../howto/sorting.rst:194
msgid ""
"First, the initial list is decorated with new values that control the sort "
"order."
msgstr "首先，初始列表使用控制排序顺序的新值进行修饰。"

#: ../../howto/sorting.rst:196
msgid "Second, the decorated list is sorted."
msgstr "然后，装饰列表已排序。"

#: ../../howto/sorting.rst:198
msgid ""
"Finally, the decorations are removed, creating a list that contains only the"
" initial values in the new order."
msgstr "最后，删除装饰，创建一个仅包含新排序中初始值的列表。"

#: ../../howto/sorting.rst:201
msgid ""
"For example, to sort the student data by *grade* using the DSU approach:"
msgstr "例如，要使用DSU方法按 *grade* 对学生数据进行排序："

#: ../../howto/sorting.rst:208
msgid ""
"This idiom works because tuples are compared lexicographically; the first "
"items are compared; if they are the same then the second items are compared,"
" and so on."
msgstr "这方法语有效是因为元组按字典顺序进行比较，先比较第一项；如果它们相同则比较第二个项目，依此类推。"

#: ../../howto/sorting.rst:212
msgid ""
"It is not strictly necessary in all cases to include the index *i* in the "
"decorated list, but including it gives two benefits:"
msgstr "不一定在所有情况下都要在装饰列表中包含索引 *i* ，但包含它有两个好处："

#: ../../howto/sorting.rst:215
msgid ""
"The sort is stable -- if two items have the same key, their order will be "
"preserved in the sorted list."
msgstr "排序是稳定的——如果两个项具有相同的键，它们的顺序将保留在排序列表中。"

#: ../../howto/sorting.rst:218
msgid ""
"The original items do not have to be comparable because the ordering of the "
"decorated tuples will be determined by at most the first two items. So for "
"example the original list could contain complex numbers which cannot be "
"sorted directly."
msgstr "原始项目不必具有可比性，因为装饰元组的排序最多由前两项决定。 因此，例如原始列表可能包含无法直接排序的复数。"

#: ../../howto/sorting.rst:223
msgid ""
"Another name for this idiom is `Schwartzian transform "
"<https://en.wikipedia.org/wiki/Schwartzian_transform>`_\\, after Randal L. "
"Schwartz, who popularized it among Perl programmers."
msgstr ""
"这个方法的另一个名字是 Randal L. Schwartz 在 Perl 程序员中推广的 `Schwartzian transform "
"<https://en.wikipedia.org/wiki/Schwartzian_transform>`_\\ 。"

#: ../../howto/sorting.rst:227
msgid ""
"Now that Python sorting provides key-functions, this technique is not often "
"needed."
msgstr "既然 Python 排序提供了键函数，那么通常不需要这种技术。"

#: ../../howto/sorting.rst:230
msgid "Comparison Functions"
msgstr "比较函数"

#: ../../howto/sorting.rst:232
msgid ""
"Unlike key functions that return an absolute value for sorting, a comparison"
" function computes the relative ordering for two inputs."
msgstr "与返回一个用于排序的绝对值的键函数不同，比较函数是计算两个输入的相对排序。"

#: ../../howto/sorting.rst:235
msgid ""
"For example, a `balance scale "
"<https://upload.wikimedia.org/wikipedia/commons/1/17/Balance_à_tabac_1850.JPG>`_"
" compares two samples giving a relative ordering: lighter, equal, or "
"heavier. Likewise, a comparison function such as ``cmp(a, b)`` will return a"
" negative value for less-than, zero if the inputs are equal, or a positive "
"value for greater-than."
msgstr ""
"例如，一个 `天平 "
"<https://upload.wikimedia.org/wikipedia/commons/1/17/Balance_à_tabac_1850.JPG>`_"
" 会比较两个样本并给出一个相对排序：较轻、相等或较重。 类似地，一个比较函数如 ``cmp(a, b)`` "
"将返回一个负值表示小于，零表示相等，或是一个正值表示大于。"

#: ../../howto/sorting.rst:242
msgid ""
"It is common to encounter comparison functions when translating algorithms "
"from other languages.  Also, some libraries provide comparison functions as "
"part of their API.  For example, :func:`locale.strcoll` is a comparison "
"function."
msgstr ""
"当从其他语言转写算法时经常会遇到比较函数。 此外，某些库也提供了比较函数作为其 API 的组成部分。 例如，:func:`locale.strcoll`"
" 就是一个比较函数。"

#: ../../howto/sorting.rst:246
msgid ""
"To accommodate those situations, Python provides "
":class:`functools.cmp_to_key` to wrap the comparison function to make it "
"usable as a key function::"
msgstr ""
"为了适应这些情况，Python 提供了 :class:`functools.cmp_to_key` 用来包装比较函数使其可以作为键函数来使用::"

#: ../../howto/sorting.rst:253
msgid "Odds and Ends"
msgstr "杂项说明"

#: ../../howto/sorting.rst:255
msgid ""
"For locale aware sorting, use :func:`locale.strxfrm` for a key function or "
":func:`locale.strcoll` for a comparison function.  This is necessary because"
" \"alphabetical\" sort orderings can vary across cultures even if the "
"underlying alphabet is the same."
msgstr ""
"对于可感知语言区域的排序，请使用 :func:`locale.strxfrm` 作为键函数或使用 :func:`locale.strcoll` "
"作为比较函数。 因为在不同语言中即便字母表相同“字母”排列顺序也可能不同所以这样做是必要的。"

#: ../../howto/sorting.rst:260
msgid ""
"The *reverse* parameter still maintains sort stability (so that records with"
" equal keys retain the original order). Interestingly, that effect can be "
"simulated without the parameter by using the builtin :func:`reversed` "
"function twice:"
msgstr ""
"*reverse* 参数仍然保持排序稳定性（因此具有相等键的记录保留原始顺序）。 有趣的是，通过使用内置的 :func:`reversed` "
"函数两次，可以在没有参数的情况下模拟该效果："

#: ../../howto/sorting.rst:274
msgid ""
"The sort routines use ``<`` when making comparisons between two objects. So,"
" it is easy to add a standard sort order to a class by defining an "
":meth:`__lt__` method:"
msgstr ""
"在对两个对象进行比较时，排序例程使用 ``<`` 。因此，通过定义一个 :meth:`__lt__` 方法，很容易为一个类添加一个标准的排序顺序。"

#: ../../howto/sorting.rst:284
msgid ""
"However, note that ``<`` can fall back to using :meth:`__gt__` if "
":meth:`__lt__` is not implemented (see :func:`object.__lt__`)."
msgstr ""
"然而，请注意，如果 :meth:`__gt__` 没有实现，``<`` 可以退回到使用 :meth:`__lt__` （见 "
":func:`object.__lt__` ）。"

#: ../../howto/sorting.rst:287
msgid ""
"Key functions need not depend directly on the objects being sorted. A key "
"function can also access external resources. For instance, if the student "
"grades are stored in a dictionary, they can be used to sort a separate list "
"of student names:"
msgstr "键函数不需要直接依赖于被排序的对象。键函数还可以访问外部资源。例如，如果学生成绩存储在字典中，则可以使用它们对单独的学生姓名列表进行排序："
