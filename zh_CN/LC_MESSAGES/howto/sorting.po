# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2023, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Shengjing Zhu <zsj950618@gmail.com>, 2019
# ww song <sww4718168@gmail.com>, 2019
# df2dc1c92e792f7ae8417c51df43db8f_594d92a <0f49be28017426edb1db1a2ab6e67088_717605>, 2019
# Freesand Leo <yuqinju@163.com>, 2019
# Alpha Du <alphanow@gmail.com>, 2019
# Aloxaf <aloxafx@gmail.com>, 2019
# Siyuan Xu, 2019
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-06-16 16:41+0000\n"
"PO-Revision-Date: 2019-09-01 03:37+0000\n"
"Last-Translator: Siyuan Xu, 2019\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/"
"teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/howto/sorting.rst:4
msgid "Sorting HOW TO"
msgstr "排序指南"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/howto/sorting.rst:0
msgid "Author"
msgstr "作者"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/howto/sorting.rst:6
msgid "Andrew Dalke and Raymond Hettinger"
msgstr "Andrew Dalke 和 Raymond Hettinger"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/howto/sorting.rst:0
msgid "Release"
msgstr "发布版本"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/howto/sorting.rst:7
msgid "0.1"
msgstr "0.1"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/howto/sorting.rst:10
msgid ""
"Python lists have a built-in :meth:`list.sort` method that modifies the list "
"in-place.  There is also a :func:`sorted` built-in function that builds a "
"new sorted list from an iterable."
msgstr ""
"Python 列表有一个内置的 :meth:`list.sort` 方法可以直接修改列表。还有一个 :"
"func:`sorted` 内置函数，它会从一个可迭代对象构建一个新的排序列表。"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/howto/sorting.rst:14
msgid ""
"In this document, we explore the various techniques for sorting data using "
"Python."
msgstr "在本文档中，我们将探索使用Python对数据进行排序的各种技术。"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/howto/sorting.rst:18
msgid "Sorting Basics"
msgstr "基本排序"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/howto/sorting.rst:20
msgid ""
"A simple ascending sort is very easy: just call the :func:`sorted` function. "
"It returns a new sorted list::"
msgstr ""
"简单的升序排序非常简单：只需调用 :func:`sorted` 函数即可。它会返回一个新的已"
"排序列表。"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/howto/sorting.rst:26
msgid ""
"You can also use the :meth:`list.sort` method. It modifies the list in-place "
"(and returns ``None`` to avoid confusion). Usually it's less convenient "
"than :func:`sorted` - but if you don't need the original list, it's slightly "
"more efficient."
msgstr ""
"你也可以使用 :func:`list.sort` 方法，它会直接修改原列表（并返回 ``None`` 以避"
"免混淆），通常来说它不如 :func:`sorted` 方便 ——— 但如果你不需要原列表，它会更"
"有效率。"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/howto/sorting.rst:36
msgid ""
"Another difference is that the :meth:`list.sort` method is only defined for "
"lists. In contrast, the :func:`sorted` function accepts any iterable."
msgstr ""
"另外一个区别是， :meth:`list.sort` 方法只是为列表定义的，而 :func:`sorted` 函"
"数可以接受任何可迭代对象。"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/howto/sorting.rst:43
msgid "Key Functions"
msgstr "关键函数"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/howto/sorting.rst:45
msgid ""
"Both :meth:`list.sort` and :func:`sorted` have a *key* parameter to specify "
"a function to be called on each list element prior to making comparisons."
msgstr ""
":meth:`list.sort` 和 :func:`sorted` 都有一个 *key* 形参来指定在进行比较之前要"
"在每个列表元素上进行调用的函数。"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/howto/sorting.rst:48
msgid "For example, here's a case-insensitive string comparison:"
msgstr "例如，下面是一个不区分大小写的字符串比较："

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/howto/sorting.rst:53
msgid ""
"The value of the *key* parameter should be a function that takes a single "
"argument and returns a key to use for sorting purposes. This technique is "
"fast because the key function is called exactly once for each input record."
msgstr ""
"*key* 形参的值应该是一个函数，它接受一个参数并并返回一个用于排序的键。这种技"
"巧速度很快，因为对于每个输入记录只会调用一次 key 函数。"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/howto/sorting.rst:57
msgid ""
"A common pattern is to sort complex objects using some of the object's "
"indices as keys. For example:"
msgstr "一种常见的模式是使用对象的一些索引作为键对复杂对象进行排序。例如："

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/howto/sorting.rst:68
msgid ""
"The same technique works for objects with named attributes. For example:"
msgstr "同样的技术也适用于具有命名属性的对象。例如："

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/howto/sorting.rst:87
msgid "Operator Module Functions"
msgstr "Operator 模块函数"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/howto/sorting.rst:89
msgid ""
"The key-function patterns shown above are very common, so Python provides "
"convenience functions to make accessor functions easier and faster. The :mod:"
"`operator` module has :func:`~operator.itemgetter`, :func:`~operator."
"attrgetter`, and a :func:`~operator.methodcaller` function."
msgstr ""
"上面显示的键函数模式非常常见，因此 Python 提供了便利功能，使访问器功能更容"
"易，更快捷。  :mod:`operator` 模块有 :func:`~operator.itemgetter` 、 :func:"
"`~operator.attrgetter` 和 :func:`~operator.methodcaller` 函数。"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/howto/sorting.rst:94
msgid "Using those functions, the above examples become simpler and faster:"
msgstr "使用这些函数，上述示例变得更简单，更快捷："

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/howto/sorting.rst:104
msgid ""
"The operator module functions allow multiple levels of sorting. For example, "
"to sort by *grade* then by *age*:"
msgstr ""
"Operator 模块功能允许多级排序。 例如，按 *grade* 排序，然后按 *age* 排序："

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/howto/sorting.rst:114
msgid "Ascending and Descending"
msgstr "升序和降序"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/howto/sorting.rst:116
msgid ""
"Both :meth:`list.sort` and :func:`sorted` accept a *reverse* parameter with "
"a boolean value. This is used to flag descending sorts. For example, to get "
"the student data in reverse *age* order:"
msgstr ""
":meth:`list.sort` 和 :func:`sorted` 接受布尔值的 *reverse* 参数。这用于标记降"
"序排序。 例如，要以反向 *age* 顺序获取学生数据："

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/howto/sorting.rst:127
msgid "Sort Stability and Complex Sorts"
msgstr "排序稳定性和排序复杂度"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/howto/sorting.rst:129
msgid ""
"Sorts are guaranteed to be `stable <https://en.wikipedia.org/wiki/"
"Sorting_algorithm#Stability>`_\\. That means that when multiple records have "
"the same key, their original order is preserved."
msgstr ""
"排序保证是 `稳定 <https://en.wikipedia.org/wiki/"
"Sorting_algorithm#Stability>`_ \\ 的。 这意味着当多个记录具有相同的键值时，将"
"保留其原始顺序。"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/howto/sorting.rst:137
msgid ""
"Notice how the two records for *blue* retain their original order so that "
"``('blue', 1)`` is guaranteed to precede ``('blue', 2)``."
msgstr ""
"注意 *blue* 的两个记录如何保留它们的原始顺序，以便 ``('blue', 1)`` 保证在 "
"``('blue', 2)`` 之前。"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/howto/sorting.rst:140
msgid ""
"This wonderful property lets you build complex sorts in a series of sorting "
"steps. For example, to sort the student data by descending *grade* and then "
"ascending *age*, do the *age* sort first and then sort again using *grade*:"
msgstr ""
"这个美妙的属性允许你在一系列排序步骤中构建复杂的排序。例如，要按 *grade* 降序"
"然后 *age* 升序对学生数据进行排序，请先 *age* 排序，然后再使用 *grade* 排序："

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/howto/sorting.rst:148
msgid ""
"The `Timsort <https://en.wikipedia.org/wiki/Timsort>`_ algorithm used in "
"Python does multiple sorts efficiently because it can take advantage of any "
"ordering already present in a dataset."
msgstr ""
"Python 中使用的 `Timsort <https://en.wikipedia.org/wiki/Timsort>`_ 算法可以有"
"效地进行多种排序，因为它可以利用数据集中已存在的任何排序。"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/howto/sorting.rst:153
msgid "The Old Way Using Decorate-Sort-Undecorate"
msgstr "使用装饰-排序-去装饰的旧方法"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/howto/sorting.rst:155
msgid "This idiom is called Decorate-Sort-Undecorate after its three steps:"
msgstr "这个三个步骤被称为 Decorate-Sort-Undecorate ："

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/howto/sorting.rst:157
msgid ""
"First, the initial list is decorated with new values that control the sort "
"order."
msgstr "首先，初始列表使用控制排序顺序的新值进行修饰。"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/howto/sorting.rst:159
msgid "Second, the decorated list is sorted."
msgstr "然后，装饰列表已排序。"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/howto/sorting.rst:161
msgid ""
"Finally, the decorations are removed, creating a list that contains only the "
"initial values in the new order."
msgstr "最后，删除装饰，创建一个仅包含新排序中初始值的列表。"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/howto/sorting.rst:164
msgid ""
"For example, to sort the student data by *grade* using the DSU approach:"
msgstr "例如，要使用DSU方法按 *grade* 对学生数据进行排序："

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/howto/sorting.rst:171
msgid ""
"This idiom works because tuples are compared lexicographically; the first "
"items are compared; if they are the same then the second items are compared, "
"and so on."
msgstr ""
"这方法语有效是因为元组按字典顺序进行比较，先比较第一项；如果它们相同则比较第"
"二个项目，依此类推。"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/howto/sorting.rst:175
msgid ""
"It is not strictly necessary in all cases to include the index *i* in the "
"decorated list, but including it gives two benefits:"
msgstr "不一定在所有情况下都要在装饰列表中包含索引 *i* ，但包含它有两个好处："

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/howto/sorting.rst:178
msgid ""
"The sort is stable -- if two items have the same key, their order will be "
"preserved in the sorted list."
msgstr "排序是稳定的——如果两个项具有相同的键，它们的顺序将保留在排序列表中。"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/howto/sorting.rst:181
msgid ""
"The original items do not have to be comparable because the ordering of the "
"decorated tuples will be determined by at most the first two items. So for "
"example the original list could contain complex numbers which cannot be "
"sorted directly."
msgstr ""
"原始项目不必具有可比性，因为装饰元组的排序最多由前两项决定。 因此，例如原始列"
"表可能包含无法直接排序的复数。"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/howto/sorting.rst:186
msgid ""
"Another name for this idiom is `Schwartzian transform <https://en.wikipedia."
"org/wiki/Schwartzian_transform>`_\\, after Randal L. Schwartz, who "
"popularized it among Perl programmers."
msgstr ""
"这个方法的另一个名字是 Randal L. Schwartz 在 Perl 程序员中推广的 "
"`Schwartzian transform <https://en.wikipedia.org/wiki/"
"Schwartzian_transform>`_\\ 。"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/howto/sorting.rst:190
msgid ""
"Now that Python sorting provides key-functions, this technique is not often "
"needed."
msgstr "既然 Python 排序提供了键函数，那么通常不需要这种技术。"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/howto/sorting.rst:194
msgid "The Old Way Using the *cmp* Parameter"
msgstr "使用 *cmp* 参数的旧方法"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/howto/sorting.rst:196
msgid ""
"Many constructs given in this HOWTO assume Python 2.4 or later. Before that, "
"there was no :func:`sorted` builtin and :meth:`list.sort` took no keyword "
"arguments. Instead, all of the Py2.x versions supported a *cmp* parameter to "
"handle user specified comparison functions."
msgstr ""
"本 HOWTO 中给出的许多结构都假定为 Python 2.4 或更高版本。在此之前，没有内置 :"
"func:`sorted` ， :meth:`list.sort` 也没有关键字参数。相反，所有 Py2.x 版本都"
"支持 *cmp* 参数来处理用户指定的比较函数。"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/howto/sorting.rst:201
msgid ""
"In Py3.0, the *cmp* parameter was removed entirely (as part of a larger "
"effort to simplify and unify the language, eliminating the conflict between "
"rich comparisons and the :meth:`__cmp__` magic method)."
msgstr ""
"在 Py3.0 中， *cmp* 参数被完全删除（作为简化和统一语言努力的一部分，消除了丰"
"富的比较与 :meth:`__cmp__` 魔术方法之间的冲突）。"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/howto/sorting.rst:205
msgid ""
"In Py2.x, sort allowed an optional function which can be called for doing "
"the comparisons. That function should take two arguments to be compared and "
"then return a negative value for less-than, return zero if they are equal, "
"or return a positive value for greater-than. For example, we can do:"
msgstr ""
"在 Py2.x 中， sort 允许一个可选函数，可以调用它来进行比较。该函数应该采用两个"
"参数进行比较，然后返回负值为小于，如果它们相等则返回零，或者返回大于大于的正"
"值。例如，我们可以这样做："

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/howto/sorting.rst:215
msgid "Or you can reverse the order of comparison with:"
msgstr "或者你可反转比较的顺序："

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/howto/sorting.rst:222
msgid ""
"When porting code from Python 2.x to 3.x, the situation can arise when you "
"have the user supplying a comparison function and you need to convert that "
"to a key function. The following wrapper makes that easy to do::"
msgstr ""
"将代码从 Python 2.x 移植到 3.x 时，如果用户提供比较功能并且需要将其转换为键函"
"数，则会出现这种情况。 以下包装器使这很容易："

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/howto/sorting.rst:245
msgid "To convert to a key function, just wrap the old comparison function:"
msgstr "要转换为键函数，只需包装旧的比较函数："

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/howto/sorting.rst:256
msgid ""
"In Python 3.2, the :func:`functools.cmp_to_key` function was added to the :"
"mod:`functools` module in the standard library."
msgstr ""
"在 Python 3.2 中， :func:`functools.cmp_to_key` 函数被添加到标准库中的 :mod:"
"`functools` 模块中。"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/howto/sorting.rst:260
msgid "Odd and Ends"
msgstr "其它"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/howto/sorting.rst:262
msgid ""
"For locale aware sorting, use :func:`locale.strxfrm` for a key function or :"
"func:`locale.strcoll` for a comparison function."
msgstr ""
"对于区域相关的排序，请使用 :func:`locale.strxfrm` 作为键函数，或者 :func:"
"`locale.strcoll` 作为比较函数。"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/howto/sorting.rst:265
msgid ""
"The *reverse* parameter still maintains sort stability (so that records with "
"equal keys retain the original order). Interestingly, that effect can be "
"simulated without the parameter by using the builtin :func:`reversed` "
"function twice:"
msgstr ""
"*reverse* 参数仍然保持排序稳定性（因此具有相等键的记录保留原始顺序）。 有趣的"
"是，通过使用内置的 :func:`reversed` 函数两次，可以在没有参数的情况下模拟该效"
"果："

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/howto/sorting.rst:277
msgid ""
"The sort routines are guaranteed to use :meth:`__lt__` when making "
"comparisons between two objects. So, it is easy to add a standard sort order "
"to a class by defining an :meth:`__lt__` method::"
msgstr ""
"在两个对象之间进行比较时，保证排序例程使用 :meth:`__lt__` 。 因此，通过定义 :"
"meth:`__lt__` 方法，可以很容易地为类添加标准排序顺序::"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/howto/sorting.rst:285
msgid ""
"Key functions need not depend directly on the objects being sorted. A key "
"function can also access external resources. For instance, if the student "
"grades are stored in a dictionary, they can be used to sort a separate list "
"of student names:"
msgstr ""
"键函数不需要直接依赖于被排序的对象。键函数还可以访问外部资源。例如，如果学生"
"成绩存储在字典中，则可以使用它们对单独的学生姓名列表进行排序："
