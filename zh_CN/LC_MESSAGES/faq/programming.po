# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2023, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# eric R <trencyclopedia@gmail.com>, 2020
# 殷平乐 <xiaoyin_c@qq.com>, 2020
# Siyuan Xu, 2020
# Alpha Du <alphanow@gmail.com>, 2020
# ppcfish <ppcfish@gmail.com>, 2020
# Freesand Leo <yuqinju@163.com>, 2022
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-06-23 16:32+0000\n"
"PO-Revision-Date: 2020-05-30 11:53+0000\n"
"Last-Translator: Freesand Leo <yuqinju@163.com>, 2022\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/"
"teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../faq/programming.rst:5
msgid "Programming FAQ"
msgstr "编程常见问题"

#: ../../faq/programming.rst:8
msgid "Contents"
msgstr "目录"

#: ../../faq/programming.rst:12
msgid "General Questions"
msgstr "一般问题"

#: ../../faq/programming.rst:15
msgid ""
"Is there a source code level debugger with breakpoints, single-stepping, "
"etc.?"
msgstr "Python 有没有提供断点与单步调试等功能的，源码层次的调试器？"

#: ../../faq/programming.rst:17 ../../faq/programming.rst:57
msgid "Yes."
msgstr "有的。"

#: ../../faq/programming.rst:19
msgid ""
"Several debuggers for Python are described below, and the built-in function :"
"func:`breakpoint` allows you to drop into any of them."
msgstr ""
"以下介绍了一些 Python 的调试器，内置函数 :func:`breakpoint` 允许你使用其中的"
"任何一种。"

#: ../../faq/programming.rst:22
msgid ""
"The pdb module is a simple but adequate console-mode debugger for Python. It "
"is part of the standard Python library, and is :mod:`documented in the "
"Library Reference Manual <pdb>`. You can also write your own debugger by "
"using the code for pdb as an example."
msgstr ""
"pdb 模块是一个简单但是够用的控制台模式 Python 调试器。 它是标准 Python 库的一"
"部分，并且 :mod:`已收录于库参考手册 <pdb>`。 你也可以通过使用 pdb 代码作为样"
"例来编写你自己的调试器。"

#: ../../faq/programming.rst:27
msgid ""
"The IDLE interactive development environment, which is part of the standard "
"Python distribution (normally available as Tools/scripts/idle), includes a "
"graphical debugger."
msgstr ""
"作为标准 Python 发行版附带组件的 IDLE 交互式环境（通常位于 Tools/scripts/"
"idle）中包含一个图形化的调试器。"

#: ../../faq/programming.rst:31
msgid ""
"PythonWin is a Python IDE that includes a GUI debugger based on pdb.  The "
"PythonWin debugger colors breakpoints and has quite a few cool features such "
"as debugging non-PythonWin programs.  PythonWin is available as part of "
"`pywin32 <https://github.com/mhammond/pywin32>`_ project and as a part of "
"the `ActivePython <https://www.activestate.com/products/python/>`_ "
"distribution."
msgstr ""
"PythonWin 是一个包括基于 pdb 的 GUI 调试器的 Python IDE。 PythonWin 的调试器"
"会为断点加上颜色，并具有许多很棒的特性，例如调试非 PythonWin 程序等。 "
"PythonWin 是 `pywin32 <https://github.com/mhammond/pywin32>`_ 项目的组成部"
"分，也是 `ActivePython <https://www.activestate.com/products/python/>`_ 发行"
"版的组成部分。"

#: ../../faq/programming.rst:38
msgid ""
"`Eric <http://eric-ide.python-projects.org/>`_ is an IDE built on PyQt and "
"the Scintilla editing component."
msgstr ""
"`Eric <http://eric-ide.python-projects.org/>`_ 是一个基于PyQt和Scintilla编辑"
"组件构建的IDE。"

#: ../../faq/programming.rst:41
msgid ""
"`trepan3k <https://github.com/rocky/python3-trepan/>`_ is a gdb-like "
"debugger."
msgstr ""
"`trepan3k <https://github.com/rocky/python3-trepan/>`_ 是一个类似 gdb 的调试"
"器。"

#: ../../faq/programming.rst:43
msgid ""
"`Visual Studio Code <https://code.visualstudio.com/>`_ is an IDE with "
"debugging tools that integrates with version-control software."
msgstr ""
"`Visual Studio Code <https://code.visualstudio.com/>`_ 是一个带有集成了版本控"
"制软件的调试工具的 IDE。"

#: ../../faq/programming.rst:46
msgid ""
"There are a number of commercial Python IDEs that include graphical "
"debuggers. They include:"
msgstr "有许多商业Python IDE包括图形调试器。他们包括："

#: ../../faq/programming.rst:49
msgid "`Wing IDE <https://wingware.com/>`_"
msgstr "`Wing IDE <https://wingware.com/>`_"

#: ../../faq/programming.rst:50
msgid "`Komodo IDE <https://www.activestate.com/products/komodo-ide/>`_"
msgstr "`Komodo IDE <https://www.activestate.com/products/komodo-ide/>`_"

#: ../../faq/programming.rst:51
msgid "`PyCharm <https://www.jetbrains.com/pycharm/>`_"
msgstr "`PyCharm <https://www.jetbrains.com/pycharm/>`_"

#: ../../faq/programming.rst:55
msgid "Are there tools to help find bugs or perform static analysis?"
msgstr "是否有能帮助寻找漏洞或执行静态分析的工具？"

#: ../../faq/programming.rst:59
msgid ""
"`Pylint <https://www.pylint.org/>`_ and `Pyflakes <https://github.com/PyCQA/"
"pyflakes>`_ do basic checking that will help you catch bugs sooner."
msgstr ""
"`Pylint <https://www.pylint.org/>`_ 和 `Pyflakes <https://github.com/PyCQA/"
"pyflakes>`_ 可进行基本检查来帮助你尽早捕捉漏洞。"

#: ../../faq/programming.rst:63
msgid ""
"Static type checkers such as `Mypy <http://mypy-lang.org/>`_, `Pyre <https://"
"pyre-check.org/>`_, and `Pytype <https://github.com/google/pytype>`_ can "
"check type hints in Python source code."
msgstr ""
"静态类型检查器，例如 `Mypy <http://mypy-lang.org/>`_ 、 `Pyre <https://pyre-"
"check.org/>`_ 和 `Pytype <https://github.com/google/pytype>`_ 可以检查Python"
"源代码中的类型提示。"

#: ../../faq/programming.rst:70
msgid "How can I create a stand-alone binary from a Python script?"
msgstr "我如何能够通过一个 Python 脚本创建一个独立运行的二进制文件？"

#: ../../faq/programming.rst:72
msgid ""
"You don't need the ability to compile Python to C code if all you want is a "
"stand-alone program that users can download and run without having to "
"install the Python distribution first.  There are a number of tools that "
"determine the set of modules required by a program and bind these modules "
"together with a Python binary to produce a single executable."
msgstr ""
"如果你想要的只是一个独立的程序，用户可以下载和运行而不必先安装Python发行版，"
"你就不需要将Python编译成C代码。有许多工具可以确定程序所需的模块集，并将这些模"
"块与Python二进制文件绑定在一起以生成单个可执行文件。"

#: ../../faq/programming.rst:78
msgid ""
"One is to use the freeze tool, which is included in the Python source tree "
"as ``Tools/freeze``. It converts Python byte code to C arrays; a C compiler "
"you can embed all your modules into a new program, which is then linked with "
"the standard Python modules."
msgstr ""
"一种是使用冻结工具，它包含在Python源代码树 ``Tools/freeze`` 中。它将Python字"
"节代码转换为C数组；一个C编译器，你可以将所有模块嵌入到一个新程序中，然后将其"
"与标准Python模块链接。"

#: ../../faq/programming.rst:83
msgid ""
"It works by scanning your source recursively for import statements (in both "
"forms) and looking for the modules in the standard Python path as well as in "
"the source directory (for built-in modules).  It then turns the bytecode for "
"modules written in Python into C code (array initializers that can be turned "
"into code objects using the marshal module) and creates a custom-made config "
"file that only contains those built-in modules which are actually used in "
"the program.  It then compiles the generated C code and links it with the "
"rest of the Python interpreter to form a self-contained binary which acts "
"exactly like your script."
msgstr ""
"它的工作原理是递归扫描源代码以获取import语句（两种形式），并在标准Python路径"
"和源目录（用于内置模块）中查找模块。 然后，它将用Python编写的模块的字节码转换"
"为C代码（可以使用编组模块转换为代码对象的数组初始化器），并创建一个定制的配置"
"文件，该文件仅包含程序中实际使用的内置模块。 然后，它编译生成的C代码并将其与"
"Python解释器的其余部分链接，以形成一个独立的二进制文件，其行为与你的脚本完全"
"相同。"

#: ../../faq/programming.rst:92
msgid ""
"Obviously, freeze requires a C compiler.  There are several other utilities "
"which don't:"
msgstr "显然，freeze 需要一个 C 编译器。 还有一些其他实用工具则不需要:"

#: ../../faq/programming.rst:95
msgid "`py2exe <http://www.py2exe.org/>`_ for Windows binaries"
msgstr "`py2exe <http://www.py2exe.org/>`_ 用于生成 Windows 版二进制可执行文件"

#: ../../faq/programming.rst:96
msgid ""
"`py2app <https://github.com/ronaldoussoren/py2app>`_ for Mac OS X binaries"
msgstr ""
"`py2app <https://github.com/ronaldoussoren/py2app>`_ 用于生成 Mac OS X 版二进"
"制可执行文件"

#: ../../faq/programming.rst:97
msgid ""
"`cx_Freeze <https://cx-freeze.readthedocs.io/en/latest/>`_ for cross-"
"platform binaries"
msgstr ""
"`cx_Freeze <https://cx-freeze.readthedocs.io/en/latest/>`_ 用于生成跨平台的二"
"进制可执行文件"

#: ../../faq/programming.rst:102
msgid "Are there coding standards or a style guide for Python programs?"
msgstr "是否有 Python 程序规范代码标准或风格指南？"

#: ../../faq/programming.rst:104
msgid ""
"Yes.  The coding style required for standard library modules is documented "
"as :pep:`8`."
msgstr "有的。 请参阅标准库模块所要求的代码风格描述文档 :pep:`8` 。"

#: ../../faq/programming.rst:109
msgid "Core Language"
msgstr "核心语言"

#: ../../faq/programming.rst:112
msgid "Why am I getting an UnboundLocalError when the variable has a value?"
msgstr "当变量有值时，为什么会出现UnboundLocalError？"

#: ../../faq/programming.rst:114
msgid ""
"It can be a surprise to get the UnboundLocalError in previously working code "
"when it is modified by adding an assignment statement somewhere in the body "
"of a function."
msgstr ""
"通过在函数体中的某处添加赋值语句，导致以前正常工作的代码被修改而得到 "
"UnboundLocalError 会令人感到意外。"

#: ../../faq/programming.rst:118
msgid "This code:"
msgstr "以下代码："

#: ../../faq/programming.rst:126
msgid "works, but this code:"
msgstr "正常工作，但是以下代码"

#: ../../faq/programming.rst:133
msgid "results in an UnboundLocalError:"
msgstr "会得到一个 UnboundLocalError ："

#: ../../faq/programming.rst:140
msgid ""
"This is because when you make an assignment to a variable in a scope, that "
"variable becomes local to that scope and shadows any similarly named "
"variable in the outer scope.  Since the last statement in foo assigns a new "
"value to ``x``, the compiler recognizes it as a local variable.  "
"Consequently when the earlier ``print(x)`` attempts to print the "
"uninitialized local variable and an error results."
msgstr ""
"这是因为当你对作用域中的变量进行赋值时，该变量将成为该作用域的局部变量，并在"
"外部作用域中隐藏任何类似命名的变量。由于foo中的最后一个语句为 ``x`` 分配了一"
"个新值，编译器会将其识别为局部变量。因此，当先前的 ``print(x)`` 尝试打印未初"
"始化的局部变量时会导致错误。"

#: ../../faq/programming.rst:147
msgid ""
"In the example above you can access the outer scope variable by declaring it "
"global:"
msgstr "在上面的示例中，你可以通过将其声明为全局来访问外部作用域变量："

#: ../../faq/programming.rst:158
msgid ""
"This explicit declaration is required in order to remind you that (unlike "
"the superficially analogous situation with class and instance variables) you "
"are actually modifying the value of the variable in the outer scope:"
msgstr ""
"这个显式声明是必需的，以便提醒你（与类和实例变量的表面类似情况不同），你实际"
"上是在外部作用域中修改变量的值"

#: ../../faq/programming.rst:165
msgid ""
"You can do a similar thing in a nested scope using the :keyword:`nonlocal` "
"keyword:"
msgstr "你可以使用 :keyword:`nonlocal` 关键字在嵌套作用域中执行类似的操作："

#: ../../faq/programming.rst:182
msgid "What are the rules for local and global variables in Python?"
msgstr "Python中的局部变量和全局变量有哪些规则？"

#: ../../faq/programming.rst:184
msgid ""
"In Python, variables that are only referenced inside a function are "
"implicitly global.  If a variable is assigned a value anywhere within the "
"function's body, it's assumed to be a local unless explicitly declared as "
"global."
msgstr ""
"在Python中，仅在函数内引用的变量是隐式全局变量。如果在函数体内的任何位置为变"
"量赋值，则除非明确声明为全局，否则将其视为局部值。"

#: ../../faq/programming.rst:188
msgid ""
"Though a bit surprising at first, a moment's consideration explains this.  "
"On one hand, requiring :keyword:`global` for assigned variables provides a "
"bar against unintended side-effects.  On the other hand, if ``global`` was "
"required for all global references, you'd be using ``global`` all the time.  "
"You'd have to declare as global every reference to a built-in function or to "
"a component of an imported module.  This clutter would defeat the usefulness "
"of the ``global`` declaration for identifying side-effects."
msgstr ""
"虽然起初有点令人惊讶，但片刻考虑就可以解释。一方面，要求 :keyword:`global` 表"
"示已分配的变量可以防止意外的副作用。另一方面，如果所有全局引用都需要 "
"``global`` ，那么你一直都在使用 ``global`` 。你必须将对内置函数或导入模块的组"
"件的每个引用声明为全局。这种杂乱会破坏 ``global`` 声明用于识别副作用的有用"
"性。"

#: ../../faq/programming.rst:198
msgid ""
"Why do lambdas defined in a loop with different values all return the same "
"result?"
msgstr "为什么在具有不同值的循环中定义的lambdas都返回相同的结果？"

#: ../../faq/programming.rst:200
msgid ""
"Assume you use a for loop to define a few different lambdas (or even plain "
"functions), e.g.::"
msgstr "假设你使用for循环来定义几个不同的 lambda （甚至是普通函数），例如：::"

#: ../../faq/programming.rst:207
msgid ""
"This gives you a list that contains 5 lambdas that calculate ``x**2``.  You "
"might expect that, when called, they would return, respectively, ``0``, "
"``1``, ``4``, ``9``, and ``16``.  However, when you actually try you will "
"see that they all return ``16``::"
msgstr ""
"这给你一个包含5个lambdas的列表，它们计算 ``x**2`` 。你可能会期望，当它们被调"
"用时，它们将分别返回 ``0`` 、 ``1`` 、 ``4`` 、 ``9`` 和 ``16`` 。但是，当你"
"真正尝试时，你会看到它们都返回 ``16`` 。::"

#: ../../faq/programming.rst:217
msgid ""
"This happens because ``x`` is not local to the lambdas, but is defined in "
"the outer scope, and it is accessed when the lambda is called --- not when "
"it is defined.  At the end of the loop, the value of ``x`` is ``4``, so all "
"the functions now return ``4**2``, i.e. ``16``.  You can also verify this by "
"changing the value of ``x`` and see how the results of the lambdas change::"
msgstr ""
"发生这种情况是因为 ``x`` 不是lambdas的内部变量，而是在外部作用域中定义，并且"
"在调用lambda时访问它 - 而不是在定义它时。 在循环结束时， ``x`` 的值是 "
"``4`` ，所以所有的函数现在返回 ``4**2`` ，即 ``16`` 。你还可以通过更改 ``x`` "
"的值来验证这一点，并查看lambdas的结果如何变化::"

#: ../../faq/programming.rst:227
msgid ""
"In order to avoid this, you need to save the values in variables local to "
"the lambdas, so that they don't rely on the value of the global ``x``::"
msgstr ""
"为了避免这种情况，你需要将值保存在lambdas的局部变量中，这样它们就不依赖于全局"
"``x`` 的值 ::"

#: ../../faq/programming.rst:234
msgid ""
"Here, ``n=x`` creates a new variable ``n`` local to the lambda and computed "
"when the lambda is defined so that it has the same value that ``x`` had at "
"that point in the loop.  This means that the value of ``n`` will be ``0`` in "
"the first lambda, ``1`` in the second, ``2`` in the third, and so on. "
"Therefore each lambda will now return the correct result::"
msgstr ""
"这里， ``n=x`` 在lambda本地创建一个新的变量 ``n`` ，并在定义lambda时计算，使"
"它具有与 ``x`` 在循环中该点相同的值。这意味着 ``n`` 的值在第一个lambda中为 "
"``0`` ，在第二个lambda中为 ``1`` ，在第三个中为 ``2`` ，依此类推。因此每个"
"lambda现在将返回正确的结果::"

#: ../../faq/programming.rst:245
msgid ""
"Note that this behaviour is not peculiar to lambdas, but applies to regular "
"functions too."
msgstr "请注意，这种行为并不是lambda所特有的，但也适用于常规函数。"

#: ../../faq/programming.rst:250
msgid "How do I share global variables across modules?"
msgstr "如何跨模块共享全局变量？"

#: ../../faq/programming.rst:252
msgid ""
"The canonical way to share information across modules within a single "
"program is to create a special module (often called config or cfg).  Just "
"import the config module in all modules of your application; the module then "
"becomes available as a global name.  Because there is only one instance of "
"each module, any changes made to the module object get reflected "
"everywhere.  For example:"
msgstr ""
"在单个程序中跨模块共享信息的规范方法是创建一个特殊模块（通常称为config或"
"cfg）。只需在应用程序的所有模块中导入配置模块；然后该模块可用作全局名称。因为"
"每个模块只有一个实例，所以对模块对象所做的任何更改都会在任何地方反映出来。 例"
"如："

#: ../../faq/programming.rst:258
msgid "config.py::"
msgstr "config.py::"

#: ../../faq/programming.rst:262
msgid "mod.py::"
msgstr "mod.py::"

#: ../../faq/programming.rst:267
msgid "main.py::"
msgstr "main.py::"

#: ../../faq/programming.rst:273
msgid ""
"Note that using a module is also the basis for implementing the Singleton "
"design pattern, for the same reason."
msgstr "请注意，出于同样的原因，使用模块也是实现Singleton设计模式的基础。"

#: ../../faq/programming.rst:278
msgid "What are the \"best practices\" for using import in a module?"
msgstr "导入模块的“最佳实践”是什么？"

#: ../../faq/programming.rst:280
msgid ""
"In general, don't use ``from modulename import *``.  Doing so clutters the "
"importer's namespace, and makes it much harder for linters to detect "
"undefined names."
msgstr ""
"通常，不要使用 ``from modulename import *`` 。这样做会使导入器的命名空间变得"
"混乱，并且使得连接器更难以检测未定义的名称。"

#: ../../faq/programming.rst:284
msgid ""
"Import modules at the top of a file.  Doing so makes it clear what other "
"modules your code requires and avoids questions of whether the module name "
"is in scope. Using one import per line makes it easy to add and delete "
"module imports, but using multiple imports per line uses less screen space."
msgstr ""
"在文件的顶部导入模块。这样做可以清楚地了解代码所需的其他模块，并避免了模块名"
"称是否在范围内的问题。每行导入一个模块可以轻松添加和删除导入的模块，但每行导"
"入多个模块会占用更少的屏幕空间。"

#: ../../faq/programming.rst:289
msgid "It's good practice if you import modules in the following order:"
msgstr "如果按以下顺序导入模块，这是一种很好的做法："

#: ../../faq/programming.rst:291
msgid "standard library modules -- e.g. ``sys``, ``os``, ``getopt``, ``re``"
msgstr "标准库模块 -- 例如： ``sys``, ``os``, ``getopt``, ``re``"

#: ../../faq/programming.rst:292
msgid ""
"third-party library modules (anything installed in Python's site-packages "
"directory) -- e.g. mx.DateTime, ZODB, PIL.Image, etc."
msgstr ""
"第三方库模块（安装在Python的site-packages目录中的任何内容） --  例如mx."
"DateTime，ZODB，PIL.Image等"

#: ../../faq/programming.rst:294
msgid "locally-developed modules"
msgstr "本地开发的模块"

#: ../../faq/programming.rst:296
msgid ""
"It is sometimes necessary to move imports to a function or class to avoid "
"problems with circular imports.  Gordon McMillan says:"
msgstr ""
"有时需要将模块导入语句移动到函数或类里面，以避免循环导入问题。Gordon "
"McMillan 说："

#: ../../faq/programming.rst:299
msgid ""
"Circular imports are fine where both modules use the \"import <module>\" "
"form of import.  They fail when the 2nd module wants to grab a name out of "
"the first (\"from module import name\") and the import is at the top level.  "
"That's because names in the 1st are not yet available, because the first "
"module is busy importing the 2nd."
msgstr ""
"当两个模块都使用  \"import <module>\" 的导入形式时，循环导入就可以了。但是当"
"第 2 个模块想从第 1 个模块中获取一个名称 (\"from module import name\") 并且导"
"入位于顶层时，就会出错。 这是因为第 1 个模块中的名称还不可用，因为第 1 个模块"
"正在忙着导入第 2 个模块。"

#: ../../faq/programming.rst:305
msgid ""
"In this case, if the second module is only used in one function, then the "
"import can easily be moved into that function.  By the time the import is "
"called, the first module will have finished initializing, and the second "
"module can do its import."
msgstr ""
"在这种情况下，如果第二个模块仅用于一个函数，则可以轻松地将模块导入语句移动到"
"该函数中。调用导入时，第一个模块将完成初始化，第二个模块可以进行导入。"

#: ../../faq/programming.rst:310
msgid ""
"It may also be necessary to move imports out of the top level of code if "
"some of the modules are platform-specific.  In that case, it may not even be "
"possible to import all of the modules at the top of the file.  In this case, "
"importing the correct modules in the corresponding platform-specific code is "
"a good option."
msgstr ""
"如果某些模块是特定于平台的，则可能还需要将模块导入语句移出顶级代码。在这种情"
"况下，甚至可能无法导入文件顶部的所有模块。在这种情况下，在相应的特定于平台的"
"代码中导入正确的模块是一个很好的选择。"

#: ../../faq/programming.rst:315
msgid ""
"Only move imports into a local scope, such as inside a function definition, "
"if it's necessary to solve a problem such as avoiding a circular import or "
"are trying to reduce the initialization time of a module.  This technique is "
"especially helpful if many of the imports are unnecessary depending on how "
"the program executes.  You may also want to move imports into a function if "
"the modules are only ever used in that function.  Note that loading a module "
"the first time may be expensive because of the one time initialization of "
"the module, but loading a module multiple times is virtually free, costing "
"only a couple of dictionary lookups.  Even if the module name has gone out "
"of scope, the module is probably available in :data:`sys.modules`."
msgstr ""
"只有当需要解决诸如避免循环导入或试图减少模块初始化时间的问题时，才可以将导入"
"移动到本地范围，例如在函数定义中。如果根据程序的执行方式，许多导入是不必要"
"的，这种技术尤其有用。如果仅在某个函数中使用模块，您还可能希望将导入移到该函"
"数中。请注意，第一次加载模块可能会因为模块的一次初始化而代价高昂，但多次加载"
"模块实际上是免费的，只需进行几次字典查找。即使模块名称超出了作用域，模块也可"
"能在 :data:`sys.modules` 中可用。 "

#: ../../faq/programming.rst:328
msgid "Why are default values shared between objects?"
msgstr "为什么对象之间会共享默认值？"

#: ../../faq/programming.rst:330
msgid ""
"This type of bug commonly bites neophyte programmers.  Consider this "
"function::"
msgstr "这种类型的缺陷通常会惹恼新手程序员。考虑这个函数 ::"

#: ../../faq/programming.rst:337
msgid ""
"The first time you call this function, ``mydict`` contains a single item.  "
"The second time, ``mydict`` contains two items because when ``foo()`` begins "
"executing, ``mydict`` starts out with an item already in it."
msgstr ""
"第一次调用此函数时，``mydict`` 包含一项。第二次，``mydict`` 包含两项，因为当 "
"``foo()`` 开始执行时， ``mydict`` 中已经有一项了。"

#: ../../faq/programming.rst:341
msgid ""
"It is often expected that a function call creates new objects for default "
"values. This is not what happens. Default values are created exactly once, "
"when the function is defined.  If that object is changed, like the "
"dictionary in this example, subsequent calls to the function will refer to "
"this changed object."
msgstr ""
"函数调用经常被期望为默认值创建新的对象。 但实际情况并非如此。 默认值会在函数"
"定义时一次性地创建。 如果对象发生改变，就如本示例中的字典那样，则对函数的后续"
"调用将会引用这个被改变的对象。"

#: ../../faq/programming.rst:346
msgid ""
"By definition, immutable objects such as numbers, strings, tuples, and "
"``None``, are safe from change. Changes to mutable objects such as "
"dictionaries, lists, and class instances can lead to confusion."
msgstr ""
"按照定义，不可变对象例如数字、字符串、元组和 ``None`` 因为不可变所以是安全"
"的。 对可变对象例如字典、列表和类实例的改变则可能造成迷惑。"

#: ../../faq/programming.rst:350
msgid ""
"Because of this feature, it is good programming practice to not use mutable "
"objects as default values.  Instead, use ``None`` as the default value and "
"inside the function, check if the parameter is ``None`` and create a new "
"list/dictionary/whatever if it is.  For example, don't write::"
msgstr ""
"由于这一特性，在编程中应遵循的一项好习惯是不使用可变对象作为默认值。 而应使"
"用 ``None`` 作为默认值和函数中的值，检查值为 ``None`` 的形参并创建相应的列"
"表、字典或其他可变对象。 例如，不要这样写::"

#: ../../faq/programming.rst:358
msgid "but::"
msgstr "而要这样写::"

#: ../../faq/programming.rst:364
msgid ""
"This feature can be useful.  When you have a function that's time-consuming "
"to compute, a common technique is to cache the parameters and the resulting "
"value of each call to the function, and return the cached value if the same "
"value is requested again.  This is called \"memoizing\", and can be "
"implemented like this::"
msgstr ""
"这一特性有时会很有用处。 当你有一个需要进行大量耗时计算的函数时，一个常见技巧"
"是将每次调用函数的参数和结果值缓存起来，并在同样的值被再次请求时返回缓存的"
"值。 这称为“记忆”，具体实现方式可以是这样的::"

#: ../../faq/programming.rst:379
msgid ""
"You could use a global variable containing a dictionary instead of the "
"default value; it's a matter of taste."
msgstr ""
"你也可以使用包含一个字典的全局变量而不使用参数默认值；这完全取决于个人偏好。"

#: ../../faq/programming.rst:384
msgid ""
"How can I pass optional or keyword parameters from one function to another?"
msgstr "如何将可选参数或关键字参数从一个函数传递到另一个函数？"

#: ../../faq/programming.rst:386
msgid ""
"Collect the arguments using the ``*`` and ``**`` specifiers in the "
"function's parameter list; this gives you the positional arguments as a "
"tuple and the keyword arguments as a dictionary.  You can then pass these "
"arguments when calling another function by using ``*`` and ``**``::"
msgstr ""
"使用函数参数列表中的 ``*`` 和 ``**`` 说明符收集参数;这会将位置参数作为元组，"
"将关键字参数作为字典。然后，您可以使用 ``*`` 和 ``**`` 调用另一个函数时传递这"
"些参数："

#: ../../faq/programming.rst:405
msgid "What is the difference between arguments and parameters?"
msgstr "形参和实参之间有什么区别？"

#: ../../faq/programming.rst:407
msgid ""
":term:`Parameters <parameter>` are defined by the names that appear in a "
"function definition, whereas :term:`arguments <argument>` are the values "
"actually passed to a function when calling it.  Parameters define what types "
"of arguments a function can accept.  For example, given the function "
"definition::"
msgstr ""
":term:`形参 <parameter>` 是指出现在函数定义中的名称，而 :term:`实参 "
"<argument>` 则是在调用函数时实际传入的值。 形参定义了一个函数能接受何种类型的"
"实参。 例如，对于以下函数定义::"

#: ../../faq/programming.rst:415
msgid ""
"*foo*, *bar* and *kwargs* are parameters of ``func``.  However, when calling "
"``func``, for example::"
msgstr ""
"*foo*, *bar* 和 *kwargs* 是 ``func`` 的形参。 但是，在调用 ``func`` 时，例"
"如："

#: ../../faq/programming.rst:420
msgid "the values ``42``, ``314``, and ``somevar`` are arguments."
msgstr "实际的值 ``42``, ``314`` 和 ``somevar`` 则是实参。"

#: ../../faq/programming.rst:424
msgid "Why did changing list 'y' also change list 'x'?"
msgstr "为什么更改列表 'y' 也会更改列表 'x'？"

#: ../../faq/programming.rst:426
msgid "If you wrote code like::"
msgstr "如果你编写的代码就像下面一样："

#: ../../faq/programming.rst:436
msgid ""
"you might be wondering why appending an element to ``y`` changed ``x`` too."
msgstr "你可能想知道为什么追加一个元素也改变了x。"

#: ../../faq/programming.rst:438
msgid "There are two factors that produce this result:"
msgstr "产生这种结果有两个因素："

#: ../../faq/programming.rst:440
msgid ""
"Variables are simply names that refer to objects.  Doing ``y = x`` doesn't "
"create a copy of the list -- it creates a new variable ``y`` that refers to "
"the same object ``x`` refers to.  This means that there is only one object "
"(the list), and both ``x`` and ``y`` refer to it."
msgstr ""
"变量只是指向具体对象的名称。 执行 ``y = x`` 并不会为列表创建一个副本 —— 它只"
"是创建了一个新变量 ``y`` 指向 ``x`` 所指向的同一对象。 这意味着只存在一个对象"
"（列表），``x`` 和 ``y`` 都是对它的引用。"

#: ../../faq/programming.rst:444
msgid ""
"Lists are :term:`mutable`, which means that you can change their content."
msgstr "列表属于 :term:`mutable` 对象，这意味着你可以改变它的内容。"

#: ../../faq/programming.rst:446
msgid ""
"After the call to :meth:`~list.append`, the content of the mutable object "
"has changed from ``[]`` to ``[10]``.  Since both the variables refer to the "
"same object, using either name accesses the modified value ``[10]``."
msgstr ""
"在调用 :meth:`~list.append` 之后，这个可变对象的内容由 ``[]`` 变为 "
"``[10]``。 由于两个变量都指向同一对象，因此使用任何一个名称所访问到的都是修改"
"后的值 ``[10]``。"

#: ../../faq/programming.rst:450
msgid "If we instead assign an immutable object to ``x``::"
msgstr "如果我们改为将不可变对象赋值给 ``x``::"

#: ../../faq/programming.rst:460
msgid ""
"we can see that in this case ``x`` and ``y`` are not equal anymore.  This is "
"because integers are :term:`immutable`, and when we do ``x = x + 1`` we are "
"not mutating the int ``5`` by incrementing its value; instead, we are "
"creating a new object (the int ``6``) and assigning it to ``x`` (that is, "
"changing which object ``x`` refers to).  After this assignment we have two "
"objects (the ints ``6`` and ``5``) and two variables that refer to them "
"(``x`` now refers to ``6`` but ``y`` still refers to ``5``)."
msgstr ""
"我们可以看到在此情况下 ``x`` 和 ``y`` 就不再相等了。 这是因为整数是 :term:"
"`immutable` 对象，当我们执行 ``x = x + 1`` 时我们并不是改变了 ``5`` 这个对象"
"的值；而是创建了一个新的对象 (整数 ``6``) 并将其赋值给 ``x`` (也就是改变了 "
"``x`` 所指向的对象)。 在赋值之后我们就有了两个对象 (整数 ``6`` 和 ``5``) 以及"
"分别指向它们的两个变量 (``x`` 现在指向 ``6`` 而 ``y`` 仍然指向 ``5``)。"

#: ../../faq/programming.rst:468
msgid ""
"Some operations (for example ``y.append(10)`` and ``y.sort()``) mutate the "
"object, whereas superficially similar operations (for example ``y = y + "
"[10]`` and ``sorted(y)``) create a new object.  In general in Python (and in "
"all cases in the standard library) a method that mutates an object will "
"return ``None`` to help avoid getting the two types of operations confused.  "
"So if you mistakenly write ``y.sort()`` thinking it will give you a sorted "
"copy of ``y``, you'll instead end up with ``None``, which will likely cause "
"your program to generate an easily diagnosed error."
msgstr ""
"某些操作 (例如 ``y.append(10)`` 和 ``y.sort()``) 是改变原对象，而看上去相似的"
"另一些操作 (例如 ``y = y + [10]`` 和 ``sorted(y)``) 则是创建新对象。 通常在 "
"Python 中 (以及在标准库的所有代码中) 会改变原对象的方法将返回 ``None`` 以帮助"
"避免混淆这两种不同类型的操作。 因此如果你错误地使用了 ``y.sort()`` 并期望它将"
"返回一个经过排序的 ``y`` 的副本，你得到的结果将会是 ``None``，这将导致你的程"
"序产生一个容易诊断的错误。"

#: ../../faq/programming.rst:477
msgid ""
"However, there is one class of operations where the same operation sometimes "
"has different behaviors with different types:  the augmented assignment "
"operators.  For example, ``+=`` mutates lists but not tuples or ints "
"(``a_list += [1, 2, 3]`` is equivalent to ``a_list.extend([1, 2, 3])`` and "
"mutates ``a_list``, whereas ``some_tuple += (1, 2, 3)`` and ``some_int += "
"1`` create new objects)."
msgstr ""
"但是，还存在一类操作，不同的类型执行相同的操作会有不同的行为：那就是增强赋值"
"运算符。 例如，``+=`` 会原地改变列表，但不会改变元组或整数 (``a_list += [1, "
"2, 3]`` 与 ``a_list.extend([1, 2, 3])`` 一样都会改变 ``a_list``，而 "
"``some_tuple += (1, 2, 3)`` 和 ``some_int += 1`` 则会创建新的对象)。"

#: ../../faq/programming.rst:484
msgid "In other words:"
msgstr "换而言之："

#: ../../faq/programming.rst:486
msgid ""
"If we have a mutable object (:class:`list`, :class:`dict`, :class:`set`, "
"etc.), we can use some specific operations to mutate it and all the "
"variables that refer to it will see the change."
msgstr ""
"如果我们有一个可变对象 (:class:`list`, :class:`dict`, :class:`set` 等等)，我"
"们可以使用某些特定的操作来改变它，所有指向它的变量都会显示它的改变。"

#: ../../faq/programming.rst:489
msgid ""
"If we have an immutable object (:class:`str`, :class:`int`, :class:`tuple`, "
"etc.), all the variables that refer to it will always see the same value, "
"but operations that transform that value into a new value always return a "
"new object."
msgstr ""
"如果我们有一个不可变对象 (:class:`str`, :class:`int`, :class:`tuple` 等等)，"
"所有指向它的变量都将显示相同样的值，但凡是会改变这个值的操作将总是返回一个新"
"对象。"

#: ../../faq/programming.rst:494
msgid ""
"If you want to know if two variables refer to the same object or not, you "
"can use the :keyword:`is` operator, or the built-in function :func:`id`."
msgstr ""
"如果你想知道两个变量是否指向相同的对象，你可以使用 :keyword:`is` 运算符，或内"
"置函数 :func:`id`。"

#: ../../faq/programming.rst:499
msgid "How do I write a function with output parameters (call by reference)?"
msgstr "如何编写带输出参数的函数（通过引用调用）？"

#: ../../faq/programming.rst:501
msgid ""
"Remember that arguments are passed by assignment in Python.  Since "
"assignment just creates references to objects, there's no alias between an "
"argument name in the caller and callee, and so no call-by-reference per se.  "
"You can achieve the desired effect in a number of ways."
msgstr ""
"请记住在 Python 中参数是通过赋值来传递的。 由于赋值只是创建了对象的引用，因此"
"在调用者和被调用者的参数名称之间没有别名，所以本身是没有按引用调用的。 你可以"
"通过多种方式实现所需的效果。"

#: ../../faq/programming.rst:506
msgid "By returning a tuple of the results::"
msgstr "通过返回一个结果元组::"

#: ../../faq/programming.rst:517
msgid "This is almost always the clearest solution."
msgstr "这几乎总是最清晰明了的解决方案。"

#: ../../faq/programming.rst:519
msgid ""
"By using global variables.  This isn't thread-safe, and is not recommended."
msgstr "通过使用全局变量。 这种方式不是线程安全的，而且也不受推荐。"

#: ../../faq/programming.rst:521
msgid "By passing a mutable (changeable in-place) object::"
msgstr "通过传递一个可变 (即可原地修改的) 对象::"

#: ../../faq/programming.rst:532
msgid "By passing in a dictionary that gets mutated::"
msgstr "通过传递一个会被改变的字典::"

#: ../../faq/programming.rst:543
msgid "Or bundle up values in a class instance::"
msgstr "或者在一个类实例中捆绑值::"

#: ../../faq/programming.rst:560
msgid "There's almost never a good reason to get this complicated."
msgstr "几乎没有任何适当理由将问题如此复杂化。"

#: ../../faq/programming.rst:562
msgid "Your best choice is to return a tuple containing the multiple results."
msgstr "你的最佳选择是返回一个包含多个结果的元组。"

#: ../../faq/programming.rst:566
msgid "How do you make a higher order function in Python?"
msgstr "如何在Python中创建高阶函数？"

#: ../../faq/programming.rst:568
msgid ""
"You have two choices: you can use nested scopes or you can use callable "
"objects. For example, suppose you wanted to define ``linear(a,b)`` which "
"returns a function ``f(x)`` that computes the value ``a*x+b``.  Using nested "
"scopes::"
msgstr ""
"你有两种选择：使用嵌套作用域，或者使用可调用对象。 例如，假设你想要定义 "
"``linear(a,b)`` 使其返回一个函数 ``f(x)`` 来设计 ``a*x+b`` 的值。 可以使用以"
"下嵌套作用域::"

#: ../../faq/programming.rst:577
msgid "Or using a callable object::"
msgstr "或使用一个可调用对象::"

#: ../../faq/programming.rst:587
msgid "In both cases, ::"
msgstr "在两种情况下，::"

#: ../../faq/programming.rst:591
msgid "gives a callable object where ``taxes(10e6) == 0.3 * 10e6 + 2``."
msgstr "都会给出一个可调用对象，使得 ``taxes(10e6) == 0.3 * 10e6 + 2``."

#: ../../faq/programming.rst:593
msgid ""
"The callable object approach has the disadvantage that it is a bit slower "
"and results in slightly longer code.  However, note that a collection of "
"callables can share their signature via inheritance::"
msgstr ""
"可调用对象方式的缺点是速度略慢且生成的代码略长。 但是，请注意一组可调用对象能"
"够通过继承来共享签名::"

#: ../../faq/programming.rst:602
msgid "Object can encapsulate state for several methods::"
msgstr "对象可以封装多个方法的状态::"

#: ../../faq/programming.rst:620
msgid ""
"Here ``inc()``, ``dec()`` and ``reset()`` act like functions which share the "
"same counting variable."
msgstr ""
"这里 ``inc()``, ``dec()`` 和 ``reset()`` 将表现为共享同一计数变量的多个函数。"

#: ../../faq/programming.rst:625
msgid "How do I copy an object in Python?"
msgstr "如何在Python中复制对象？"

#: ../../faq/programming.rst:627
msgid ""
"In general, try :func:`copy.copy` or :func:`copy.deepcopy` for the general "
"case. Not all objects can be copied, but most can."
msgstr ""
"一般来说，通常情况下请尝试 :func:`copy.copy` 或 :func:`copy.deepcopy`。 不是"
"所有对象都可以复制，但多数都是可以的。"

#: ../../faq/programming.rst:630
msgid ""
"Some objects can be copied more easily.  Dictionaries have a :meth:`~dict."
"copy` method::"
msgstr "某些对象可以方便地复制。 例如字典具有 :meth:`~dict.copy` 方法::"

#: ../../faq/programming.rst:635
msgid "Sequences can be copied by slicing::"
msgstr "序列可以通过切片来复制::"

#: ../../faq/programming.rst:641
msgid "How can I find the methods or attributes of an object?"
msgstr "如何找到对象的方法或属性？"

#: ../../faq/programming.rst:643
msgid ""
"For an instance x of a user-defined class, ``dir(x)`` returns an "
"alphabetized list of the names containing the instance attributes and "
"methods and attributes defined by its class."
msgstr ""
"对于一个用户自定义类的实例 x，``dir(x)`` 将返回一个按字母顺序排序的包含实例属"
"性和方法及其类所定义的属性名称的列表。"

#: ../../faq/programming.rst:649
msgid "How can my code discover the name of an object?"
msgstr "我的代码如何才能发现对象的名称？"

#: ../../faq/programming.rst:651
msgid ""
"Generally speaking, it can't, because objects don't really have names. "
"Essentially, assignment always binds a name to a value; the same is true of "
"``def`` and ``class`` statements, but in that case the value is a callable. "
"Consider the following code::"
msgstr ""
"通常来说是做不到的，因为对象并不真正具有名称。 在本质上，赋值总是会将一个名称"
"绑定到某个值；``def`` 和 ``class`` 语句也是如此，但在这种情况下该值是一个可调"
"用对象。 考虑以下代码::"

#: ../../faq/programming.rst:667
msgid ""
"Arguably the class has a name: even though it is bound to two names and "
"invoked through the name B the created instance is still reported as an "
"instance of class A.  However, it is impossible to say whether the "
"instance's name is a or b, since both names are bound to the same value."
msgstr ""
"不严谨地讲，该类有一个名称：虽然它是绑定了两个名称并通过名称 B 发起调用，所创"
"建的实例仍然被视为类 A 的一个实例。 但是实例的名称则无法确定地说是 a 或是 b，"
"因为有两个名称被绑定到了同一个值。"

#: ../../faq/programming.rst:672
msgid ""
"Generally speaking it should not be necessary for your code to \"know the "
"names\" of particular values. Unless you are deliberately writing "
"introspective programs, this is usually an indication that a change of "
"approach might be beneficial."
msgstr ""
"一般来说你的代码应该没有必要“知道”特定值的名称。 除非你是在编写特殊的内省程"
"序，出现这样的问题通常表明如果改变方式可能会更有利。"

#: ../../faq/programming.rst:677
msgid ""
"In comp.lang.python, Fredrik Lundh once gave an excellent analogy in answer "
"to this question:"
msgstr ""
"在 comp.lang.python 中，Fredrik Lundh 在回答这样的问题时曾经给出过一个绝佳的"
"类比："

#: ../../faq/programming.rst:680
msgid ""
"The same way as you get the name of that cat you found on your porch: the "
"cat (object) itself cannot tell you its name, and it doesn't really care -- "
"so the only way to find out what it's called is to ask all your neighbours "
"(namespaces) if it's their cat (object)..."
msgstr ""
"跟你找出在你家门廊见到的某只猫的名字所用的办法一样：猫（对象）自己无法告诉你"
"它的名字，它根本就不在乎 —— 所以找出它叫什么名字的唯一办法是问你的所有邻居"
"（命名空间）那是不是他们的猫（对象）……"

#: ../../faq/programming.rst:685
msgid ""
"....and don't be surprised if you'll find that it's known by many names, or "
"no name at all!"
msgstr "……并且如果你发现它有很多名字或根本没有名字也不必觉得惊讶！"

#: ../../faq/programming.rst:690
msgid "What's up with the comma operator's precedence?"
msgstr "逗号运算符的优先级是什么？"

#: ../../faq/programming.rst:692
msgid "Comma is not an operator in Python.  Consider this session::"
msgstr "逗号在 Python 中不是运算符。 考虑这个例子::"

#: ../../faq/programming.rst:697
msgid ""
"Since the comma is not an operator, but a separator between expressions the "
"above is evaluated as if you had entered::"
msgstr "由于逗号不是运算符而是表达式之间的分隔符，以上代码的含义就相当于::"

#: ../../faq/programming.rst:702
msgid "not::"
msgstr "而不是::"

#: ../../faq/programming.rst:706
msgid ""
"The same is true of the various assignment operators (``=``, ``+=`` etc).  "
"They are not truly operators but syntactic delimiters in assignment "
"statements."
msgstr ""
"对于各种赋值运算符 (``=``, ``+=`` 等) 来说同样如此。 它们并不是真正的运算符而"
"是赋值语句中的语法分隔符。"

#: ../../faq/programming.rst:711
msgid "Is there an equivalent of C's \"?:\" ternary operator?"
msgstr "是否有与 C 的 \"?:\" 三目运算符等价的东西？"

#: ../../faq/programming.rst:713
msgid "Yes, there is. The syntax is as follows::"
msgstr "有的。 相应语法如下::"

#: ../../faq/programming.rst:720
msgid ""
"Before this syntax was introduced in Python 2.5, a common idiom was to use "
"logical operators::"
msgstr "在 Python 2.5 引入此语法之前，常见的做法是使用逻辑运算符::"

#: ../../faq/programming.rst:725
msgid ""
"However, this idiom is unsafe, as it can give wrong results when *on_true* "
"has a false boolean value.  Therefore, it is always better to use the ``... "
"if ... else ...`` form."
msgstr ""
"然而这种做法并不保险，因为当 *on_true* 具有布尔假值时将会给出错误的结果。 所"
"以，使用 ``... if ... else ...`` 形式总是会更好。"

#: ../../faq/programming.rst:731
msgid "Is it possible to write obfuscated one-liners in Python?"
msgstr "是否可以用Python编写混淆的单行程序?"

#: ../../faq/programming.rst:733
msgid ""
"Yes.  Usually this is done by nesting :keyword:`lambda` within :keyword:`!"
"lambda`.  See the following three examples, due to Ulf Bartelt::"
msgstr ""
"可以。通常是在 :keyword:`lambda` 中嵌套 :keyword:`!lambda` 来实现的。请参阅以"
"下三个来自 Ulf Bartelt 的示例代码："

#: ../../faq/programming.rst:760
msgid "Don't try this at home, kids!"
msgstr "请不要在家里尝试，骚年！"

#: ../../faq/programming.rst:766
msgid "What does the slash(/) in the parameter list of a function mean?"
msgstr "函数参数列表中的斜杠（/）是什么意思？"

#: ../../faq/programming.rst:768
msgid ""
"A slash in the argument list of a function denotes that the parameters prior "
"to it are positional-only.  Positional-only parameters are the ones without "
"an externally-usable name.  Upon calling a function that accepts positional-"
"only parameters, arguments are mapped to parameters based solely on their "
"position. For example, :func:`divmod` is a function that accepts positional-"
"only parameters. Its documentation looks like this::"
msgstr ""
"函数参数列表中的斜杠表示在它之前的形参是仅限位置形参。 仅限位置形参没有外部可"
"用的名称。  在调用接受仅限位置形参的函数时，参数只会基于它们的位置被映射到形"
"参。 例如，:func:`divmod` 是一个接受仅限位置形参的函数。 它的文档是这样的::"

#: ../../faq/programming.rst:781
msgid ""
"The slash at the end of the parameter list means that both parameters are "
"positional-only. Thus, calling :func:`divmod` with keyword arguments would "
"lead to an error::"
msgstr ""
"在形参列表末尾的斜杠意味着两个形参都是仅限位置形参。 因此，附带关键字参数调"
"用 :func:`divmod` 将会导致报错::"

#: ../../faq/programming.rst:792
msgid "Numbers and strings"
msgstr "数字和字符串"

#: ../../faq/programming.rst:795
msgid "How do I specify hexadecimal and octal integers?"
msgstr "如何指定十六进制和八进制整数？"

#: ../../faq/programming.rst:797
msgid ""
"To specify an octal digit, precede the octal value with a zero, and then a "
"lower or uppercase \"o\".  For example, to set the variable \"a\" to the "
"octal value \"10\" (8 in decimal), type::"
msgstr ""
"要指定一个八进制数码，则在八进制值之前加一个零和一个小写或大写字母 \"o\" 作为"
"前缀。 例如，要将变量 \"a\" 设为八进制的 \"10\" (十进制的 8)，就输入::"

#: ../../faq/programming.rst:805
msgid ""
"Hexadecimal is just as easy.  Simply precede the hexadecimal number with a "
"zero, and then a lower or uppercase \"x\".  Hexadecimal digits can be "
"specified in lower or uppercase.  For example, in the Python interpreter::"
msgstr ""
"十六进制数也同样简单。 只要在十六进制数之前加一个零和一个小写或大写字母 "
"\"x\"。 十六进制数码中的字母可以为大写或小写。 例如在 Python 解释器中输入::"

#: ../../faq/programming.rst:818
msgid "Why does -22 // 10 return -3?"
msgstr "为什么-22 // 10返回-3？"

#: ../../faq/programming.rst:820
msgid ""
"It's primarily driven by the desire that ``i % j`` have the same sign as "
"``j``. If you want that, and also want::"
msgstr ""
"这主要是为了让 ``i % j`` 的正负与 ``j`` 一致，如果你想要这样的结果，并且又想"
"要::"

#: ../../faq/programming.rst:825
msgid ""
"then integer division has to return the floor.  C also requires that "
"identity to hold, and then compilers that truncate ``i // j`` need to make "
"``i % j`` have the same sign as ``i``."
msgstr ""
"那么整除就必须向下取整。 C 同样要求保持一致，并且编译器在截短 ``i // j`` 的结"
"果值时需要使 ``i % j`` 的正负与 ``i`` 一致。"

#: ../../faq/programming.rst:829
msgid ""
"There are few real use cases for ``i % j`` when ``j`` is negative.  When "
"``j`` is positive, there are many, and in virtually all of them it's more "
"useful for ``i % j`` to be ``>= 0``.  If the clock says 10 now, what did it "
"say 200 hours ago?  ``-190 % 12 == 2`` is useful; ``-190 % 12 == -10`` is a "
"bug waiting to bite."
msgstr ""
"对于 ``i % j`` 来说 ``j`` 为负值的应用场景实际上是非常少的。 而 ``j`` 为正值"
"的情况则非常多，并且实际上在所有情况下让 ``i % j`` 的结果为 ``>= 0`` 会更有用"
"处。 如果现在时间为 10 时，那么 200 小时前应是几时？ ``-190 % 12 == 2`` 是有"
"用处的；``-190 % 12 == -10`` 则是会导致意外的漏洞。"

#: ../../faq/programming.rst:837
msgid "How do I convert a string to a number?"
msgstr "如何将字符串转换为数字？"

#: ../../faq/programming.rst:839
msgid ""
"For integers, use the built-in :func:`int` type constructor, e.g. "
"``int('144') == 144``.  Similarly, :func:`float` converts to floating-point, "
"e.g. ``float('144') == 144.0``."
msgstr ""
"对于整数，可使用内置的 :func:`int` 类型构造器，例如 ``int('144') == 144``。 "
"类似地，可使用 :func:`float` 转换为浮点数，例如 ``float('144') == 144.0``。"

#: ../../faq/programming.rst:843
msgid ""
"By default, these interpret the number as decimal, so that ``int('0144') == "
"144`` and ``int('0x144')`` raises :exc:`ValueError`. ``int(string, base)`` "
"takes the base to convert from as a second optional argument, so "
"``int('0x144', 16) == 324``.  If the base is specified as 0, the number is "
"interpreted using Python's rules: a leading '0o' indicates octal, and '0x' "
"indicates a hex number."
msgstr ""
"默认情况下，这些操作会将数字按十进制来解读，因此 ``int('0144') == 144`` 而 "
"``int('0x144')`` 会引发 :exc:`ValueError`。 ``int(string, base)`` 接受第二个"
"可选参数指定转换的基数，例如 ``int('0x144', 16) == 324``。 如果指定基数为 0，"
"则按 Python 规则解读数字：前缀 '0o' 表示八进制，而 '0x' 表示十六进制。"

#: ../../faq/programming.rst:849
msgid ""
"Do not use the built-in function :func:`eval` if all you need is to convert "
"strings to numbers.  :func:`eval` will be significantly slower and it "
"presents a security risk: someone could pass you a Python expression that "
"might have unwanted side effects.  For example, someone could pass "
"``__import__('os').system(\"rm -rf $HOME\")`` which would erase your home "
"directory."
msgstr ""
"如果你只是想将字符串转为数字，请不要使用内置函数 :func:`eval`。 :func:`eval` "
"的速度会慢很多并且有安全风险：别人可能会传入具有你不想要的附带效果的 Python "
"表达式。 例如，别人可以传入 ``__import__('os').system(\"rm -rf $HOME\")`` 这"
"将删除你的家目录。"

#: ../../faq/programming.rst:856
msgid ""
":func:`eval` also has the effect of interpreting numbers as Python "
"expressions, so that e.g. ``eval('09')`` gives a syntax error because Python "
"does not allow leading '0' in a decimal number (except '0')."
msgstr ""
":func:`eval` 还具有将数字解读为 Python 表达式的效果，这样 ``eval('09')`` 将会"
"导致语法错误，因为 Python 不允许十进制数的首位是 '0' ('0' 除外)。"

#: ../../faq/programming.rst:862
msgid "How do I convert a number to a string?"
msgstr "如何将数字转换为字符串？"

#: ../../faq/programming.rst:864
msgid ""
"To convert, e.g., the number 144 to the string '144', use the built-in type "
"constructor :func:`str`.  If you want a hexadecimal or octal representation, "
"use the built-in functions :func:`hex` or :func:`oct`.  For fancy "
"formatting, see the :ref:`f-strings` and :ref:`formatstrings` sections, e.g. "
"``\"{:04d}\".format(144)`` yields ``'0144'`` and ``\"{:.3f}\"."
"format(1.0/3.0)`` yields ``'0.333'``."
msgstr ""
"例如要将数字 144 转换为字符串 '144'，可使用内置类型构造器 :func:`str`。 如果"
"想要表示为十六进制或八进制数，可使用内置函数 :func:`hex` 或 :func:`oct`。 想"
"要更好地格式化，请参阅 :ref:`f-strings` 和 :ref:`formatstrings` 等小节，例如 "
"``\"{:04d}\".format(144)`` 生成 ``'0144'`` 而 ``\"{:.3f}\".format(1.0/3.0)`` "
"生成 ``'0.333'``。"

#: ../../faq/programming.rst:873
msgid "How do I modify a string in place?"
msgstr "如何修改字符串？"

#: ../../faq/programming.rst:875
msgid ""
"You can't, because strings are immutable.  In most situations, you should "
"simply construct a new string from the various parts you want to assemble it "
"from.  However, if you need an object with the ability to modify in-place "
"unicode data, try using an :class:`io.StringIO` object or the :mod:`array` "
"module::"
msgstr ""
"无法修改，因为字符串是不可变对象。 在大多数情况下，你应该使用你想要的各种部分"
"来构造一个新字符串。 但是，如果你想要一个可以原地修改 Unicode 数据的对象，可"
"尝试使用 :class:`io.StringIO` 对象或 :mod:`array` 模块::"

#: ../../faq/programming.rst:905
msgid "How do I use strings to call functions/methods?"
msgstr "如何使用字符串调用函数/方法？"

#: ../../faq/programming.rst:907
msgid "There are various techniques."
msgstr "有多种技巧可供选择。"

#: ../../faq/programming.rst:909
msgid ""
"The best is to use a dictionary that maps strings to functions.  The primary "
"advantage of this technique is that the strings do not need to match the "
"names of the functions.  This is also the primary technique used to emulate "
"a case construct::"
msgstr ""
"最好的做法是使用一个将字符串映射到函数的字典。 这一技巧的主要优势在于字符串不"
"必与函数名称一致。 这也是用于模拟其他语言中 case 结构的主要技巧::"

#: ../../faq/programming.rst:924
msgid "Use the built-in function :func:`getattr`::"
msgstr "使用内置函数 :func:`getattr` ::"

#: ../../faq/programming.rst:929
msgid ""
"Note that :func:`getattr` works on any object, including classes, class "
"instances, modules, and so on."
msgstr "请注意 :func:`getattr` 可用于任何对象，包括类、类实例、模块等等。"

#: ../../faq/programming.rst:932
msgid "This is used in several places in the standard library, like this::"
msgstr "在标准库中多次使用了这个技巧，例如::"

#: ../../faq/programming.rst:945
msgid "Use :func:`locals` or :func:`eval` to resolve the function name::"
msgstr "使用 :func:`locals` 或 :func:`eval` 来解析出函数名::"

#: ../../faq/programming.rst:958
msgid ""
"Note: Using :func:`eval` is slow and dangerous.  If you don't have absolute "
"control over the contents of the string, someone could pass a string that "
"resulted in an arbitrary function being executed."
msgstr ""
"注意：使用 :func:`eval` 速度慢而且危险。 如果你不能绝对掌控字符串的内容，别人"
"将能传入可被解析为任意函数直接执行的字符串。"

#: ../../faq/programming.rst:963
msgid ""
"Is there an equivalent to Perl's chomp() for removing trailing newlines from "
"strings?"
msgstr "是否有与Perl 的chomp() 等效的方法，用于从字符串中删除尾随换行符？"

#: ../../faq/programming.rst:965
msgid ""
"You can use ``S.rstrip(\"\\r\\n\")`` to remove all occurrences of any line "
"terminator from the end of the string ``S`` without removing other trailing "
"whitespace.  If the string ``S`` represents more than one line, with several "
"empty lines at the end, the line terminators for all the blank lines will be "
"removed::"
msgstr ""
"可以使用 ``S.rstrip(\"\\r\\n\")`` 从字符串 ``S`` 的末尾删除所有的换行符，而不"
"删除其他尾随空格。如果字符串 ``S`` 表示多行，且末尾有几个空行，则将删除所有空"
"行的换行符："

#: ../../faq/programming.rst:977
msgid ""
"Since this is typically only desired when reading text one line at a time, "
"using ``S.rstrip()`` this way works well."
msgstr ""
"由于通常只在一次读取一行文本时才需要这样做，所以使用 ``S.rstrip()`` 这种方式"
"工作得很好。"

#: ../../faq/programming.rst:982
msgid "Is there a scanf() or sscanf() equivalent?"
msgstr "是否有 scanf() 或 sscanf() 的对应物？"

#: ../../faq/programming.rst:984
msgid "Not as such."
msgstr "没有这样的对应物。"

#: ../../faq/programming.rst:986
msgid ""
"For simple input parsing, the easiest approach is usually to split the line "
"into whitespace-delimited words using the :meth:`~str.split` method of "
"string objects and then convert decimal strings to numeric values using :"
"func:`int` or :func:`float`.  ``split()`` supports an optional \"sep\" "
"parameter which is useful if the line uses something other than whitespace "
"as a separator."
msgstr ""
"对于简单的输入解析，最方便的做法通常是使用字符串对象的 :meth:`~str.split` 方"
"法将一行内容拆解为以空格分隔的单词，然后使用 :func:`int` 或 :func:`float` 将"
"表示十进制数的字符串转换为数值。 ``split()`` 支持可选的 \"sep\" 形参，适用于"
"内容行使用空格符以外的分隔符的情况。"

#: ../../faq/programming.rst:992
msgid ""
"For more complicated input parsing, regular expressions are more powerful "
"than C's :c:func:`sscanf` and better suited for the task."
msgstr ""
"以于更复杂的输入解析，正则表达式会比 C 的 :c:func:`sscanf` 更强大，也更适合此"
"类任务。"

#: ../../faq/programming.rst:997
msgid "What does 'UnicodeDecodeError' or 'UnicodeEncodeError' error  mean?"
msgstr "'UnicodeDecodeError' 或 'UnicodeEncodeError' 错误是什么意思？"

#: ../../faq/programming.rst:999
msgid "See the :ref:`unicode-howto`."
msgstr "见 :ref:`unicode-howto`"

#: ../../faq/programming.rst:1003
msgid "Performance"
msgstr "性能"

#: ../../faq/programming.rst:1006
msgid "My program is too slow. How do I speed it up?"
msgstr "我的程序太慢了。该如何加快速度？"

#: ../../faq/programming.rst:1008
msgid ""
"That's a tough one, in general.  First, here are a list of things to "
"remember before diving further:"
msgstr "总的来说，这是个棘手的问题。首先，下面列出了深入了解前需要记住的事情："

#: ../../faq/programming.rst:1011
msgid ""
"Performance characteristics vary across Python implementations.  This FAQ "
"focuses on :term:`CPython`."
msgstr ""
"不同的 Python 实现具有不同的性能特点。 本 FAQ 着重解答的是 :term:`CPython`。"

#: ../../faq/programming.rst:1013
msgid ""
"Behaviour can vary across operating systems, especially when talking about I/"
"O or multi-threading."
msgstr "行为可能因操作系统而异，尤其是在谈论 I / O 或多线程时。"

#: ../../faq/programming.rst:1015
msgid ""
"You should always find the hot spots in your program *before* attempting to "
"optimize any code (see the :mod:`profile` module)."
msgstr ""
"在尝试优化任何代码 *前* ，应始终找到程序中的热点（请参阅 :mod:`profile` 模"
"块）。"

#: ../../faq/programming.rst:1017
msgid ""
"Writing benchmark scripts will allow you to iterate quickly when searching "
"for improvements (see the :mod:`timeit` module)."
msgstr ""
"编写基准脚本将允许您在搜索改进时快速迭代（请参阅 :mod:`timeit` 模块）。"

#: ../../faq/programming.rst:1019
msgid ""
"It is highly recommended to have good code coverage (through unit testing or "
"any other technique) before potentially introducing regressions hidden in "
"sophisticated optimizations."
msgstr ""
"强烈建议在可能引入隐藏在复杂优化中的回归之前，要有良好的代码覆盖率（通过单元"
"测试或任何其他技术）。"

#: ../../faq/programming.rst:1023
msgid ""
"That being said, there are many tricks to speed up Python code.  Here are "
"some general principles which go a long way towards reaching acceptable "
"performance levels:"
msgstr ""
"话虽如此，加速Python代码有很多技巧。以下是一些可以达到可接受的性能水平的一般"
"原则："

#: ../../faq/programming.rst:1027
msgid ""
"Making your algorithms faster (or changing to faster ones) can yield much "
"larger benefits than trying to sprinkle micro-optimization tricks all over "
"your code."
msgstr ""
"使您的算法更快（或更改为更快的算法）可以产生比尝试在代码中使用微优化技巧更大"
"的好处。"

#: ../../faq/programming.rst:1031
msgid ""
"Use the right data structures.  Study documentation for the :ref:`bltin-"
"types` and the :mod:`collections` module."
msgstr ""
"使用正确的数据结构。参考文档 :ref:`bltin-types` 和 :mod:`collections` 模块。"

#: ../../faq/programming.rst:1034
msgid ""
"When the standard library provides a primitive for doing something, it is "
"likely (although not guaranteed) to be faster than any alternative you may "
"come up with.  This is doubly true for primitives written in C, such as "
"builtins and some extension types.  For example, be sure to use either the :"
"meth:`list.sort` built-in method or the related :func:`sorted` function to "
"do sorting (and see the :ref:`sortinghowto` for examples of moderately "
"advanced usage)."
msgstr ""
"当标准库提供用于执行某些操作的原语时，可能（尽管不能保证）比您可能提出的任何"
"替代方案更快。对于用C编写的原语，例如内置函数和一些扩展类型，这是真的。例如，"
"请确保使用 :meth:`list.sort` 内置方法或相关的 :func:`sorted` 函数进行排序（有"
"关适度高级用法的示例，请参阅 :ref:`sortinghowto` ）。"

#: ../../faq/programming.rst:1042
msgid ""
"Abstractions tend to create indirections and force the interpreter to work "
"more.  If the levels of indirection outweigh the amount of useful work done, "
"your program will be slower.  You should avoid excessive abstraction, "
"especially under the form of tiny functions or methods (which are also often "
"detrimental to readability)."
msgstr ""
"抽象倾向于创造间接性并迫使翻译更多地工作。如果间接级别超过完成的有用工作量，"
"则程序将变慢。你应该避免过度抽象，特别是在微小的功能或方法的形式下（这通常也"
"会对可读性产生不利影响）。"

#: ../../faq/programming.rst:1048
msgid ""
"If you have reached the limit of what pure Python can allow, there are tools "
"to take you further away.  For example, `Cython <http://cython.org>`_ can "
"compile a slightly modified version of Python code into a C extension, and "
"can be used on many different platforms.  Cython can take advantage of "
"compilation (and optional type annotations) to make your code significantly "
"faster than when interpreted.  If you are confident in your C programming "
"skills, you can also :ref:`write a C extension module <extending-index>` "
"yourself."
msgstr ""
"如果你已经达到纯 Python 允许的限制，那么有一些工具可以让你走得更远。 例如， "
"`Cython <http://cython.org>`_ 可以将稍微修改的 Python 代码版本编译为 C 扩展，"
"并且可以在许多不同的平台上使用。 Cython 可以利用编译（和可选的类型注释）来使"
"代码明显快于解释运行时的速度。 如果您对 C 编程技能有信心，也可以自己 :ref:`编"
"写 C 扩展模块 <extending-index>` 。"

#: ../../faq/programming.rst:1058
msgid ""
"The wiki page devoted to `performance tips <https://wiki.python.org/moin/"
"PythonSpeed/PerformanceTips>`_."
msgstr ""
"专门介绍 `性能提示 <https://wiki.python.org/moin/PythonSpeed/"
"PerformanceTips>`_ 的wiki页面。"

#: ../../faq/programming.rst:1064
msgid "What is the most efficient way to concatenate many strings together?"
msgstr "将多个字符串连接在一起的最有效方法是什么？"

#: ../../faq/programming.rst:1066
msgid ""
":class:`str` and :class:`bytes` objects are immutable, therefore "
"concatenating many strings together is inefficient as each concatenation "
"creates a new object.  In the general case, the total runtime cost is "
"quadratic in the total string length."
msgstr ""
":class:`str` 和 :class:`bytes` 对象是不可变的，因此将多个字符串连接在一起效率"
"很低，因为每个连接都会创建一个新对象。在一般情况下，总运行时间是总字符串长度"
"的二次方。"

#: ../../faq/programming.rst:1071
msgid ""
"To accumulate many :class:`str` objects, the recommended idiom is to place "
"them into a list and call :meth:`str.join` at the end::"
msgstr ""
"要连接多个 :class:`str` 对象，通常推荐的用法是将它们放入一个列表中并在结尾处"
"调用 :meth:`str.join` ："

#: ../../faq/programming.rst:1079
msgid "(another reasonably efficient idiom is to use :class:`io.StringIO`)"
msgstr "（另一个合理有效的惯用方法是 :class:`io.StringIO` ）"

#: ../../faq/programming.rst:1081
msgid ""
"To accumulate many :class:`bytes` objects, the recommended idiom is to "
"extend a :class:`bytearray` object using in-place concatenation (the ``+=`` "
"operator)::"
msgstr ""
"要连接多个 :class:`str` 对象，建议使用本地连接（ ``+=`` 运算符）扩展 :class:"
"`bytearray` 对象："

#: ../../faq/programming.rst:1090
msgid "Sequences (Tuples/Lists)"
msgstr "序列（元组/列表）"

#: ../../faq/programming.rst:1093
msgid "How do I convert between tuples and lists?"
msgstr "如何在元组和列表之间进行转换？"

#: ../../faq/programming.rst:1095
msgid ""
"The type constructor ``tuple(seq)`` converts any sequence (actually, any "
"iterable) into a tuple with the same items in the same order."
msgstr ""
"类型构造器 ``tuple(seq)`` 可将任意序列（实际上是任意可迭代对象）转换为具有相"
"同排列顺序的相同条目的元组。"

#: ../../faq/programming.rst:1098
msgid ""
"For example, ``tuple([1, 2, 3])`` yields ``(1, 2, 3)`` and ``tuple('abc')`` "
"yields ``('a', 'b', 'c')``.  If the argument is a tuple, it does not make a "
"copy but returns the same object, so it is cheap to call :func:`tuple` when "
"you aren't sure that an object is already a tuple."
msgstr ""
"例如，``tuple([1, 2, 3])`` 产生 ``(1, 2, 3)`` 而 ``tuple('abc')`` 产生 "
"``('a', 'b', 'c')``。 如果参数为一个元组，它不会创建副本而是返回同一对象，因"
"此如果你不确定某个对象是否为元组时也可简单地调用 :func:`tuple`。"

#: ../../faq/programming.rst:1103
msgid ""
"The type constructor ``list(seq)`` converts any sequence or iterable into a "
"list with the same items in the same order.  For example, ``list((1, 2, "
"3))`` yields ``[1, 2, 3]`` and ``list('abc')`` yields ``['a', 'b', 'c']``.  "
"If the argument is a list, it makes a copy just like ``seq[:]`` would."
msgstr ""
"类型构造器 ``list(seq)`` 可将任意序列或可迭代对象转换为具有相同排列顺序的相同"
"条目的列表。 例如，``list((1, 2, 3))`` 产生 ``[1, 2, 3]`` 而 ``list('abc')`` "
"产生 ``['a', 'b', 'c']``。 如果参数为一个列表，它会像 ``seq[:]`` 那样创建一个"
"副本。"

#: ../../faq/programming.rst:1110
msgid "What's a negative index?"
msgstr "什么是负数序号？"

#: ../../faq/programming.rst:1112
msgid ""
"Python sequences are indexed with positive numbers and negative numbers.  "
"For positive numbers 0 is the first index 1 is the second index and so "
"forth.  For negative indices -1 is the last index and -2 is the penultimate "
"(next to last) index and so forth.  Think of ``seq[-n]`` as the same as "
"``seq[len(seq)-n]``."
msgstr ""
"Python 序列使用正数或负数作为序号或称索引号。 对于正数序号，第一个序号为 0 "
"而 1 为第二个序号，依此类推。 对于负数序号，倒数第一个序号为 -1 而倒数第二个"
"序号为 -2，依此类推。 可以认为 ``seq[-n]`` 就相当于 ``seq[len(seq)-n]``。"

#: ../../faq/programming.rst:1117
msgid ""
"Using negative indices can be very convenient.  For example ``S[:-1]`` is "
"all of the string except for its last character, which is useful for "
"removing the trailing newline from a string."
msgstr ""
"使用负数序号有时会很方便。 例如 ``S[:-1]`` 就是原字符串去掉最后一个字符，这可"
"以用来移除某个字符串末尾的换行符。"

#: ../../faq/programming.rst:1123
msgid "How do I iterate over a sequence in reverse order?"
msgstr "如何以相反的顺序迭代序列？"

#: ../../faq/programming.rst:1125
msgid "Use the :func:`reversed` built-in function::"
msgstr "使用 :func:`reversed` 内置函数::"

#: ../../faq/programming.rst:1130
msgid ""
"This won't touch your original sequence, but build a new copy with reversed "
"order to iterate over."
msgstr "这不会修改您的原始序列，而是构建一个反向顺序的新副本以进行迭代。"

#: ../../faq/programming.rst:1135
msgid "How do you remove duplicates from a list?"
msgstr "如何从列表中删除重复项？"

#: ../../faq/programming.rst:1137
msgid "See the Python Cookbook for a long discussion of many ways to do this:"
msgstr "有关执行此操作的许多方法的详细讨论，请参阅 Python Cookbook:"

#: ../../faq/programming.rst:1139
msgid "https://code.activestate.com/recipes/52560/"
msgstr "https://code.activestate.com/recipes/52560/"

#: ../../faq/programming.rst:1141
msgid ""
"If you don't mind reordering the list, sort it and then scan from the end of "
"the list, deleting duplicates as you go::"
msgstr ""
"如果您不介意重新排序列表，请对其进行排序，然后从列表末尾进行扫描，删除重复"
"项："

#: ../../faq/programming.rst:1153
msgid ""
"If all elements of the list may be used as set keys (i.e. they are all :term:"
"`hashable`) this is often faster ::"
msgstr ""
"如果列表的所有元素都可以用作设置键（即：它们都是 :term:`hashable` ），这通常"
"会更快::"

#: ../../faq/programming.rst:1158
msgid ""
"This converts the list into a set, thereby removing duplicates, and then "
"back into a list."
msgstr "这会将列表转换为集合，从而删除重复项，然后返回到列表中。"

#: ../../faq/programming.rst:1163
msgid "How do you remove multiple items from a list"
msgstr "如何从列表中删除多个项？"

#: ../../faq/programming.rst:1165
msgid ""
"As with removing duplicates, explicitly iterating in reverse with a delete "
"condition is one possibility.  However, it is easier and faster to use slice "
"replacement with an implicit or explicit forward iteration. Here are three "
"variations.::"
msgstr ""
"对于删除重复项，一种可能的做法是设置删除条件显式地进行反向迭代。但是更容易也"
"更快速的做法是进行隐式或显式的正向迭代并使用切片替代。 以下列出了三种方式。::"

#: ../../faq/programming.rst:1174
msgid "The list comprehension may be fastest."
msgstr "列表推导式可能是最快的。"

#: ../../faq/programming.rst:1178
msgid "How do you make an array in Python?"
msgstr "如何在Python中创建数组？"

#: ../../faq/programming.rst:1180
msgid "Use a list::"
msgstr "使用列表::"

#: ../../faq/programming.rst:1184
msgid ""
"Lists are equivalent to C or Pascal arrays in their time complexity; the "
"primary difference is that a Python list can contain objects of many "
"different types."
msgstr ""
"列表在时间复杂度方面相当于C或Pascal数组；主要区别在于，python列表可以包含许多"
"不同类型的对象。"

#: ../../faq/programming.rst:1187
msgid ""
"The ``array`` module also provides methods for creating arrays of fixed "
"types with compact representations, but they are slower to index than "
"lists.  Also note that the Numeric extensions and others define array-like "
"structures with various characteristics as well."
msgstr ""
"``array`` 模块还提供了创建具有紧凑表示的固定类型的数组的方法，但它的索引速度"
"比列表慢。还要注意，数字扩展和其他扩展还定义了具有各种特性的类似数组的结构。"

#: ../../faq/programming.rst:1192
msgid ""
"To get Lisp-style linked lists, you can emulate cons cells using tuples::"
msgstr "要获取Lisp样式的列表，可以使用元组模拟cons单元："

#: ../../faq/programming.rst:1196
msgid ""
"If mutability is desired, you could use lists instead of tuples.  Here the "
"analogue of lisp car is ``lisp_list[0]`` and the analogue of cdr is "
"``lisp_list[1]``.  Only do this if you're sure you really need to, because "
"it's usually a lot slower than using Python lists."
msgstr ""
"如果需要可变性，可以使用列表而不是元组。这里模拟lisp car的是 "
"``lisp_list[0]`` ，模拟cdr的是 ``lisp_list[1]`` 。只有在你确定真的需要的时候"
"才这样做，因为它通常比使用Python列表慢得多。"

#: ../../faq/programming.rst:1205
msgid "How do I create a multidimensional list?"
msgstr "如何创建多维列表？"

#: ../../faq/programming.rst:1207
msgid "You probably tried to make a multidimensional array like this::"
msgstr "你可能试图制作一个像这样的多维数组::"

#: ../../faq/programming.rst:1211
msgid "This looks correct if you print it:"
msgstr "如果你打印它，看起来是正确的："

#: ../../faq/programming.rst:1222
msgid "But when you assign a value, it shows up in multiple places:"
msgstr "但是，当你给某一项赋值时，会同时在多个位置显示变化："

#: ../../faq/programming.rst:1234
msgid ""
"The reason is that replicating a list with ``*`` doesn't create copies, it "
"only creates references to the existing objects.  The ``*3`` creates a list "
"containing 3 references to the same list of length two.  Changes to one row "
"will show in all rows, which is almost certainly not what you want."
msgstr ""
"其中的原因在于使用 ``*`` 对列表执行重复操作并不是创建副本，它只是创建现有对象"
"的引用。 ``*3`` 创建了对长度为二的同一列表的 3 个引用。 对某一行的改变会作用"
"于所有行，通常这一定不是你所希望的。"

#: ../../faq/programming.rst:1239
msgid ""
"The suggested approach is to create a list of the desired length first and "
"then fill in each element with a newly created list::"
msgstr ""
"建议的做法是先创建一个所需长度的列表，然后其中的元素再以一个新创建的列表来填"
"充::"

#: ../../faq/programming.rst:1246
msgid ""
"This generates a list containing 3 different lists of length two.  You can "
"also use a list comprehension::"
msgstr ""
"这样就生成了一个包含 3 个长度为二的不同列表的列表。 你也可以使用列表推导式::"

#: ../../faq/programming.rst:1252
msgid ""
"Or, you can use an extension that provides a matrix datatype; `NumPy <http://"
"www.numpy.org/>`_ is the best known."
msgstr ""
"或者你还可以使用提供矩阵类型的扩展包；其中最著名的是 `NumPy <http://www."
"numpy.org/>`_。"

#: ../../faq/programming.rst:1257
msgid "How do I apply a method to a sequence of objects?"
msgstr "如何将方法应用于一系列对象？"

#: ../../faq/programming.rst:1259
msgid "Use a list comprehension::"
msgstr "可以使用列表推导式："

#: ../../faq/programming.rst:1266
msgid ""
"Why does a_tuple[i] += ['item'] raise an exception when the addition works?"
msgstr "为什么 a_tuple[i] += ['item'] 会在执行加法时引发异常？"

#: ../../faq/programming.rst:1268
msgid ""
"This is because of a combination of the fact that augmented assignment "
"operators are *assignment* operators, and the difference between mutable and "
"immutable objects in Python."
msgstr ""
"这是由两个事实共同导致的结果，一是增强赋值运算符属于 *赋值* 运算符，二是在 "
"Python 中存在可变和不可变两种不同的对象。"

#: ../../faq/programming.rst:1272
msgid ""
"This discussion applies in general when augmented assignment operators are "
"applied to elements of a tuple that point to mutable objects, but we'll use "
"a ``list`` and ``+=`` as our exemplar."
msgstr ""
"此处的讨论在任何对元组中指向可变对象的元素使用增强赋值运算符的情况都是普遍成"
"立的，但在此我们只以 ``list`` 和 ``+=`` 来举例。"

#: ../../faq/programming.rst:1276
msgid "If you wrote::"
msgstr "如果你写成这样::"

#: ../../faq/programming.rst:1284
msgid ""
"The reason for the exception should be immediately clear: ``1`` is added to "
"the object ``a_tuple[0]`` points to (``1``), producing the result object, "
"``2``, but when we attempt to assign the result of the computation, ``2``, "
"to element ``0`` of the tuple, we get an error because we can't change what "
"an element of a tuple points to."
msgstr ""
"发生异常的原因是显而易见的: ``1`` 会与对象 ``a_tuple[0]`` 相加，而该对象为 "
"(``1``)，得到结果对象 ``2``，但当我们试图将运算结果 ``2`` 赋值给元组的 ``0`` "
"号元素时就将报错，因为我们不能改变元组的元素所指向的对象。"

#: ../../faq/programming.rst:1290
msgid ""
"Under the covers, what this augmented assignment statement is doing is "
"approximately this::"
msgstr "在表层之处，以上增强赋值语句所做的大致是这样::"

#: ../../faq/programming.rst:1299
msgid ""
"It is the assignment part of the operation that produces the error, since a "
"tuple is immutable."
msgstr "由于元组是不可变的，因此操作的赋值部分会引发错误。"

#: ../../faq/programming.rst:1302
msgid "When you write something like::"
msgstr "当你这样写的时候::"

#: ../../faq/programming.rst:1310
msgid ""
"The exception is a bit more surprising, and even more surprising is the fact "
"that even though there was an error, the append worked::"
msgstr ""
"发生异常会令人略感吃惊，还有一个更为令人吃惊的事实：虽然有报错，但是添加操作"
"却生效了::"

#: ../../faq/programming.rst:1316
msgid ""
"To see why this happens, you need to know that (a) if an object implements "
"an ``__iadd__`` magic method, it gets called when the ``+=`` augmented "
"assignment is executed, and its return value is what gets used in the "
"assignment statement; and (b) for lists, ``__iadd__`` is equivalent to "
"calling ``extend`` on the list and returning the list.  That's why we say "
"that for lists, ``+=`` is a \"shorthand\" for ``list.extend``::"
msgstr ""
"要明白为何会这样，你需要知道 (a) 如果一个对象实现了 ``__iadd__`` 魔术方法，它"
"会在执行 ``+=`` 增强赋值时被调用，并且其返回值将用于该赋值语句； (b) 对于列表"
"来说，``__iadd__`` 等价于在列表上调用 ``extend`` 并返回该列表。 因此对于列表"
"我们可以说 ``+=`` 就是 ``list.extend`` 的“快捷方式”::"

#: ../../faq/programming.rst:1328
msgid "This is equivalent to::"
msgstr "这相当于::"

#: ../../faq/programming.rst:1333
msgid ""
"The object pointed to by a_list has been mutated, and the pointer to the "
"mutated object is assigned back to ``a_list``.  The end result of the "
"assignment is a no-op, since it is a pointer to the same object that "
"``a_list`` was previously pointing to, but the assignment still happens."
msgstr ""
"a_list 所引用的对象已被修改，而引用被修改对象的指针又重新被赋值给 "
"``a_list``。 赋值的最终结果没有变化，因为它是引用 ``a_list`` 之前所引用的同一"
"对象的指针，但仍然发生了赋值操作。"

#: ../../faq/programming.rst:1338
msgid "Thus, in our tuple example what is happening is equivalent to::"
msgstr "因此，在我们的元组示例中，发生的事情等同于："

#: ../../faq/programming.rst:1346
msgid ""
"The ``__iadd__`` succeeds, and thus the list is extended, but even though "
"``result`` points to the same object that ``a_tuple[0]`` already points to, "
"that final assignment still results in an error, because tuples are "
"immutable."
msgstr ""
"``__iadd__`` 成功执行，因此列表得到了扩充，但是虽然 ``result`` 指向了 "
"``a_tuple[0]`` 已经指向的同一对象，最后的赋值仍然导致了报错，因为元组是不可变"
"的。"

#: ../../faq/programming.rst:1352
msgid ""
"I want to do a complicated sort: can you do a Schwartzian Transform in "
"Python?"
msgstr "我想做一个复杂的排序：你能用Python做一个Schwartzian变换吗？"

#: ../../faq/programming.rst:1354
msgid ""
"The technique, attributed to Randal Schwartz of the Perl community, sorts "
"the elements of a list by a metric which maps each element to its \"sort "
"value\". In Python, use the ``key`` argument for the :meth:`list.sort` "
"method::"
msgstr ""
"该技术归功于Perl社区的 Randal Schwartz，它通过将每个元素映射到其 \"排序值"
"（sort value）\" 的度量对列表中的元素进行排序。在Python中，使用 :meth:`list."
"sort` 方法的 ``key`` 参数："

#: ../../faq/programming.rst:1363
msgid "How can I sort one list by values from another list?"
msgstr "如何按其他列表中的值对一个列表进行排序？"

#: ../../faq/programming.rst:1365
msgid ""
"Merge them into an iterator of tuples, sort the resulting list, and then "
"pick out the element you want. ::"
msgstr "将它们合并到元组的迭代器中，对结果列表进行排序，然后选择所需的元素。"

#: ../../faq/programming.rst:1379
msgid "An alternative for the last step is::"
msgstr "最后一步的替代方案是::"

#: ../../faq/programming.rst:1384
msgid ""
"If you find this more legible, you might prefer to use this instead of the "
"final list comprehension.  However, it is almost twice as slow for long "
"lists.  Why? First, the ``append()`` operation has to reallocate memory, and "
"while it uses some tricks to avoid doing that each time, it still has to do "
"it occasionally, and that costs quite a bit.  Second, the expression "
"\"result.append\" requires an extra attribute lookup, and third, there's a "
"speed reduction from having to make all those function calls."
msgstr ""
"如果你觉得这个更容易读懂，那么你可能更喜欢使用这个而不是前面的列表推导。然"
"而，对于长列表来说，它的速度几乎是原来的两倍。为什么？首先， ``append()`` 操"
"作必须重新分配内存，虽然它使用了一些技巧来避免每次都这样做，但它仍然偶尔需要"
"这样做，而且代价相当高。第二，表达式 \"result.append\" 需要额外的属性查找。第"
"三，必须执行所有这些函数调用会降低速度。"

#: ../../faq/programming.rst:1394
msgid "Objects"
msgstr "对象"

#: ../../faq/programming.rst:1397
msgid "What is a class?"
msgstr "什么是类？"

#: ../../faq/programming.rst:1399
msgid ""
"A class is the particular object type created by executing a class "
"statement. Class objects are used as templates to create instance objects, "
"which embody both the data (attributes) and code (methods) specific to a "
"datatype."
msgstr ""
"``类`` 是通过执行类语句创建的特定对象类型。``类对象`` 被当作模板来创建实例对"
"象，实例对象包含了特定于数据类型的数据（属性）和代码（方法）。"

#: ../../faq/programming.rst:1403
msgid ""
"A class can be based on one or more other classes, called its base "
"class(es). It then inherits the attributes and methods of its base classes. "
"This allows an object model to be successively refined by inheritance.  You "
"might have a generic ``Mailbox`` class that provides basic accessor methods "
"for a mailbox, and subclasses such as ``MboxMailbox``, ``MaildirMailbox``, "
"``OutlookMailbox`` that handle various specific mailbox formats."
msgstr ""
"类可以基于一个或多个的其他类，称之为基类（ES），它继承基类的属性和方法，这样"
"就可以通过继承来连续地细化对象模型。例如：您可能有一个 ``Mailbox`` 类提供邮箱"
"的基本访问方法.，它的子类 ``MboxMailbox``, ``MaildirMailbox``, "
"``OutlookMailbox`` 用于处理各种特定邮箱格式。"

#: ../../faq/programming.rst:1412
msgid "What is a method?"
msgstr "什么是方法？"

#: ../../faq/programming.rst:1414
msgid ""
"A method is a function on some object ``x`` that you normally call as ``x."
"name(arguments...)``.  Methods are defined as functions inside the class "
"definition::"
msgstr ""
"``方法`` 实际上就是类定义中的函数。对于某个对象 ``x`` 上的方法，通常称为 ``x."
"name(arguments...)`` 。"

#: ../../faq/programming.rst:1424
msgid "What is self?"
msgstr "什么是 self ？"

#: ../../faq/programming.rst:1426
msgid ""
"Self is merely a conventional name for the first argument of a method.  A "
"method defined as ``meth(self, a, b, c)`` should be called as ``x.meth(a, b, "
"c)`` for some instance ``x`` of the class in which the definition occurs; "
"the called method will think it is called as ``meth(x, a, b, c)``."
msgstr ""
"Self 只是 ``方法`` 的第一个参数的常规名称。例如：对于某个类的某个实例 "
"``x`` ，其方法 ``meth(self, a, b, c)`` 实际上应该被称为 ``x.meth(a, b, c)`` "
"；对于被调用的方法会被称为 ``meth(x, a, b, c)`` 。"

#: ../../faq/programming.rst:1431
msgid "See also :ref:`why-self`."
msgstr "另请参阅 :ref:`why-self` 。"

#: ../../faq/programming.rst:1435
msgid ""
"How do I check if an object is an instance of a given class or of a subclass "
"of it?"
msgstr "如何检查对象是否为给定类或其子类的一个实例？"

#: ../../faq/programming.rst:1437
msgid ""
"Use the built-in function ``isinstance(obj, cls)``.  You can check if an "
"object is an instance of any of a number of classes by providing a tuple "
"instead of a single class, e.g. ``isinstance(obj, (class1, class2, ...))``, "
"and can also check whether an object is one of Python's built-in types, e.g. "
"``isinstance(obj, str)`` or ``isinstance(obj, (int, float, complex))``."
msgstr ""
"可使用内置函数 ``isinstance(obj, cls)``。 你可以提供一个元组而不是单个类来检"
"查某个对象是否为任意多个类当中某一个类的实例，例如 ``isinstance(obj, "
"(class1, class2, ...))``，也可以检查某个对象是否为 Python 内置类型当中某一个"
"类型的对象，例如 ``isinstance(obj, str)`` 或 ``isinstance(obj, (int, float, "
"complex))``。"

#: ../../faq/programming.rst:1443
msgid ""
"Note that most programs do not use :func:`isinstance` on user-defined "
"classes very often.  If you are developing the classes yourself, a more "
"proper object-oriented style is to define methods on the classes that "
"encapsulate a particular behaviour, instead of checking the object's class "
"and doing a different thing based on what class it is.  For example, if you "
"have a function that does something::"
msgstr ""
"请注意大多数程序不会经常对用户自定义类使用 :func:`isinstance`。 如果是你自已"
"开发的类，更正确的面向对象风格是在类中定义方法来封装特定的行为，而不是检查对"
"象的类并根据它属于什么类来做不同的事。 例如，如果你有一个执行某些操作的函数::"

#: ../../faq/programming.rst:1457
msgid ""
"A better approach is to define a ``search()`` method on all the classes and "
"just call it::"
msgstr "更好的方法是在所有类上定义一个 ``search()`` 方法，然后调用它："

#: ../../faq/programming.rst:1472
msgid "What is delegation?"
msgstr "什么是委托？"

#: ../../faq/programming.rst:1474
msgid ""
"Delegation is an object oriented technique (also called a design pattern). "
"Let's say you have an object ``x`` and want to change the behaviour of just "
"one of its methods.  You can create a new class that provides a new "
"implementation of the method you're interested in changing and delegates all "
"other methods to the corresponding method of ``x``."
msgstr ""
"委托是一种面向对象的技巧（也称为设计模式）。 假设您有一个对象 ``x`` 并且想要"
"改变其中一个方法的行为。 您可以创建一个新类，它提供您感兴趣的方法的新实现，并"
"将所有其他方法委托给 ``x`` 的相应方法。"

#: ../../faq/programming.rst:1480
msgid ""
"Python programmers can easily implement delegation.  For example, the "
"following class implements a class that behaves like a file but converts all "
"written data to uppercase::"
msgstr ""
"Python程序员可以轻松实现委托。 例如，以下类实现了一个类，该类的行为类似于文"
"件，但将所有写入的数据转换为大写："

#: ../../faq/programming.rst:1495
msgid ""
"Here the ``UpperOut`` class redefines the ``write()`` method to convert the "
"argument string to uppercase before calling the underlying ``self._outfile."
"write()`` method.  All other methods are delegated to the underlying ``self."
"_outfile`` object.  The delegation is accomplished via the ``__getattr__`` "
"method; consult :ref:`the language reference <attribute-access>` for more "
"information about controlling attribute access."
msgstr ""
"在这里 ``UpperOut`` 类重新定义了 ``write()`` 方法在调用下层的 ``self."
"_outfile.write()`` 方法之前将参数字符串转换为大写形式。 所有其他方法都被委托"
"给下层的 ``self._outfile`` 对象。 委托是通过 ``__getattr__`` 方法来完成的；请"
"参阅 :ref:`语言参考 <attribute-access>` 了解有关控制属性访问的更多信息。"

#: ../../faq/programming.rst:1502
msgid ""
"Note that for more general cases delegation can get trickier. When "
"attributes must be set as well as retrieved, the class must define a :meth:"
"`__setattr__` method too, and it must do so carefully.  The basic "
"implementation of :meth:`__setattr__` is roughly equivalent to the "
"following::"
msgstr ""
"请注意对于更一般的情况来说，委托可能包含更多细节问题。 当某些属性既需要读取又"
"需要设置时，类还必须定义 :meth:`__setattr__` 方法，并且这样做必须小心谨慎。 :"
"meth:`__setattr__` 的基本实现大致相当于以下代码::"

#: ../../faq/programming.rst:1513
msgid ""
"Most :meth:`__setattr__` implementations must modify ``self.__dict__`` to "
"store local state for self without causing an infinite recursion."
msgstr ""
"大多数 :meth:`__setattr__` 实现必须修改 ``self.__dict__`` 来为自身保存局部状"
"态而又不至于造成无限递归。"

#: ../../faq/programming.rst:1518
msgid ""
"How do I call a method defined in a base class from a derived class that "
"overrides it?"
msgstr "如何从覆盖基类的派生类调用基类中定义的方法?"

#: ../../faq/programming.rst:1520
msgid "Use the built-in :func:`super` function::"
msgstr "使用内置的 :func:`super` 函数："

#: ../../faq/programming.rst:1526
msgid ""
"For version prior to 3.0, you may be using classic classes: For a class "
"definition such as ``class Derived(Base): ...`` you can call method "
"``meth()`` defined in ``Base`` (or one of ``Base``'s base classes) as ``Base."
"meth(self, arguments...)``.  Here, ``Base.meth`` is an unbound method, so "
"you need to provide the ``self`` argument."
msgstr ""
"对于 Python 3.0之前的版本，您可能正在使用经典类：对于诸如 ``class "
"Derived(Base): ...`` 之类的类定义，可以将在 ``Base`` (或 ``Base`` 中的一个的"
"基类）中定义的方法 ``meth()`` 调用为 ``Base.meth(self, arguments...)`` 。这"
"里， ``Base.meth`` 是一个未绑定的方法，因此您需要提供 ``self`` 参数。"

#: ../../faq/programming.rst:1534
msgid "How can I organize my code to make it easier to change the base class?"
msgstr "如何组织代码以便更改基类？"

#: ../../faq/programming.rst:1536
msgid ""
"You could define an alias for the base class, assign the real base class to "
"it before your class definition, and use the alias throughout your class.  "
"Then all you have to change is the value assigned to the alias.  "
"Incidentally, this trick is also handy if you want to decide dynamically (e."
"g. depending on availability of resources) which base class to use.  "
"Example::"
msgstr ""
"可以为基类定义别名，在类定义之前为其分配实际基类，并在整个类中使用别名。然后"
"更改分配给别名的值，就能实现上述要求。顺便提一下，如果你想动态决定（例如，取"
"决于资源的可用性）要使用哪个基类，这个技巧也很方便。例如："

#: ../../faq/programming.rst:1551
msgid "How do I create static class data and static class methods?"
msgstr "如何创建静态类数据和静态类方法？"

#: ../../faq/programming.rst:1553
msgid ""
"Both static data and static methods (in the sense of C++ or Java) are "
"supported in Python."
msgstr "Python支持静态数据和静态方法（在C ++或Java的意义上）。"

#: ../../faq/programming.rst:1556
msgid ""
"For static data, simply define a class attribute.  To assign a new value to "
"the attribute, you have to explicitly use the class name in the assignment::"
msgstr ""
"对于静态数据，只需定义一个类属性。要为属性分配新值，就必须在赋值中显式使用类"
"名："

#: ../../faq/programming.rst:1568
msgid ""
"``c.count`` also refers to ``C.count`` for any ``c`` such that "
"``isinstance(c, C)`` holds, unless overridden by ``c`` itself or by some "
"class on the base-class search path from ``c.__class__`` back to ``C``."
msgstr ""
"对于任意 ``c`` 来说只要 ``isinstance(c, C)`` 为真，则 ``c.count`` 同样也指向 "
"``C.count``，除非被 ``c`` 自身，或者从 ``c.__class__`` 回到 ``C`` 的基类搜索"
"路径上的某个类所重载。"

#: ../../faq/programming.rst:1572
msgid ""
"Caution: within a method of C, an assignment like ``self.count = 42`` "
"creates a new and unrelated instance named \"count\" in ``self``'s own "
"dict.  Rebinding of a class-static data name must always specify the class "
"whether inside a method or not::"
msgstr ""
"注意：在 C 的某个方法内部，像 ``self.count = 42`` 这样的赋值将在 ``self`` 自"
"身的字典中新建一个名为 \"count\" 的不相关实例。 想要重新绑定类静态数据名称就"
"必须总是指明类名，无论是在方法内部还是外部::"

#: ../../faq/programming.rst:1579
msgid "Static methods are possible::"
msgstr "静态方法是可行的："

#: ../../faq/programming.rst:1587
msgid ""
"However, a far more straightforward way to get the effect of a static method "
"is via a simple module-level function::"
msgstr "然而，获得静态方法效果的更直接的方法是通过一个简单的模块级函数："

#: ../../faq/programming.rst:1593
msgid ""
"If your code is structured so as to define one class (or tightly related "
"class hierarchy) per module, this supplies the desired encapsulation."
msgstr ""
"如果您的代码是结构化的，以便为每个模块定义一个类（或紧密相关的类层次结构），"
"那么这就提供了所需的封装。"

#: ../../faq/programming.rst:1598
msgid "How can I overload constructors (or methods) in Python?"
msgstr "如何在Python中重载构造函数（或方法）？"

#: ../../faq/programming.rst:1600
msgid ""
"This answer actually applies to all methods, but the question usually comes "
"up first in the context of constructors."
msgstr "这个答案实际上适用于所有方法，但问题通常首先出现在构造函数的上下文中。"

#: ../../faq/programming.rst:1603
msgid "In C++ you'd write"
msgstr "在C ++中，你会这样写"

#: ../../faq/programming.rst:1612
msgid ""
"In Python you have to write a single constructor that catches all cases "
"using default arguments.  For example::"
msgstr "在Python中，您必须编写一个构造函数，使用默认参数捕获所有情况。例如："

#: ../../faq/programming.rst:1622
msgid "This is not entirely equivalent, but close enough in practice."
msgstr "这不完全等同，但在实践中足够接近。"

#: ../../faq/programming.rst:1624
msgid "You could also try a variable-length argument list, e.g. ::"
msgstr "你也可以尝试一个可变长度的参数列表，例如::"

#: ../../faq/programming.rst:1629
msgid "The same approach works for all method definitions."
msgstr "相同的方法适用于所有方法定义。"

#: ../../faq/programming.rst:1633
msgid "I try to use __spam and I get an error about _SomeClassName__spam."
msgstr "我尝试使用 __spam ，但是得到一个关于 _SomeClassName__spam 的错误信息。"

#: ../../faq/programming.rst:1635
msgid ""
"Variable names with double leading underscores are \"mangled\" to provide a "
"simple but effective way to define class private variables.  Any identifier "
"of the form ``__spam`` (at least two leading underscores, at most one "
"trailing underscore) is textually replaced with ``_classname__spam``, where "
"``classname`` is the current class name with any leading underscores "
"stripped."
msgstr ""
"以双下划线打头的变量会被“更名”以提供一种定义类私有变量的简单而有效的方式。 任"
"何形式为 ``__spam`` 的标识符（至少前缀两个下划线，至多后缀一个下划线）文本会"
"被替换为 ``_classname__spam``，其中 ``classname`` 为去除了全部前缀下划线的当"
"前类名称。"

#: ../../faq/programming.rst:1641
msgid ""
"This doesn't guarantee privacy: an outside user can still deliberately "
"access the \"_classname__spam\" attribute, and private values are visible in "
"the object's ``__dict__``.  Many Python programmers never bother to use "
"private variable names at all."
msgstr ""
"这并不能保证私密性：外部用户仍然可以访问 \"_classname__spam\" 属性，私有变量"
"值也在对象的 ``__dict__`` 中可见。 许多 Python 程序员从来都不使用这种私有变量"
"名称。"

#: ../../faq/programming.rst:1648
msgid "My class defines __del__ but it is not called when I delete the object."
msgstr "类定义了 __del__ 方法，但是删除对象时没有调用它。"

#: ../../faq/programming.rst:1650
msgid "There are several possible reasons for this."
msgstr "这有几个可能的原因。"

#: ../../faq/programming.rst:1652
msgid ""
"The del statement does not necessarily call :meth:`__del__` -- it simply "
"decrements the object's reference count, and if this reaches zero :meth:"
"`__del__` is called."
msgstr ""
"del 语句不一定调用 :meth:`__del__` —— 它只是减少对象的引用计数，如果（引用计"
"数）达到零，才会调用 :meth:`__del__`。"

#: ../../faq/programming.rst:1656
msgid ""
"If your data structures contain circular links (e.g. a tree where each child "
"has a parent reference and each parent has a list of children) the reference "
"counts will never go back to zero.  Once in a while Python runs an algorithm "
"to detect such cycles, but the garbage collector might run some time after "
"the last reference to your data structure vanishes, so your :meth:`__del__` "
"method may be called at an inconvenient and random time. This is "
"inconvenient if you're trying to reproduce a problem. Worse, the order in "
"which object's :meth:`__del__` methods are executed is arbitrary.  You can "
"run :func:`gc.collect` to force a collection, but there *are* pathological "
"cases where objects will never be collected."
msgstr ""
"如果数据结构包含循环链接（例如，每个子级都有一个父级引用，每个父级都有一个子"
"级列表的树），则引用计数将永远不会返回零。尽管Python 偶尔会运行一个算法来检测"
"这样的循环，但在数据结构的引用计数清零后，垃圾收集器可能需要一段时间来运行，"
"因此 :meth:`__del__` 方法可能会在不方便和随机的时间被调用。这对于重现一个问"
"题，是非常不方便的。更糟糕的是，对象 :meth:`__del__` 的方法执行顺序是任意的。"
"虽然可以运行 :func:`gc.collect` 来强制回收，但在一些病态的情况下，对象永远不"
"会被回收。"

#: ../../faq/programming.rst:1667
msgid ""
"Despite the cycle collector, it's still a good idea to define an explicit "
"``close()`` method on objects to be called whenever you're done with them.  "
"The ``close()`` method can then remove attributes that refer to subobjects.  "
"Don't call :meth:`__del__` directly -- :meth:`__del__` should call "
"``close()`` and ``close()`` should make sure that it can be called more than "
"once for the same object."
msgstr ""
"尽管有循环收集器，但在对象上定义一个显式的 ``close()`` 方法以便在用完之后调用"
"它仍然是一个好主意。 这样 ``close()`` 方法可以随即删除引用子对象的属性。 不要"
"直接调用 :meth:`__del__` —— 应该由 :meth:`__del__` 调用 ``close()``，并且 "
"``close()`` 能确保可以被同一对象多次地调用。"

#: ../../faq/programming.rst:1674
msgid ""
"Another way to avoid cyclical references is to use the :mod:`weakref` "
"module, which allows you to point to objects without incrementing their "
"reference count. Tree data structures, for instance, should use weak "
"references for their parent and sibling references (if they need them!)."
msgstr ""
"另一种避免循环引用的方法是使用 :mod:`weakref` 模块，该模块允许您指向对象而不"
"增加其引用计数。例如，树状数据结构应该对其父级和同级引用使用弱引用（如果需要"
"的话！）"

#: ../../faq/programming.rst:1687
msgid ""
"Finally, if your :meth:`__del__` method raises an exception, a warning "
"message is printed to :data:`sys.stderr`."
msgstr ""
"最后，如果 :meth:`__del__` 方法引发异常，会将警告消息打印到 :data:`sys."
"stderr` 。"

#: ../../faq/programming.rst:1692
msgid "How do I get a list of all instances of a given class?"
msgstr "如何获取给定类的所有实例的列表？"

#: ../../faq/programming.rst:1694
msgid ""
"Python does not keep track of all instances of a class (or of a built-in "
"type). You can program the class's constructor to keep track of all "
"instances by keeping a list of weak references to each instance."
msgstr ""
"Python不跟踪类（或内置类型）的所有实例。您可以对类的构造函数进行编程，以通过"
"保留每个实例的弱引用列表来跟踪所有实例。"

#: ../../faq/programming.rst:1700
msgid "Why does the result of ``id()`` appear to be not unique?"
msgstr "为什么 ``id()`` 的结果看起来不是唯一的？"

#: ../../faq/programming.rst:1702
msgid ""
"The :func:`id` builtin returns an integer that is guaranteed to be unique "
"during the lifetime of the object.  Since in CPython, this is the object's "
"memory address, it happens frequently that after an object is deleted from "
"memory, the next freshly created object is allocated at the same position in "
"memory.  This is illustrated by this example:"
msgstr ""
":func:`id` 返回一个整数，该整数在对象的生命周期内保证是唯一的。因为在CPython"
"中，这是对象的内存地址，所以经常发生在从内存中删除对象之后，下一个新创建的对"
"象被分配在内存中的相同位置。这个例子说明了这一点："

#: ../../faq/programming.rst:1713
msgid ""
"The two ids belong to different integer objects that are created before, and "
"deleted immediately after execution of the ``id()`` call.  To be sure that "
"objects whose id you want to examine are still alive, create another "
"reference to the object:"
msgstr ""
"这两个id属于之前创建的不同整数对象，并在执行 ``id()`` 调用后立即删除。要确保"
"要检查其id的对象仍处于活动状态，请创建对该对象的另一个引用："

#: ../../faq/programming.rst:1726
msgid "Modules"
msgstr "模块"

#: ../../faq/programming.rst:1729
msgid "How do I create a .pyc file?"
msgstr "如何创建 .pyc 文件？"

#: ../../faq/programming.rst:1731
msgid ""
"When a module is imported for the first time (or when the source file has "
"changed since the current compiled file was created) a ``.pyc`` file "
"containing the compiled code should be created in a ``__pycache__`` "
"subdirectory of the directory containing the ``.py`` file.  The ``.pyc`` "
"file will have a filename that starts with the same name as the ``.py`` "
"file, and ends with ``.pyc``, with a middle component that depends on the "
"particular ``python`` binary that created it.  (See :pep:`3147` for details.)"
msgstr ""
"当首次导入模块时（或当前已编译文件创建之后源文件发生了改动），在 ``.py`` 文件"
"所在目录的 ``__pycache__`` 子目录下会创建一个包含已编译代码的 ``.pyc`` 文件。"
"该 ``.pyc`` 文件的名称开头部分将与 ``.py`` 文件名相同，并以 ``.pyc`` 为后缀，"
"中间部分则依据创建它的 ``python`` 版本而各不相同。（详见 :pep:`3147`。）"

#: ../../faq/programming.rst:1739
msgid ""
"One reason that a ``.pyc`` file may not be created is a permissions problem "
"with the directory containing the source file, meaning that the "
"``__pycache__`` subdirectory cannot be created. This can happen, for "
"example, if you develop as one user but run as another, such as if you are "
"testing with a web server."
msgstr ""
"无法创建 ``.pyc`` 文件的可能原因是包含源文件的目录存在权限问题，这意味着 "
"``__pycache__`` 子目录无法被创建。 举例来说，如果你以某一用户来开发程序但以另"
"一用户身份来运行程序时就可能发生问题，测试 Web 服务器就属于这种情况。"

#: ../../faq/programming.rst:1744
msgid ""
"Unless the :envvar:`PYTHONDONTWRITEBYTECODE` environment variable is set, "
"creation of a .pyc file is automatic if you're importing a module and Python "
"has the ability (permissions, free space, etc...) to create a "
"``__pycache__`` subdirectory and write the compiled module to that "
"subdirectory."
msgstr ""
"除非设置了 :envvar:`PYTHONDONTWRITEBYTECODE` 环境变量，否则当你导入模块并且 "
"Python 具有创建 ``__pycache__`` 子目录并将已编译模块写入该子目录的能力（权"
"限、存储空间等等）时就会自动创建 .pyc 文件。"

#: ../../faq/programming.rst:1749
msgid ""
"Running Python on a top level script is not considered an import and no ``."
"pyc`` will be created.  For example, if you have a top-level module ``foo."
"py`` that imports another module ``xyz.py``, when you run ``foo`` (by typing "
"``python foo.py`` as a shell command), a ``.pyc`` will be created for "
"``xyz`` because ``xyz`` is imported, but no ``.pyc`` file will be created "
"for ``foo`` since ``foo.py`` isn't being imported."
msgstr ""
"在最高层级运行的 Python 脚本不被视为导入，因此不会创建 ``.pyc`` 文件。 例如，"
"如果你有一个最高层级模块文件 ``foo.py``，它又导入了另一个模块 ``xyz.py``，当"
"你运行 ``foo`` 模块 (通过输入终端命令 ``python foo.py``)，则将为 ``xyz`` 创建"
"一个 ``.pyc``，因为 ``xyz`` 是被导入的，但不会为 ``foo`` 创建 ``.pyc`` 文件，"
"因为 ``foo.py`` 不是被导入的。"

#: ../../faq/programming.rst:1756
msgid ""
"If you need to create a ``.pyc`` file for ``foo`` -- that is, to create a ``."
"pyc`` file for a module that is not imported -- you can, using the :mod:"
"`py_compile` and :mod:`compileall` modules."
msgstr ""
"如果你需要为 ``foo`` 创建 ``.pyc`` 文件 —— 即为不是被导入的模块创建 ``.pyc`` "
"文件 —— 你可以使用 :mod:`py_compile` 和 :mod:`compileall` 模块。"

#: ../../faq/programming.rst:1760
msgid ""
"The :mod:`py_compile` module can manually compile any module.  One way is to "
"use the ``compile()`` function in that module interactively::"
msgstr ""
":mod:`py_compile` 模块能够手动编译任意模块。 一种做法是交互式地使用该模块中"
"的 ``compile()`` 函数::"

#: ../../faq/programming.rst:1766
msgid ""
"This will write the ``.pyc`` to a ``__pycache__`` subdirectory in the same "
"location as ``foo.py`` (or you can override that with the optional parameter "
"``cfile``)."
msgstr ""
"这将会将  ``.pyc`` 文件写入与 ``foo.py`` 相同位置下的 ``__pycache__`` 子目录"
"（或者你也可以通过可选参数 ``cfile`` 来重载该行为）。"

#: ../../faq/programming.rst:1770
msgid ""
"You can also automatically compile all files in a directory or directories "
"using the :mod:`compileall` module.  You can do it from the shell prompt by "
"running ``compileall.py`` and providing the path of a directory containing "
"Python files to compile::"
msgstr ""
"你还可以使用 :mod:`compileall` 模块自动编译一个目录或多个目录下的所有文件。 "
"具体做法可以是在命令行提示符中运行 ``compileall.py`` 并提供包含要编译 Python "
"文件的目录路径::"

#: ../../faq/programming.rst:1779
msgid "How do I find the current module name?"
msgstr "如何找到当前模块名称？"

#: ../../faq/programming.rst:1781
msgid ""
"A module can find out its own module name by looking at the predefined "
"global variable ``__name__``.  If this has the value ``'__main__'``, the "
"program is running as a script.  Many modules that are usually used by "
"importing them also provide a command-line interface or a self-test, and "
"only execute this code after checking ``__name__``::"
msgstr ""
"模块可以通过查看预定义的全局变量 ``__name__`` 找到自己的模块名称。如果它的值"
"为 ``'__main__'`` ，程序将作为脚本运行。通常，通过导入使用的许多模块也提供命"
"令行界面或自检，并且只在检查 ``__name__`` 之后，才执行之后的代码::"

#: ../../faq/programming.rst:1796
msgid "How can I have modules that mutually import each other?"
msgstr "如何让模块相互导入？"

#: ../../faq/programming.rst:1798
msgid "Suppose you have the following modules:"
msgstr "假设您有以下模块："

#: ../../faq/programming.rst:1800
msgid "foo.py::"
msgstr "foo.py::"

#: ../../faq/programming.rst:1805
msgid "bar.py::"
msgstr "bar.py::"

#: ../../faq/programming.rst:1810
msgid "The problem is that the interpreter will perform the following steps:"
msgstr "问题是解释器将执行以下步骤："

#: ../../faq/programming.rst:1812
msgid "main imports foo"
msgstr "首先导入foo"

#: ../../faq/programming.rst:1813
msgid "Empty globals for foo are created"
msgstr "创建用于foo的空全局变量"

#: ../../faq/programming.rst:1814
msgid "foo is compiled and starts executing"
msgstr "foo被编译并开始执行"

#: ../../faq/programming.rst:1815
msgid "foo imports bar"
msgstr "foo 导入 bar"

#: ../../faq/programming.rst:1816
msgid "Empty globals for bar are created"
msgstr "创建了用于bar 的空全局变量"

#: ../../faq/programming.rst:1817
msgid "bar is compiled and starts executing"
msgstr "bar被编译并开始执行"

#: ../../faq/programming.rst:1818
msgid ""
"bar imports foo (which is a no-op since there already is a module named foo)"
msgstr "bar导入foo（这是一个空操作（no-op ），因为已经有一个名为foo的模块）"

#: ../../faq/programming.rst:1819
msgid "bar.foo_var = foo.foo_var"
msgstr "bar.foo_var = foo.foo_var"

#: ../../faq/programming.rst:1821
msgid ""
"The last step fails, because Python isn't done with interpreting ``foo`` yet "
"and the global symbol dictionary for ``foo`` is still empty."
msgstr ""
"最后一步失败了，因为Python还没有解释foo，而foo的全局符号字典仍然是空的。"

#: ../../faq/programming.rst:1824
msgid ""
"The same thing happens when you use ``import foo``, and then try to access "
"``foo.foo_var`` in global code."
msgstr ""
"当你使用 ``import foo`` ，然后尝试在全局代码中访问 ``foo.foo_var`` 时，会发生"
"同样的事情。"

#: ../../faq/programming.rst:1827
msgid "There are (at least) three possible workarounds for this problem."
msgstr "这个问题有（至少）三种可能的解决方法。"

#: ../../faq/programming.rst:1829
msgid ""
"Guido van Rossum recommends avoiding all uses of ``from <module> import ..."
"``, and placing all code inside functions.  Initializations of global "
"variables and class variables should use constants or built-in functions "
"only.  This means everything from an imported module is referenced as "
"``<module>.<name>``."
msgstr ""
"Guido van Rossum 建议避免使用 ``from <module> import ...`` ，并将所有代码放在"
"函数中。全局变量和类变量的初始化只能使用常量或内置函数。这意味着导入模块中的"
"所有内容都被引用为 ``<module>.<name>`` 。"

#: ../../faq/programming.rst:1834
msgid ""
"Jim Roskind suggests performing steps in the following order in each module:"
msgstr "Jim Roskind建议在每个模块中按以下顺序执行步骤："

#: ../../faq/programming.rst:1836
msgid ""
"exports (globals, functions, and classes that don't need imported base "
"classes)"
msgstr "导出（全局变量，函数和不需要导入基类的类）"

#: ../../faq/programming.rst:1838
msgid "``import`` statements"
msgstr "``导入`` 声明"

#: ../../faq/programming.rst:1839
msgid ""
"active code (including globals that are initialized from imported values)."
msgstr "活动代码（包括从导入值初始化的全局变量）。"

#: ../../faq/programming.rst:1841
msgid ""
"van Rossum doesn't like this approach much because the imports appear in a "
"strange place, but it does work."
msgstr ""
"van Rossum不喜欢这种方法，因为导入出现在一个陌生的地方，但这种方法确实有效。"

#: ../../faq/programming.rst:1844
msgid ""
"Matthias Urlichs recommends restructuring your code so that the recursive "
"import is not necessary in the first place."
msgstr "Matthias Urlichs建议重构代码，以便首先不需要递归导入。"

#: ../../faq/programming.rst:1847
msgid "These solutions are not mutually exclusive."
msgstr "这些解决方案并不相互排斥。"

#: ../../faq/programming.rst:1851
msgid "__import__('x.y.z') returns <module 'x'>; how do I get z?"
msgstr "__import__('x.y.z') 返回 <module 'x'>; 如何获取z?"

#: ../../faq/programming.rst:1853
msgid ""
"Consider using the convenience function :func:`~importlib.import_module` "
"from :mod:`importlib` instead::"
msgstr "考虑使用 :mod:`importlib` 中的函数 :func:`~importlib.import_module` ："

#: ../../faq/programming.rst:1860
msgid ""
"When I edit an imported module and reimport it, the changes don't show up.  "
"Why does this happen?"
msgstr ""
"当我编辑了导入过的模块并重新导入它时，这些变化没有显示出来。为什么会这样？"

#: ../../faq/programming.rst:1862
msgid ""
"For reasons of efficiency as well as consistency, Python only reads the "
"module file on the first time a module is imported.  If it didn't, in a "
"program consisting of many modules where each one imports the same basic "
"module, the basic module would be parsed and re-parsed many times.  To force "
"re-reading of a changed module, do this::"
msgstr ""
"出于效率和一致性的原因，Python仅在第一次导入模块时读取模块文件。如果不这么"
"做，在一个由许多模块组成的程序中，每个模块都会导入相同的基本模块，那么基本模"
"块将被解析和重新解析多次。要强制重新读取已更改的模块，请执行以下操作::"

#: ../../faq/programming.rst:1872
msgid ""
"Warning: this technique is not 100% fool-proof.  In particular, modules "
"containing statements like ::"
msgstr "警告：这种技术不是100％万无一失。特别是包含如下语句的模块"

#: ../../faq/programming.rst:1877
msgid ""
"will continue to work with the old version of the imported objects.  If the "
"module contains class definitions, existing class instances will *not* be "
"updated to use the new class definition.  This can result in the following "
"paradoxical behaviour::"
msgstr ""
"将继续使用旧版本的导入对象。如果模块包含类定义，则不会更新现有的类实例以使用"
"新的类定义。这可能导致以下矛盾行为::"

#: ../../faq/programming.rst:1890
msgid ""
"The nature of the problem is made clear if you print out the \"identity\" of "
"the class objects::"
msgstr "如果打印出类对象的“标识”，问题的本质就会明确："
