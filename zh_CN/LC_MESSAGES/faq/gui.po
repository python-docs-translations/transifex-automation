# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2023, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# dgy18787 <dgy18787@126.com>, 2020
# Kade For, 2020
# Freesand Leo <yuqinju@163.com>, 2020
# Azuk 443 <me@azuk.top>, 2020
# ppcfish <ppcfish@gmail.com>, 2020
# Siyuan Xu, 2020
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-06-23 16:32+0000\n"
"PO-Revision-Date: 2020-05-30 11:53+0000\n"
"Last-Translator: Siyuan Xu, 2020\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/"
"teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../faq/gui.rst:5
msgid "Graphic User Interface FAQ"
msgstr "图形用户界面（GUI）常见问题"

#: ../../faq/gui.rst:8
msgid "Contents"
msgstr "目录"

#: ../../faq/gui.rst:15
msgid "General GUI Questions"
msgstr "图形界面常见问题"

#: ../../faq/gui.rst:18
msgid "What platform-independent GUI toolkits exist for Python?"
msgstr "Python 是否有平台无关的图形界面工具包？"

#: ../../faq/gui.rst:20
msgid ""
"Depending on what platform(s) you are aiming at, there are several.  Some of "
"them haven't been ported to Python 3 yet.  At least `Tkinter`_ and `Qt`_ are "
"known to be Python 3-compatible."
msgstr ""
"针对不同的（操作系统或）平台，有多种工具包可供选择。虽然有些工具包还没有移植"
"到 Python 3 上，但至少目前 `Tkinter`_ 以及 `Qt`_ 是兼容 Python 3 的。"

#: ../../faq/gui.rst:27
msgid "Tkinter"
msgstr "Tkinter"

#: ../../faq/gui.rst:29
msgid ""
"Standard builds of Python include an object-oriented interface to the Tcl/Tk "
"widget set, called :ref:`tkinter <Tkinter>`.  This is probably the easiest "
"to install (since it comes included with most `binary distributions <https://"
"www.python.org/downloads/>`_ of Python) and use. For more info about Tk, "
"including pointers to the source, see the `Tcl/Tk home page <https://www.tcl."
"tk>`_.  Tcl/Tk is fully portable to the Mac OS X, Windows, and Unix "
"platforms."
msgstr ""
"Python 的标准编译包含了 :ref:`tkinter<Tkinter>`。这是一个面向对象的接口，指"
"向  Tcl/Tk 微件包。 该接口大概是最容易安装（因为该接口包含在 Python 的大部分 "
"`二进制发行版 <https://www.python.org/downloads/>`_ 中）和使用的工具包。要了"
"解 Tk 的详情，比如源代码等，可访问 `Tcl/Tk 项目主页 <https://www.tcl.tk>`_。 "
"Tcl/Tk 可完整移植至 Mac OS X，Windows 和 Unix 操作系统上。"

#: ../../faq/gui.rst:38
msgid "wxWidgets"
msgstr "wxWidgets"

#: ../../faq/gui.rst:40
msgid ""
"wxWidgets (https://www.wxwidgets.org) is a free, portable GUI class library "
"written in C++ that provides a native look and feel on a number of "
"platforms, with Windows, Mac OS X, GTK, X11, all listed as current stable "
"targets.  Language bindings are available for a number of languages "
"including Python, Perl, Ruby, etc."
msgstr ""
"wxWidgets (https://www.wxwidgets.org) 是一个自由、可移植的 GUI 图形用户界面类"
"库，使用 C++ 编写。它可以在多个操作系统平台上提供原生自然的界面观感。包括"
"Windows、Mac OS X、 GTK 和 X11 平台在内，都是wxWidgets 当前稳定支持的平台。在"
"语言绑定适配方面，wxWidgets 类库可用于较多语言，包括 Python，Perl，Ruby等。"

#: ../../faq/gui.rst:46
msgid ""
"`wxPython <https://www.wxpython.org>`_ is the Python binding for wxwidgets.  "
"While it often lags slightly behind the official wxWidgets releases, it also "
"offers a number of features via pure Python extensions that are not "
"available in other language bindings.  There is an active wxPython user and "
"developer community."
msgstr ""
"`wxPython <https://www.wxpython.org>`_ 是 wxWidgets 的 Python 适配。虽然该绑"
"定在更新进度上经常会稍稍落后于 wxWidgets，但它利用纯 Python 扩展，提供了许多"
"其他语言绑定没有实现的特性。wxPython 有一个活跃的用户和开发者社区。"

#: ../../faq/gui.rst:52
msgid ""
"Both wxWidgets and wxPython are free, open source, software with permissive "
"licences that allow their use in commercial products as well as in freeware "
"or shareware."
msgstr ""
"wxWidgets 和 wxPython 都是自由开源库。宽松的许可证允许人们在商业软件、自由软"
"件和共享软件中使用它们。"

#: ../../faq/gui.rst:58
msgid "Qt"
msgstr "Qt"

#: ../../faq/gui.rst:60
msgid ""
"There are bindings available for the Qt toolkit (using either `PyQt <https://"
"riverbankcomputing.com/software/pyqt/intro>`_ or `PySide <https://wiki.qt.io/"
"PySide>`_) and for KDE (`PyKDE4 <https://techbase.kde.org/Languages/Python/"
"Using_PyKDE_4>`__). PyQt is currently more mature than PySide, but you must "
"buy a PyQt license from `Riverbank Computing <https://www.riverbankcomputing."
"com/commercial/license-faq>`_ if you want to write proprietary "
"applications.  PySide is free for all applications."
msgstr ""
"Qt 工具包 (可使用 `PyQt <https://riverbankcomputing.com/software/pyqt/"
"intro>`_ 或 `PySide <https://wiki.qt.io/PySide>`_) 及 KDE (`PyKDE4 <https://"
"techbase.kde.org/Languages/Python/Using_PyKDE_4>`__) 有多个绑定适配可供选"
"择。 PyQt 当前相较 PySide 更成熟，但如果你想编写专有软件，就必须要从 "
"`Riverbank Computing <https://www.riverbankcomputing.com/commercial/license-"
"faq>`_ 购买 PyQt 许可证。 PySide 则可以自由使用于各类软件。"

#: ../../faq/gui.rst:67
msgid ""
"Qt 4.5 upwards is licensed under the LGPL license; also, commercial licenses "
"are available from `The Qt Company <https://www.qt.io/licensing/>`_."
msgstr ""
"Qt 4.5 以上版本使用 LGPL 进行许可；此外，商业许可证可从 `Qt 公司 <https://"
"www.qt.io/licensing/>`_ 那里获得。"

#: ../../faq/gui.rst:71
msgid "Gtk+"
msgstr "Gtk+"

#: ../../faq/gui.rst:73
msgid ""
"The `GObject introspection bindings <https://wiki.gnome.org/Projects/"
"PyGObject>`_ for Python allow you to write GTK+ 3 applications.  There is "
"also a `Python GTK+ 3 Tutorial <https://python-gtk-3-tutorial.readthedocs."
"io>`_."
msgstr ""
"针对 Python 的 `GObject 内省绑定 <https://wiki.gnome.org/Projects/"
"PyGObject>`_ 可以用于编写 GTK+ 3 应用。 另请参阅 `Python GTK+ 3 教程 "
"<https://python-gtk-3-tutorial.readthedocs.io>`_。"

#: ../../faq/gui.rst:77
msgid ""
"The older PyGtk bindings for the `Gtk+ 2 toolkit <https://www.gtk.org>`_ "
"have been implemented by James Henstridge; see <http://www.pygtk.org>."
msgstr ""
"更早的、针对 `Gtk+ 2 工具包 <https://www.gtk.org>`_ 的 PyGtk 绑定，是由 "
"James Henstridge 实现的。具体请参考 <http://www.pygtk.org>。"

#: ../../faq/gui.rst:81
msgid "Kivy"
msgstr "Kivy"

#: ../../faq/gui.rst:83
msgid ""
"`Kivy <https://kivy.org/>`_ is a cross-platform GUI library supporting both "
"desktop operating systems (Windows, macOS, Linux) and mobile devices "
"(Android, iOS).  It is written in Python and Cython, and can use a range of "
"windowing backends."
msgstr ""
"`Kivy <https://kivy.org/>`_ 是一种跨平台图形用户界面库，同时支持桌面操作系统"
"（Windows，macOS 和 Linux）以及移动设备（Android，iOS）。该库使用 Python 和 "
"Cython 编写，可以使用一系列窗口后端。"

#: ../../faq/gui.rst:88
msgid ""
"Kivy is free and open source software distributed under the MIT license."
msgstr "Kivy 是自由的开源软件，使用 MIT 许可证分发。"

#: ../../faq/gui.rst:91
msgid "FLTK"
msgstr "FLTK"

#: ../../faq/gui.rst:93
msgid ""
"Python bindings for `the FLTK toolkit <http://www.fltk.org>`_, a simple yet "
"powerful and mature cross-platform windowing system, are available from `the "
"PyFLTK project <http://pyfltk.sourceforge.net>`_."
msgstr ""
"`the FLTK toolkit <http://www.fltk.org>`_ 的Python绑定是简单却功能强大且成熟"
"的跨平台窗口系统，可以在  `the PyFLTK project <http://pyfltk.sourceforge."
"net>`_ 里获得相关信息。"

#: ../../faq/gui.rst:98
msgid "OpenGL"
msgstr "OpenGL"

#: ../../faq/gui.rst:100
msgid "For OpenGL bindings, see `PyOpenGL <http://pyopengl.sourceforge.net>`_."
msgstr "对于OpenGL绑定，请参阅 `PyOpenGL <http://pyopengl.sourceforge.net>`_。"

#: ../../faq/gui.rst:104
msgid "What platform-specific GUI toolkits exist for Python?"
msgstr "有哪些Python的GUI工具是某个平台专用的？"

#: ../../faq/gui.rst:106
msgid ""
"By installing the `PyObjc Objective-C bridge <https://pypi.org/project/"
"pyobjc/>`_, Python programs can use Mac OS X's Cocoa libraries."
msgstr ""
"通过安装 `PyObjc Objective-C bridge <https://pypi.org/project/pyobjc/>`_，"
"Python程序可以使用Mac OS X的Cocoa库。"

#: ../../faq/gui.rst:110
msgid ""
":ref:`Pythonwin <windows-faq>` by Mark Hammond includes an interface to the "
"Microsoft Foundation Classes and a Python programming environment that's "
"written mostly in Python using the MFC classes."
msgstr ""
"Mark Hammond的 :ref:`Pythonwin <windows-faq>` 包括一个微软基础类(MFC)的接口和"
"一个绝大多数由使用MFC类的Python写成的Python编程环境。"

#: ../../faq/gui.rst:116
msgid "Tkinter questions"
msgstr "有关Tkinter的问题"

#: ../../faq/gui.rst:119
msgid "How do I freeze Tkinter applications?"
msgstr "我怎样“冻结”Tkinter程序？"

#: ../../faq/gui.rst:121
msgid ""
"Freeze is a tool to create stand-alone applications.  When freezing Tkinter "
"applications, the applications will not be truly stand-alone, as the "
"application will still need the Tcl and Tk libraries."
msgstr ""
"Freeze （意为 “冻结”）是一个用来创建独立应用程序的工具。 当 “冻结” Tkinter 程"
"序时，程序并不是真的能够独立运行，因为程序仍然需要 Tcl 和 Tk 库。"

#: ../../faq/gui.rst:125
msgid ""
"One solution is to ship the application with the Tcl and Tk libraries, and "
"point to them at run-time using the :envvar:`TCL_LIBRARY` and :envvar:"
"`TK_LIBRARY` environment variables."
msgstr ""
"一种解决方法是将程序与 Tcl 和 Tk 库一同发布，并且在运行时使用环境变量 :"
"envvar:`TCL_LIBRARY` 和 :envvar:`TK_LIBRARY` 指向他们的位置。"

#: ../../faq/gui.rst:129
msgid ""
"To get truly stand-alone applications, the Tcl scripts that form the library "
"have to be integrated into the application as well. One tool supporting that "
"is SAM (stand-alone modules), which is part of the Tix distribution (http://"
"tix.sourceforge.net/)."
msgstr ""
"为了获得真正能独立运行的应用程序，来自库里的 Tcl 脚本也需要被整合进应用程"
"序。 一个做这种事情的工具叫 SAM (stand-alone modules，独立模块) ，它是 Tix "
"distribution (http://tix.sourceforge.net/) 的一部分。"

#: ../../faq/gui.rst:134
msgid ""
"Build Tix with SAM enabled, perform the appropriate call to :c:func:"
"`Tclsam_init`, etc. inside Python's :file:`Modules/tkappinit.c`, and link "
"with libtclsam and libtksam (you might include the Tix libraries as well)."
msgstr ""
"在启用 SAM 时编译 Tix ，在 Python 文件  :file:`Modules/tkappinit.c` 中执行"
"对 :c:func:`Tclsam_init` 等的适当调用，并且将程序与 libtclsam 和 libtksam 相"
"链接（可能也要包括 Tix 的库）。"

#: ../../faq/gui.rst:141
msgid "Can I have Tk events handled while waiting for I/O?"
msgstr "在等待 I/O 操作时能够处理 Tk 事件吗？"

#: ../../faq/gui.rst:143
msgid ""
"On platforms other than Windows, yes, and you don't even need threads!  But "
"you'll have to restructure your I/O code a bit.  Tk has the equivalent of "
"Xt's :c:func:`XtAddInput()` call, which allows you to register a callback "
"function which will be called from the Tk mainloop when I/O is possible on a "
"file descriptor.  See :ref:`tkinter-file-handlers`."
msgstr ""
"在 Windows 以外的其他平台上可以，你甚至不需要使用线程！ 但是你必须稍微修改一"
"下你的 I/O 代码。 Tk 有与 Xt 的 :c:func:`XtAddInput()` 对应的调用，它允许你注"
"册一个回调函数，当一个文件描述符可以进行 I/O 操作的时候，Tk 主循环将会调用这"
"个回调函数。 参见 :ref:`tkinter-file-handlers`。"

#: ../../faq/gui.rst:151
msgid "I can't get key bindings to work in Tkinter: why?"
msgstr "在Tkinter中键绑定不工作：为什么？"

#: ../../faq/gui.rst:153
msgid ""
"An often-heard complaint is that event handlers bound to events with the :"
"meth:`bind` method don't get handled even when the appropriate key is "
"pressed."
msgstr ""
"经常听到的抱怨是：已经通过  :meth:`bind` 方法绑定了事件的处理程序，但是，当按"
"下相关的按键后，这个处理程序却没有执行。"

#: ../../faq/gui.rst:156
msgid ""
"The most common cause is that the widget to which the binding applies "
"doesn't have \"keyboard focus\".  Check out the Tk documentation for the "
"focus command. Usually a widget is given the keyboard focus by clicking in "
"it (but not for labels; see the takefocus option)."
msgstr ""
"最常见的原因是，那个绑定的控件没有“键盘焦点”。请在 Tk 文档中查找 focus 指令。"
"通常一个控件要获得“键盘焦点”，需要点击那个控件（而不是标签；请查看 takefocus "
"选项）。"
