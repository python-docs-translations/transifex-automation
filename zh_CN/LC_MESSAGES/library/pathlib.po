# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2023, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# jaystone776 <1732865113@qq.com>, 2021
# Zombie110year <zombie110year@gmail.com>, 2021
# eric R <trencyclopedia@gmail.com>, 2021
# ww song <sww4718168@gmail.com>, 2022
# walkinrain <walkinrain2008@outlook.com>, 2022
# Arisaka97 <solitaire2312@gmail.com>, 2023
# Freesand Leo <yuqinju@163.com>, 2023
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-12-15 14:14+0000\n"
"PO-Revision-Date: 2021-06-28 01:11+0000\n"
"Last-Translator: Freesand Leo <yuqinju@163.com>, 2023\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/"
"teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/pathlib.rst:3
msgid ":mod:`pathlib` --- Object-oriented filesystem paths"
msgstr ":mod:`pathlib` --- 面向对象的文件系统路径"

#: ../../library/pathlib.rst:10
msgid "**Source code:** :source:`Lib/pathlib.py`"
msgstr "**源代码** :source:`Lib/pathlib.py`"

#: ../../library/pathlib.rst:16
msgid ""
"This module offers classes representing filesystem paths with semantics "
"appropriate for different operating systems.  Path classes are divided "
"between :ref:`pure paths <pure-paths>`, which provide purely computational "
"operations without I/O, and :ref:`concrete paths <concrete-paths>`, which "
"inherit from pure paths but also provide I/O operations."
msgstr ""
"该模块提供表示文件系统路径的类，其语义适用于不同的操作系统。路径类被分为提供"
"纯计算操作而没有 I/O 的 :ref:`纯路径 <pure-paths>`，以及从纯路径继承而来但提"
"供 I/O 操作的 :ref:`具体路径 <concrete-paths>`。"

#: ../../library/pathlib.rst:26
msgid ""
"If you've never used this module before or just aren't sure which class is "
"right for your task, :class:`Path` is most likely what you need. It "
"instantiates a :ref:`concrete path <concrete-paths>` for the platform the "
"code is running on."
msgstr ""
"如果以前从未用过此模块，或不确定哪个类适合完成任务，那要用的可能就是 :class:"
"`Path`。它在运行代码的平台上实例化为 :ref:`具体路径 <concrete-paths>`。"

#: ../../library/pathlib.rst:30
msgid "Pure paths are useful in some special cases; for example:"
msgstr "在一些用例中纯路径很有用，例如："

#: ../../library/pathlib.rst:32
msgid ""
"If you want to manipulate Windows paths on a Unix machine (or vice versa). "
"You cannot instantiate a :class:`WindowsPath` when running on Unix, but you "
"can instantiate :class:`PureWindowsPath`."
msgstr ""
"如果你想要在 Unix 设备上操作 Windows 路径（或者相反）。你不应在 Unix 上实例化"
"一个 :class:`WindowsPath`，但是你可以实例化 :class:`PureWindowsPath`。"

#: ../../library/pathlib.rst:35
msgid ""
"You want to make sure that your code only manipulates paths without actually "
"accessing the OS. In this case, instantiating one of the pure classes may be "
"useful since those simply don't have any OS-accessing operations."
msgstr ""
"你只想操作路径但不想实际访问操作系统。在这种情况下，实例化一个纯路径是有用"
"的，因为它们没有任何访问操作系统的操作。"

#: ../../library/pathlib.rst:40
msgid ":pep:`428`: The pathlib module -- object-oriented filesystem paths."
msgstr ":pep:`428`：pathlib 模块 -- 面向对象的文件系统路径。"

#: ../../library/pathlib.rst:43
msgid ""
"For low-level path manipulation on strings, you can also use the :mod:`os."
"path` module."
msgstr "对于底层的路径字符串操作，你也可以使用 :mod:`os.path` 模块。"

#: ../../library/pathlib.rst:48
msgid "Basic use"
msgstr "基础使用"

#: ../../library/pathlib.rst:50
msgid "Importing the main class::"
msgstr "导入主类::"

#: ../../library/pathlib.rst:54
msgid "Listing subdirectories::"
msgstr "列出子目录::"

#: ../../library/pathlib.rst:61
msgid "Listing Python source files in this directory tree::"
msgstr "列出当前目录树下的所有 Python 源代码文件::"

#: ../../library/pathlib.rst:68
msgid "Navigating inside a directory tree::"
msgstr "在目录树中移动::"

#: ../../library/pathlib.rst:77
msgid "Querying path properties::"
msgstr "查询路径的属性::"

#: ../../library/pathlib.rst:84
msgid "Opening a file::"
msgstr "打开一个文件::"

#: ../../library/pathlib.rst:94
msgid "Pure paths"
msgstr "纯路径"

#: ../../library/pathlib.rst:96
msgid ""
"Pure path objects provide path-handling operations which don't actually "
"access a filesystem.  There are three ways to access these classes, which we "
"also call *flavours*:"
msgstr ""
"纯路径对象提供了不实际访问文件系统的路径处理操作。有三种方式来访问这些类，也"
"是不同的风格："

#: ../../library/pathlib.rst:102
msgid ""
"A generic class that represents the system's path flavour (instantiating it "
"creates either a :class:`PurePosixPath` or a :class:`PureWindowsPath`)::"
msgstr ""
"一个通用的类，代表当前系统的路径风格（实例化为 :class:`PurePosixPath` 或者 :"
"class:`PureWindowsPath`）::"

#: ../../library/pathlib.rst:108
msgid ""
"Each element of *pathsegments* can be either a string representing a path "
"segment, or an object implementing the :class:`os.PathLike` interface where "
"the :meth:`~os.PathLike.__fspath__` method returns a string, such as another "
"path object::"
msgstr ""
"*pathsegments* 的每个元素既可以是代表一个路径段的字符串，也可以是实现了 :"
"class:`os.PathLike` 接口的对象，其中 :meth:`~os.PathLike.__fspath__` 方法返回"
"一个字符串，例如另一个路径对象::"

#: ../../library/pathlib.rst:118
msgid "When *pathsegments* is empty, the current directory is assumed::"
msgstr "当 *pathsegments* 为空的时候，假定为当前目录::"

#: ../../library/pathlib.rst:123
msgid ""
"If a segment is an absolute path, all previous segments are ignored (like :"
"func:`os.path.join`)::"
msgstr ""
"如果某个段为绝对路径，则其前面的所有段都会被忽略 (类似 :func:`os.path."
"join`)::"

#: ../../library/pathlib.rst:131
msgid ""
"On Windows, the drive is not reset when a rooted relative path segment (e."
"g., ``r'\\foo'``) is encountered::"
msgstr ""
"在 Windows 上，当遇到带根符号的路径段 (如 ``r'\\foo'``) 时驱动器将不会被重"
"置::"

#: ../../library/pathlib.rst:137
msgid ""
"Spurious slashes and single dots are collapsed, but double dots (``'..'``) "
"and leading double slashes (``'//'``) are not, since this would change the "
"meaning of a path for various reasons (e.g. symbolic links, UNC paths)::"
msgstr ""
"假斜杠和单个点号会被消除，但双点号 (``'..'``) 和打头的双斜杠 (``'//'``) 不"
"会，因为这会出于各种原因改变路径的实际含义 (例如符号链接、UNC 路径等)::"

#: ../../library/pathlib.rst:150
msgid ""
"(a naïve approach would make ``PurePosixPath('foo/../bar')`` equivalent to "
"``PurePosixPath('bar')``, which is wrong if ``foo`` is a symbolic link to "
"another directory)"
msgstr ""
"（一个很 naïve 的做法是让 ``PurePosixPath('foo/../bar')`` 等同于 "
"``PurePosixPath('bar')``，如果 ``foo`` 是一个指向其他目录的符号链接那么这个做"
"法就将出错）"

#: ../../library/pathlib.rst:154
msgid ""
"Pure path objects implement the :class:`os.PathLike` interface, allowing "
"them to be used anywhere the interface is accepted."
msgstr ""
"纯路径对象实现了 :class:`os.PathLike` 接口，允许它们在任何接受此接口的地方使"
"用。"

#: ../../library/pathlib.rst:157
msgid "Added support for the :class:`os.PathLike` interface."
msgstr "添加了 :class:`os.PathLike` 接口支持。"

#: ../../library/pathlib.rst:162
msgid ""
"A subclass of :class:`PurePath`, this path flavour represents non-Windows "
"filesystem paths::"
msgstr "一个 :class:`PurePath` 的子类，路径风格不同于 Windows 文件系统::"

#: ../../library/pathlib.rst:168 ../../library/pathlib.rst:180
#: ../../library/pathlib.rst:742 ../../library/pathlib.rst:752
#: ../../library/pathlib.rst:762
msgid "*pathsegments* is specified similarly to :class:`PurePath`."
msgstr "*pathsegments* 参数的指定和 :class:`PurePath` 相同。"

#: ../../library/pathlib.rst:172
msgid ""
"A subclass of :class:`PurePath`, this path flavour represents Windows "
"filesystem paths, including `UNC paths`_::"
msgstr ""
":class:`PurePath` 的一个子类，此路径风格代表 Windows 文件系统路径，包括 `UNC "
"paths`_::"

#: ../../library/pathlib.rst:184
msgid ""
"Regardless of the system you're running on, you can instantiate all of these "
"classes, since they don't provide any operation that does system calls."
msgstr ""
"无论你正运行什么系统，你都可以实例化这些类，因为它们提供的操作不做任何系统调"
"用。"

#: ../../library/pathlib.rst:189
msgid "General properties"
msgstr "通用性质"

#: ../../library/pathlib.rst:191
msgid ""
"Paths are immutable and :term:`hashable`.  Paths of a same flavour are "
"comparable and orderable.  These properties respect the flavour's case-"
"folding semantics::"
msgstr ""
"路径是不可变并且 :term:`hashable`。 相同风格的路径可以排序和比较。 这此特性会"
"尊重对应风格的大小写转换语义。::"

#: ../../library/pathlib.rst:204
msgid "Paths of a different flavour compare unequal and cannot be ordered::"
msgstr "不同风格的路径比较得到不等的结果并且无法被排序::"

#: ../../library/pathlib.rst:215
msgid "Operators"
msgstr "运算符"

#: ../../library/pathlib.rst:217
msgid ""
"The slash operator helps create child paths, like :func:`os.path.join`. If "
"the argument is an absolute path, the previous path is ignored. On Windows, "
"the drive is not reset when the argument is a rooted relative path (e.g., "
"``r'\\foo'``)::"
msgstr ""
"斜杠操作符可以帮助创建子路径，如 :func:`os.path.join`。 如果参数为一个绝对路"
"径，则之前的路径会被忽略。 在 Windows 上，当参数为一个带根符号的相对路径 (如 "
"``r'\\foo'``) 时驱动器将不会被重置::"

#: ../../library/pathlib.rst:235
msgid ""
"A path object can be used anywhere an object implementing :class:`os."
"PathLike` is accepted::"
msgstr "文件对象可用于任何接受 :class:`os.PathLike` 接口实现的地方。"

#: ../../library/pathlib.rst:243
msgid ""
"The string representation of a path is the raw filesystem path itself (in "
"native form, e.g. with backslashes under Windows), which you can pass to any "
"function taking a file path as a string::"
msgstr ""
"路径的字符串表示法为它自己原始的文件系统路径（以原生形式，例如在 Windows 下使"
"用反斜杠）。你可以传递给任何需要字符串形式路径的函数。"

#: ../../library/pathlib.rst:254
msgid ""
"Similarly, calling :class:`bytes` on a path gives the raw filesystem path as "
"a bytes object, as encoded by :func:`os.fsencode`::"
msgstr ""
"类似地，在路径上调用 :class:`bytes` 将原始文件系统路径作为字节对象给出，就像"
"被 :func:`os.fsencode` 编码一样::"

#: ../../library/pathlib.rst:261
msgid ""
"Calling :class:`bytes` is only recommended under Unix.  Under Windows, the "
"unicode form is the canonical representation of filesystem paths."
msgstr ""
"只推荐在 Unix 下调用 :class:`bytes`。在 Windows， unicode 形式是文件系统路径"
"的规范表示法。"

#: ../../library/pathlib.rst:266
msgid "Accessing individual parts"
msgstr "访问个别部分"

#: ../../library/pathlib.rst:268
msgid ""
"To access the individual \"parts\" (components) of a path, use the following "
"property:"
msgstr "为了访问路径独立的部分 （组件），使用以下特征属性："

#: ../../library/pathlib.rst:273
msgid "A tuple giving access to the path's various components::"
msgstr "一个元组，可以访问路径的多个组件::"

#: ../../library/pathlib.rst:283
msgid "(note how the drive and local root are regrouped in a single part)"
msgstr "（注意盘符和本地根目录是如何重组的）"

#: ../../library/pathlib.rst:287
msgid "Methods and properties"
msgstr "方法和特征属性"

#: ../../library/pathlib.rst:293
msgid "Pure paths provide the following methods and properties:"
msgstr "纯路径提供以下方法和特征属性："

#: ../../library/pathlib.rst:297
msgid "A string representing the drive letter or name, if any::"
msgstr "一个表示驱动器盘符或命名的字符串，如果存在::"

#: ../../library/pathlib.rst:306
msgid "UNC shares are also considered drives::"
msgstr "UNC 分享也被认作驱动器::"

#: ../../library/pathlib.rst:313
msgid "A string representing the (local or global) root, if any::"
msgstr "一个表示（本地或全局）根的字符串，如果存在::"

#: ../../library/pathlib.rst:322
msgid "UNC shares always have a root::"
msgstr "UNC 分享一样拥有根::"

#: ../../library/pathlib.rst:327
msgid ""
"If the path starts with more than two successive slashes, :class:`~pathlib."
"PurePosixPath` collapses them::"
msgstr ""
"如果路径以超过两个连续斜框打头，:class:`~pathlib.PurePosixPath` 会合并它们::"

#: ../../library/pathlib.rst:339
msgid ""
"This behavior conforms to *The Open Group Base Specifications Issue 6*, "
"paragraph `4.11 Pathname Resolution <https://pubs.opengroup.org/"
"onlinepubs/009695399/basedefs/xbd_chap04.html#tag_04_11>`_:"
msgstr ""
"此行为符合 *The Open Group Base Specifications Issue 6*, paragraph `4.11 "
"Pathname Resolution <https://pubs.opengroup.org/onlinepubs/009695399/"
"basedefs/xbd_chap04.html#tag_04_11>`_:"

#: ../../library/pathlib.rst:343
msgid ""
"*\"A pathname that begins with two successive slashes may be interpreted in "
"an implementation-defined manner, although more than two leading slashes "
"shall be treated as a single slash.\"*"
msgstr ""
"*\"以连续两个斜杠打头的路径名可能会以具体实现所定义的方式被解读，但是两个以上"
"的前缀斜杠则应当被当作一个斜杠来处理。\"*"

#: ../../library/pathlib.rst:349
msgid "The concatenation of the drive and root::"
msgstr "驱动器和根的联合::"

#: ../../library/pathlib.rst:363
msgid ""
"An immutable sequence providing access to the logical ancestors of the path::"
msgstr "提供访问此路径的逻辑祖先的不可变序列::"

#: ../../library/pathlib.rst:374
msgid ""
"The parents sequence now supports :term:`slices <slice>` and negative index "
"values."
msgstr "parents 序列现在支持 :term:`切片 <slice>` 和负的索引值。"

#: ../../library/pathlib.rst:379
msgid "The logical parent of the path::"
msgstr "此路径的逻辑父路径::"

#: ../../library/pathlib.rst:385
msgid "You cannot go past an anchor, or empty path::"
msgstr "你不能超过一个 anchor 或空路径::"

#: ../../library/pathlib.rst:395
msgid "This is a purely lexical operation, hence the following behaviour::"
msgstr "这是一个单纯的词法操作，因此有以下行为::"

#: ../../library/pathlib.rst:401
msgid ""
"If you want to walk an arbitrary filesystem path upwards, it is recommended "
"to first call :meth:`Path.resolve` so as to resolve symlinks and eliminate "
"``\"..\"`` components."
msgstr ""
"如果你想要向上遍历任意文件系统路径，建议首先调用 :meth:`Path.resolve` 以便解"
"析符号链接并消除 ``\"..\"`` 部分。"

#: ../../library/pathlib.rst:408
msgid ""
"A string representing the final path component, excluding the drive and "
"root, if any::"
msgstr "一个表示最后路径组件的字符串，排除了驱动器与根目录，如果存在的话::"

#: ../../library/pathlib.rst:414
msgid "UNC drive names are not considered::"
msgstr "UNC 驱动器名不被考虑::"

#: ../../library/pathlib.rst:424
msgid "The file extension of the final component, if any::"
msgstr "最后一个组件的文件扩展名，如果存在::"

#: ../../library/pathlib.rst:436
msgid "A list of the path's file extensions::"
msgstr "路径的文件扩展名列表::"

#: ../../library/pathlib.rst:448
msgid "The final path component, without its suffix::"
msgstr "最后一个路径组件，除去后缀::"

#: ../../library/pathlib.rst:460
msgid ""
"Return a string representation of the path with forward slashes (``/``)::"
msgstr "返回使用正斜杠（``/``）的路径字符串::"

#: ../../library/pathlib.rst:471
msgid ""
"Represent the path as a ``file`` URI.  :exc:`ValueError` is raised if the "
"path isn't absolute."
msgstr "将路径表示为 ``file`` URL。如果并非绝对路径，抛出 :exc:`ValueError`。"

#: ../../library/pathlib.rst:484
msgid ""
"Return whether the path is absolute or not.  A path is considered absolute "
"if it has both a root and (if the flavour allows) a drive::"
msgstr ""
"返回此路径是否为绝对路径。如果路径同时拥有驱动器符与根路径（如果风格允许）则"
"将被认作绝对路径。"

#: ../../library/pathlib.rst:504
msgid "Return whether or not this path is relative to the *other* path."
msgstr "返回此路径是否相对于 *other* 的路径。"

#: ../../library/pathlib.rst:516
msgid ""
"Passing additional arguments is deprecated; if supplied, they are joined "
"with *other*."
msgstr ""
"传入附加参数的做法已被弃用；如果提供了附加参数，它们将与 *other* 合并。"

#: ../../library/pathlib.rst:521
msgid ""
"With :class:`PureWindowsPath`, return ``True`` if the path is considered "
"reserved under Windows, ``False`` otherwise.  With :class:`PurePosixPath`, "
"``False`` is always returned."
msgstr ""
"在 :class:`PureWindowsPath`，如果路径是被 Windows 保留的则返回 ``True``，否"
"则 ``False``。在 :class:`PurePosixPath`，总是返回 ``False``。"

#: ../../library/pathlib.rst:530
msgid ""
"File system calls on reserved paths can fail mysteriously or have unintended "
"effects."
msgstr "当保留路径上的文件系统被调用，则可能出现玄学失败或者意料之外的效应。"

#: ../../library/pathlib.rst:536
msgid ""
"Calling this method is equivalent to combining the path with each of the "
"given *pathsegments* in turn::"
msgstr "调用此方法等同于依次将路径与给定的每个 *pathsegments* 组合到一起::"

#: ../../library/pathlib.rst:551
msgid ""
"Match this path against the provided glob-style pattern.  Return ``True`` if "
"matching is successful, ``False`` otherwise."
msgstr ""
"将此路径与提供的通配符风格的模式匹配。如果匹配成功则返回 ``True``，否则返回 "
"``False``。"

#: ../../library/pathlib.rst:554
msgid ""
"If *pattern* is relative, the path can be either relative or absolute, and "
"matching is done from the right::"
msgstr ""
"如果 *pattern* 是相对的，则路径可以是相对路径或绝对路径，并且匹配是从右侧完成"
"的："

#: ../../library/pathlib.rst:564
msgid ""
"If *pattern* is absolute, the path must be absolute, and the whole path must "
"match::"
msgstr "如果 *pattern* 是绝对的，则路径必须是绝对的，并且路径必须完全匹配::"

#: ../../library/pathlib.rst:572
msgid ""
"The *pattern* may be another path object; this speeds up matching the same "
"pattern against multiple files::"
msgstr ""
"*pattern* 可以是另一个路径对象；这样可以加快多个文件匹配同一模式的速度::"

#: ../../library/pathlib.rst:579
msgid "Accepts an object implementing the :class:`os.PathLike` interface."
msgstr "接受一个实现了 :class:`os.PathLike` 接口的对象。"

#: ../../library/pathlib.rst:582
msgid "As with other methods, case-sensitivity follows platform defaults::"
msgstr "与其他方法一样，是否大小写敏感遵循平台的默认规则::"

#: ../../library/pathlib.rst:589
msgid ""
"Set *case_sensitive* to ``True`` or ``False`` to override this behaviour."
msgstr "将 *case_sensitive* 设为 ``True`` 或 ``False`` 来重载此行为。"

#: ../../library/pathlib.rst:591 ../../library/pathlib.rst:934
#: ../../library/pathlib.rst:1347
msgid "The *case_sensitive* parameter was added."
msgstr "增加了 *case_sensitive* 形参。"

#: ../../library/pathlib.rst:597
msgid ""
"Compute a version of this path relative to the path represented by *other*.  "
"If it's impossible, :exc:`ValueError` is raised::"
msgstr ""
"计算此路径相对于 *other* 所表示路径的版本。 如果不可计算，则引发 :exc:"
"`ValueError`::"

#: ../../library/pathlib.rst:612
msgid ""
"When *walk_up* is False (the default), the path must start with *other*. "
"When the argument is True, ``..`` entries may be added to form the relative "
"path. In all other cases, such as the paths referencing different drives, :"
"exc:`ValueError` is raised.::"
msgstr ""
"当 *walk_up* 为 False（默认值）时，路径必须以 *other* 开始。 当参数为 True "
"时，可能会添加 ``..`` 条目以形成相对路径。 在所有其他情况下，如引用不同驱动器"
"的路径，则会引发 :exc:`ValueError`。::"

#: ../../library/pathlib.rst:627
msgid ""
"This function is part of :class:`PurePath` and works with strings. It does "
"not check or access the underlying file structure. This can impact the "
"*walk_up* option as it assumes that no symlinks are present in the path; "
"call :meth:`~Path.resolve` first if necessary to resolve symlinks."
msgstr ""
"该函数是 :class:`PurePath` 的一部分并适用于字符串。 它不会检查或访问下层的文"
"件结构体。 这可能会影响 *walk_up* 选项因为它假定路径中不存在符号链接；如果需"
"要处理符号链接请先调用 :meth:`~Path.resolve`。"

#: ../../library/pathlib.rst:633
msgid ""
"The *walk_up* parameter was added (old behavior is the same as "
"``walk_up=False``)."
msgstr "增加了 *walk_up* 形参数（原本的行为与 ``walk_up=False`` 相同）。"

#: ../../library/pathlib.rst:638
msgid ""
"Passing additional positional arguments is deprecated; if supplied, they are "
"joined with *other*."
msgstr "传入附加位置参数的做法已被弃用；如果提供的话，它们将与 *other* 合并。"

#: ../../library/pathlib.rst:643
msgid ""
"Return a new path with the :attr:`name` changed.  If the original path "
"doesn't have a name, ValueError is raised::"
msgstr ""
"返回一个新的路径并修改 :attr:`name`。如果原本路径没有 name，ValueError 被抛"
"出::"

#: ../../library/pathlib.rst:660
msgid ""
"Return a new path with the :attr:`stem` changed.  If the original path "
"doesn't have a name, ValueError is raised::"
msgstr ""
"返回一个带有修改后 :attr:`stem` 的新路径。 如果原路径没有名称，则会引发 "
"ValueError::"

#: ../../library/pathlib.rst:684
msgid ""
"Return a new path with the :attr:`suffix` changed.  If the original path "
"doesn't have a suffix, the new *suffix* is appended instead.  If the "
"*suffix* is an empty string, the original suffix is removed::"
msgstr ""
"返回一个新的路径并修改 :attr:`suffix`。如果原本的路径没有后缀，新的 *suffix* "
"则被追加以代替。如果 *suffix* 是空字符串，则原本的后缀被移除::"

#: ../../library/pathlib.rst:701
msgid ""
"Create a new path object of the same type by combining the given "
"*pathsegments*. This method is called whenever a derivative path is created, "
"such as from :attr:`parent` and :meth:`relative_to`. Subclasses may override "
"this method to pass information to derivative paths, for example::"
msgstr ""
"通过组合给定的 *pathsegments* 创建一个相同类型的新路径对象。 每当创建派生路"
"径，如从 :attr:`parent` 和 :meth:`relative_to` 创建时都会调用此方法。 子类可"
"以覆盖此方法以便向派生路径传递信息，例如::"

#: ../../library/pathlib.rst:727
msgid "Concrete paths"
msgstr "具体路径"

#: ../../library/pathlib.rst:729
msgid ""
"Concrete paths are subclasses of the pure path classes.  In addition to "
"operations provided by the latter, they also provide methods to do system "
"calls on path objects.  There are three ways to instantiate concrete paths:"
msgstr ""
"具体路径是纯路径的子类。除了后者提供的操作之外，它们还提供了对路径对象进行系"
"统调用的方法。有三种方法可以实例化具体路径::"

#: ../../library/pathlib.rst:735
msgid ""
"A subclass of :class:`PurePath`, this class represents concrete paths of the "
"system's path flavour (instantiating it creates either a :class:`PosixPath` "
"or a :class:`WindowsPath`)::"
msgstr ""
"一个 :class:`PurePath` 的子类，此类以当前系统的路径风格表示路径（实例化为 :"
"class:`PosixPath` 或 :class:`WindowsPath`）::"

#: ../../library/pathlib.rst:746
msgid ""
"A subclass of :class:`Path` and :class:`PurePosixPath`, this class "
"represents concrete non-Windows filesystem paths::"
msgstr ""
"一个 :class:`Path` 和 :class:`PurePosixPath` 的子类，此类表示一个非 Windows "
"文件系统的具体路径::"

#: ../../library/pathlib.rst:756
msgid ""
"A subclass of :class:`Path` and :class:`PureWindowsPath`, this class "
"represents concrete Windows filesystem paths::"
msgstr ""
":class:`Path` 和 :class:`PureWindowsPath` 的子类，从类表示一个 Windows 文件系"
"统的具体路径::"

#: ../../library/pathlib.rst:764
msgid ""
"You can only instantiate the class flavour that corresponds to your system "
"(allowing system calls on non-compatible path flavours could lead to bugs or "
"failures in your application)::"
msgstr ""
"你只能实例化与当前系统风格相同的类（允许系统调用作用于不兼容的路径风格可能在"
"应用程序中导致缺陷或失败）::"

#: ../../library/pathlib.rst:784
msgid "Methods"
msgstr "方法"

#: ../../library/pathlib.rst:786
msgid ""
"Concrete paths provide the following methods in addition to pure paths "
"methods.  Many of these methods can raise an :exc:`OSError` if a system call "
"fails (for example because the path doesn't exist)."
msgstr ""
"除纯路径方法外，实体路径还提供以下方法。 如果系统调用失败（例如因为路径不存"
"在）这些方法中许多都会引发 :exc:`OSError`。"

#: ../../library/pathlib.rst:792
msgid ""
":meth:`~Path.exists()`, :meth:`~Path.is_dir()`, :meth:`~Path.is_file()`, :"
"meth:`~Path.is_mount()`, :meth:`~Path.is_symlink()`, :meth:`~Path."
"is_block_device()`, :meth:`~Path.is_char_device()`, :meth:`~Path."
"is_fifo()`, :meth:`~Path.is_socket()` now return ``False`` instead of "
"raising an exception for paths that contain characters unrepresentable at "
"the OS level."
msgstr ""
"对于包含 OS 层级无法表示字符的路径，:meth:`~Path.exists()`, :meth:`~Path."
"is_dir()`, :meth:`~Path.is_file()`, :meth:`~Path.is_mount()`, :meth:`~Path."
"is_symlink()`, :meth:`~Path.is_block_device()`, :meth:`~Path."
"is_char_device()`, :meth:`~Path.is_fifo()`, :meth:`~Path.is_socket()` 现在将"
"返回 ``False`` 而不是引发异常。"

#: ../../library/pathlib.rst:802
msgid ""
"Return a new path object representing the current directory (as returned by :"
"func:`os.getcwd`)::"
msgstr ""
"返回一个新的表示当前目录的路径对象（和 :func:`os.getcwd` 返回的相同）::"

#: ../../library/pathlib.rst:811
msgid ""
"Return a new path object representing the user's home directory (as returned "
"by :func:`os.path.expanduser` with ``~`` construct). If the home directory "
"can't be resolved, :exc:`RuntimeError` is raised."
msgstr ""
"返回一个表示用户家目录的新路径对象（与带 ``~`` 构造的 :func:`os.path."
"expanduser` 所返回的相同）。 如果无法解析家目录，则会引发 :exc:"
"`RuntimeError`。"

#: ../../library/pathlib.rst:825
msgid ""
"Return a :class:`os.stat_result` object containing information about this "
"path, like :func:`os.stat`. The result is looked up at each call to this "
"method."
msgstr ""
"返回一个 :class:`os.stat_result` 对象，其中包含有关此路径的信息，例如 :func:"
"`os.stat`。 结果会在每次调用此方法时重新搜索。"

#: ../../library/pathlib.rst:828
msgid ""
"This method normally follows symlinks; to stat a symlink add the argument "
"``follow_symlinks=False``, or use :meth:`~Path.lstat`."
msgstr ""
"此方法通常会跟随符号链接；要对 symlink 使用 stat 请添加参数 "
"``follow_symlinks=False``，或者使用 :meth:`~Path.lstat`。"

#: ../../library/pathlib.rst:839 ../../library/pathlib.rst:859
#: ../../library/pathlib.rst:880
msgid "The *follow_symlinks* parameter was added."
msgstr "增加了 *follow_symlinks* 形参。"

#: ../../library/pathlib.rst:844
msgid "Change the file mode and permissions, like :func:`os.chmod`."
msgstr "改变文件模式和权限，和 :func:`os.chmod` 一样。"

#: ../../library/pathlib.rst:846
msgid ""
"This method normally follows symlinks. Some Unix flavours support changing "
"permissions on the symlink itself; on these platforms you may add the "
"argument ``follow_symlinks=False``, or use :meth:`~Path.lchmod`."
msgstr ""
"此方法通常会跟随符号链接。 某些 Unix 变种支持改变 symlink 本身的权限；在这些"
"平台上你可以添加参数 ``follow_symlinks=False``，或者使用 :meth:`~Path."
"lchmod`。"

#: ../../library/pathlib.rst:864
msgid "Return ``True`` if the path points to an existing file or directory."
msgstr "如果路径指向现有的文件或目录则返回 ``True``。"

#: ../../library/pathlib.rst:866
msgid ""
"This method normally follows symlinks; to check if a symlink exists, add the "
"argument ``follow_symlinks=False``."
msgstr ""
"此方法通常会跟随符号链接；要检查符号链接是否存在，请添加参数 "
"``follow_symlinks=False``。"

#: ../../library/pathlib.rst:885
msgid ""
"Return a new path with expanded ``~`` and ``~user`` constructs, as returned "
"by :meth:`os.path.expanduser`. If a home directory can't be resolved, :exc:"
"`RuntimeError` is raised."
msgstr ""
"返回带有扩展 ``~`` 和 ``~user`` 构造的新路径，与 :meth:`os.path.expanduser` "
"所返回的相同。 如果无法解析家目录，则会引发 :exc:`RuntimeError`。"

#: ../../library/pathlib.rst:900
msgid ""
"Glob the given relative *pattern* in the directory represented by this path, "
"yielding all matching files (of any kind)::"
msgstr "解析相对于此路径的通配符 *pattern*，产生所有匹配的文件::"

#: ../../library/pathlib.rst:908
msgid ""
"Patterns are the same as for :mod:`fnmatch`, with the addition of \"``**``\" "
"which means \"this directory and all subdirectories, recursively\".  In "
"other words, it enables recursive globbing::"
msgstr ""
"pattern 的形式与 :mod:`fnmatch` 的相同，还增加了 \"``**``\" 表示 \"此目录以及"
"所有子目录，递归\"。 换句话说，它启用递归通配::"

#: ../../library/pathlib.rst:919 ../../library/pathlib.rst:1336
msgid ""
"By default, or when the *case_sensitive* keyword-only argument is set to "
"``None``, this method matches paths using platform-specific casing rules: "
"typically, case-sensitive on POSIX, and case-insensitive on Windows. Set "
"*case_sensitive* to ``True`` or ``False`` to override this behaviour."
msgstr ""
"在默认情况下，或当 *case_sensitive* 关键字参数被设为 ``None`` 时，该方法将使"
"用特定平台的大小写规则匹配路径：通常，在 POSIX 上区分大小写，而在 Windows 上"
"不区分大小写。将 *case_sensitive* 设为 ``True`` 或 ``False`` 可覆盖此行为。"

#: ../../library/pathlib.rst:925
msgid ""
"Using the \"``**``\" pattern in large directory trees may consume an "
"inordinate amount of time."
msgstr "在一个较大的目录树中使用 \"``**``\" 模式可能会消耗非常多的时间。"

#: ../../library/pathlib.rst:928
msgid ""
"Raises an :ref:`auditing event <auditing>` ``pathlib.Path.glob`` with "
"arguments ``self``, ``pattern``."
msgstr ""
"引发一个 :ref:`审计事件 <auditing>` ``pathlib.Path.glob`` 附带参数 ``self``, "
"``pattern``。"

#: ../../library/pathlib.rst:930 ../../library/pathlib.rst:1343
msgid ""
"Return only directories if *pattern* ends with a pathname components "
"separator (:data:`~os.sep` or :data:`~os.altsep`)."
msgstr ""
"如果 *pattern* 以一个路径名称部分的分隔符结束 (:data:`~os.sep` 或 :data:`~os."
"altsep`) 则只返回目录。"

#: ../../library/pathlib.rst:940
msgid ""
"Return the name of the group owning the file.  :exc:`KeyError` is raised if "
"the file's gid isn't found in the system database."
msgstr ""
"返回拥有此文件的用户组。如果文件的 GID 无法在系统数据库中找到，将抛出 :exc:"
"`KeyError` 。"

#: ../../library/pathlib.rst:946
msgid ""
"Return ``True`` if the path points to a directory (or a symbolic link "
"pointing to a directory), ``False`` if it points to another kind of file."
msgstr ""
"如果路径指向一个目录（或者一个指向目录的符号链接）则返回 ``True``，如果指向其"
"他类型的文件则返回 ``False``。"

#: ../../library/pathlib.rst:949 ../../library/pathlib.rst:958
#: ../../library/pathlib.rst:1000 ../../library/pathlib.rst:1009
#: ../../library/pathlib.rst:1018 ../../library/pathlib.rst:1027
msgid ""
"``False`` is also returned if the path doesn't exist or is a broken symlink; "
"other errors (such as permission errors) are propagated."
msgstr ""
"当路径不存在或者是一个破损的符号链接时也会返回 ``False``；其他错误（例如权限"
"错误）被传播。"

#: ../../library/pathlib.rst:955
msgid ""
"Return ``True`` if the path points to a regular file (or a symbolic link "
"pointing to a regular file), ``False`` if it points to another kind of file."
msgstr ""
"如果路径指向一个正常的文件（或者一个指向正常文件的符号链接）则返回 ``True``，"
"如果指向其他类型的文件则返回 ``False``。"

#: ../../library/pathlib.rst:964
msgid ""
"Return ``True`` if the path points to a junction, and ``False`` for any "
"other type of file. Currently only Windows supports junctions."
msgstr ""
"如果路径是指向一个接合点则返回 ``True``，如果是其他文件类型则返回 "
"``False``。 目前只有 Windows 支持接合点。"

#: ../../library/pathlib.rst:972
msgid ""
"Return ``True`` if the path is a :dfn:`mount point`: a point in a file "
"system where a different file system has been mounted.  On POSIX, the "
"function checks whether *path*'s parent, :file:`path/..`, is on a different "
"device than *path*, or whether :file:`path/..` and *path* point to the same "
"i-node on the same device --- this should detect mount points for all Unix "
"and POSIX variants.  On Windows, a mount point is considered to be a drive "
"letter root (e.g. ``c:\\``), a UNC share (e.g. ``\\\\server\\share``), or a "
"mounted filesystem directory."
msgstr ""
"如果路径是一个 :dfn:`挂载点`: 在文件系统中被其他不同文件系统挂载的位置则返回 "
"``True``。 在 POSIX 上，此函数将检查 *path* 的上一级 :file:`path/..` 是否位于"
"和 *path* 不同的设备中，或者 :file:`path/..` 和 *path* 是否指向位于相同设置的"
"相同 i-node --- 这应当能检测所有 Unix 和 POSIX 变种上的挂载点。 在 Windows "
"上，挂载点是被视为驱动器盘符的根目录 (例如 ``c:\\``)、UNC 共享目录 (例如 ``\\"
"\\server\\share``) 或已挂载的文件系统目录。"

#: ../../library/pathlib.rst:983
msgid "Windows support was added."
msgstr "添加了 Windows 支持。"

#: ../../library/pathlib.rst:989
msgid ""
"Return ``True`` if the path points to a symbolic link, ``False`` otherwise."
msgstr "如果路径指向符号链接则返回 ``True``， 否则 ``False``。"

#: ../../library/pathlib.rst:991
msgid ""
"``False`` is also returned if the path doesn't exist; other errors (such as "
"permission errors) are propagated."
msgstr "如果路径不存在也返回 ``False``；其他错误（例如权限错误）被传播。"

#: ../../library/pathlib.rst:997
msgid ""
"Return ``True`` if the path points to a Unix socket (or a symbolic link "
"pointing to a Unix socket), ``False`` if it points to another kind of file."
msgstr ""
"如果路径指向一个 Unix socket 文件（或者指向 Unix socket 文件的符号链接）则返"
"回 ``True``，如果指向其他类型的文件则返回 ``False``。"

#: ../../library/pathlib.rst:1006
msgid ""
"Return ``True`` if the path points to a FIFO (or a symbolic link pointing to "
"a FIFO), ``False`` if it points to another kind of file."
msgstr ""
"如果路径指向一个先进先出存储（或者指向先进先出存储的符号链接）则返回 "
"``True`` ，指向其他类型的文件则返回 ``False``。"

#: ../../library/pathlib.rst:1015
msgid ""
"Return ``True`` if the path points to a block device (or a symbolic link "
"pointing to a block device), ``False`` if it points to another kind of file."
msgstr ""
"如果文件指向一个块设备（或者指向块设备的符号链接）则返回 ``True``，指向其他类"
"型的文件则返回 ``False``。"

#: ../../library/pathlib.rst:1024
msgid ""
"Return ``True`` if the path points to a character device (or a symbolic link "
"pointing to a character device), ``False`` if it points to another kind of "
"file."
msgstr ""
"如果路径指向一个字符设备（或指向字符设备的符号链接）则返回 ``True``，指向其他"
"类型的文件则返回 ``False``。"

#: ../../library/pathlib.rst:1033
msgid ""
"When the path points to a directory, yield path objects of the directory "
"contents::"
msgstr "当路径指向一个目录时，产生该路径下的对象的路径::"

#: ../../library/pathlib.rst:1047
msgid ""
"The children are yielded in arbitrary order, and the special entries ``'.'`` "
"and ``'..'`` are not included.  If a file is removed from or added to the "
"directory after creating the iterator, whether a path object for that file "
"be included is unspecified."
msgstr ""
"子条目会以任意顺序生成，并且不包括特殊条目 ``'.'`` 和 ``'..'``。 如果迭代器创"
"建之后有文件在目录中被移除或添加，是否要包括该文件所对应的路径对象并没有明确"
"规定。"

#: ../../library/pathlib.rst:1054
msgid ""
"Generate the file names in a directory tree by walking the tree either top-"
"down or bottom-up."
msgstr "通过对目录树自上而下或自下而上的遍历来生成其中的文件名。"

#: ../../library/pathlib.rst:1057
msgid ""
"For each directory in the directory tree rooted at *self* (including *self* "
"but excluding '.' and '..'), the method yields a 3-tuple of ``(dirpath, "
"dirnames, filenames)``."
msgstr ""
"对于根位置为 *self* 的目录树中的每个目录（包括 *self* 但不包括 '.' 和 "
"'..'），该方法会产生一个 3 元组 ``(dirpath, dirnames, filenames)``。"

#: ../../library/pathlib.rst:1061
msgid ""
"*dirpath* is a :class:`Path` to the directory currently being walked, "
"*dirnames* is a list of strings for the names of subdirectories in *dirpath* "
"(excluding ``'.'`` and ``'..'``), and *filenames* is a list of strings for "
"the names of the non-directory files in *dirpath*. To get a full path (which "
"begins with *self*) to a file or directory in *dirpath*, do ``dirpath / "
"name``. Whether or not the lists are sorted is file system-dependent."
msgstr ""
"*dirpath* 是指向当前正被遍历到的目录的 :class:`Path`，*dirnames* 是由表示 "
"*dirpath* 中子目录名称的字符串组成的列表 (不包括 ``'.'`` 和 ``'..'``)，"
"*filenames* 是由表示 *dirpath* 中非目录文件名称的字符串组成的列表。 要获取 "
"*dirpath* 中文件或目录的完整路径 (以 *self* 开头)，可使用 ``dirpath / "
"name``。 这些列表是否排序取决于具体的文件系统。"

#: ../../library/pathlib.rst:1069
msgid ""
"If the optional argument *top_down* is true (which is the default), the "
"triple for a directory is generated before the triples for any of its "
"subdirectories (directories are walked top-down).  If *top_down* is false, "
"the triple for a directory is generated after the triples for all of its "
"subdirectories (directories are walked bottom-up). No matter the value of "
"*top_down*, the list of subdirectories is retrieved before the triples for "
"the directory and its subdirectories are walked."
msgstr ""
"如果可选参数 *top_down* 为（默认的）真值，则会在所有子目录的三元组生成之前生"
"成父目录的三元组（目录是自上而下遍历的）。 如果 *top_down* 为假值，则会在所有"
"子目录的三元组生成之后再生成父目录的三元组（目录是是自下而上遍历的）。无论 "
"*top_down* 的值是什么，都会在遍历目录及其子目录的三元组之前提取子目录列表。"

#: ../../library/pathlib.rst:1077
msgid ""
"When *top_down* is true, the caller can modify the *dirnames* list in-place "
"(for example, using :keyword:`del` or slice assignment), and :meth:`Path."
"walk` will only recurse into the subdirectories whose names remain in "
"*dirnames*. This can be used to prune the search, or to impose a specific "
"order of visiting, or even to inform :meth:`Path.walk` about directories the "
"caller creates or renames before it resumes :meth:`Path.walk` again. "
"Modifying *dirnames* when *top_down* is false has no effect on the behavior "
"of :meth:`Path.walk()` since the directories in *dirnames* have already been "
"generated by the time *dirnames* is yielded to the caller."
msgstr ""
"当 *top_down* 为真值时，调用者可以就地修改 *dirnames* 列表（例如，使用 :"
"keyword:`del` 或切片赋值），而 :meth:`Path.walk` 将只向名称保留在 *dirnames* "
"中的子目录递归。 这可用于减少搜索量，或加入特定的访问顺序，甚至是在继续 :"
"meth:`Path.walk` 之前通知 :meth:`Path.walk` 调用者创建或重命名的目录的相关信"
"息。 当 *top_down* 为假值时修改 *dirnames* 不会影响 :meth:`Path.walk()` 的行"
"为，因为在 *dirnames* 被提供给调用者时 *dirnames* 中的目录已经生成了。"

#: ../../library/pathlib.rst:1087
msgid ""
"By default, errors from :func:`os.scandir` are ignored.  If the optional "
"argument *on_error* is specified, it should be a callable; it will be called "
"with one argument, an :exc:`OSError` instance. The callable can handle the "
"error to continue the walk or re-raise it to stop the walk. Note that the "
"filename is available as the ``filename`` attribute of the exception object."
msgstr ""
"在默认情况下，来自 :func:`os.scandir` 的错误将被忽略。 如果指定了可选参数 "
"*on_error*，则它应为一个可调用对象；调用它需要传入一个参数，即 :exc:"
"`OSError` 的实例。 该可调用对象能处理错误以继续执行遍历或是重新引发错误以停止"
"遍历。 请注意可以通过异常对象的 ``filename`` 属性来获取文件名。"

#: ../../library/pathlib.rst:1093
msgid ""
"By default, :meth:`Path.walk` does not follow symbolic links, and instead "
"adds them to the *filenames* list. Set *follow_symlinks* to true to resolve "
"symlinks and place them in *dirnames* and *filenames* as appropriate for "
"their targets, and consequently visit directories pointed to by symlinks "
"(where supported)."
msgstr ""
"在默认情况下，:meth:`Path.walk` 不会跟踪符号链接，而是将其添加到 *filenames* "
"列表中。 将 *follow_symlinks*设为真值可解析符号链接并根据它们的目标将其放入"
"*dirnames* 和 *filenames* 中，从而（在受支持的系统上）访问符号链接所指向的目"
"录。"

#: ../../library/pathlib.rst:1100
msgid ""
"Be aware that setting *follow_symlinks* to true can lead to infinite "
"recursion if a link points to a parent directory of itself. :meth:`Path."
"walk` does not keep track of the directories it has already visited."
msgstr ""
"请注意将 *follow_symlinks* 设为真值会在链接指向自身的父目录时导致无限递归。 :"
"meth:`Path.walk` 不会跟踪已它访问过的目录。"

#: ../../library/pathlib.rst:1105
msgid ""
":meth:`Path.walk` assumes the directories it walks are not modified during "
"execution. For example, if a directory from *dirnames* has been replaced "
"with a symlink and *follow_symlinks* is false, :meth:`Path.walk` will still "
"try to descend into it. To prevent such behavior, remove directories from "
"*dirnames* as appropriate."
msgstr ""
":meth:`Path.walk` 会假定在执行过程中它所遍历的目录没有被修改。 例如，如果 "
"*dirnames* 中的某个目录已被替换为符号链接并且 *follow_symlinks* 为假值，则 :"
"meth:`Path.walk` 仍会尝试进入该目录。 为防止出现这种行为，请相应地移除 "
"*dirnames* 中的目录。"

#: ../../library/pathlib.rst:1113
msgid ""
"Unlike :func:`os.walk`, :meth:`Path.walk` lists symlinks to directories in "
"*filenames* if *follow_symlinks* is false."
msgstr ""
"与 :func:`os.walk` 不同，当 *follow_symlinks* 为假值时 :meth:`Path.walk` 会"
"在 *filenames* 中列出指向目录的符号链接。"

#: ../../library/pathlib.rst:1116
msgid ""
"This example displays the number of bytes used by all files in each "
"directory, while ignoring ``__pycache__`` directories::"
msgstr ""
"这个例子显示每个目录中所有文件使用的总字节数，忽略其中的 ``__pycache__`` 目"
"录::"

#: ../../library/pathlib.rst:1132
msgid ""
"This next example is a simple implementation of :func:`shutil.rmtree`. "
"Walking the tree bottom-up is essential as :func:`rmdir` doesn't allow "
"deleting a directory before it is empty::"
msgstr ""
"下一个例子是 :func:`shutil.rmtree` 的一个简单实现。 由于 :func:`rmdir` 不允许"
"在目录为空之前删除该目录因此自下而上地遍历目录树是至关重要的::"

#: ../../library/pathlib.rst:1149
msgid ""
"Like :meth:`Path.chmod` but, if the path points to a symbolic link, the "
"symbolic link's mode is changed rather than its target's."
msgstr ""
"就像 :meth:`Path.chmod` 但是如果路径指向符号链接则是修改符号链接的模式，而不"
"是修改符号链接的目标。"

#: ../../library/pathlib.rst:1155
msgid ""
"Like :meth:`Path.stat` but, if the path points to a symbolic link, return "
"the symbolic link's information rather than its target's."
msgstr ""
"就和 :meth:`Path.stat` 一样，但是如果路径指向符号链接，则是返回符号链接而不是"
"目标的信息。"

#: ../../library/pathlib.rst:1161
msgid ""
"Create a new directory at this given path.  If *mode* is given, it is "
"combined with the process' ``umask`` value to determine the file mode and "
"access flags.  If the path already exists, :exc:`FileExistsError` is raised."
msgstr ""
"新建给定路径的目录。如果给出了 *mode* ，它将与当前进程的 ``umask`` 值合并来决"
"定文件模式和访问标志。如果路径已经存在，则抛出 :exc:`FileExistsError`。"

#: ../../library/pathlib.rst:1166
msgid ""
"If *parents* is true, any missing parents of this path are created as "
"needed; they are created with the default permissions without taking *mode* "
"into account (mimicking the POSIX ``mkdir -p`` command)."
msgstr ""
"如果 *parents* 为真值，任何找不到的父目录都会伴随着此路径被创建；它们会以默认"
"权限被创建，而不考虑 *mode* 设置（模仿 POSIX 的 ``mkdir -p`` 命令）。"

#: ../../library/pathlib.rst:1170
msgid ""
"If *parents* is false (the default), a missing parent raises :exc:"
"`FileNotFoundError`."
msgstr ""
"如果 *parents* 为假值（默认），则找不到的父级目录会引发 :exc:"
"`FileNotFoundError`。"

#: ../../library/pathlib.rst:1173
msgid ""
"If *exist_ok* is false (the default), :exc:`FileExistsError` is raised if "
"the target directory already exists."
msgstr ""
"如果 *exist_ok* 为 false（默认），则在目标已存在的情况下抛出 :exc:"
"`FileExistsError`。"

#: ../../library/pathlib.rst:1176
msgid ""
"If *exist_ok* is true, :exc:`FileExistsError` exceptions will be ignored "
"(same behavior as the POSIX ``mkdir -p`` command), but only if the last path "
"component is not an existing non-directory file."
msgstr ""
"如果 *exist_ok* 为 true， 则 :exc:`FileExistsError` 异常将被忽略（和 POSIX "
"``mkdir -p`` 命令行为相同），但是只有在最后一个路径组件不是现存的非目录文件时"
"才生效。"

#: ../../library/pathlib.rst:1180
msgid "The *exist_ok* parameter was added."
msgstr "*exist_ok* 形参被加入。"

#: ../../library/pathlib.rst:1186
msgid ""
"Open the file pointed to by the path, like the built-in :func:`open` "
"function does::"
msgstr "打开路径指向的文件，就像内置的 :func:`open` 函数所做的一样::"

#: ../../library/pathlib.rst:1198
msgid ""
"Return the name of the user owning the file.  :exc:`KeyError` is raised if "
"the file's uid isn't found in the system database."
msgstr ""
"返回拥有此文件的用户名。如果文件的 UID 无法在系统数据库中找到，则抛出 :exc:"
"`KeyError`。"

#: ../../library/pathlib.rst:1204
msgid "Return the binary contents of the pointed-to file as a bytes object::"
msgstr "以字节对象的形式返回路径指向的文件的二进制内容::"

#: ../../library/pathlib.rst:1217
msgid "Return the decoded contents of the pointed-to file as a string::"
msgstr "以字符串形式返回路径指向的文件的解码后文本内容。"

#: ../../library/pathlib.rst:1225
msgid ""
"The file is opened and then closed. The optional parameters have the same "
"meaning as in :func:`open`."
msgstr "文件先被打开然后关闭。有和 :func:`open` 一样的可选形参。"

#: ../../library/pathlib.rst:1233
msgid ""
"Return the path to which the symbolic link points (as returned by :func:`os."
"readlink`)::"
msgstr "返回符号链接所指向的路径（即 :func:`os.readlink` 的返回值）::"

#: ../../library/pathlib.rst:1246
msgid ""
"Rename this file or directory to the given *target*, and return a new Path "
"instance pointing to *target*.  On Unix, if *target* exists and is a file, "
"it will be replaced silently if the user has permission. On Windows, if "
"*target* exists, :exc:`FileExistsError` will be raised. *target* can be "
"either a string or another path object::"
msgstr ""
"将文件名目录重命名为给定的 *target*，并返回一个新的指向 *target* 的 Path 实"
"例。 在 Unix 上，如果 *target* 存在且为一个文件，如果用户有足够权限则它将被静"
"默地替换。 在 Windows 上，如果 *target* 存在，则将会引发 :exc:"
"`FileExistsError`。 *target* 可以是一个字符串或者另一个路径对象::"

#: ../../library/pathlib.rst:1261 ../../library/pathlib.rst:1277
msgid ""
"The target path may be absolute or relative. Relative paths are interpreted "
"relative to the current working directory, *not* the directory of the Path "
"object."
msgstr ""
"目标路径可能为绝对或相对路径。 相对路径将被解释为相对于当前工作目录，而 *不是"
"* 相对于 Path 对象的目录。"

#: ../../library/pathlib.rst:1265
msgid ""
"It is implemented in terms of :func:`os.rename` and gives the same "
"guarantees."
msgstr "它根据 :func:`os.rename` 实现并给出了同样的保证。"

#: ../../library/pathlib.rst:1267 ../../library/pathlib.rst:1281
msgid "Added return value, return the new Path instance."
msgstr "添加了返回值，返回新的 Path 实例。"

#: ../../library/pathlib.rst:1273
msgid ""
"Rename this file or directory to the given *target*, and return a new Path "
"instance pointing to *target*.  If *target* points to an existing file or "
"empty directory, it will be unconditionally replaced."
msgstr ""
"将文件或目录重命名为给定的 *target*，并返回一个新的指向 *target* 的 Path 实"
"例。 如果 *target* 指向一个现有文件或空目录，则它将被无条件地替换。"

#: ../../library/pathlib.rst:1287
msgid ""
"Make the path absolute, without normalization or resolving symlinks. Returns "
"a new path object::"
msgstr "改为绝对路径，不会执行正规化或解析符号链接。 返回一个新的路径对象::"

#: ../../library/pathlib.rst:1299
msgid ""
"Make the path absolute, resolving any symlinks.  A new path object is "
"returned::"
msgstr "将路径绝对化，解析任何符号链接。返回新的路径对象::"

#: ../../library/pathlib.rst:1308
msgid ""
"\"``..``\" components are also eliminated (this is the only method to do "
"so)::"
msgstr "\"``..``\" 组件也将被消除（只有这一种方法这么做）::"

#: ../../library/pathlib.rst:1314
msgid ""
"If the path doesn't exist and *strict* is ``True``, :exc:`FileNotFoundError` "
"is raised.  If *strict* is ``False``, the path is resolved as far as "
"possible and any remainder is appended without checking whether it exists.  "
"If an infinite loop is encountered along the resolution path, :exc:"
"`RuntimeError` is raised."
msgstr ""
"如果路径不存在并且 *strict* 设为 ``True``，则抛出 :exc:`FileNotFoundError`。"
"如果 *strict* 为 ``False``，则路径将被尽可能地解析并且任何剩余部分都会被不检"
"查是否存在地追加。如果在解析路径上发生无限循环，则抛出 :exc:`RuntimeError`。"

#: ../../library/pathlib.rst:1320
msgid "The *strict* parameter was added (pre-3.6 behavior is strict)."
msgstr "增加了 *strict* 参数（3.6 之前的行为是默认采用 strict 模式）。"

#: ../../library/pathlib.rst:1325
msgid ""
"Glob the given relative *pattern* recursively.  This is like calling :func:"
"`Path.glob` with \"``**/``\" added in front of the *pattern*, where "
"*patterns* are the same as for :mod:`fnmatch`::"
msgstr ""
"递归地对给定的相对 *pattern* 执行 glob 通配。 这类似于当调用 :func:`Path."
"glob` 时在 *pattern* 之前加上 \"``**/``\"，其中 *patterns* 与 :mod:`fnmatch` "
"中的相同::"

#: ../../library/pathlib.rst:1341
msgid ""
"Raises an :ref:`auditing event <auditing>` ``pathlib.Path.rglob`` with "
"arguments ``self``, ``pattern``."
msgstr ""
"引发一个 :ref:`审计事件 <auditing>` ``pathlib.Path.rglob`` 附带参数 "
"``self``, ``pattern``。"

#: ../../library/pathlib.rst:1353
msgid "Remove this directory.  The directory must be empty."
msgstr "移除此目录。此目录必须为空的。"

#: ../../library/pathlib.rst:1358
msgid ""
"Return whether this path points to the same file as *other_path*, which can "
"be either a Path object, or a string.  The semantics are similar to :func:"
"`os.path.samefile` and :func:`os.path.samestat`."
msgstr ""
"返回此目录是否指向与可能是字符串或者另一个路径对象的 *other_path* 相同的文"
"件。语义类似于 :func:`os.path.samefile` 与 :func:`os.path.samestat`。"

#: ../../library/pathlib.rst:1362
msgid ""
"An :exc:`OSError` can be raised if either file cannot be accessed for some "
"reason."
msgstr "如果两者都以同一原因无法访问，则抛出 :exc:`OSError`。"

#: ../../library/pathlib.rst:1379
msgid ""
"Make this path a symbolic link to *target*.  Under Windows, "
"*target_is_directory* must be true (default ``False``) if the link's target "
"is a directory.  Under POSIX, *target_is_directory*'s value is ignored."
msgstr ""
"将此路径创建为指向 *target* 的符号链接。在 Windows 下，如果链接的目标是一个目"
"录则 *target_is_directory* 必须为 true （默认为 ``False``）。在 POSIX 下， "
"*target_is_directory* 的值将被忽略。"

#: ../../library/pathlib.rst:1395
msgid ""
"The order of arguments (link, target) is the reverse of :func:`os.symlink`'s."
msgstr "参数的顺序（link, target) 和 :func:`os.symlink` 是相反的。"

#: ../../library/pathlib.rst:1400
msgid "Make this path a hard link to the same file as *target*."
msgstr "将此路径设为一个指向与 *target* 相同文件的硬链接。"

#: ../../library/pathlib.rst:1403
msgid ""
"The order of arguments (link, target) is the reverse of :func:`os.link`'s."
msgstr "参数顺序 (link, target) 和 :func:`os.link` 是相反的。"

#: ../../library/pathlib.rst:1411
msgid ""
"Create a file at this given path.  If *mode* is given, it is combined with "
"the process' ``umask`` value to determine the file mode and access flags.  "
"If the file already exists, the function succeeds if *exist_ok* is true (and "
"its modification time is updated to the current time), otherwise :exc:"
"`FileExistsError` is raised."
msgstr ""
"将给定的路径创建为文件。如果给出了 *mode* 它将与当前进程的 ``umask`` 值合并以"
"确定文件的模式和访问标志。如果文件已经存在，则当 *exist_ok* 为 true 则函数仍"
"会成功（并且将它的修改事件更新为当前事件），否则抛出 :exc:`FileExistsError`。"

#: ../../library/pathlib.rst:1420
msgid ""
"Remove this file or symbolic link.  If the path points to a directory, use :"
"func:`Path.rmdir` instead."
msgstr "移除此文件或符号链接。如果路径指向目录，则用 :func:`Path.rmdir` 代替。"

#: ../../library/pathlib.rst:1423
msgid ""
"If *missing_ok* is false (the default), :exc:`FileNotFoundError` is raised "
"if the path does not exist."
msgstr ""
"如果 *missing_ok* 为假值（默认），则如果路径不存在将会引发 :exc:"
"`FileNotFoundError`。"

#: ../../library/pathlib.rst:1426
msgid ""
"If *missing_ok* is true, :exc:`FileNotFoundError` exceptions will be ignored "
"(same behavior as the POSIX ``rm -f`` command)."
msgstr ""
"如果 *missing_ok* 为真值，则 :exc:`FileNotFoundError` 异常将被忽略（和 POSIX "
"``rm -f`` 命令的行为相同）。"

#: ../../library/pathlib.rst:1429
msgid "The *missing_ok* parameter was added."
msgstr "增加了 *missing_ok* 形参。"

#: ../../library/pathlib.rst:1435
msgid ""
"Open the file pointed to in bytes mode, write *data* to it, and close the "
"file::"
msgstr "将文件以二进制模式打开，写入 *data* 并关闭::"

#: ../../library/pathlib.rst:1444
msgid "An existing file of the same name is overwritten."
msgstr "一个同名的现存文件将被覆盖。"

#: ../../library/pathlib.rst:1451
msgid ""
"Open the file pointed to in text mode, write *data* to it, and close the "
"file::"
msgstr "将文件以文本模式打开，写入 *data* 并关闭::"

#: ../../library/pathlib.rst:1460
msgid ""
"An existing file of the same name is overwritten. The optional parameters "
"have the same meaning as in :func:`open`."
msgstr "同名的现有文件会被覆盖。 可选形参的含义与 :func:`open` 的相同。"

#: ../../library/pathlib.rst:1465
msgid "The *newline* parameter was added."
msgstr "增加了 *newline* 形参。"

#: ../../library/pathlib.rst:1469
msgid "Correspondence to tools in the :mod:`os` module"
msgstr "对应的 :mod:`os` 模块的工具"

#: ../../library/pathlib.rst:1471
msgid ""
"Below is a table mapping various :mod:`os` functions to their corresponding :"
"class:`PurePath`/:class:`Path` equivalent."
msgstr ""
"以下是一个映射了 :mod:`os` 与 :class:`PurePath`/:class:`Path` 对应相同的函数"
"的表。"

#: ../../library/pathlib.rst:1476
msgid ""
"Not all pairs of functions/methods below are equivalent. Some of them, "
"despite having some overlapping use-cases, have different semantics. They "
"include :func:`os.path.abspath` and :meth:`Path.absolute`, :func:`os.path."
"relpath` and :meth:`PurePath.relative_to`."
msgstr ""
"以下函数/方法对并不全都是等价的。 在它们之中，有的虽然具有相互重叠的使用场"
"景，但其语义有所不同。 这包括 :func:`os.path.abspath` 与 :meth:`Path."
"absolute`, :func:`os.path.relpath` 与 :meth:`PurePath.relative_to`。"

#: ../../library/pathlib.rst:1482
msgid ":mod:`os` and :mod:`os.path`"
msgstr ":mod:`os` 和 :mod:`os.path`"

#: ../../library/pathlib.rst:1482
msgid ":mod:`pathlib`"
msgstr ":mod:`pathlib`"

#: ../../library/pathlib.rst:1484
msgid ":func:`os.path.abspath`"
msgstr ":func:`os.path.abspath`"

#: ../../library/pathlib.rst:1484
msgid ":meth:`Path.absolute` [#]_"
msgstr ":meth:`Path.absolute` [#]_"

#: ../../library/pathlib.rst:1485
msgid ":func:`os.path.realpath`"
msgstr ":func:`os.path.realpath`"

#: ../../library/pathlib.rst:1485
msgid ":meth:`Path.resolve`"
msgstr ":meth:`Path.resolve`"

#: ../../library/pathlib.rst:1486
msgid ":func:`os.chmod`"
msgstr ":func:`os.chmod`"

#: ../../library/pathlib.rst:1486
msgid ":meth:`Path.chmod`"
msgstr ":meth:`Path.chmod`"

#: ../../library/pathlib.rst:1487
msgid ":func:`os.mkdir`"
msgstr ":func:`os.mkdir`"

#: ../../library/pathlib.rst:1487 ../../library/pathlib.rst:1488
msgid ":meth:`Path.mkdir`"
msgstr ":meth:`Path.mkdir`"

#: ../../library/pathlib.rst:1488
msgid ":func:`os.makedirs`"
msgstr ":func:`os.makedirs`"

#: ../../library/pathlib.rst:1489
msgid ":func:`os.rename`"
msgstr ":func:`os.rename`"

#: ../../library/pathlib.rst:1489
msgid ":meth:`Path.rename`"
msgstr ":meth:`Path.rename`"

#: ../../library/pathlib.rst:1490
msgid ":func:`os.replace`"
msgstr ":func:`os.replace`"

#: ../../library/pathlib.rst:1490
msgid ":meth:`Path.replace`"
msgstr ":meth:`Path.replace`"

#: ../../library/pathlib.rst:1491
msgid ":func:`os.rmdir`"
msgstr ":func:`os.rmdir`"

#: ../../library/pathlib.rst:1491
msgid ":meth:`Path.rmdir`"
msgstr ":meth:`Path.rmdir`"

#: ../../library/pathlib.rst:1492
msgid ":func:`os.remove`, :func:`os.unlink`"
msgstr ":func:`os.remove`, :func:`os.unlink`"

#: ../../library/pathlib.rst:1492
msgid ":meth:`Path.unlink`"
msgstr ":meth:`Path.unlink`"

#: ../../library/pathlib.rst:1493
msgid ":func:`os.getcwd`"
msgstr ":func:`os.getcwd`"

#: ../../library/pathlib.rst:1493
msgid ":func:`Path.cwd`"
msgstr ":func:`Path.cwd`"

#: ../../library/pathlib.rst:1494
msgid ":func:`os.path.exists`"
msgstr ":func:`os.path.exists`"

#: ../../library/pathlib.rst:1494
msgid ":meth:`Path.exists`"
msgstr ":meth:`Path.exists`"

#: ../../library/pathlib.rst:1495
msgid ":func:`os.path.expanduser`"
msgstr ":func:`os.path.expanduser`"

#: ../../library/pathlib.rst:1495
msgid ":meth:`Path.expanduser` and :meth:`Path.home`"
msgstr ":meth:`Path.expanduser` 和 :meth:`Path.home`"

#: ../../library/pathlib.rst:1497
msgid ":func:`os.listdir`"
msgstr ":func:`os.listdir`"

#: ../../library/pathlib.rst:1497
msgid ":meth:`Path.iterdir`"
msgstr ":meth:`Path.iterdir`"

#: ../../library/pathlib.rst:1498
msgid ":func:`os.walk`"
msgstr ":func:`os.walk`"

#: ../../library/pathlib.rst:1498
msgid ":meth:`Path.walk`"
msgstr ":meth:`Path.walk`"

#: ../../library/pathlib.rst:1499
msgid ":func:`os.path.isdir`"
msgstr ":func:`os.path.isdir`"

#: ../../library/pathlib.rst:1499
msgid ":meth:`Path.is_dir`"
msgstr ":meth:`Path.is_dir`"

#: ../../library/pathlib.rst:1500
msgid ":func:`os.path.isfile`"
msgstr ":func:`os.path.isfile`"

#: ../../library/pathlib.rst:1500
msgid ":meth:`Path.is_file`"
msgstr ":meth:`Path.is_file`"

#: ../../library/pathlib.rst:1501
msgid ":func:`os.path.islink`"
msgstr ":func:`os.path.islink`"

#: ../../library/pathlib.rst:1501
msgid ":meth:`Path.is_symlink`"
msgstr ":meth:`Path.is_symlink`"

#: ../../library/pathlib.rst:1502
msgid ":func:`os.link`"
msgstr ":func:`os.link`"

#: ../../library/pathlib.rst:1502
msgid ":meth:`Path.hardlink_to`"
msgstr ":meth:`Path.hardlink_to`"

#: ../../library/pathlib.rst:1503
msgid ":func:`os.symlink`"
msgstr ":func:`os.symlink`"

#: ../../library/pathlib.rst:1503
msgid ":meth:`Path.symlink_to`"
msgstr ":meth:`Path.symlink_to`"

#: ../../library/pathlib.rst:1504
msgid ":func:`os.readlink`"
msgstr ":func:`os.readlink`"

#: ../../library/pathlib.rst:1504
msgid ":meth:`Path.readlink`"
msgstr ":meth:`Path.readlink`"

#: ../../library/pathlib.rst:1505
msgid ":func:`os.path.relpath`"
msgstr ":func:`os.path.relpath`"

#: ../../library/pathlib.rst:1505
msgid ":meth:`PurePath.relative_to` [#]_"
msgstr ":meth:`PurePath.relative_to` [#]_"

#: ../../library/pathlib.rst:1506
msgid ":func:`os.stat`"
msgstr ":func:`os.stat`"

#: ../../library/pathlib.rst:1506
msgid ":meth:`Path.stat`, :meth:`Path.owner`, :meth:`Path.group`"
msgstr ":meth:`Path.stat`, :meth:`Path.owner`, :meth:`Path.group`"

#: ../../library/pathlib.rst:1509
msgid ":func:`os.path.isabs`"
msgstr ":func:`os.path.isabs`"

#: ../../library/pathlib.rst:1509
msgid ":meth:`PurePath.is_absolute`"
msgstr ":meth:`PurePath.is_absolute`"

#: ../../library/pathlib.rst:1510
msgid ":func:`os.path.join`"
msgstr ":func:`os.path.join`"

#: ../../library/pathlib.rst:1510
msgid ":func:`PurePath.joinpath`"
msgstr ":func:`PurePath.joinpath`"

#: ../../library/pathlib.rst:1511
msgid ":func:`os.path.basename`"
msgstr ":func:`os.path.basename`"

#: ../../library/pathlib.rst:1511
msgid ":attr:`PurePath.name`"
msgstr ":attr:`PurePath.name`"

#: ../../library/pathlib.rst:1512
msgid ":func:`os.path.dirname`"
msgstr ":func:`os.path.dirname`"

#: ../../library/pathlib.rst:1512
msgid ":attr:`PurePath.parent`"
msgstr ":attr:`PurePath.parent`"

#: ../../library/pathlib.rst:1513
msgid ":func:`os.path.samefile`"
msgstr ":func:`os.path.samefile`"

#: ../../library/pathlib.rst:1513
msgid ":meth:`Path.samefile`"
msgstr ":meth:`Path.samefile`"

#: ../../library/pathlib.rst:1514
msgid ":func:`os.path.splitext`"
msgstr ":func:`os.path.splitext`"

#: ../../library/pathlib.rst:1514
msgid ":attr:`PurePath.stem` and :attr:`PurePath.suffix`"
msgstr ":attr:`PurePath.stem` 和 :attr:`PurePath.suffix`"

#: ../../library/pathlib.rst:1519
msgid "Footnotes"
msgstr "备注"

#: ../../library/pathlib.rst:1520
msgid ""
":func:`os.path.abspath` normalizes the resulting path, which may change its "
"meaning in the presence of symlinks, while :meth:`Path.absolute` does not."
msgstr ""
":func:`os.path.abspath` 会对结果路径执行正规化，当存在符号链接时这可能改变其"
"含义，而 :meth:`Path.absolute` 则不会。"

#: ../../library/pathlib.rst:1521
msgid ""
":meth:`PurePath.relative_to` requires ``self`` to be the subpath of the "
"argument, but :func:`os.path.relpath` does not."
msgstr ""
":meth:`PurePath.relative_to` 要求 ``self`` 为参数的子路径，但 :func:`os.path."
"relpath` 则不要求。"

#: ../../library/pathlib.rst:12
msgid "path"
msgstr "path"

#: ../../library/pathlib.rst:12
msgid "operations"
msgstr "操作"
