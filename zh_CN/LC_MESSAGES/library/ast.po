# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2023, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# thautwarm <twshere@outlook.com>, 2020
# Jarry Shaw <jarryshaw@icloud.com>, 2020
# nick <2330458484@qq.com>, 2020
# xixi zhao <xixizxx@gmail.com>, 2020
# Freesand Leo <yuqinju@163.com>, 2022
# Rafael Fontenelle <rffontenelle@gmail.com>, 2023
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-07-29 04:03+0000\n"
"PO-Revision-Date: 2020-05-30 11:56+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2023\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/"
"teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/ast.rst:2
msgid ":mod:`ast` --- Abstract Syntax Trees"
msgstr ":mod:`ast` --- 抽象语法树"

#: ../../library/ast.rst:10
msgid "**Source code:** :source:`Lib/ast.py`"
msgstr "**源代码：** :source:`Lib/ast.py`"

#: ../../library/ast.rst:14
msgid ""
"The :mod:`ast` module helps Python applications to process trees of the "
"Python abstract syntax grammar.  The abstract syntax itself might change "
"with each Python release; this module helps to find out programmatically "
"what the current grammar looks like."
msgstr ""
":mod:`ast` 模块帮助 Python 程序处理 Python 语法的抽象语法树。抽象语法或许会随"
"着 Python 的更新版发行而改变；该模块能够帮助理解当前语法在编程层面的样貌。"

#: ../../library/ast.rst:19
msgid ""
"An abstract syntax tree can be generated by passing :data:`ast."
"PyCF_ONLY_AST` as a flag to the :func:`compile` built-in function, or using "
"the :func:`parse` helper provided in this module.  The result will be a tree "
"of objects whose classes all inherit from :class:`ast.AST`.  An abstract "
"syntax tree can be compiled into a Python code object using the built-in :"
"func:`compile` function."
msgstr ""
"抽象语法树可通过将 :data:`ast.PyCF_ONLY_AST` 作为旗标传递给 :func:`compile` "
"内置函数来生成，或是使用此模块中提供的 :func:`parse` 辅助函数。返回结果将是一"
"个由许多对象构成的树，这些对象所属的类都继承自 :class:`ast.AST`。抽象语法树可"
"被内置的 :func:`compile` 函数编译为一个 Python 代码对象。"

#: ../../library/ast.rst:27
msgid "Node classes"
msgstr "节点类"

#: ../../library/ast.rst:31
msgid ""
"This is the base of all AST node classes.  The actual node classes are "
"derived from the :file:`Parser/Python.asdl` file, which is reproduced :ref:"
"`below <abstract-grammar>`.  They are defined in the :mod:`_ast` C module "
"and re-exported in :mod:`ast`."
msgstr ""
"这是所有 AST 节点类的基类。实际上，这些节点类派生自 :file:`Parser/Python."
"asdl` 文件，其中定义的语法树示例 :ref:`如下 <abstract-grammar>`。它们在 C 语"
"言模块 :mod:`_ast` 中定义，并被导出至 :mod:`ast` 模块。"

#: ../../library/ast.rst:36
msgid ""
"There is one class defined for each left-hand side symbol in the abstract "
"grammar (for example, :class:`ast.stmt` or :class:`ast.expr`).  In addition, "
"there is one class defined for each constructor on the right-hand side; "
"these classes inherit from the classes for the left-hand side trees.  For "
"example, :class:`ast.BinOp` inherits from :class:`ast.expr`.  For production "
"rules with alternatives (aka \"sums\"), the left-hand side class is "
"abstract: only instances of specific constructor nodes are ever created."
msgstr ""
"抽象文法中的每个等号左边的符号（比方说， :class:`ast.stmt` 或者 :class:`ast."
"expr`）定义了一个类。另外，在等号右边，对每一个构造器也定义了一个类；这些类继"
"承自等号左边的类。比如，:class:`ast.BinOp` 继承自 :class:`ast.expr`。对于多分"
"支产生式（也就是含有“ | ”的产生式），左边的类是抽象的；只有具体构造器类的实例"
"能够被 compile 函数构造。"

#: ../../library/ast.rst:49
msgid ""
"Each concrete class has an attribute :attr:`_fields` which gives the names "
"of all child nodes."
msgstr "每个具体类都有属性 :attr:`_fields`，用来给出所有子节点的名字。"

#: ../../library/ast.rst:52
msgid ""
"Each instance of a concrete class has one attribute for each child node, of "
"the type as defined in the grammar.  For example, :class:`ast.BinOp` "
"instances have an attribute :attr:`left` of type :class:`ast.expr`."
msgstr ""
"每个具体类的实例为自己的每个子节点都准备了一个属性来引用该子节点，属性的类型"
"就是文法中所定义的。比如，:class:`ast.BinOp` 的实例有个属性 :attr:`left`，类"
"型是 :class:`ast.expr`。"

#: ../../library/ast.rst:56
msgid ""
"If these attributes are marked as optional in the grammar (using a question "
"mark), the value might be ``None``.  If the attributes can have zero-or-more "
"values (marked with an asterisk), the values are represented as Python "
"lists.  All possible attributes must be present and have valid values when "
"compiling an AST with :func:`compile`."
msgstr ""
"如果这些属性在文法中标记为可选（用问号标记），对应值可能会是 ``None``。如果这"
"些属性可有零或多个值（用星号标记），对应值会用Python的列表来表示。在用 :func:"
"`compile` 将AST编译为可执行代码时，所有的属性必须已经被赋值为有效的值。"

#: ../../library/ast.rst:67
msgid ""
"Instances of :class:`ast.expr` and :class:`ast.stmt` subclasses have :attr:"
"`lineno`, :attr:`col_offset`, :attr:`lineno`, and :attr:`col_offset` "
"attributes.  The :attr:`lineno` and :attr:`end_lineno` are the first and "
"last line numbers of source text span (1-indexed so the first line is line "
"1) and the :attr:`col_offset` and :attr:`end_col_offset` are the "
"corresponding UTF-8 byte offsets of the first and last tokens that generated "
"the node. The UTF-8 offset is recorded because the parser uses UTF-8 "
"internally."
msgstr ""

#: ../../library/ast.rst:75
msgid ""
"Note that the end positions are not required by the compiler and are "
"therefore optional. The end offset is *after* the last symbol, for example "
"one can get the source segment of a one-line expression node using "
"``source_line[node.col_offset : node.end_col_offset]``."
msgstr ""
"注意编译器不需要结束位置，所以结束位置是可选的。结束偏移在最后一个符号 *之后"
"* ，例如你可以通过 ``source_line[node.col_offset : node.end_col_offset]`` 获"
"得一个单行表达式节点的源码片段。"

#: ../../library/ast.rst:80
msgid ""
"The constructor of a class :class:`ast.T` parses its arguments as follows:"
msgstr ":class:`ast.T` 类的构造器像下面这样解析它的参数："

#: ../../library/ast.rst:82
msgid ""
"If there are positional arguments, there must be as many as there are items "
"in :attr:`T._fields`; they will be assigned as attributes of these names."
msgstr ""
"如果只用位置参数，参数的数量必须和 :attr:`T._fields` 中的项一样多；它们会按顺"
"序赋值到这些属性上。"

#: ../../library/ast.rst:84
msgid ""
"If there are keyword arguments, they will set the attributes of the same "
"names to the given values."
msgstr "如果有关键字参数，它们会为与其关键字同名的属性赋值。"

#: ../../library/ast.rst:87
msgid ""
"For example, to create and populate an :class:`ast.UnaryOp` node, you could "
"use ::"
msgstr "比方说，要创建和填充节点 :class:`ast.UnaryOp`，你得用 ::"

#: ../../library/ast.rst:99
msgid "or the more compact ::"
msgstr "或者更紧凑点 ::"

#: ../../library/ast.rst:106
msgid "Class :class:`ast.Constant` is now used for all constants."
msgstr ":class:`ast.Constant` 类现在用于所有常量。"

#: ../../library/ast.rst:110
msgid ""
"Old classes :class:`ast.Num`, :class:`ast.Str`, :class:`ast.Bytes`, :class:"
"`ast.NameConstant` and :class:`ast.Ellipsis` are still available, but they "
"will be removed in future Python releases.  In the meanwhile, instantiating "
"them will return an instance of a different class."
msgstr ""

#: ../../library/ast.rst:119
msgid "Abstract Grammar"
msgstr "抽象文法"

#: ../../library/ast.rst:121
msgid "The abstract grammar is currently defined as follows:"
msgstr "抽象文法目前定义如下"

#: ../../library/ast.rst:128
msgid ":mod:`ast` Helpers"
msgstr ":mod:`ast` 中的辅助函数"

#: ../../library/ast.rst:130
msgid ""
"Apart from the node classes, the :mod:`ast` module defines these utility "
"functions and classes for traversing abstract syntax trees:"
msgstr "除了节点类， :mod:`ast` 模块里为遍历抽象语法树定义了这些工具函数和类:"

#: ../../library/ast.rst:135
msgid ""
"Parse the source into an AST node.  Equivalent to ``compile(source, "
"filename, mode, ast.PyCF_ONLY_AST)``."
msgstr ""
"把源码解析为AST节点。和 ``compile(source, filename, mode,ast."
"PyCF_ONLY_AST)`` 等价。"

#: ../../library/ast.rst:138
msgid ""
"If ``type_comments=True`` is given, the parser is modified to check and "
"return type comments as specified by :pep:`484` and :pep:`526`. This is "
"equivalent to adding :data:`ast.PyCF_TYPE_COMMENTS` to the flags passed to :"
"func:`compile()`.  This will report syntax errors for misplaced type "
"comments.  Without this flag, type comments will be ignored, and the "
"``type_comment`` field on selected AST nodes will always be ``None``.  In "
"addition, the locations of ``# type: ignore`` comments will be returned as "
"the ``type_ignores`` attribute of :class:`Module` (otherwise it is always an "
"empty list)."
msgstr ""
"如果给出 ``type_comments=True``，解析器会被修改以检查并返回 :pep:`484` 和 :"
"pep:`526` 所描述的类型注释。 这相当于将 :data:`ast.PyCF_TYPE_COMMENTS` 添加到"
"传给 :func:`compile()` 的旗标中。 这将报告针对未在正确放置类型注释的语法错"
"误。 没有这个旗标，类型注释将被忽略，而指定 AST 节点上的  ``type_comment`` 字"
"段将总是为 ``None``。 此外，``# type: ignore`` 注释的位置将作为 :class:"
"`Module` 的 ``type_ignores`` 属性被返回（在其他情况下则总是为空列表）。"

#: ../../library/ast.rst:148
msgid ""
"In addition, if ``mode`` is ``'func_type'``, the input syntax is modified to "
"correspond to :pep:`484` \"signature type comments\", e.g. ``(str, int) -> "
"List[str]``."
msgstr ""
"并且，如果 ``mode`` 为 ``'func_type'``，则输入语法会进行与 :pep:`484` \"签名"
"类型注释\" 对应的修改，例如 ``(str, int) -> List[str]``。"

#: ../../library/ast.rst:152
msgid ""
"Also, setting ``feature_version`` to a tuple ``(major, minor)`` will attempt "
"to parse using that Python version's grammar. Currently ``major`` must equal "
"to ``3``.  For example, setting ``feature_version=(3, 4)`` will allow the "
"use of ``async`` and ``await`` as variable names.  The lowest supported "
"version is ``(3, 4)``; the highest is ``sys.version_info[0:2]``."
msgstr ""
"此外，将 ``feature_version`` 设为元组 ``(major, minor)`` 将会尝试使用该will "
"attempt to parse using that Python 版本的语法来进行解析。 目前 ``major`` 必须"
"等于 ``3``。 例如，设置 ``feature_version=(3, 4)`` 将允许使用 ``async`` 和 "
"``await`` 作为变量名。 最低受支持版本为 ``(3, 4)``；最高则为 ``sys."
"version_info[0:2]``。"

#: ../../library/ast.rst:160 ../../library/ast.rst:181
msgid ""
"It is possible to crash the Python interpreter with a sufficiently large/"
"complex string due to stack depth limitations in Python's AST compiler."
msgstr ""
"足够复杂或是巨大的字符串可能导致Python解释器的崩溃，因为Python的AST编译器是有"
"栈深限制的。"

#: ../../library/ast.rst:164
msgid "Added ``type_comments``, ``mode='func_type'`` and ``feature_version``."
msgstr ""
"增加了 ``type_comments``, ``mode='func_type'`` 和 ``feature_version``。"

#: ../../library/ast.rst:170
msgid ""
"Safely evaluate an expression node or a string containing a Python literal "
"or container display.  The string or node provided may only consist of the "
"following Python literal structures: strings, bytes, numbers, tuples, lists, "
"dicts, sets, booleans, and ``None``."
msgstr ""
"对表达式节点以及包含Python字面量或容器的字符串进行安全的求值。传入的字符串或"
"者节点里可能只包含下列的Python字面量结构: 字符串，字节对象(bytes)，数值，元"
"组，列表，字典，集合，布尔值和 ``None``。"

#: ../../library/ast.rst:175
msgid ""
"This can be used for safely evaluating strings containing Python values from "
"untrusted sources without the need to parse the values oneself.  It is not "
"capable of evaluating arbitrarily complex expressions, for example involving "
"operators or indexing."
msgstr ""
"这可被用于安全地对包含不受信任来源的 Python 值的字符串进行求值而不必解析这些"
"值本身。 它并不能对任意的复杂表达式进行求值，例如涉及运算符或索引操作的表达"
"式。"

#: ../../library/ast.rst:185
msgid "Now allows bytes and set literals."
msgstr "目前支持字节和集合。"

#: ../../library/ast.rst:191
msgid ""
"Return the docstring of the given *node* (which must be a :class:"
"`FunctionDef`, :class:`AsyncFunctionDef`, :class:`ClassDef`, or :class:"
"`Module` node), or ``None`` if it has no docstring. If *clean* is true, "
"clean up the docstring's indentation with :func:`inspect.cleandoc`."
msgstr ""
"返回给定 *node* (必须为 :class:`FunctionDef`, :class:`AsyncFunctionDef`, :"
"class:`ClassDef` 或 :class:`Module` 节点) 的文档字符串，或者如果没有文档字符"
"串则返回 ``None``。 如果 *clean* 为真值，则通过 :func:`inspect.cleandoc` 清除"
"文档字符串的缩进。"

#: ../../library/ast.rst:197
msgid ":class:`AsyncFunctionDef` is now supported."
msgstr "目前支持 :class:`AsyncFunctionDef`"

#: ../../library/ast.rst:203
msgid ""
"Get source code segment of the *source* that generated *node*. If some "
"location information (:attr:`lineno`, :attr:`end_lineno`, :attr:"
"`col_offset`, or :attr:`end_col_offset`) is missing, return ``None``."
msgstr ""
"获取生成 *node* 的 *source* 的源代码段。 如果丢失了某些位置信息 (:attr:"
"`lineno`, :attr:`end_lineno`, :attr:`col_offset` 或 :attr:`end_col_offset`)，"
"则返回 ``None``。"

#: ../../library/ast.rst:207
msgid ""
"If *padded* is ``True``, the first line of a multi-line statement will be "
"padded with spaces to match its original position."
msgstr ""
"如果 *padded* 为 ``True``，则多行语句的第一行将以与其初始位置相匹配的空格填"
"充。"

#: ../../library/ast.rst:215
msgid ""
"When you compile a node tree with :func:`compile`, the compiler expects :"
"attr:`lineno` and :attr:`col_offset` attributes for every node that supports "
"them.  This is rather tedious to fill in for generated nodes, so this helper "
"adds these attributes recursively where not already set, by setting them to "
"the values of the parent node.  It works recursively starting at *node*."
msgstr ""
"当你通过 :func:`compile` 来编译节点树时，编译器会准备接受每个支持 :attr:"
"`lineno` 和 :attr:`col_offset` 属性的节点的相应信息。 对已生成节点来说这是相"
"当繁琐的，因此这个辅助工具会递归地为尚未设置这些属性的节点添加它们，具体做法"
"是将其设为父节点的对应值。 它将从 *node* 开始递归地执行。"

#: ../../library/ast.rst:224
msgid ""
"Increment the line number and end line number of each node in the tree "
"starting at *node* by *n*. This is useful to \"move code\" to a different "
"location in a file."
msgstr ""
"从 *node* 开始按 *n* 递增节点树中每个节点的行号和结束行号。 这在“移动代码”到"
"文件中的不同位置时很有用处。"

#: ../../library/ast.rst:231
msgid ""
"Copy source location (:attr:`lineno`, :attr:`col_offset`, :attr:"
"`end_lineno`, and :attr:`end_col_offset`) from *old_node* to *new_node* if "
"possible, and return *new_node*."
msgstr ""
"在可能的情况下将源位置 (:attr:`lineno`, :attr:`col_offset`, :attr:"
"`end_lineno` 和 :attr:`end_col_offset`) 从 *old_node* 拷贝到 *new_node*，并返"
"回 *new_node*。"

#: ../../library/ast.rst:238
msgid ""
"Yield a tuple of ``(fieldname, value)`` for each field in ``node._fields`` "
"that is present on *node*."
msgstr ""
"针对于 *node* 上在 ``node._fields`` 中出现的每个字段产生一个 ``(fieldname, "
"value)`` 元组。"

#: ../../library/ast.rst:244
msgid ""
"Yield all direct child nodes of *node*, that is, all fields that are nodes "
"and all items of fields that are lists of nodes."
msgstr ""
"产生 *node* 所有的直接子节点，也就是说，所有为节点的字段所有为节点列表的字段"
"条目。"

#: ../../library/ast.rst:250
msgid ""
"Recursively yield all descendant nodes in the tree starting at *node* "
"(including *node* itself), in no specified order.  This is useful if you "
"only want to modify nodes in place and don't care about the context."
msgstr ""
"递归地产生节点树中从 *node* 开始（包括 *node* 本身）的所有下级节点，没有确定"
"的排序方式。 这在你仅想要原地修改节点而不关心具体上下文时很有用处。"

#: ../../library/ast.rst:257
msgid ""
"A node visitor base class that walks the abstract syntax tree and calls a "
"visitor function for every node found.  This function may return a value "
"which is forwarded by the :meth:`visit` method."
msgstr ""
"一个遍历抽象语法树并针对所找到的每个节点调用访问器函数的节点访问器基类。 该函"
"数可能会返回一个由 :meth:`visit` 方法所提供的值。"

#: ../../library/ast.rst:261
msgid ""
"This class is meant to be subclassed, with the subclass adding visitor "
"methods."
msgstr "这个类应当被子类化，并由子类来添加访问器方法。"

#: ../../library/ast.rst:266
msgid ""
"Visit a node.  The default implementation calls the method called :samp:"
"`self.visit_{classname}` where *classname* is the name of the node class, "
"or :meth:`generic_visit` if that method doesn't exist."
msgstr ""
"访问一个节点。 默认实现会调用名为 :samp:`self.visit_{classname}` 的方法其中 "
"*classname* 为节点类的名称，或者如果该方法不存在则为 :meth:`generic_visit`。"

#: ../../library/ast.rst:272
msgid "This visitor calls :meth:`visit` on all children of the node."
msgstr "该访问器会在节点的所有子节点上调用 :meth:`visit`。"

#: ../../library/ast.rst:274
msgid ""
"Note that child nodes of nodes that have a custom visitor method won't be "
"visited unless the visitor calls :meth:`generic_visit` or visits them itself."
msgstr ""
"请注意所有包含自定义访问器方法的节点的子节点将不会被访问除非访问器调用了 :"
"meth:`generic_visit` 或是自行访问它们。"

#: ../../library/ast.rst:278
msgid ""
"Don't use the :class:`NodeVisitor` if you want to apply changes to nodes "
"during traversal.  For this a special visitor exists (:class:"
"`NodeTransformer`) that allows modifications."
msgstr ""
"如果你想在遍历期间应用对节点的修改则请不要使用 :class:`NodeVisitor`。 对此目"
"的可使用一个允许修改的特殊访问器 (:class:`NodeTransformer`)。"

#: ../../library/ast.rst:284
msgid ""
"Methods :meth:`visit_Num`, :meth:`visit_Str`, :meth:`visit_Bytes`, :meth:"
"`visit_NameConstant` and :meth:`visit_Ellipsis` are deprecated now and will "
"not be called in future Python versions.  Add the :meth:`visit_Constant` "
"method to handle all constant nodes."
msgstr ""
":meth:`visit_Num`, :meth:`visit_Str`, :meth:`visit_Bytes`, :meth:"
"`visit_NameConstant` 和 :meth:`visit_Ellipsis` 等方法现在已被弃用且在未来的 "
"Python 版本中将不会再被调用。 请添加 :meth:`visit_Constant` 方法来处理所有常"
"量节点。"

#: ../../library/ast.rst:292
msgid ""
"A :class:`NodeVisitor` subclass that walks the abstract syntax tree and "
"allows modification of nodes."
msgstr "子类 :class:`NodeVisitor`  用于遍历抽象语法树，并允许修改节点。"

#: ../../library/ast.rst:295
msgid ""
"The :class:`NodeTransformer` will walk the AST and use the return value of "
"the visitor methods to replace or remove the old node.  If the return value "
"of the visitor method is ``None``, the node will be removed from its "
"location, otherwise it is replaced with the return value.  The return value "
"may be the original node in which case no replacement takes place."
msgstr ""
":class:`NodeTransformer` 将遍历抽象语法树并使用visitor方法的返回值去替换或移"
"除旧节点。如果visitor方法的返回值为 ``None`` , 则该节点将从其位置移除，否则将"
"替换为返回值。当返回值是原始节点时，无需替换。"

#: ../../library/ast.rst:301
msgid ""
"Here is an example transformer that rewrites all occurrences of name lookups "
"(``foo``) to ``data['foo']``::"
msgstr ""
"如下是一个转换器示例，它将所有出现的名称 (``foo``) 重写为 ``data['foo']``::"

#: ../../library/ast.rst:313
msgid ""
"Keep in mind that if the node you're operating on has child nodes you must "
"either transform the child nodes yourself or call the :meth:`generic_visit` "
"method for the node first."
msgstr ""
"请记住，如果您正在操作的节点具有子节点，则必须先转换其子节点或为该节点调用 :"
"meth:`generic_visit`  方法。"

#: ../../library/ast.rst:317
msgid ""
"For nodes that were part of a collection of statements (that applies to all "
"statement nodes), the visitor may also return a list of nodes rather than "
"just a single node."
msgstr ""
"对于属于语句集合（适用于所有语句节点）的节点，访问者还可以返回节点列表而不仅"
"仅是单个节点。"

#: ../../library/ast.rst:321
msgid ""
"If :class:`NodeTransformer` introduces new nodes (that weren't part of "
"original tree) without giving them location information (such as :attr:"
"`lineno`), :func:`fix_missing_locations` should be called with the new sub-"
"tree to recalculate the location information::"
msgstr ""
"如果 :class:`NodeTransformer` 引入了新的（不属于原节点树一部分的）节点而没有"
"给出它们的位置信息（如 :attr:`lineno` 等），则应当调用 :func:"
"`fix_missing_locations` 并传入新的子节点树来重新计算位置信息::"

#: ../../library/ast.rst:329
msgid "Usually you use the transformer like this::"
msgstr "通常你可以像这样使用转换器::"

#: ../../library/ast.rst:336
msgid ""
"Return a formatted dump of the tree in *node*.  This is mainly useful for "
"debugging purposes.  If *annotate_fields* is true (by default), the returned "
"string will show the names and the values for fields. If *annotate_fields* "
"is false, the result string will be more compact by omitting unambiguous "
"field names.  Attributes such as line numbers and column offsets are not "
"dumped by default.  If this is wanted, *include_attributes* can be set to "
"true."
msgstr ""
"返回 *node* 中树结构的格式化转储。 这主要适用于调试目的。 如果 "
"*annotate_fields* 为真值（默认），返回的字符串将显示字段的名称和值。 如果 "
"*annotate_fields* 为假值，结果字符串将通过省略无歧义的字段名称变得更为紧凑。 "
"默认情况下不会转储行号和列偏移等属性。 如果需要，可将 *include_attributes* 设"
"为真值。"

#: ../../library/ast.rst:346
msgid ""
"`Green Tree Snakes <https://greentreesnakes.readthedocs.io/>`_, an external "
"documentation resource, has good details on working with Python ASTs."
msgstr ""
"`Green Tree Snakes <https://greentreesnakes.readthedocs.io/>`_，一个外部文档"
"资源，包含处理 Python AST 的完整细节。"

#: ../../library/ast.rst:349
msgid ""
"`ASTTokens <https://asttokens.readthedocs.io/en/latest/user-guide.html>`_ "
"annotates Python ASTs with the positions of tokens and text in the source "
"code that generated them. This is helpful for tools that make source code "
"transformations."
msgstr ""
"`ASTTokens <https://asttokens.readthedocs.io/en/latest/user-guide.html>`_ 会"
"为 Python AST 标注生成它们的源代码中的形符和文本的位置。 这对执行源代码转换的"
"工具很有帮助。"

#: ../../library/ast.rst:354
msgid ""
"`leoAst.py <http://leoeditor.com/appendices.html#leoast-py>`_ unifies the "
"token-based and parse-tree-based views of python programs by inserting two-"
"way links between tokens and ast nodes."
msgstr ""
"`leoAst.py <http://leoeditor.com/appendices.html#leoast-py>`_ 通过在形符和 "
"ast 节点之间插入双向链接统一了 Python 程序基于形符的和基于解析树的视图。"

#: ../../library/ast.rst:358
msgid ""
"`LibCST <https://libcst.readthedocs.io/>`_ parses code as a Concrete Syntax "
"Tree that looks like an ast tree and keeps all formatting details. It's "
"useful for building automated refactoring (codemod) applications and linters."
msgstr ""
"`LibCST <https://libcst.readthedocs.io/>`_ 将代码解析为一个实体语法树"
"（Concrete Syntax Tree），它看起来像是 ast 树而又保留了所有格式化细节。 它对"
"构建自动化重构（codemod）应用和代码质量检查工具很有用处。"

#: ../../library/ast.rst:363
msgid ""
"`Parso <https://parso.readthedocs.io>`_ is a Python parser that supports "
"error recovery and round-trip parsing for different Python versions (in "
"multiple Python versions). Parso is also able to list multiple syntax errors "
"in your python file."
msgstr ""
"`Parso <https://parso.readthedocs.io>`_ 是一个支持错误恢复和不同 Python 版本"
"的（在多个 Python 版本中）往返解析的 Python 解析器。 Parso 还能列出你的 "
"Python 文件中的许多语法错误。"
