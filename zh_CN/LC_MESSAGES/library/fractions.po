# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2024, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Dingyuan Wang <abcdoyle888@gmail.com>, 2020
# Freesand Leo <yuqinju@163.com>, 2020
# Zhe He <hezhe88@gmail.com>, 2020
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-01-19 23:53+0000\n"
"PO-Revision-Date: 2020-05-30 12:02+0000\n"
"Last-Translator: Zhe He <hezhe88@gmail.com>, 2020\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/"
"teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/fractions.rst:2
msgid ":mod:`fractions` --- Rational numbers"
msgstr ":mod:`fractions` --- 分数"

#: ../../library/fractions.rst:10
msgid "**Source code:** :source:`Lib/fractions.py`"
msgstr "**源代码** :source:`Lib/fractions.py`"

#: ../../library/fractions.rst:14
msgid ""
"The :mod:`fractions` module provides support for rational number arithmetic."
msgstr ":mod:`fractions` 模块支持分数运算。"

#: ../../library/fractions.rst:17
msgid ""
"A Fraction instance can be constructed from a pair of integers, from another "
"rational number, or from a string."
msgstr "分数实例可以由一对整数，一个分数，或者一个字符串构建而成。"

#: ../../library/fractions.rst:26
msgid ""
"The first version requires that *numerator* and *denominator* are instances "
"of :class:`numbers.Rational` and returns a new :class:`Fraction` instance "
"with value ``numerator/denominator``. If *denominator* is :const:`0`, it "
"raises a :exc:`ZeroDivisionError`. The second version requires that "
"*other_fraction* is an instance of :class:`numbers.Rational` and returns a :"
"class:`Fraction` instance with the same value.  The next two versions accept "
"either a :class:`float` or a :class:`decimal.Decimal` instance, and return "
"a :class:`Fraction` instance with exactly the same value.  Note that due to "
"the usual issues with binary floating-point (see :ref:`tut-fp-issues`), the "
"argument to ``Fraction(1.1)`` is not exactly equal to 11/10, and so "
"``Fraction(1.1)`` does *not* return ``Fraction(11, 10)`` as one might "
"expect. (But see the documentation for the :meth:`limit_denominator` method "
"below.) The last version of the constructor expects a string or unicode "
"instance. The usual form for this instance is::"
msgstr ""
"第一个版本要求 *numerator* 和 *denominator* 是 :class:`numbers.Rational` 的实"
"例，并返回一个新的 :class:`Fraction` 实例，其值为 ``numerator/"
"denominator``。 如果 *denominator* 为 :const:`0` 将会引发 :exc:"
"`ZeroDivisionError`。 第二个版本要求 *other_fraction* 是 :class:`numbers."
"Rational` 的实例，并返回一个 :class:`Fraction` 实例且与传入值相等。 下两个版"
"本接受 :class:`float` 或 :class:`decimal.Decimal` 的实例，并返回一个 :class:"
"`Fraction` 实例且与传入值完全相等。 请注意由于二进制浮点数通常存在的问题 (参"
"见 :ref:`tut-fp-issues`)，``Fraction(1.1)`` 的参数并不会精确等于 11/10，因此 "
"``Fraction(1.1)`` 也 *不会* 返回用户所期望的 ``Fraction(11, 10)``。 （请参阅"
"下文中 :meth:`limit_denominator` 方法的文档。） 构造器的最后一个版本接受一个"
"字符串或 unicode 实例。 此实例的通常形式为::"

#: ../../library/fractions.rst:43
msgid ""
"where the optional ``sign`` may be either '+' or '-' and ``numerator`` and "
"``denominator`` (if present) are strings of decimal digits.  In addition, "
"any string that represents a finite value and is accepted by the :class:"
"`float` constructor is also accepted by the :class:`Fraction` constructor.  "
"In either form the input string may also have leading and/or trailing "
"whitespace. Here are some examples::"
msgstr ""
"其中的可选项 ``sign`` 可以为 '+' 或 '-' 并且 ``numerator`` 和 "
"``denominator`` (如果存在) 是十进制数码的字符串。 此外，:class:`float` 构造器"
"所接受的任何表示一个有限值的字符串也都为 :class:`Fraction` 构造器所接受。 不"
"论哪种形式的输入字符串也都可以带有前缀和/或后缀的空格符。 这里是一些示例::"

#: ../../library/fractions.rst:77
msgid ""
"The :class:`Fraction` class inherits from the abstract base class :class:"
"`numbers.Rational`, and implements all of the methods and operations from "
"that class.  :class:`Fraction` instances are hashable, and should be treated "
"as immutable.  In addition, :class:`Fraction` has the following properties "
"and methods:"
msgstr ""
":class:`Fraction` 类继承自抽象基类 :class:`numbers.Rational`，并实现了该类的"
"所有方法和操作。 :class:`Fraction` 实例是可哈希的，并应当被视为不可变对象。 "
"此外，:class:`Fraction` 还具有以下属性和方法："

#: ../../library/fractions.rst:83
msgid ""
"The :class:`Fraction` constructor now accepts :class:`float` and :class:"
"`decimal.Decimal` instances."
msgstr ""
":class:`Fraction` 构造器现在接受 :class:`float` 和 :class:`decimal.Decimal` "
"实例。"

#: ../../library/fractions.rst:90
msgid "Numerator of the Fraction in lowest term."
msgstr "最简分数形式的分子。"

#: ../../library/fractions.rst:94
msgid "Denominator of the Fraction in lowest term."
msgstr "最简分数形式的分母。"

#: ../../library/fractions.rst:99
msgid ""
"Return a tuple of two integers, whose ratio is equal to the Fraction and "
"with a positive denominator."
msgstr "返回由两个整数组成的元组，两数之比等于该分数的值且其分母为正数。"

#: ../../library/fractions.rst:106
msgid ""
"This class method constructs a :class:`Fraction` representing the exact "
"value of *flt*, which must be a :class:`float`. Beware that ``Fraction."
"from_float(0.3)`` is not the same value as ``Fraction(3, 10)``."
msgstr ""
"此类方法可构造一个 :class:`Fraction` 来表示 *flt* 的精确值，该参数必须是一"
"个 :class:`float`。 请注意 ``Fraction.from_float(0.3)`` 的值并不等于 "
"``Fraction(3, 10)``。"

#: ../../library/fractions.rst:112
msgid ""
"From Python 3.2 onwards, you can also construct a :class:`Fraction` instance "
"directly from a :class:`float`."
msgstr ""
"从 Python 3.2 开始，在构造 :class:`Fraction` 实例时可以直接使用 :class:"
"`float`。"

#: ../../library/fractions.rst:118
msgid ""
"This class method constructs a :class:`Fraction` representing the exact "
"value of *dec*, which must be a :class:`decimal.Decimal` instance."
msgstr ""
"此类方法可构造一个 :class:`Fraction` 来表示 *dec* 的精确值，该参数必须是一"
"个 :class:`decimal.Decimal` 实例。"

#: ../../library/fractions.rst:123
msgid ""
"From Python 3.2 onwards, you can also construct a :class:`Fraction` instance "
"directly from a :class:`decimal.Decimal` instance."
msgstr ""
"从 Python 3.2 开始，在构造 :class:`Fraction` 实例时可以直接使用 :class:"
"`decimal.Decimal` 实例。"

#: ../../library/fractions.rst:130
msgid ""
"Finds and returns the closest :class:`Fraction` to ``self`` that has "
"denominator at most max_denominator.  This method is useful for finding "
"rational approximations to a given floating-point number:"
msgstr ""
"找到并返回一个 :class:`Fraction` 使得其值最接近 ``self`` 并且分母不大于 "
"max_denominator。 此方法适用于找出给定浮点数的有理数近似值："

#: ../../library/fractions.rst:138
msgid "or for recovering a rational number that's represented as a float:"
msgstr "或是用来恢复被表示为一个浮点数的有理数："

#: ../../library/fractions.rst:151
msgid ""
"Returns the greatest :class:`int` ``<= self``.  This method can also be "
"accessed through the :func:`math.floor` function:"
msgstr ""
"返回最大的 :class:`int` ``<= self``。 此方法也可通过 :func:`math.floor` 函数"
"来使用："

#: ../../library/fractions.rst:161
msgid ""
"Returns the least :class:`int` ``>= self``.  This method can also be "
"accessed through the :func:`math.ceil` function."
msgstr ""
"返回最小的 :class:`int` ``>= self``。 此方法也可通过 :func:`math.ceil` 函数来"
"使用。"

#: ../../library/fractions.rst:168
msgid ""
"The first version returns the nearest :class:`int` to ``self``, rounding "
"half to even. The second version rounds ``self`` to the nearest multiple of "
"``Fraction(1, 10**ndigits)`` (logically, if ``ndigits`` is negative), again "
"rounding half toward even.  This method can also be accessed through the :"
"func:`round` function."
msgstr ""
"第一个版本返回一个 :class:`int` 使得其值最接近 ``self``，位值为二分之一时只对"
"偶数舍入。第二个版本会将 ``self`` 舍入到最接近 ``Fraction(1, 10**ndigits)`` "
"的倍数（如果 ``ndigits`` 为负值则为逻辑运算），位值为二分之一时同样只对偶数舍"
"入。 此方法也可通过 :func:`round` 函数来使用。"

#: ../../library/fractions.rst:177
msgid ""
"Return the greatest common divisor of the integers *a* and *b*.  If either "
"*a* or *b* is nonzero, then the absolute value of ``gcd(a, b)`` is the "
"largest integer that divides both *a* and *b*.  ``gcd(a,b)`` has the same "
"sign as *b* if *b* is nonzero; otherwise it takes the sign of *a*.  ``gcd(0, "
"0)`` returns ``0``."
msgstr ""
"返回整数 *a* 和 *b* 的最大公约数。如果 *a* 或 *b* 之一非零，则 ``gcd(a, b)`` "
"的绝对值是能同时整除 *a* 和 *b* 的最大整数。若 *b* 非零，则 ``gcd(a,b)`` 与 "
"*b* 同号；否则返回值与 *a* 同号。``gcd(0, 0)`` 返回 ``0``。"

#: ../../library/fractions.rst:183
msgid "Use :func:`math.gcd` instead."
msgstr "由 :func:`math.gcd` 取代."

#: ../../library/fractions.rst:189
msgid "Module :mod:`numbers`"
msgstr ":mod:`numbers` 模块"

#: ../../library/fractions.rst:190
msgid "The abstract base classes making up the numeric tower."
msgstr "构成数字塔的所有抽象基类。"
