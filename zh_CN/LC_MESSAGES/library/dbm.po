# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2024, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# walkinrain <walkinrain2008@outlook.com>, 2021
# ppcfish <ppcfish@gmail.com>, 2021
# Freesand Leo <yuqinju@163.com>, 2024
# Rafael Fontenelle <rffontenelle@gmail.com>, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-02-02 14:13+0000\n"
"PO-Revision-Date: 2021-06-28 01:04+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2024\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/"
"teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/dbm.rst:2
msgid ":mod:`dbm` --- Interfaces to Unix \"databases\""
msgstr ":mod:`dbm` --- Unix \"数据库\" 接口"

#: ../../library/dbm.rst:7
msgid "**Source code:** :source:`Lib/dbm/__init__.py`"
msgstr "**源代码:** :source:`Lib/dbm/__init__.py`"

#: ../../library/dbm.rst:11
msgid ""
":mod:`dbm` is a generic interface to variants of the DBM database --- :mod:"
"`dbm.gnu` or :mod:`dbm.ndbm`.  If none of these modules is installed, the "
"slow-but-simple implementation in module :mod:`dbm.dumb` will be used.  "
"There is a `third party interface <https://www.jcea.es/programacion/pybsddb."
"htm>`_ to the Oracle Berkeley DB."
msgstr ""
":mod:`dbm` 是一种泛用接口，针对各种 DBM 数据库 --- 包括 :mod:`dbm.gnu` 或 :"
"mod:`dbm.ndbm`。 如果未安装这些模块中的任何一种，则将使用 :mod:`dbm.dumb` 模"
"块中慢速但简单的实现。 还有一个适用于 Oracle Berkeley DB 的 `第三方接口 "
"<https://www.jcea.es/programacion/pybsddb.htm>`_。"

#: ../../library/dbm.rst:20
msgid ""
"A tuple containing the exceptions that can be raised by each of the "
"supported modules, with a unique exception also named :exc:`dbm.error` as "
"the first item --- the latter is used when :exc:`dbm.error` is raised."
msgstr ""
"一个元组，其中包含每个受支持的模块可引发的异常，另外还有一个名为 :exc:`dbm."
"error` 的特殊异常作为第一项 --- 后者最在引发 :exc:`dbm.error` 时被使用。"

#: ../../library/dbm.rst:27
msgid ""
"This function attempts to guess which of the several simple database modules "
"available --- :mod:`dbm.gnu`, :mod:`dbm.ndbm` or :mod:`dbm.dumb` --- should "
"be used to open a given file."
msgstr ""
"此函数会猜测各种简单数据库模块中的哪一个是可用的 --- :mod:`dbm.gnu`, :mod:"
"`dbm.ndbm` 还是 :mod:`dbm.dumb` --- 应该被用来打开给定的文件。"

#: ../../library/dbm.rst:31
msgid "Return one of the following values:"
msgstr "返回下列值中的一个："

#: ../../library/dbm.rst:33
msgid ""
"``None`` if the file can't be opened because it's unreadable or doesn't exist"
msgstr "如果文件因其不可读或不存在而无法打开则返回 ``None``"

#: ../../library/dbm.rst:34
msgid "the empty string (``''``) if the file's format can't be guessed"
msgstr "如果文件格式无法猜测则返回空字符串 (``''``)"

#: ../../library/dbm.rst:35
msgid ""
"a string containing the required module name, such as ``'dbm.ndbm'`` or "
"``'dbm.gnu'``"
msgstr "包含所需模块名称的字符串，如 ``'dbm.ndbm'`` 或 ``'dbm.gnu'``"

#: ../../library/dbm.rst:37 ../../library/dbm.rst:207 ../../library/dbm.rst:392
msgid "*filename* accepts a :term:`path-like object`."
msgstr "*filename* 接受一个 :term:`path-like object`。"

#: ../../library/dbm.rst:65
msgid "Open a database and return the corresponding database object."
msgstr ""

#: ../../library/dbm.rst:0
msgid "Parameters"
msgstr "参数"

#: ../../library/dbm.rst:67
msgid ""
"The database file to open.  If the database file already exists, the :func:"
"`whichdb` function is used to determine its type and the appropriate module "
"is used; if it does not exist, the first submodule listed above that can be "
"imported is used."
msgstr ""

#: ../../library/dbm.rst:68 ../../library/dbm.rst:179
msgid "The database file to open."
msgstr ""

#: ../../library/dbm.rst:70
msgid ""
"If the database file already exists, the :func:`whichdb` function is used to "
"determine its type and the appropriate module is used; if it does not exist, "
"the first submodule listed above that can be imported is used."
msgstr ""

#: ../../library/dbm.rst:75 ../../library/dbm.rst:302
msgid ""
"* ``'r'`` (default): |flag_r| * ``'w'``: |flag_w| * ``'c'``: |flag_c| * "
"``'n'``: |flag_n|"
msgstr ""

#: ../../library/dbm.rst:76 ../../library/dbm.rst:184 ../../library/dbm.rst:303
msgid "``'r'`` (default): |flag_r|"
msgstr ""

#: ../../library/dbm.rst:77 ../../library/dbm.rst:185 ../../library/dbm.rst:304
#: ../../library/dbm.rst:373
msgid "``'w'``: |flag_w|"
msgstr ""

#: ../../library/dbm.rst:78 ../../library/dbm.rst:186 ../../library/dbm.rst:305
msgid "``'c'``: |flag_c|"
msgstr ""

#: ../../library/dbm.rst:79 ../../library/dbm.rst:187 ../../library/dbm.rst:306
#: ../../library/dbm.rst:375
msgid "``'n'``: |flag_n|"
msgstr ""

#: ../../library/dbm.rst:81 ../../library/dbm.rst:201 ../../library/dbm.rst:308
#: ../../library/dbm.rst:377
msgid "|mode_param_doc|"
msgstr ""

#: ../../library/dbm.rst:84
msgid "*file* accepts a :term:`path-like object`."
msgstr "*file* 接受一个 :term:`path-like object`。"

#: ../../library/dbm.rst:87
msgid ""
"The object returned by :func:`~dbm.open` supports the same basic "
"functionality as a :class:`dict`; keys and their corresponding values can be "
"stored, retrieved, and deleted, and the :keyword:`in` operator and the :meth:"
"`!keys` method are available, as well as :meth:`!get` and :meth:`!"
"setdefault` methods."
msgstr ""

#: ../../library/dbm.rst:92
msgid ""
"Key and values are always stored as :class:`bytes`. This means that when "
"strings are used they are implicitly converted to the default encoding "
"before being stored."
msgstr ""
"键和值总是被存储为 :class:`bytes`。 这意味着当使用字符串时它们会在被存储之前"
"隐式地转换至默认编码格式。"

#: ../../library/dbm.rst:96
msgid ""
"These objects also support being used in a :keyword:`with` statement, which "
"will automatically close them when done."
msgstr ""
"这些对象也支持在 :keyword:`with` 语句中使用，当语句结束时将自动关闭它们。"

#: ../../library/dbm.rst:99
msgid ""
":meth:`!get` and :meth:`!setdefault` methods are now available for all :mod:"
"`dbm` backends."
msgstr ""

#: ../../library/dbm.rst:103
msgid ""
"Added native support for the context management protocol to the objects "
"returned by :func:`~dbm.open`."
msgstr ""

#: ../../library/dbm.rst:107
msgid ""
"Deleting a key from a read-only database raises a database module specific "
"exception instead of :exc:`KeyError`."
msgstr ""

#: ../../library/dbm.rst:111
msgid ""
"The following example records some hostnames and a corresponding title,  and "
"then prints out the contents of the database::"
msgstr "以下示例记录了一些主机名和对应的标题，随后将数据库的内容打印出来。::"

#: ../../library/dbm.rst:141
msgid "Module :mod:`shelve`"
msgstr "模块 :mod:`shelve`"

#: ../../library/dbm.rst:142
msgid "Persistence module which stores non-string data."
msgstr "存储非字符串数据的持久化模块。"

#: ../../library/dbm.rst:145
msgid "The individual submodules are described in the following sections."
msgstr "以下部分描述了各个单独的子模块。"

#: ../../library/dbm.rst:149
msgid ":mod:`dbm.gnu` --- GNU database manager"
msgstr ":mod:`dbm.gnu` --- GNU 数据库管理器"

#: ../../library/dbm.rst:155
msgid "**Source code:** :source:`Lib/dbm/gnu.py`"
msgstr "**源代码:** :source:`Lib/dbm/gnu.py`"

#: ../../library/dbm.rst:159
msgid ""
"The :mod:`dbm.gnu` module provides an interface to the :abbr:`GDBM (GNU "
"dbm)` library, similar to the :mod:`dbm.ndbm` module, but with additional "
"functionality like crash tolerance."
msgstr ""
":mod:`dbm.gnu` 模块提供了针对 :abbr:`GDBM (GNU dbm)` 库的接口，类似于 :mod:"
"`dbm.ndbm` 模块，但带有额外的功能如对崩溃的容忍。"

#: ../../library/dbm.rst:163
msgid ""
":class:`!gdbm` objects behave similar to :term:`mappings <mapping>`, except "
"that keys and values are always converted to :class:`bytes` before storing, "
"and the :meth:`!items` and :meth:`!values` methods are not supported."
msgstr ""
":class:`!gdbm` 对象的行为类似于 :term:`映射 <mapping>`，区别在于键和值总是会"
"在存储之前被转换为 :class:`bytes`，并且不支持 :meth:`!items` 和 :meth:`!"
"values` 方法。"

#: ../../library/dbm.rst:167 ../../library/dbm.rst:273
msgid "|incompat_note|"
msgstr "|incompat_note|"

#: ../../library/dbm.rst:171
msgid ""
"Raised on :mod:`dbm.gnu`-specific errors, such as I/O errors. :exc:"
"`KeyError` is raised for general mapping errors like specifying an incorrect "
"key."
msgstr ""
"针对 :mod:`dbm.gnu` 专属错误例如 I/O 错误引发。 :exc:`KeyError` 的引发则针对"
"一般映射错误例如指定了不正确的键。"

#: ../../library/dbm.rst:177
msgid "Open a GDBM database and return a :class:`!gdbm` object."
msgstr ""

#: ../../library/dbm.rst:183
msgid ""
"* ``'r'`` (default): |flag_r| * ``'w'``: |flag_w| * ``'c'``: |flag_c| * "
"``'n'``: |flag_n|  The following additional characters may be appended to "
"control how the database is opened:  * ``'f'``: Open the database in fast "
"mode.   Writes to the database will not be synchronized. * ``'s'``: "
"Synchronized mode.   Changes to the database will be written immediately to "
"the file. * ``'u'``: Do not lock database.  Not all flags are valid for all "
"versions of GDBM. See the :data:`open_flags` member for a list of supported "
"flag characters."
msgstr ""

#: ../../library/dbm.rst:189
msgid ""
"The following additional characters may be appended to control how the "
"database is opened:"
msgstr ""

#: ../../library/dbm.rst:192
msgid ""
"``'f'``: Open the database in fast mode. Writes to the database will not be "
"synchronized."
msgstr ""

#: ../../library/dbm.rst:194
msgid ""
"``'s'``: Synchronized mode. Changes to the database will be written "
"immediately to the file."
msgstr ""

#: ../../library/dbm.rst:196
msgid "``'u'``: Do not lock database."
msgstr ""

#: ../../library/dbm.rst:198
msgid ""
"Not all flags are valid for all versions of GDBM. See the :data:`open_flags` "
"member for a list of supported flag characters."
msgstr ""

#: ../../library/dbm.rst:0
msgid "Raises"
msgstr "引发"

#: ../../library/dbm.rst:204
msgid "If an invalid *flag* argument is passed."
msgstr ""

#: ../../library/dbm.rst:212
msgid ""
"A string of characters the *flag* parameter of :meth:`~dbm.gnu.open` "
"supports."
msgstr ""

#: ../../library/dbm.rst:214
msgid ""
"In addition to the dictionary-like methods, :class:`gdbm` objects have the "
"following methods and attributes:"
msgstr ""

#: ../../library/dbm.rst:219
msgid ""
"It's possible to loop over every key in the database using this method  and "
"the :meth:`nextkey` method.  The traversal is ordered by GDBM's internal "
"hash values, and won't be sorted by the key values.  This method returns the "
"starting key."
msgstr ""
"可以使用此方法和 :meth:`nextkey` 方法循环遍历数据库中的每个键。 遍历的顺序是"
"按照 GDBM 的内部哈希值，而不会根据键的值排序。 此方法将返回起始的键。"

#: ../../library/dbm.rst:226
msgid ""
"Returns the key that follows *key* in the traversal.  The following code "
"prints every key in the database ``db``, without having to create a list in "
"memory that contains them all::"
msgstr ""
"在遍历中返回 *key* 之后的的下一个键。 以下代码将打印数据库 ``db`` 中的每个"
"键，而不会在内存中创建一个包含所有键的列表::"

#: ../../library/dbm.rst:237
msgid ""
"If you have carried out a lot of deletions and would like to shrink the "
"space used by the GDBM file, this routine will reorganize the database.  :"
"class:`!gdbm` objects will not shorten the length of a database file except "
"by using this reorganization; otherwise, deleted file space will be kept and "
"reused as new (key, value) pairs are added."
msgstr ""
"如果你进行了大量删除操作并且想要缩减 GDBM 文件所使用的空间，此例程可将可重新"
"组织数据库。 除非使用此重组功能否则 :class:`!gdbm` 对象不会缩减数据库文件大"
"小；在其他情况下，被删除的文件空间将会保留并在添加新的 (键, 值) 对时被重用。"

#: ../../library/dbm.rst:245
msgid ""
"When the database has been opened in fast mode, this method forces any "
"unwritten data to be written to the disk."
msgstr "当以快速模式打开数据库时，此方法会将任何未写入数据强制写入磁盘。"

#: ../../library/dbm.rst:250
msgid "Close the GDBM database."
msgstr "关闭 GDBM 数据库。"

#: ../../library/dbm.rst:254
msgid ":mod:`dbm.ndbm` --- New Database Manager"
msgstr ":mod:`dbm.ndbm` --- 新数据库管理器"

#: ../../library/dbm.rst:260
msgid "**Source code:** :source:`Lib/dbm/ndbm.py`"
msgstr "**源代码:** :source:`Lib/dbm/ndbm.py`"

#: ../../library/dbm.rst:264
msgid ""
"The :mod:`dbm.ndbm` module provides an interface to the :abbr:`NDBM (New "
"Database Manager)` library. :class:`!ndbm` objects behave similar to :term:"
"`mappings <mapping>`, except that keys and values are always stored as :"
"class:`bytes`, and the :meth:`!items` and :meth:`!values` methods are not "
"supported."
msgstr ""
":mod:`dbm.ndbm` 模块提供了对 :abbr:`NDBM (New Database Manager)` 库的接口。 :"
"class:`!ndbm` 对象的行为类似于 :term:`映射 <mapping>`，区别在于键和值总是被存"
"储为 :class:`bytes`，并且不支持 :meth:`!items` 和 :meth:`!values` 方法。"

#: ../../library/dbm.rst:270
msgid ""
"This module can be used with the \"classic\" NDBM interface or the :abbr:"
"`GDBM (GNU dbm)` compatibility interface."
msgstr ""
"此模块可与 \"经典\" NDBM 接口或 :abbr:`GDBM (GNU dbm)` 兼容接口一起使用。"

#: ../../library/dbm.rst:277
msgid ""
"The NDBM library shipped as part of macOS has an undocumented limitation on "
"the size of values, which can result in corrupted database files when "
"storing values larger than this limit. Reading such corrupted files can "
"result in a hard crash (segmentation fault)."
msgstr ""
"作为 macOS 的组成部分提供的 NDBM 库对值的大小有一个未写入文档的限制，当存储的"
"值大于此限制时可能会导致数据库文件损坏。 读取这种已损坏的文件可能会导致硬崩溃"
"（段错误）。"

#: ../../library/dbm.rst:284
msgid ""
"Raised on :mod:`dbm.ndbm`-specific errors, such as I/O errors. :exc:"
"`KeyError` is raised for general mapping errors like specifying an incorrect "
"key."
msgstr ""
"针对 :mod:`dbm.ndbm` 专属错误例如 I/O 错误引发。 :exc:`KeyError` 的引发则针对"
"一般映射错误例如指定了不正确的键。"

#: ../../library/dbm.rst:290
msgid "Name of the NDBM implementation library used."
msgstr "所使用的 NDBM 实现库的名称。"

#: ../../library/dbm.rst:295
msgid "Open an NDBM database and return an :class:`!ndbm` object."
msgstr ""

#: ../../library/dbm.rst:297
msgid ""
"The basename of the database file (without the :file:`.dir` or :file:`.pag` "
"extensions)."
msgstr ""

#: ../../library/dbm.rst:311
msgid ""
"In addition to the dictionary-like methods, :class:`!ndbm` objects provide "
"the following method:"
msgstr "在与字典类似的方法之外，:class:`!ndbm` 对象还提供了下列方法："

#: ../../library/dbm.rst:314
msgid "Accepts :term:`path-like object` for filename."
msgstr "接受 :term:`path-like object` 作为文件名。"

#: ../../library/dbm.rst:319
msgid "Close the NDBM database."
msgstr "关闭 NDBM 数据库。"

#: ../../library/dbm.rst:323
msgid ":mod:`dbm.dumb` --- Portable DBM implementation"
msgstr ":mod:`dbm.dumb` --- 便携式 DBM 实现"

#: ../../library/dbm.rst:328
msgid "**Source code:** :source:`Lib/dbm/dumb.py`"
msgstr "**源代码:** :source:`Lib/dbm/dumb.py`"

#: ../../library/dbm.rst:334
msgid ""
"The :mod:`dbm.dumb` module is intended as a last resort fallback for the :"
"mod:`dbm` module when a more robust module is not available. The :mod:`dbm."
"dumb` module is not written for speed and is not nearly as heavily used as "
"the other database modules."
msgstr ""
":mod:`dbm.dumb` 模块的目的是在更健壮的模块不可用时作为 :mod:`dbm` 模块的最终"
"回退项。 :mod:`dbm.dumb` 不是为高速运行而编写的，也不像其他数据库模块一样被经"
"常使用。"

#: ../../library/dbm.rst:341
msgid ""
"The :mod:`dbm.dumb` module provides a persistent :class:`dict`-like "
"interface which is written entirely in Python. Unlike other :mod:`dbm` "
"backends, such as :mod:`dbm.gnu`, no external library is required. As with "
"other :mod:`dbm` backends, the keys and values are always stored as :class:"
"`bytes`."
msgstr ""

#: ../../library/dbm.rst:348
msgid "The :mod:`!dbm.dumb` module defines the following:"
msgstr ""

#: ../../library/dbm.rst:352
msgid ""
"Raised on :mod:`dbm.dumb`-specific errors, such as I/O errors.  :exc:"
"`KeyError` is raised for general mapping errors like specifying an incorrect "
"key."
msgstr ""
"针对 :mod:`dbm.dumb` 专属错误例如 I/O 错误引发。  :exc:`KeyError` 的引发则针"
"对一般映射例如指定了不正确的键。"

#: ../../library/dbm.rst:358
msgid ""
"Open a :mod:`!dbm.dumb` database. The returned database object behaves "
"similar to a :term:`mapping`, in addition to providing :meth:`~dumbdbm.sync` "
"and :meth:`~dumbdbm.close` methods."
msgstr ""

#: ../../library/dbm.rst:363
msgid ""
"The basename of the database file (without extensions). A new database "
"creates the following files:  - :file:`{filename}.dat` - :file:`{filename}."
"dir`"
msgstr ""

#: ../../library/dbm.rst:364
msgid ""
"The basename of the database file (without extensions). A new database "
"creates the following files:"
msgstr ""

#: ../../library/dbm.rst:367
msgid ":file:`{filename}.dat`"
msgstr ""

#: ../../library/dbm.rst:368
msgid ":file:`{filename}.dir`"
msgstr ""

#: ../../library/dbm.rst:371
msgid ""
"* ``'r'``: |flag_r| * ``'w'``: |flag_w| * ``'c'`` (default): |flag_c| * "
"``'n'``: |flag_n|"
msgstr ""

#: ../../library/dbm.rst:372
msgid "``'r'``: |flag_r|"
msgstr ""

#: ../../library/dbm.rst:374
msgid "``'c'`` (default): |flag_c|"
msgstr ""

#: ../../library/dbm.rst:381
msgid ""
"It is possible to crash the Python interpreter when loading a database with "
"a sufficiently large/complex entry due to stack depth limitations in "
"Python's AST compiler."
msgstr ""
"当载入包含足够巨大/复杂条目的数据库时有可能导致 Python 解释器的崩溃，这是由"
"于 Python AST 编译器有栈深度限制。"

#: ../../library/dbm.rst:385
msgid ""
":func:`~dbm.dumb.open` always creates a new database when *flag* is ``'n'``."
msgstr ""

#: ../../library/dbm.rst:388
msgid ""
"A database opened read-only if *flag* is ``'r'``. A database is not created "
"if it does not exist if *flag* is ``'r'`` or ``'w'``."
msgstr ""

#: ../../library/dbm.rst:395
msgid ""
"In addition to the methods provided by the :class:`collections.abc."
"MutableMapping` class, the following methods are provided:"
msgstr ""

#: ../../library/dbm.rst:401
msgid ""
"Synchronize the on-disk directory and data files.  This method is called by "
"the :meth:`Shelve.sync` method."
msgstr ""
"同步磁盘上的目录和数据文件。 此方法会由 :meth:`Shelve.sync` 方法来调用。"

#: ../../library/dbm.rst:406
msgid "Close the database."
msgstr ""

#: ../../library/dbm.rst:330
msgid "databases"
msgstr "数据库"
