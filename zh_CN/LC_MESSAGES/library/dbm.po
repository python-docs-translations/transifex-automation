# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2024, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Shengjing Zhu <zsj950618@gmail.com>, 2021
# Zombie110year <zombie110year@gmail.com>, 2021
# walkinrain <walkinrain2008@outlook.com>, 2021
# ppcfish <ppcfish@gmail.com>, 2021
# Freesand Leo <yuqinju@163.com>, 2023
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-01-26 14:13+0000\n"
"PO-Revision-Date: 2021-06-28 01:04+0000\n"
"Last-Translator: Freesand Leo <yuqinju@163.com>, 2023\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/"
"teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/dbm.rst:2
msgid ":mod:`dbm` --- Interfaces to Unix \"databases\""
msgstr ":mod:`dbm` --- Unix \"数据库\" 接口"

#: ../../library/dbm.rst:7
msgid "**Source code:** :source:`Lib/dbm/__init__.py`"
msgstr "**源代码:** :source:`Lib/dbm/__init__.py`"

#: ../../library/dbm.rst:11
msgid ""
":mod:`dbm` is a generic interface to variants of the DBM database --- :mod:"
"`dbm.gnu` or :mod:`dbm.ndbm`.  If none of these modules is installed, the "
"slow-but-simple implementation in module :mod:`dbm.dumb` will be used.  "
"There is a `third party interface <https://www.jcea.es/programacion/pybsddb."
"htm>`_ to the Oracle Berkeley DB."
msgstr ""
":mod:`dbm` 是一种泛用接口，针对各种 DBM 数据库 --- 包括 :mod:`dbm.gnu` 或 :"
"mod:`dbm.ndbm`。 如果未安装这些模块中的任何一种，则将使用 :mod:`dbm.dumb` 模"
"块中慢速但简单的实现。 还有一个适用于 Oracle Berkeley DB 的 `第三方接口 "
"<https://www.jcea.es/programacion/pybsddb.htm>`_。"

#: ../../library/dbm.rst:20
msgid ""
"A tuple containing the exceptions that can be raised by each of the "
"supported modules, with a unique exception also named :exc:`dbm.error` as "
"the first item --- the latter is used when :exc:`dbm.error` is raised."
msgstr ""
"一个元组，其中包含每个受支持的模块可引发的异常，另外还有一个名为 :exc:`dbm."
"error` 的特殊异常作为第一项 --- 后者最在引发 :exc:`dbm.error` 时被使用。"

#: ../../library/dbm.rst:27
msgid ""
"This function attempts to guess which of the several simple database modules "
"available --- :mod:`dbm.gnu`, :mod:`dbm.ndbm` or :mod:`dbm.dumb` --- should "
"be used to open a given file."
msgstr ""
"此函数会猜测各种简单数据库模块中的哪一个是可用的 --- :mod:`dbm.gnu`, :mod:"
"`dbm.ndbm` 还是 :mod:`dbm.dumb` --- 应该被用来打开给定的文件。"

#: ../../library/dbm.rst:31
msgid "Return one of the following values:"
msgstr ""

#: ../../library/dbm.rst:33
msgid ""
"``None`` if the file can't be opened because it's unreadable or doesn't exist"
msgstr ""

#: ../../library/dbm.rst:34
msgid "the empty string (``''``) if the file's format can't be guessed"
msgstr ""

#: ../../library/dbm.rst:35
msgid ""
"a string containing the required module name, such as ``'dbm.ndbm'`` or "
"``'dbm.gnu'``"
msgstr ""

#: ../../library/dbm.rst:37
msgid "*filename* accepts a :term:`path-like object`."
msgstr ""

#: ../../library/dbm.rst:61
msgid "Open the database file *file* and return a corresponding object."
msgstr "打开数据库文件 *file* 并返回一个相应的对象。"

#: ../../library/dbm.rst:63
msgid ""
"If the database file already exists, the :func:`whichdb` function is used to "
"determine its type and the appropriate module is used; if it does not exist, "
"the first module listed above that can be imported is used."
msgstr ""
"如果数据库文件已存在，则使用 :func:`whichdb` 函数来确定其类型和要使用的适当模"
"块；如果文件不存在，则会使用上述可导入模块中的第一个。"

#: ../../library/dbm.rst:67 ../../library/dbm.rst:177 ../../library/dbm.rst:363
msgid "The optional *flag* argument can be:"
msgstr "可选的 *flag* 参数可以是："

#: ../../library/dbm.rst:1 ../../library/dbm.rst:191
msgid "Value"
msgstr "值"

#: ../../library/dbm.rst:1 ../../library/dbm.rst:191
msgid "Meaning"
msgstr "含意"

#: ../../library/dbm.rst:1
msgid "``'r'`` (default)"
msgstr ""

#: ../../library/dbm.rst:1
msgid "|flag_r|"
msgstr ""

#: ../../library/dbm.rst:1
msgid "``'w'``"
msgstr "``'w'``"

#: ../../library/dbm.rst:1
msgid "|flag_w|"
msgstr ""

#: ../../library/dbm.rst:1
msgid "``'c'``"
msgstr "``'c'``"

#: ../../library/dbm.rst:1
msgid "|flag_c|"
msgstr ""

#: ../../library/dbm.rst:1
msgid "``'n'``"
msgstr "``'n'``"

#: ../../library/dbm.rst:1
msgid "|flag_n|"
msgstr ""

#: ../../library/dbm.rst:77 ../../library/dbm.rst:308 ../../library/dbm.rst:373
msgid ""
"The optional *mode* argument is the Unix mode of the file, used only when "
"the database has to be created.  It defaults to octal ``0o666`` (and will be "
"modified by the prevailing umask)."
msgstr ""
"可选的 *mode* 参数是文件的 Unix 模式，仅在要创建数据库时才会被使用。 其默认值"
"为八进制数 ``0o666`` (并将被当前的 umask 所修改)。"

#: ../../library/dbm.rst:81
msgid "*file* accepts a :term:`path-like object`."
msgstr ""

#: ../../library/dbm.rst:85
msgid ""
"The object returned by :func:`open` supports the same basic functionality as "
"a :class:`dict`; keys and their corresponding values can be stored, "
"retrieved, and deleted, and the :keyword:`in` operator and the :meth:`!keys` "
"method are available, as well as :meth:`!get` and :meth:`!setdefault`."
msgstr ""

#: ../../library/dbm.rst:90
msgid ""
":meth:`!get` and :meth:`!setdefault` are now available in all database "
"modules."
msgstr ""

#: ../../library/dbm.rst:93
msgid ""
"Deleting a key from a read-only database raises database module specific "
"error instead of :exc:`KeyError`."
msgstr "从只读数据库中删除键将引发数据库模块专属的错误而不是 :exc:`KeyError`。"

#: ../../library/dbm.rst:97
msgid ""
"Key and values are always stored as :class:`bytes`. This means that when "
"strings are used they are implicitly converted to the default encoding "
"before being stored."
msgstr ""

#: ../../library/dbm.rst:101
msgid ""
"These objects also support being used in a :keyword:`with` statement, which "
"will automatically close them when done."
msgstr ""
"这些对象也支持在 :keyword:`with` 语句中使用，当语句结束时将自动关闭它们。"

#: ../../library/dbm.rst:104
msgid ""
"Added native support for the context management protocol to the objects "
"returned by :func:`.open`."
msgstr "向 :func:`.open` 所返回的对象添加了上下文管理协议的原生支持。"

#: ../../library/dbm.rst:108
msgid ""
"The following example records some hostnames and a corresponding title,  and "
"then prints out the contents of the database::"
msgstr "以下示例记录了一些主机名和对应的标题，随后将数据库的内容打印出来。::"

#: ../../library/dbm.rst:138
msgid "Module :mod:`shelve`"
msgstr "模块 :mod:`shelve`"

#: ../../library/dbm.rst:139
msgid "Persistence module which stores non-string data."
msgstr "存储非字符串数据的持久化模块。"

#: ../../library/dbm.rst:142
msgid "The individual submodules are described in the following sections."
msgstr "以下部分描述了各个单独的子模块。"

#: ../../library/dbm.rst:146
msgid ":mod:`dbm.gnu` --- GNU database manager"
msgstr ""

#: ../../library/dbm.rst:152
msgid "**Source code:** :source:`Lib/dbm/gnu.py`"
msgstr "**源代码:** :source:`Lib/dbm/gnu.py`"

#: ../../library/dbm.rst:156
msgid ""
"The :mod:`dbm.gnu` module provides an interface to the :abbr:`GDBM (GNU "
"dbm)` library, similar to the :mod:`dbm.ndbm` module, but with additional "
"functionality like crash tolerance."
msgstr ""

#: ../../library/dbm.rst:160
msgid ""
":class:`!gdbm` objects behave similar to :term:`mappings <mapping>`, except "
"that keys and values are always converted to :class:`bytes` before storing, "
"and the :meth:`!items` and :meth:`!values` methods are not supported."
msgstr ""

#: ../../library/dbm.rst:164 ../../library/dbm.rst:272
msgid "|incompat_note|"
msgstr ""

#: ../../library/dbm.rst:168
msgid ""
"Raised on :mod:`dbm.gnu`-specific errors, such as I/O errors. :exc:"
"`KeyError` is raised for general mapping errors like specifying an incorrect "
"key."
msgstr ""
"针对 :mod:`dbm.gnu` 专属错误例如 I/O 错误引发。 :exc:`KeyError` 的引发则针对"
"一般映射错误例如指定了不正确的键。"

#: ../../library/dbm.rst:174
msgid ""
"Open a GDBM database and return a :class:`!gdbm` object.  The *filename* "
"argument is the name of the database file."
msgstr ""

#: ../../library/dbm.rst:187
msgid ""
"The following additional characters may be appended to the flag to control "
"how the database is opened:"
msgstr "下列附加字符可被添加至旗标以控制数据库的打开方式："

#: ../../library/dbm.rst:193
msgid "``'f'``"
msgstr "``'f'``"

#: ../../library/dbm.rst:193
msgid ""
"Open the database in fast mode.  Writes to the database will not be "
"synchronized."
msgstr "以快速模式打开数据库。写入数据库将不会同步。"

#: ../../library/dbm.rst:196
msgid "``'s'``"
msgstr "``'s'``"

#: ../../library/dbm.rst:196
msgid ""
"Synchronized mode. This will cause changes to the database to be immediately "
"written to the file."
msgstr "同步模式。这将导致数据库的更改立即写入文件。"

#: ../../library/dbm.rst:200
msgid "``'u'``"
msgstr "``'u'``"

#: ../../library/dbm.rst:200
msgid "Do not lock database."
msgstr "不要锁定数据库。"

#: ../../library/dbm.rst:203
msgid ""
"Not all flags are valid for all versions of GDBM.  The module constant :"
"const:`open_flags` is a string of supported flag characters.  The exception :"
"exc:`error` is raised if an invalid flag is specified."
msgstr ""

#: ../../library/dbm.rst:207
msgid ""
"The optional *mode* argument is the Unix mode of the file, used only when "
"the database has to be created.  It defaults to octal ``0o666``."
msgstr ""
"可选的 *mode* 参数是文件的 Unix 模式，仅在要创建数据库时才会被使用。 其默认值"
"为八进制数 ``0o666``。"

#: ../../library/dbm.rst:210
msgid ""
"In addition to the dictionary-like methods, :class:`gdbm` objects have the "
"following methods:"
msgstr ""

#: ../../library/dbm.rst:213 ../../library/dbm.rst:315
#: ../../library/dbm.rst:391
msgid "Accepts :term:`path-like object` for filename."
msgstr "接受 :term:`path-like object` 作为文件名。"

#: ../../library/dbm.rst:218
msgid ""
"It's possible to loop over every key in the database using this method  and "
"the :meth:`nextkey` method.  The traversal is ordered by GDBM's internal "
"hash values, and won't be sorted by the key values.  This method returns the "
"starting key."
msgstr ""

#: ../../library/dbm.rst:225
msgid ""
"Returns the key that follows *key* in the traversal.  The following code "
"prints every key in the database ``db``, without having to create a list in "
"memory that contains them all::"
msgstr ""
"在遍历中返回 *key* 之后的的下一个键。 以下代码将打印数据库 ``db`` 中的每个"
"键，而不会在内存中创建一个包含所有键的列表::"

#: ../../library/dbm.rst:236
msgid ""
"If you have carried out a lot of deletions and would like to shrink the "
"space used by the GDBM file, this routine will reorganize the database.  :"
"class:`!gdbm` objects will not shorten the length of a database file except "
"by using this reorganization; otherwise, deleted file space will be kept and "
"reused as new (key, value) pairs are added."
msgstr ""

#: ../../library/dbm.rst:244
msgid ""
"When the database has been opened in fast mode, this method forces any "
"unwritten data to be written to the disk."
msgstr "当以快速模式打开数据库时，此方法会将任何未写入数据强制写入磁盘。"

#: ../../library/dbm.rst:249
msgid "Close the GDBM database."
msgstr ""

#: ../../library/dbm.rst:253
msgid ":mod:`dbm.ndbm` --- New Database Manager"
msgstr ""

#: ../../library/dbm.rst:259
msgid "**Source code:** :source:`Lib/dbm/ndbm.py`"
msgstr "**源代码:** :source:`Lib/dbm/ndbm.py`"

#: ../../library/dbm.rst:263
msgid ""
"The :mod:`dbm.ndbm` module provides an interface to the :abbr:`NDBM (New "
"Database Manager)` library. :class:`!ndbm` objects behave similar to :term:"
"`mappings <mapping>`, except that keys and values are always stored as :"
"class:`bytes`, and the :meth:`!items` and :meth:`!values` methods are not "
"supported."
msgstr ""

#: ../../library/dbm.rst:269
msgid ""
"This module can be used with the \"classic\" NDBM interface or the :abbr:"
"`GDBM (GNU dbm)` compatibility interface."
msgstr ""

#: ../../library/dbm.rst:276
msgid ""
"The NDBM library shipped as part of macOS has an undocumented limitation on "
"the size of values, which can result in corrupted database files when "
"storing values larger than this limit. Reading such corrupted files can "
"result in a hard crash (segmentation fault)."
msgstr ""

#: ../../library/dbm.rst:283
msgid ""
"Raised on :mod:`dbm.ndbm`-specific errors, such as I/O errors. :exc:"
"`KeyError` is raised for general mapping errors like specifying an incorrect "
"key."
msgstr ""
"针对 :mod:`dbm.ndbm` 专属错误例如 I/O 错误引发。 :exc:`KeyError` 的引发则针对"
"一般映射错误例如指定了不正确的键。"

#: ../../library/dbm.rst:289
msgid "Name of the NDBM implementation library used."
msgstr ""

#: ../../library/dbm.rst:294
msgid ""
"Open an NDBM database and return an :class:`!ndbm` object. The *filename* "
"argument is the name of the database file (without the :file:`.dir` or :file:"
"`.pag` extensions)."
msgstr ""

#: ../../library/dbm.rst:298
msgid "The optional *flag* argument must be one of these values:"
msgstr "可选的 *flag* 参数必须是下列值之一："

#: ../../library/dbm.rst:312
msgid ""
"In addition to the dictionary-like methods, :class:`!ndbm` objects provide "
"the following method:"
msgstr ""

#: ../../library/dbm.rst:320
msgid "Close the NDBM database."
msgstr ""

#: ../../library/dbm.rst:324
msgid ":mod:`dbm.dumb` --- Portable DBM implementation"
msgstr ":mod:`dbm.dumb` --- 便携式 DBM 实现"

#: ../../library/dbm.rst:329
msgid "**Source code:** :source:`Lib/dbm/dumb.py`"
msgstr "**源代码:** :source:`Lib/dbm/dumb.py`"

#: ../../library/dbm.rst:335
msgid ""
"The :mod:`dbm.dumb` module is intended as a last resort fallback for the :"
"mod:`dbm` module when a more robust module is not available. The :mod:`dbm."
"dumb` module is not written for speed and is not nearly as heavily used as "
"the other database modules."
msgstr ""
":mod:`dbm.dumb` 模块的目的是在更健壮的模块不可用时作为 :mod:`dbm` 模块的最终"
"回退项。 :mod:`dbm.dumb` 不是为高速运行而编写的，也不像其他数据库模块一样被经"
"常使用。"

#: ../../library/dbm.rst:342
msgid ""
"The :mod:`dbm.dumb` module provides a persistent dictionary-like interface "
"which is written entirely in Python.  Unlike other modules such as :mod:`dbm."
"gnu` no external library is required.  As with other persistent mappings, "
"the keys and values are always stored as bytes."
msgstr ""
":mod:`dbm.dumb` 模块提供了一个完全以 Python 编写的持久化字典类接口。 不同于 :"
"mod:`dbm.gnu` 等其他模块，它不需要外部库。 与其他持久化映射一样，它的键和值也"
"总是被存储为字节串。"

#: ../../library/dbm.rst:347
msgid "The module defines the following:"
msgstr "该模块定义以下内容："

#: ../../library/dbm.rst:352
msgid ""
"Raised on :mod:`dbm.dumb`-specific errors, such as I/O errors.  :exc:"
"`KeyError` is raised for general mapping errors like specifying an incorrect "
"key."
msgstr ""
"针对 :mod:`dbm.dumb` 专属错误例如 I/O 错误引发。  :exc:`KeyError` 的引发则针"
"对一般映射例如指定了不正确的键。"

#: ../../library/dbm.rst:358
msgid ""
"Open a ``dumbdbm`` database and return a dumbdbm object.  The *filename* "
"argument is the basename of the database file (without any specific "
"extensions).  When a dumbdbm database is created, files with :file:`.dat` "
"and :file:`.dir` extensions are created."
msgstr ""
"打开一个 ``dumbdbm`` 数据库并返回 dumbdbm 对象。 *filename* 参数为数据库文件"
"的主名称（不带任何特定扩展名）。 创建一个 dumbdbm 数据库时将创建多个带有 :"
"file:`.dat` 和 :file:`.dir` 扩展名的文件。"

#: ../../library/dbm.rst:1
msgid "``'r'``"
msgstr "``'r'``"

#: ../../library/dbm.rst:1
msgid "``'c'`` (default)"
msgstr ""

#: ../../library/dbm.rst:378
msgid ""
"It is possible to crash the Python interpreter when loading a database with "
"a sufficiently large/complex entry due to stack depth limitations in "
"Python's AST compiler."
msgstr ""
"当载入包含足够巨大/复杂条目的数据库时有可能导致 Python 解释器的崩溃，这是由"
"于 Python AST 编译器有栈深度限制。"

#: ../../library/dbm.rst:382
msgid ""
":func:`.open` always creates a new database when the flag has the value "
"``'n'``."
msgstr ":func:`.open` 在 flag 值为 ``'n'`` 时将总是创建一个新的数据库。"

#: ../../library/dbm.rst:386
msgid ""
"A database opened with flags ``'r'`` is now read-only.  Opening with flags "
"``'r'`` and ``'w'`` no longer creates a database if it does not exist."
msgstr ""
"附带 ``'r'`` 旗标打开的数据库现在将是只读的。 附带 ``'r'`` 和 ``'w'`` 旗标的"
"打开操作不会再创建数据库。"

#: ../../library/dbm.rst:394
msgid ""
"In addition to the methods provided by the :class:`collections.abc."
"MutableMapping` class, :class:`dumbdbm` objects provide the following "
"methods:"
msgstr ""
"除了 :class:`collections.abc.MutableMapping` 类所提供的方法，:class:"
"`dumbdbm` 对象还提供了以下方法："

#: ../../library/dbm.rst:400
msgid ""
"Synchronize the on-disk directory and data files.  This method is called by "
"the :meth:`Shelve.sync` method."
msgstr ""
"同步磁盘上的目录和数据文件。 此方法会由 :meth:`Shelve.sync` 方法来调用。"

#: ../../library/dbm.rst:405
msgid "Close the ``dumbdbm`` database."
msgstr "关闭 ``dumbdbm`` 数据库。"

#: ../../library/dbm.rst:331
msgid "databases"
msgstr "数据库"
