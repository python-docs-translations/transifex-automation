# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2023, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# cdarlint <cdarling@126.com>, 2019
# Pan Felix <tinylambda@gmail.com>, 2019
# MuSheng Chen <sheng.2179@gmail.com>, 2019
# Freesand Leo <yuqinju@163.com>, 2021
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-06-02 14:49+0000\n"
"PO-Revision-Date: 2019-09-01 02:45+0000\n"
"Last-Translator: Freesand Leo <yuqinju@163.com>, 2021\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/asyncio-policy.rst:8
msgid "Policies"
msgstr "策略"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/asyncio-policy.rst:10
msgid ""
"An event loop policy is a global per-process object that controls the "
"management of the event loop. Each event loop has a default policy, which "
"can be changed and customized using the policy API."
msgstr "事件循环策略是各个进程的全局对象 ，它控制事件循环的管理。每个事件循环都有一个默认策略，可以使用策略API更改和定制该策略。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/asyncio-policy.rst:14
msgid ""
"A policy defines the notion of *context* and manages a separate event loop "
"per context. The default policy defines *context* to be the current thread."
msgstr "策略定义了“上下文”的概念，每个上下文管理一个单独的事件循环。默认策略将*context*定义为当前线程。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/asyncio-policy.rst:18
msgid ""
"By using a custom event loop policy, the behavior of :func:`get_event_loop`,"
" :func:`set_event_loop`, and :func:`new_event_loop` functions can be "
"customized."
msgstr ""
"通过使用自定义事件循环策略，可以自定义 :func:`get_event_loop` 、 :func:`set_event_loop`  和 "
":func:`new_event_loop` 函数的行为。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/asyncio-policy.rst:22
msgid ""
"Policy objects should implement the APIs defined in the "
":class:`AbstractEventLoopPolicy` abstract base class."
msgstr "策略对象应该实现 :class:`AbstractEventLoopPolicy` 抽象基类中定义的API。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/asyncio-policy.rst:27
msgid "Getting and Setting the Policy"
msgstr "获取和设置策略"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/asyncio-policy.rst:29
msgid ""
"The following functions can be used to get and set the policy for the "
"current process:"
msgstr "可以使用下面函数获取和设置当前进程的策略:"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/asyncio-policy.rst:34
msgid "Return the current process-wide policy."
msgstr "返回当前进程域的策略。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/asyncio-policy.rst:38
msgid "Set the current process-wide policy to *policy*."
msgstr "将 *policy* 设置为当前进程域策略。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/asyncio-policy.rst:40
msgid "If *policy* is set to ``None``, the default policy is restored."
msgstr "如果 *policy* 设为 ``None`` 将恢复默认策略。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/asyncio-policy.rst:44
msgid "Policy Objects"
msgstr "策略对象"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/asyncio-policy.rst:46
msgid "The abstract event loop policy base class is defined as follows:"
msgstr "抽象事件循环策略基类定义如下:"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/asyncio-policy.rst:50
msgid "An abstract base class for asyncio policies."
msgstr "异步策略的抽象基类。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/asyncio-policy.rst:54
msgid "Get the event loop for the current context."
msgstr "为当前上下文获取事件循环。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/asyncio-policy.rst:56
msgid ""
"Return an event loop object implementing the :class:`AbstractEventLoop` "
"interface."
msgstr "返回一个实现  :class:`AbstractEventLoop`  接口的事件循环对象。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/asyncio-policy.rst:59
#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/asyncio-policy.rst:71
msgid "This method should never return ``None``."
msgstr "该方法永远不应返回 ``None``。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/asyncio-policy.rst:65
msgid "Set the event loop for the current context to *loop*."
msgstr "将当前上下文的事件循环设置为  *loop* 。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/asyncio-policy.rst:69
msgid "Create and return a new event loop object."
msgstr "创建并返回一个新的事件循环对象。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/asyncio-policy.rst:75
msgid "Get a child process watcher object."
msgstr "获取子进程监视器对象。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/asyncio-policy.rst:77
msgid ""
"Return a watcher object implementing the :class:`AbstractChildWatcher` "
"interface."
msgstr "返回一个实现 :class:`AbstractChildWatcher` 接口的监视器对象。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/asyncio-policy.rst:80
#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/asyncio-policy.rst:86
msgid "This function is Unix specific."
msgstr "该函数仅支持Unix。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/asyncio-policy.rst:84
msgid "Set the current child process watcher to *watcher*."
msgstr "将当前子进程监视器设置为 *watcher* 。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/asyncio-policy.rst:89
msgid "asyncio ships with the following built-in policies:"
msgstr "asyncio附带下列内置策略:"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/asyncio-policy.rst:94
msgid ""
"The default asyncio policy.  Uses :class:`SelectorEventLoop` on both Unix "
"and Windows platforms."
msgstr "默认asyncio策略。在Unix和Windows平台上都使用  :class:`SelectorEventLoop` 。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/asyncio-policy.rst:97
msgid ""
"There is no need to install the default policy manually. asyncio is "
"configured to use the default policy automatically."
msgstr "不需要手动安装默认策略。asyncio已配置成自动使用默认策略。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/asyncio-policy.rst:103
msgid ""
"An alternative event loop policy that uses the :class:`ProactorEventLoop` "
"event loop implementation."
msgstr "使用  :class:`ProactorEventLoop` 事件循环实现的另一种事件循环策略。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/asyncio-policy.rst:106
msgid ":ref:`Availability <availability>`: Windows."
msgstr ":ref:`可用性 <availability>`: Windows。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/asyncio-policy.rst:110
msgid "Process Watchers"
msgstr "进程监视器"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/asyncio-policy.rst:112
msgid ""
"A process watcher allows customization of how an event loop monitors child "
"processes on Unix. Specifically, the event loop needs to know when a child "
"process has exited."
msgstr "进程监视器允许定制事件循环如何监视Unix子进程。具体来说，事件循环需要知道子进程何时退出。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/asyncio-policy.rst:116
msgid ""
"In asyncio, child processes are created with :func:`create_subprocess_exec` "
"and :meth:`loop.subprocess_exec` functions."
msgstr ""
"在asyncio中子进程由  :func:`create_subprocess_exec` 和 :meth:`loop.subprocess_exec`"
" 函数创建。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/asyncio-policy.rst:120
msgid ""
"asyncio defines the :class:`AbstractChildWatcher` abstract base class, which"
" child watchers should implement, and has two different implementations: "
":class:`SafeChildWatcher` (configured to be used by default) and "
":class:`FastChildWatcher`."
msgstr ""
"asyncio定义了 :class:`AbstractChildWatcher` "
"抽象基类，必须由子监视器来实现，可以有两种实现方式：:class:`SafeChildWatcher` (已配置为默认使用)和 "
":class:`FastChildWatcher` 。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/asyncio-policy.rst:125
msgid ""
"See also the :ref:`Subprocess and Threads <asyncio-subprocess-threads>` "
"section."
msgstr "请参阅  :ref:`子进程和线程 <asyncio-subprocess-threads>` 部分。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/asyncio-policy.rst:128
msgid ""
"The following two functions can be used to customize the child process "
"watcher implementation used by the asyncio event loop:"
msgstr "以下两个函数可用于自定义子进程监视器实现，它将被asyncio事件循环使用:"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/asyncio-policy.rst:133
msgid "Return the current child watcher for the current policy."
msgstr "返回当前策略的当前子监视器。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/asyncio-policy.rst:137
msgid ""
"Set the current child watcher to *watcher* for the current policy.  "
"*watcher* must implement methods defined in the "
":class:`AbstractChildWatcher` base class."
msgstr ""
"将当前策略的子监视器设置为 *watcher* 。*watcher* 必须实现 :class:`AbstractChildWatcher` "
"基类定义的方法。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/asyncio-policy.rst:142
msgid ""
"Third-party event loops implementations might not support custom child "
"watchers.  For such event loops, using :func:`set_child_watcher` might be "
"prohibited or have no effect."
msgstr "第三方事件循环实现可能不支持自定义子监视器。对于这样的事件循环，禁止使用 :func:`set_child_watcher` 或不起作用。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/asyncio-policy.rst:150
msgid "Register a new child handler."
msgstr "注册一个新的子处理回调函数。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/asyncio-policy.rst:152
msgid ""
"Arrange for ``callback(pid, returncode, *args)`` to be called when a process"
" with PID equal to *pid* terminates.  Specifying another callback for the "
"same process replaces the previous handler."
msgstr ""
"安排 ``callback(pid, returncode, *args)`` 在进程的PID与 *pid* "
"相等时调用。指定另一个同进程的回调函数替换之前的回调处理函数。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/asyncio-policy.rst:157
msgid "The *callback* callable must be thread-safe."
msgstr "回调函数 *callback* 必须是线程安全。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/asyncio-policy.rst:161
msgid "Removes the handler for process with PID equal to *pid*."
msgstr "删除进程PID与 *pid* 相等的进程的处理函数。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/asyncio-policy.rst:163
msgid ""
"The function returns ``True`` if the handler was successfully removed, "
"``False`` if there was nothing to remove."
msgstr "处理函数成功删除时返回 ``True`` ，没有删除时返回 ``False`` 。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/asyncio-policy.rst:168
msgid "Attach the watcher to an event loop."
msgstr "给一个事件循环绑定监视器。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/asyncio-policy.rst:170
msgid ""
"If the watcher was previously attached to an event loop, then it is first "
"detached before attaching to the new loop."
msgstr "如果监视器之前已绑定另一个事件循环，那么在绑定新循环前会先解绑原来的事件循环。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/asyncio-policy.rst:173
msgid "Note: loop may be ``None``."
msgstr "注意：循环有可能是 ``None`` 。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/asyncio-policy.rst:177
msgid "Close the watcher."
msgstr "关闭监视器。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/asyncio-policy.rst:179
msgid ""
"This method has to be called to ensure that underlying resources are "
"cleaned-up."
msgstr "必须调用这个方法以确保相关资源会被清理。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/asyncio-policy.rst:184
msgid ""
"This implementation avoids disrupting other code spawning processes by "
"polling every process explicitly on a :py:data:`SIGCHLD` signal."
msgstr "这个实现通过显式地轮询每个进程上的  :py:data:`SIGCHLD`  信号来避免中断其他代码洐生进程。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/asyncio-policy.rst:187
msgid ""
"This is a safe solution but it has a significant overhead when handling a "
"big number of processes (*O(n)* each time a :py:data:`SIGCHLD` is received)."
msgstr "这是一种安全的解决方案，但在处理大量进程时，它会带来很大的开销( *O(n)* 每次接收到  :py:data:`SIGCHLD` )。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/asyncio-policy.rst:191
msgid "asyncio uses this safe implementation by default."
msgstr "asyncio默认使用这种安全的实现。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/asyncio-policy.rst:195
msgid ""
"This implementation reaps every terminated processes by calling "
"``os.waitpid(-1)`` directly, possibly breaking other code spawning processes"
" and waiting for their termination."
msgstr "这种实现直接调用  ``os.waitpid(-1)`` 来获取所有已结束的进程，可能会中断其它代码洐生进程并等待它们结束。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/asyncio-policy.rst:199
msgid ""
"There is no noticeable overhead when handling a big number of children "
"(*O(1)* each time a child terminates)."
msgstr "在处理大量子监视器时没有明显的开销( *O(1)*  每次子监视器结束)。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/asyncio-policy.rst:204
msgid "Custom Policies"
msgstr "自定义策略"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/asyncio-policy.rst:206
msgid ""
"To implement a new event loop policy, it is recommended to subclass "
":class:`DefaultEventLoopPolicy` and override the methods for which custom "
"behavior is wanted, e.g.::"
msgstr "要实现一个新的事件循环策略，建议子类化 :class:`DefaultEventLoopPolicy` 并重写需要定制行为的方法，例如::"
