# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2024, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# eric R <trencyclopedia@gmail.com>, 2021
# WH-2099 <wh2099@outlook.com>, 2023
# Xu Siyuan, 2023
# ppcfish <ppcfish@gmail.com>, 2023
# Freesand Leo <yuqinju@163.com>, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-05-24 14:15+0000\n"
"PO-Revision-Date: 2021-06-28 01:09+0000\n"
"Last-Translator: Freesand Leo <yuqinju@163.com>, 2024\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/"
"teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/marshal.rst:2
msgid ":mod:`!marshal` --- Internal Python object serialization"
msgstr ":mod:`!marshal` --- 内部 Python 对象序列化"

#: ../../library/marshal.rst:10
msgid ""
"This module contains functions that can read and write Python values in a "
"binary format.  The format is specific to Python, but independent of machine "
"architecture issues (e.g., you can write a Python value to a file on a PC, "
"transport the file to a Mac, and read it back there).  Details of the format "
"are undocumented on purpose; it may change between Python versions (although "
"it rarely does). [#]_"
msgstr ""
"此模块包含一些能以二进制格式来读写 Python 值的函数。 这种格式是 Python 专属"
"的，但是独立于特定的机器架构（即你可以在一台 PC 上写入某个 Python 值，将文件"
"传到一台 Mac 上并在那里读取它）。 这种格式的细节有意不带文档说明；可可能在不"
"同 Python 版本之间发生改变（但这种情况极少发生）。 [#]_"

#: ../../library/marshal.rst:21
msgid ""
"This is not a general \"persistence\" module.  For general persistence and "
"transfer of Python objects through RPC calls, see the modules :mod:`pickle` "
"and :mod:`shelve`.  The :mod:`marshal` module exists mainly to support "
"reading and writing the \"pseudo-compiled\" code for Python modules of :file:"
"`.pyc` files. Therefore, the Python maintainers reserve the right to modify "
"the marshal format in backward incompatible ways should the need arise. The "
"format of code objects is not compatible between Python versions, even if "
"the version of the format is the same. De-serializing a code object in the "
"incorrect Python version has undefined behavior. If you're serializing and "
"de-serializing Python objects, use the :mod:`pickle` module instead -- the "
"performance is comparable, version independence is guaranteed, and pickle "
"supports a substantially wider range of objects than marshal."
msgstr ""

#: ../../library/marshal.rst:37
msgid ""
"The :mod:`marshal` module is not intended to be secure against erroneous or "
"maliciously constructed data.  Never unmarshal data received from an "
"untrusted or unauthenticated source."
msgstr ""
":mod:`marshal` 模块对于错误或恶意构建的数据来说是不安全的。 永远不要 "
"unmarshal 来自不受信任的或未经验证的来源的数据。"

#: ../../library/marshal.rst:43
msgid ""
"Not all Python object types are supported; in general, only objects whose "
"value is independent from a particular invocation of Python can be written "
"and read by this module.  The following types are supported: booleans, "
"integers, floating point numbers, complex numbers, strings, bytes, "
"bytearrays, tuples, lists, sets, frozensets, dictionaries, and code objects "
"(if *allow_code* is true), where it should be understood that tuples, lists, "
"sets, frozensets and dictionaries are only supported as long as the values "
"contained therein are themselves supported.  The singletons :const:`None`, :"
"const:`Ellipsis` and :exc:`StopIteration` can also be marshalled and "
"unmarshalled. For format *version* lower than 3, recursive lists, sets and "
"dictionaries cannot be written (see below)."
msgstr ""

#: ../../library/marshal.rst:56
msgid ""
"There are functions that read/write files as well as functions operating on "
"bytes-like objects."
msgstr "有些函数可以读/写文件，还有些函数可以操作字节类对象。"

#: ../../library/marshal.rst:59
msgid "The module defines these functions:"
msgstr "这个模块定义了以下函数："

#: ../../library/marshal.rst:64
msgid ""
"Write the value on the open file.  The value must be a supported type.  The "
"file must be a writeable :term:`binary file`."
msgstr ""
"向打开的文件写入值。 值必须为受支持的类型。 文件必须为可写的 :term:`binary "
"file`。"

#: ../../library/marshal.rst:67
msgid ""
"If the value has (or contains an object that has) an unsupported type, a :"
"exc:`ValueError` exception is raised --- but garbage data will also be "
"written to the file.  The object will not be properly read back by :func:"
"`load`. :ref:`Code objects <code-objects>` are only supported if "
"*allow_code* is true."
msgstr ""

#: ../../library/marshal.rst:72
msgid ""
"The *version* argument indicates the data format that ``dump`` should use "
"(see below)."
msgstr "*version* 参数指明 ``dump`` 应当使用的数据格式（见下文）。"

#: ../../library/marshal.rst:75 ../../library/marshal.rst:115
msgid ""
"Raises an :ref:`auditing event <auditing>` ``marshal.dumps`` with arguments "
"``value``, ``version``."
msgstr ""
"引发一个 :ref:`审计事件 <auditing>` ``marshal.dumps``，附带参数 ``value``, "
"``version``。"

#: ../../library/marshal.rst:77 ../../library/marshal.rst:101
#: ../../library/marshal.rst:117 ../../library/marshal.rst:135
msgid "Added the *allow_code* parameter."
msgstr "增加了 *allow_code* 形参。"

#: ../../library/marshal.rst:83
msgid ""
"Read one value from the open file and return it.  If no valid value is read "
"(e.g. because the data has a different Python version's incompatible marshal "
"format), raise :exc:`EOFError`, :exc:`ValueError` or :exc:`TypeError`. :ref:"
"`Code objects <code-objects>` are only supported if *allow_code* is true. "
"The file must be a readable :term:`binary file`."
msgstr ""

#: ../../library/marshal.rst:89
msgid ""
"Raises an :ref:`auditing event <auditing>` ``marshal.load`` with no "
"arguments."
msgstr "引发一个 :ref:`审计事件 <auditing>` ``marshal.load``，没有附带参数。"

#: ../../library/marshal.rst:93
msgid ""
"If an object containing an unsupported type was marshalled with :func:"
"`dump`, :func:`load` will substitute ``None`` for the unmarshallable type."
msgstr ""
"如果通过 :func:`dump` marshal 了一个包含不受支持类型的对象，:func:`load` 将为"
"不可 marshal 的类型替换 ``None``。"

#: ../../library/marshal.rst:98
msgid ""
"This call used to raise a ``code.__new__`` audit event for each code object. "
"Now it raises a single ``marshal.load`` event for the entire load operation."
msgstr ""
"使用此调用为每个代码对象引发一个 ``code.__new__`` 审计事件。 现在它会为整个载"
"入操作引发单个 ``marshal.load`` 事件。"

#: ../../library/marshal.rst:107
msgid ""
"Return the bytes object that would be written to a file by ``dump(value, "
"file)``.  The value must be a supported type.  Raise a :exc:`ValueError` "
"exception if value has (or contains an object that has) an unsupported "
"type. :ref:`Code objects <code-objects>` are only supported if *allow_code* "
"is true."
msgstr ""

#: ../../library/marshal.rst:112
msgid ""
"The *version* argument indicates the data format that ``dumps`` should use "
"(see below)."
msgstr "*version* 参数指明 ``dumps`` 应当使用的数据类型（见下文）。"

#: ../../library/marshal.rst:123
msgid ""
"Convert the :term:`bytes-like object` to a value.  If no valid value is "
"found, raise :exc:`EOFError`, :exc:`ValueError` or :exc:`TypeError`. :ref:"
"`Code objects <code-objects>` are only supported if *allow_code* is true. "
"Extra bytes in the input are ignored."
msgstr ""
"将 :term:`bytes-like object` 转换为一个值。 如果找不到有效的值，则会引发 :"
"exc:`EOFError`, :exc:`ValueError` 或 :exc:`TypeError`。 :ref:`代码对象 <code-"
"objects>` 仅在 *allow_code* 为真值时受支持。 输入的额外字节串会被忽略。"

#: ../../library/marshal.rst:128
msgid ""
"Raises an :ref:`auditing event <auditing>` ``marshal.loads`` with argument "
"``bytes``."
msgstr ""
"引发一个 :ref:`审计事件 <auditing>` ``marshal.loads``，附带参数 ``bytes``。"

#: ../../library/marshal.rst:132
msgid ""
"This call used to raise a ``code.__new__`` audit event for each code object. "
"Now it raises a single ``marshal.loads`` event for the entire load operation."
msgstr ""
"使用此调用为每个代码对象引发一个 ``code.__new__`` 审计事件。 现在它会为整个载"
"入操作引发单个 ``marshal.loads`` 事件。"

#: ../../library/marshal.rst:139
msgid "In addition, the following constants are defined:"
msgstr "此外，还定义了以下常量："

#: ../../library/marshal.rst:143
msgid ""
"Indicates the format that the module uses. Version 0 is the historical "
"format, version 1 shares interned strings and version 2 uses a binary format "
"for floating point numbers. Version 3 adds support for object instancing and "
"recursion. The current version is 4."
msgstr ""
"指明模块所使用的格式。 第 0 版为历史格式，第 1 版为共享固化的字符串，第 2 版"
"对浮点数使用二进制格式。 第 3 版添加了对于对象实例化和递归的支持。 目前使用的"
"为第 4 版。"

#: ../../library/marshal.rst:151
msgid "Footnotes"
msgstr "备注"

#: ../../library/marshal.rst:152
msgid ""
"The name of this module stems from a bit of terminology used by the "
"designers of Modula-3 (amongst others), who use the term \"marshalling\" for "
"shipping of data around in a self-contained form. Strictly speaking, \"to "
"marshal\" means to convert some data from internal to external form (in an "
"RPC buffer for instance) and \"unmarshalling\" for the reverse process."
msgstr ""
"此模块的名称来源于 Modula-3 (及其他语言) 的设计者所使用的术语，他们使用术语 "
"\"marshal\" 来表示以自包含的形式传输数据。 严格地说，将数据从内部形式转换为外"
"部形式 (例如用于 RPC 缓冲区) 称为 \"marshal\" 而其逆过程则称为 "
"\"unmarshal\"。"

#: ../../library/marshal.rst:17
msgid "module"
msgstr "module"

#: ../../library/marshal.rst:17
msgid "pickle"
msgstr "pickle"

#: ../../library/marshal.rst:17
msgid "shelve"
msgstr "shelve"

#: ../../library/marshal.rst:41
msgid "object"
msgstr "object -- 对象"

#: ../../library/marshal.rst:41
msgid "code"
msgstr "code -- 代码"

#: ../../library/marshal.rst:41
msgid "code object"
msgstr "代码对象"
