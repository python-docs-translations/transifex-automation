# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2023, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# focusheart <focusheart@gmail.com>, 2019
# Dingyuan Wang <abcdoyle888@gmail.com>, 2019
# Alpha Du <alphanow@gmail.com>, 2019
# ppcfish <ppcfish@gmail.com>, 2019
# Freesand Leo <yuqinju@163.com>, 2021
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-06-16 16:41+0000\n"
"PO-Revision-Date: 2019-09-01 03:21+0000\n"
"Last-Translator: Freesand Leo <yuqinju@163.com>, 2021\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/"
"teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/math.rst:2
msgid ":mod:`math` --- Mathematical functions"
msgstr ":mod:`math` --- 数学函数"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/math.rst:13
msgid ""
"This module provides access to the mathematical functions defined by the C "
"standard."
msgstr "该模块提供了对C标准定义的数学函数的访问。"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/math.rst:16
msgid ""
"These functions cannot be used with complex numbers; use the functions of "
"the same name from the :mod:`cmath` module if you require support for "
"complex numbers.  The distinction between functions which support complex "
"numbers and those which don't is made since most users do not want to learn "
"quite as much mathematics as required to understand complex numbers.  "
"Receiving an exception instead of a complex result allows earlier detection "
"of the unexpected complex number used as a parameter, so that the programmer "
"can determine how and why it was generated in the first place."
msgstr ""
"这些函数不适用于复数；如果你需要计算复数，请使用 :mod:`cmath` 模块中的同名函"
"数。将支持计算复数的函数区分开的目的，来自于大多数开发者并不愿意像数学家一样"
"需要学习复数的概念。得到一个异常而不是一个复数结果使得开发者能够更早地监测到"
"传递给这些函数的参数中包含复数，进而调查其产生的原因。"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/math.rst:25
msgid ""
"The following functions are provided by this module.  Except when explicitly "
"noted otherwise, all return values are floats."
msgstr "该模块提供了以下函数。除非另有明确说明，否则所有返回值均为浮点数。"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/math.rst:30
msgid "Number-theoretic and representation functions"
msgstr "数论与表示函数"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/math.rst:34
msgid ""
"Return the ceiling of *x*, the smallest integer greater than or equal to "
"*x*. If *x* is not a float, delegates to ``x.__ceil__()``, which should "
"return an :class:`~numbers.Integral` value."
msgstr ""
"返回 *x* 的上限，即大于或者等于 *x* 的最小整数。如果 *x* 不是一个浮点数，则委"
"托  ``x.__ceil__()``, 返回一个 :class:`~numbers.Integral` 类的值。"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/math.rst:41
msgid ""
"Return a float with the magnitude (absolute value) of *x* but the sign of "
"*y*.  On platforms that support signed zeros, ``copysign(1.0, -0.0)`` "
"returns *-1.0*."
msgstr ""
"返回一个基于 *x* 的绝对值和 *y* 的符号的浮点数。在支持带符号零的平台上，"
"``copysign(1.0, -0.0)`` 返回 *-1.0*."

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/math.rst:48
msgid "Return the absolute value of *x*."
msgstr "返回 *x* 的绝对值。"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/math.rst:53
msgid ""
"Return *x* factorial as an integer.  Raises :exc:`ValueError` if *x* is not "
"integral or is negative."
msgstr ""
"以一个整数返回 *x* 的阶乘。 如果 *x* 不是整数或为负数时则将引发 :exc:"
"`ValueError`。"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/math.rst:59
msgid ""
"Return the floor of *x*, the largest integer less than or equal to *x*. If "
"*x* is not a float, delegates to ``x.__floor__()``, which should return an :"
"class:`~numbers.Integral` value."
msgstr ""
"返回 *x* 的向下取整，小于或等于 *x* 的最大整数。如果 *x* 不是浮点数，则委托 "
"``x.__floor__()`` ，它应返回 :class:`~numbers.Integral` 值。"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/math.rst:66
msgid ""
"Return ``fmod(x, y)``, as defined by the platform C library. Note that the "
"Python expression ``x % y`` may not return the same result.  The intent of "
"the C standard is that ``fmod(x, y)`` be exactly (mathematically; to "
"infinite precision) equal to ``x - n*y`` for some integer *n* such that the "
"result has the same sign as *x* and magnitude less than ``abs(y)``.  "
"Python's ``x % y`` returns a result with the sign of *y* instead, and may "
"not be exactly computable for float arguments. For example, ``fmod(-1e-100, "
"1e100)`` is ``-1e-100``, but the result of Python's ``-1e-100 % 1e100`` is "
"``1e100-1e-100``, which cannot be represented exactly as a float, and rounds "
"to the surprising ``1e100``.  For this reason, function :func:`fmod` is "
"generally preferred when working with floats, while Python's ``x % y`` is "
"preferred when working with integers."
msgstr ""
"返回 ``fmod(x, y)`` ，由平台C库定义。请注意，Python表达式 ``x % y`` 可能不会"
"返回相同的结果。C标准的目的是 ``fmod(x, y)`` 完全（数学上；到无限精度）等于 "
"``x - n*y`` 对于某个整数 *n* ，使得结果具有 与 *x* 相同的符号和小于 "
"``abs(y)`` 的幅度。Python的 ``x % y`` 返回带有 *y* 符号的结果，并且可能不能完"
"全计算浮点参数。 例如， ``fmod(-1e-100, 1e100)`` 是 ``-1e-100`` ，但Python的 "
"``-1e-100 % 1e100`` 的结果是 ``1e100-1e-100`` ，它不能完全表示为浮点数，并且"
"取整为令人惊讶的 ``1e100`` 。 出于这个原因，函数 :func:`fmod` 在使用浮点数时"
"通常是首选，而Python的 ``x % y`` 在使用整数时是首选。"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/math.rst:81
msgid ""
"Return the mantissa and exponent of *x* as the pair ``(m, e)``.  *m* is a "
"float and *e* is an integer such that ``x == m * 2**e`` exactly. If *x* is "
"zero, returns ``(0.0, 0)``, otherwise ``0.5 <= abs(m) < 1``.  This is used "
"to \"pick apart\" the internal representation of a float in a portable way."
msgstr ""
"以 ``(m, e)`` 对的形式返回 *x* 的尾数和指数。 *m* 是一个浮点数， *e* 是一个整"
"数，正好是 ``x == m * 2**e`` 。 如果 *x* 为零，则返回 ``(0.0, 0)`` ，否则返"
"回 ``0.5 <= abs(m) < 1`` 。这用于以可移植方式“分离”浮点数的内部表示。"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/math.rst:89
msgid ""
"Return an accurate floating point sum of values in the iterable.  Avoids "
"loss of precision by tracking multiple intermediate partial sums::"
msgstr "返回迭代中的精确浮点值。通过跟踪多个中间部分和来避免精度损失::"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/math.rst:97
msgid ""
"The algorithm's accuracy depends on IEEE-754 arithmetic guarantees and the "
"typical case where the rounding mode is half-even.  On some non-Windows "
"builds, the underlying C library uses extended precision addition and may "
"occasionally double-round an intermediate sum causing it to be off in its "
"least significant bit."
msgstr ""
"该算法的准确性取决于IEEE-754算术保证和舍入模式为半偶的典型情况。在某些非"
"Windows版本中，底层C库使用扩展精度添加，并且有时可能会使中间和加倍，导致它在"
"最低有效位中关闭。"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/math.rst:103
msgid ""
"For further discussion and two alternative approaches, see the `ASPN "
"cookbook recipes for accurate floating point summation <https://code."
"activestate.com/recipes/393090/>`_\\."
msgstr ""
"有关待进一步讨论和两种替代方法，参见 `ASPN cookbook recipes for accurate "
"floating point summation <https://code.activestate.com/recipes/393090/"
">`_\\ 。"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/math.rst:110
msgid ""
"Return the greatest common divisor of the integers *a* and *b*.  If either "
"*a* or *b* is nonzero, then the value of ``gcd(a, b)`` is the largest "
"positive integer that divides both *a* and *b*.  ``gcd(0, 0)`` returns ``0``."
msgstr ""
"返回整数 *a* 和 *b* 的最大公约数。如果 *a* 或 *b* 之一非零，则 ``gcd(a, b)`` "
"的值是能同时整除 *a* 和 *b* 的最大正整数。``gcd(0, 0)`` 返回 ``0``。"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/math.rst:120
msgid ""
"Return ``True`` if the values *a* and *b* are close to each other and "
"``False`` otherwise."
msgstr "若 *a* 和 *b* 的值比较接近则返回 ``True``，否则返回 ``False``。"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/math.rst:123
msgid ""
"Whether or not two values are considered close is determined according to "
"given absolute and relative tolerances."
msgstr "根据给定的绝对和相对容差确定两个值是否被认为是接近的。"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/math.rst:126
msgid ""
"*rel_tol* is the relative tolerance -- it is the maximum allowed difference "
"between *a* and *b*, relative to the larger absolute value of *a* or *b*. "
"For example, to set a tolerance of 5%, pass ``rel_tol=0.05``.  The default "
"tolerance is ``1e-09``, which assures that the two values are the same "
"within about 9 decimal digits.  *rel_tol* must be greater than zero."
msgstr ""
"*rel_tol* 是相对容差 —— 它是 *a* 和 *b* 之间允许的最大差值，相对于 *a* 或 "
"*b* 的较大绝对值。例如，要设置5％的容差，请传递 ``rel_tol=0.05`` 。默认容差"
"为 ``1e-09``，确保两个值在大约9位十进制数字内相同。 *rel_tol* 必须大于零。"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/math.rst:132
msgid ""
"*abs_tol* is the minimum absolute tolerance -- useful for comparisons near "
"zero. *abs_tol* must be at least zero."
msgstr ""
"*abs_tol* 是最小绝对容差 —— 对于接近零的比较很有用。 *abs_tol* 必须至少为零。"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/math.rst:135
msgid ""
"If no errors occur, the result will be: ``abs(a-b) <= max(rel_tol * "
"max(abs(a), abs(b)), abs_tol)``."
msgstr ""
"如果没有错误发生，结果将是： ``abs(a-b) <= max(rel_tol * max(abs(a), "
"abs(b)), abs_tol)`` 。"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/math.rst:138
msgid ""
"The IEEE 754 special values of ``NaN``, ``inf``, and ``-inf`` will be "
"handled according to IEEE rules.  Specifically, ``NaN`` is not considered "
"close to any other value, including ``NaN``.  ``inf`` and ``-inf`` are only "
"considered close to themselves."
msgstr ""
"IEEE 754特殊值 ``NaN`` ， ``inf`` 和 ``-inf`` 将根据IEEE规则处理。具体来说， "
"``NaN`` 不被认为接近任何其他值，包括 ``NaN`` 。 ``inf`` 和 ``-inf`` 只被认为"
"接近自己。"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/math.rst:147
msgid ":pep:`485` -- A function for testing approximate equality"
msgstr ":pep:`485` —— 用于测试近似相等的函数"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/math.rst:152
msgid ""
"Return ``True`` if *x* is neither an infinity nor a NaN, and ``False`` "
"otherwise.  (Note that ``0.0`` *is* considered finite.)"
msgstr ""
"如果 *x* 既不是无穷大也不是NaN，则返回 ``True`` ，否则返回 ``False`` 。 （注"
"意 ``0.0`` 被认为 *是* 有限的。）"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/math.rst:160
msgid ""
"Return ``True`` if *x* is a positive or negative infinity, and ``False`` "
"otherwise."
msgstr "如果 *x* 是正或负无穷大，则返回 ``True`` ，否则返回 ``False`` 。"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/math.rst:166
msgid ""
"Return ``True`` if *x* is a NaN (not a number), and ``False`` otherwise."
msgstr "如果 *x* 是 NaN（不是数字），则返回 ``True`` ，否则返回 ``False`` 。"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/math.rst:171
msgid ""
"Return ``x * (2**i)``.  This is essentially the inverse of function :func:"
"`frexp`."
msgstr "返回 ``x * (2**i)`` 。 这基本上是函数  :func:`frexp`  的反函数。"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/math.rst:177
msgid ""
"Return the fractional and integer parts of *x*.  Both results carry the sign "
"of *x* and are floats."
msgstr "返回 *x* 的小数和整数部分。两个结果都带有 *x* 的符号并且是浮点数。"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/math.rst:183
msgid ""
"Return the IEEE 754-style remainder of *x* with respect to *y*.  For finite "
"*x* and finite nonzero *y*, this is the difference ``x - n*y``, where ``n`` "
"is the closest integer to the exact value of the quotient ``x / y``.  If "
"``x / y`` is exactly halfway between two consecutive integers, the nearest "
"*even* integer is used for ``n``.  The remainder ``r = remainder(x, y)`` "
"thus always satisfies ``abs(r) <= 0.5 * abs(y)``."
msgstr ""
"返回 IEEE 754 风格的 *x* 相对于 *y* 的余数。对于有限 *x* 和有限非零 *y* ，这"
"是差异 ``x - n*y`` ，其中 ``n`` 是与商 ``x / y`` 的精确值最接近的整数。如果 "
"``x / y`` 恰好位于两个连续整数之间，则将最接近的 *偶数* 用作 ``n`` 。 余数 "
"``r = remainder(x, y)`` 因此总是满足 ``abs(r) <= 0.5 * abs(y)``。"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/math.rst:190
msgid ""
"Special cases follow IEEE 754: in particular, ``remainder(x, math.inf)`` is "
"*x* for any finite *x*, and ``remainder(x, 0)`` and ``remainder(math.inf, "
"x)`` raise :exc:`ValueError` for any non-NaN *x*. If the result of the "
"remainder operation is zero, that zero will have the same sign as *x*."
msgstr ""
"特殊情况遵循IEEE 754：特别是 ``remainder(x, math.inf)`` 对于任何有限 *x* 都"
"是 *x* ，而 ``remainder(x, 0)`` 和 ``remainder(math.inf, x)`` 引发  :exc:"
"`ValueError` 适用于任何非NaN的 *x* 。如果余数运算的结果为零，则该零将具有与 "
"*x* 相同的符号。"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/math.rst:196
msgid ""
"On platforms using IEEE 754 binary floating-point, the result of this "
"operation is always exactly representable: no rounding error is introduced."
msgstr ""
"在使用IEEE 754二进制浮点的平台上，此操作的结果始终可以完全表示：不会引入舍入"
"错误。"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/math.rst:204
msgid ""
"Return the :class:`~numbers.Real` value *x* truncated to an :class:`~numbers."
"Integral` (usually an integer). Delegates to :meth:`x.__trunc__() <object."
"__trunc__>`."
msgstr ""
"返回 :class:`~numbers.Real` 值 *x* 截断为 :class:`~numbers.Integral` （通常是"
"整数）。 委托给 :meth:`x.__trunc__() <object.__trunc__>`。"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/math.rst:209
msgid ""
"Note that :func:`frexp` and :func:`modf` have a different call/return "
"pattern than their C equivalents: they take a single argument and return a "
"pair of values, rather than returning their second return value through an "
"'output parameter' (there is no such thing in Python)."
msgstr ""
"注意 :func:`frexp` 和 :func:`modf` 具有与它们的C等价函数不同的调用/返回模式："
"它们采用单个参数并返回一对值，而不是通过 '输出形参' 返回它们的第二个返回参数"
"（Python中没有这样的东西）。"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/math.rst:214
msgid ""
"For the :func:`ceil`, :func:`floor`, and :func:`modf` functions, note that "
"*all* floating-point numbers of sufficiently large magnitude are exact "
"integers. Python floats typically carry no more than 53 bits of precision "
"(the same as the platform C double type), in which case any float *x* with "
"``abs(x) >= 2**52`` necessarily has no fractional bits."
msgstr ""
"对于 :func:`ceil` ， :func:`floor` 和 :func:`modf` 函数，请注意 *所有* 足够大"
"的浮点数都是精确整数。Python浮点数通常不超过53位的精度（与平台C double类型相"
"同），在这种情况下，任何浮点 *x* 与 ``abs(x) >= 2**52`` 必然没有小数位。"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/math.rst:222
msgid "Power and logarithmic functions"
msgstr "幂函数与对数函数"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/math.rst:226
msgid ""
"Return *e* raised to the power *x*, where *e* = 2.718281... is the base of "
"natural logarithms.  This is usually more accurate than ``math.e ** x`` or "
"``pow(math.e, x)``."
msgstr ""
"返回 *e* 次 *x* 幂，其中 *e* = 2.718281... 是自然对数的基数。这通常比 ``math."
"e ** x`` 或 ``pow(math.e, x)`` 更精确。"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/math.rst:233
msgid ""
"Return *e* raised to the power *x*, minus 1.  Here *e* is the base of "
"natural logarithms.  For small floats *x*, the subtraction in ``exp(x) - 1`` "
"can result in a `significant loss of precision <https://en.wikipedia.org/"
"wiki/Loss_of_significance>`_\\; the :func:`expm1` function provides a way to "
"compute this quantity to full precision::"
msgstr ""
"返回 *e* 的 *x* 次幂，减1。这里 *e* 是自然对数的基数。对于小浮点数 *x* ， "
"``exp(x) - 1`` 中的减法可能导致 `significant loss of precision <https://en."
"wikipedia.org/wiki/Loss_of_significance>`_\\ ； :func:`expm1` 函数提供了一种"
"将此数量计算为全精度的方法::"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/math.rst:250
msgid "With one argument, return the natural logarithm of *x* (to base *e*)."
msgstr "使用一个参数，返回 *x* 的自然对数（底为 *e* ）。"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/math.rst:252
msgid ""
"With two arguments, return the logarithm of *x* to the given *base*, "
"calculated as ``log(x)/log(base)``."
msgstr ""
"使用两个参数，返回给定的 *base* 的对数 *x* ，计算为 ``log(x)/log(base)`` 。"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/math.rst:258
msgid ""
"Return the natural logarithm of *1+x* (base *e*). The result is calculated "
"in a way which is accurate for *x* near zero."
msgstr ""
"返回 *1+x* 的自然对数（以 *e* 为底）。 以对于接近零的 *x* 精确的方式计算结"
"果。"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/math.rst:264
msgid ""
"Return the base-2 logarithm of *x*. This is usually more accurate than "
"``log(x, 2)``."
msgstr "返回 *x* 以2为底的对数。这通常比 ``log(x, 2)`` 更准确。"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/math.rst:271
msgid ""
":meth:`int.bit_length` returns the number of bits necessary to represent an "
"integer in binary, excluding the sign and leading zeros."
msgstr ""
":meth:`int.bit_length` 返回表示二进制整数所需的位数，不包括符号和前导零。"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/math.rst:277
msgid ""
"Return the base-10 logarithm of *x*.  This is usually more accurate than "
"``log(x, 10)``."
msgstr "返回 *x* 底为10的对数。这通常比 ``log(x, 10)`` 更准确。"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/math.rst:283
msgid ""
"Return ``x`` raised to the power ``y``.  Exceptional cases follow Annex 'F' "
"of the C99 standard as far as possible.  In particular, ``pow(1.0, x)`` and "
"``pow(x, 0.0)`` always return ``1.0``, even when ``x`` is a zero or a NaN.  "
"If both ``x`` and ``y`` are finite, ``x`` is negative, and ``y`` is not an "
"integer then ``pow(x, y)`` is undefined, and raises :exc:`ValueError`."
msgstr ""
"将返回 ``x`` 的 ``y`` 次幂。特殊情况尽可能遵循C99标准的附录'F'。特别是， "
"``pow(1.0, x)`` 和 ``pow(x, 0.0)`` 总是返回 ``1.0`` ，即使 ``x`` 是零或NaN。 "
"如果 ``x`` 和 ``y`` 都是有限的， ``x`` 是负数， ``y`` 不是整数那么 ``pow(x, "
"y)`` 是未定义的，并且引发 :exc:`ValueError` 。"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/math.rst:290
msgid ""
"Unlike the built-in ``**`` operator, :func:`math.pow` converts both its "
"arguments to type :class:`float`.  Use ``**`` or the built-in :func:`pow` "
"function for computing exact integer powers."
msgstr ""
"与内置的 ``**`` 运算符不同， :func:`math.pow` 将其参数转换为 :class:`float` "
"类型。使用 ``**`` 或内置的 :func:`pow` 函数来计算精确的整数幂。"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/math.rst:297
msgid "Return the square root of *x*."
msgstr "返回 *x* 的平方根。"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/math.rst:301
msgid "Trigonometric functions"
msgstr "三角函数"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/math.rst:305
msgid "Return the arc cosine of *x*, in radians."
msgstr "以弧度为单位返回 *x* 的反余弦值。"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/math.rst:310
msgid "Return the arc sine of *x*, in radians."
msgstr "以弧度为单位返回 *x* 的反正弦值。"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/math.rst:315
msgid "Return the arc tangent of *x*, in radians."
msgstr "以弧度为单位返回 *x* 的反正切值。"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/math.rst:320
msgid ""
"Return ``atan(y / x)``, in radians. The result is between ``-pi`` and "
"``pi``. The vector in the plane from the origin to point ``(x, y)`` makes "
"this angle with the positive X axis. The point of :func:`atan2` is that the "
"signs of both inputs are known to it, so it can compute the correct quadrant "
"for the angle. For example, ``atan(1)`` and ``atan2(1, 1)`` are both "
"``pi/4``, but ``atan2(-1, -1)`` is ``-3*pi/4``."
msgstr ""
"以弧度为单位返回 ``atan(y / x)`` 。结果是在 ``-pi`` 和 ``pi`` 之间。从原点到"
"点 ``(x, y)``  的平面矢量使该角度与正X轴成正比。 :func:`atan2` 的点的两个输入"
"的符号都是已知的，因此它可以计算角度的正确象限。 例如， ``atan(1)`` 和 "
"``atan2(1, 1)``  都是 ``pi/4`` ，但 ``atan2(-1, -1)`` 是 ``-3*pi/4`` 。"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/math.rst:330
msgid "Return the cosine of *x* radians."
msgstr "返回 *x* 弧度的余弦值。"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/math.rst:335
msgid ""
"Return the Euclidean norm, ``sqrt(x*x + y*y)``. This is the length of the "
"vector from the origin to point ``(x, y)``."
msgstr ""
"返回欧几里德范数， ``sqrt(x*x + y*y)`` 。 这是从原点到点 ``(x, y)`` 的向量长"
"度。"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/math.rst:341
msgid "Return the sine of *x* radians."
msgstr "返回 *x* 弧度的正弦值。"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/math.rst:346
msgid "Return the tangent of *x* radians."
msgstr "返回 *x* 弧度的正切值。"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/math.rst:350
msgid "Angular conversion"
msgstr "角度转换"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/math.rst:354
msgid "Convert angle *x* from radians to degrees."
msgstr "将角度 *x* 从弧度转换为度数。"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/math.rst:359
msgid "Convert angle *x* from degrees to radians."
msgstr "将角度 *x* 从度数转换为弧度。"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/math.rst:363
msgid "Hyperbolic functions"
msgstr "双曲函数"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/math.rst:365
msgid ""
"`Hyperbolic functions <https://en.wikipedia.org/wiki/Hyperbolic_function>`_ "
"are analogs of trigonometric functions that are based on hyperbolas instead "
"of circles."
msgstr ""
"`双曲函数 <https://en.wikipedia.org/wiki/Hyperbolic_function>`_ 是基于双曲线"
"而非圆来对三角函数进行模拟。"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/math.rst:371
msgid "Return the inverse hyperbolic cosine of *x*."
msgstr "返回 *x* 的反双曲余弦值。"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/math.rst:376
msgid "Return the inverse hyperbolic sine of *x*."
msgstr "返回 *x* 的反双曲正弦值。"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/math.rst:381
msgid "Return the inverse hyperbolic tangent of *x*."
msgstr "返回 *x* 的反双曲正切值。"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/math.rst:386
msgid "Return the hyperbolic cosine of *x*."
msgstr "返回 *x* 的双曲余弦值。"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/math.rst:391
msgid "Return the hyperbolic sine of *x*."
msgstr "返回 *x* 的双曲正弦值。"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/math.rst:396
msgid "Return the hyperbolic tangent of *x*."
msgstr "返回 *x* 的双曲正切值。"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/math.rst:400
msgid "Special functions"
msgstr "特殊函数"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/math.rst:404
msgid ""
"Return the `error function <https://en.wikipedia.org/wiki/Error_function>`_ "
"at *x*."
msgstr ""
"返回 *x* 处的 `error function <https://en.wikipedia.org/wiki/"
"Error_function>`_ 。"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/math.rst:407
msgid ""
"The :func:`erf` function can be used to compute traditional statistical "
"functions such as the `cumulative standard normal distribution <https://en."
"wikipedia.org/wiki/Normal_distribution#Cumulative_distribution_function>`_::"
msgstr ""
":func:`erf` 函数可用于计算传统的统计函数，如 `累积标准正态分布 <https://en."
"wikipedia.org/wiki/Normal_distribution#Cumulative_distribution_function>`_ ::"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/math.rst:420
msgid ""
"Return the complementary error function at *x*.  The `complementary error "
"function <https://en.wikipedia.org/wiki/Error_function>`_ is defined as "
"``1.0 - erf(x)``.  It is used for large values of *x* where a subtraction "
"from one would cause a `loss of significance <https://en.wikipedia.org/wiki/"
"Loss_of_significance>`_\\."
msgstr ""
"返回 *x* 处的互补误差函数。 `互补错误函数 <https://en.wikipedia.org/wiki/"
"Error_function>`_ 定义为 ``1.0 - erf(x)``。 它用于 *x* 的大值，从其中减去一个"
"会导致 `有效位数损失 <https://en.wikipedia.org/wiki/"
"Loss_of_significance>`_\\。"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/math.rst:431
msgid ""
"Return the `Gamma function <https://en.wikipedia.org/wiki/Gamma_function>`_ "
"at *x*."
msgstr ""
"返回 *x* 处的 `伽马函数 <https://en.wikipedia.org/wiki/Gamma_function>`_ 值。"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/math.rst:439
msgid ""
"Return the natural logarithm of the absolute value of the Gamma function at "
"*x*."
msgstr "返回Gamma函数在 *x* 绝对值的自然对数。"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/math.rst:446
msgid "Constants"
msgstr "常量"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/math.rst:450
msgid "The mathematical constant *π* = 3.141592..., to available precision."
msgstr "数学常数 *π* = 3.141592...，精确到可用精度。"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/math.rst:455
msgid "The mathematical constant *e* = 2.718281..., to available precision."
msgstr "数学常数 *e* = 2.718281...，精确到可用精度。"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/math.rst:460
msgid ""
"The mathematical constant *τ* = 6.283185..., to available precision. Tau is "
"a circle constant equal to 2\\ *π*, the ratio of a circle's circumference to "
"its radius. To learn more about Tau, check out Vi Hart's video `Pi is "
"(still) Wrong <https://www.youtube.com/watch?v=jG7vhMMXagQ>`_, and start "
"celebrating `Tau day <https://tauday.com/>`_ by eating twice as much pie!"
msgstr ""
"数学常数 *τ* = 6.283185...，精确到可用精度。Tau 是一个圆周常数，等于 2\\ "
"*π*，圆的周长与半径之比。更多关于 Tau 的信息可参考 Vi Hart 的视频 `Pi is "
"(still) Wrong <https://www.youtube.com/watch?v=jG7vhMMXagQ>`_。吃两倍多的派来"
"庆祝 `Tau 日 <https://tauday.com/>`_ 吧！"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/math.rst:471
msgid ""
"A floating-point positive infinity.  (For negative infinity, use ``-math."
"inf``.)  Equivalent to the output of ``float('inf')``."
msgstr ""
"浮点正无穷大。 （对于负无穷大，使用 ``-math.inf`` 。）相当于``float('inf')`` "
"的输出。"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/math.rst:479
msgid ""
"A floating-point \"not a number\" (NaN) value.  Equivalent to the output of "
"``float('nan')``."
msgstr "浮点“非数字”（NaN）值。 相当于 ``float('nan')`` 的输出。"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/math.rst:487
msgid ""
"The :mod:`math` module consists mostly of thin wrappers around the platform "
"C math library functions.  Behavior in exceptional cases follows Annex F of "
"the C99 standard where appropriate.  The current implementation will raise :"
"exc:`ValueError` for invalid operations like ``sqrt(-1.0)`` or ``log(0.0)`` "
"(where C99 Annex F recommends signaling invalid operation or divide-by-"
"zero), and :exc:`OverflowError` for results that overflow (for example, "
"``exp(1000.0)``).  A NaN will not be returned from any of the functions "
"above unless one or more of the input arguments was a NaN; in that case, "
"most functions will return a NaN, but (again following C99 Annex F) there "
"are some exceptions to this rule, for example ``pow(float('nan'), 0.0)`` or "
"``hypot(float('nan'), float('inf'))``."
msgstr ""
":mod:`math` 模块主要包含围绕平台C数学库函数的简单包装器。特殊情况下的行为在适"
"当情况下遵循C99标准的附录F。当前的实现将引发 :exc:`ValueError` 用于无效操作，"
"如 ``sqrt(-1.0)`` 或 ``log(0.0)`` （其中C99附件F建议发出无效操作信号或被零"
"除）， 和 :exc:`OverflowError` 用于溢出的结果（例如， ``exp(1000.0)`` ）。除"
"非一个或多个输入参数是NaN，否则不会从上述任何函数返回NaN；在这种情况下，大多"
"数函数将返回一个NaN，但是（再次遵循C99附件F）这个规则有一些例外，例如 "
"``pow(float('nan'), 0.0)`` 或 ``hypot(float('nan'), float('inf'))`` 。"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/math.rst:499
msgid ""
"Note that Python makes no effort to distinguish signaling NaNs from quiet "
"NaNs, and behavior for signaling NaNs remains unspecified. Typical behavior "
"is to treat all NaNs as though they were quiet."
msgstr ""
"请注意，Python不会将显式NaN与静默NaN区分开来，并且显式NaN的行为仍未明确。典型"
"的行为是将所有NaN视为静默的。"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/math.rst:506
msgid "Module :mod:`cmath`"
msgstr ":mod:`cmath` 模块"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/library/math.rst:507
msgid "Complex number versions of many of these functions."
msgstr "这里很多函数的复数版本。"
