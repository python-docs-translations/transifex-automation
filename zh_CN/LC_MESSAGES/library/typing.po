# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2023, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# ww song <sww4718168@gmail.com>, 2019
# Kder <kder@live.cn>, 2019
# dannyvi <dannyvis@icloud.com>, 2019
# Trim21 <i@trim21.me>, 2019
# ppcfish <ppcfish@gmail.com>, 2019
# rpish yao <rpishmail@gmail.com>, 2019
# JW H <hjwdhjwd@gmail.com>, 2019
# Siyuan Xu, 2020
# jaystone776 <1732865113@qq.com>, 2021
# Freesand Leo <yuqinju@163.com>, 2021
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-06-02 14:49+0000\n"
"PO-Revision-Date: 2019-09-01 03:30+0000\n"
"Last-Translator: Freesand Leo <yuqinju@163.com>, 2021\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/typing.rst:2
msgid ":mod:`typing` --- Support for type hints"
msgstr ":mod:`typing` --- 类型标注支持"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/typing.rst:9
msgid "**Source code:** :source:`Lib/typing.py`"
msgstr "**源码：** :source:`Lib/typing.py`"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/typing.rst:13
msgid ""
"The Python runtime does not enforce function and variable type annotations. "
"They can be used by third party tools such as type checkers, IDEs, linters, "
"etc."
msgstr " Python 运行时并不强制标注函数和变量类型。类型标注可被用于第三方工具，比如类型检查器、集成开发环境、静态检查器等。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/typing.rst:19
msgid ""
"This module supports type hints as specified by :pep:`484` and :pep:`526`. "
"The most fundamental support consists of the types :data:`Any`, "
":data:`Union`, :data:`Tuple`, :data:`Callable`, :class:`TypeVar`, and "
":class:`Generic`.  For full specification please see :pep:`484`.  For a "
"simplified introduction to type hints see :pep:`483`."
msgstr ""
"此模块支持 :pep:`484` 和 :pep:`526` 指定的类型提示。最基本的支持由 "
":data:`Any`，:data:`Union`，:data:`Tuple`，:data:`Callable`，:class:`TypeVar` 和 "
":class:`Generic` 类型组成。有关完整的规范，请参阅 :pep:`484`。有关类型提示的简单介绍，请参阅 :PEP:`483`。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/typing.rst:26
msgid ""
"The function below takes and returns a string and is annotated as follows::"
msgstr "函数接受并返回一个字符串，注释像下面这样::"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/typing.rst:31
msgid ""
"In the function ``greeting``, the argument ``name`` is expected to be of "
"type :class:`str` and the return type :class:`str`. Subtypes are accepted as"
" arguments."
msgstr ""
"在函数 ``greeting`` 中，参数 ``name`` 预期是 :class:`str` 类型，并且返回 :class:`str` "
"类型。子类型允许作为参数。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/typing.rst:36
msgid "Type aliases"
msgstr "类型别名"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/typing.rst:38
msgid ""
"A type alias is defined by assigning the type to the alias. In this example,"
" ``Vector`` and ``List[float]`` will be treated as interchangeable "
"synonyms::"
msgstr "类型别名通过将类型分配给别名来定义。在这个例子中， ``Vector`` 和 ``List[float]`` 将被视为可互换的同义词::"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/typing.rst:50
msgid ""
"Type aliases are useful for simplifying complex type signatures. For "
"example::"
msgstr "类型别名可用于简化复杂类型签名。例如::"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/typing.rst:68
msgid ""
"Note that ``None`` as a type hint is a special case and is replaced by "
"``type(None)``."
msgstr "请注意，``None`` 作为类型提示是一种特殊情况，并且由 ``type(None)`` 取代。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/typing.rst:74
msgid "NewType"
msgstr "NewType"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/typing.rst:76
msgid "Use the :func:`NewType` helper function to create distinct types::"
msgstr "使用 :func:`NewType` 辅助函数创建不同的类型::"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/typing.rst:83
msgid ""
"The static type checker will treat the new type as if it were a subclass of "
"the original type. This is useful in helping catch logical errors::"
msgstr "静态类型检查器会将新类型视为它是原始类型的子类。这对于帮助捕捉逻辑错误非常有用::"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/typing.rst:95
msgid ""
"You may still perform all ``int`` operations on a variable of type "
"``UserId``, but the result will always be of type ``int``. This lets you "
"pass in a ``UserId`` wherever an ``int`` might be expected, but will prevent"
" you from accidentally creating a ``UserId`` in an invalid way::"
msgstr ""
"您仍然可以对 ``UserId`` 类型的变量执行所有的 ``int`` 支持的操作，但结果将始终为 ``int`` 类型。这可以让你在需要 "
"``int`` 的地方传入 ``UserId``，但会阻止你以无效的方式无意中创建 ``UserId``::"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/typing.rst:103
msgid ""
"Note that these checks are enforced only by the static type checker. At "
"runtime the statement ``Derived = NewType('Derived', Base)`` will make "
"``Derived`` a function that immediately returns whatever parameter you pass "
"it. That means the expression ``Derived(some_value)`` does not create a new "
"class or introduce any overhead beyond that of a regular function call."
msgstr ""
"注意，这些检查只由静态类型检查器强制执行。 在运行时，语句 ``Derived = NewType('Derived', Base)`` 将产生一个 "
"``Derived`` 函数，该函数立即返回你传递给它的任何参数。 这意味着表达式 ``Derived(some_value)`` "
"不会创建一个新的类，也不会引入超出常规函数调用的很多开销。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/typing.rst:109
msgid ""
"More precisely, the expression ``some_value is Derived(some_value)`` is "
"always true at runtime."
msgstr "更确切地说，表达式 ``some_value is Derived(some_value)`` 在运行时总是为真。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/typing.rst:112
msgid ""
"This also means that it is not possible to create a subtype of ``Derived`` "
"since it is an identity function at runtime, not an actual type::"
msgstr "这也意味着无法创建 ``Derived`` 的子类型，因为它是运行时的标识函数，而不是实际的类型::"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/typing.rst:122
msgid ""
"However, it is possible to create a :func:`NewType` based on a 'derived' "
"``NewType``::"
msgstr "然而，我们可以在 \"派生的\" ``NewType`` 的基础上创建一个 :class:`NewType`。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/typing.rst:130
msgid "and typechecking for ``ProUserId`` will work as expected."
msgstr "并且 ``ProUserId`` 的类型检查将按预期工作。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/typing.rst:132
msgid "See :pep:`484` for more details."
msgstr "有关更多详细信息，请参阅 :pep:`484`。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/typing.rst:136
msgid ""
"Recall that the use of a type alias declares two types to be *equivalent* to"
" one another. Doing ``Alias = Original`` will make the static type checker "
"treat ``Alias`` as being *exactly equivalent* to ``Original`` in all cases. "
"This is useful when you want to simplify complex type signatures."
msgstr ""
"回想一下，使用类型别名声明两种类型彼此 *等效* 。``Alias = Original`` 将使静态类型检查对待所有情况下 ``Alias`` "
"*完全等同于* ``Original``。当您想简化复杂类型签名时，这很有用。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/typing.rst:141
msgid ""
"In contrast, ``NewType`` declares one type to be a *subtype* of another. "
"Doing ``Derived = NewType('Derived', Original)`` will make the static type "
"checker treat ``Derived`` as a *subclass* of ``Original``, which means a "
"value of type ``Original`` cannot be used in places where a value of type "
"``Derived`` is expected. This is useful when you want to prevent logic "
"errors with minimal runtime cost."
msgstr ""
"相反，``NewType`` 声明一种类型是另一种类型的子类型。``Derived = NewType('Derived', Original)`` "
"将使静态类型检查器将 ``Derived`` 当作 ``Original`` 的 *子类* ，这意味着 ``Original`` 类型的值不能用于 "
"``Derived`` 类型的值需要的地方。当您想以最小的运行时间成本防止逻辑错误时，这非常有用。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/typing.rst:151
msgid "Callable"
msgstr "Callable"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/typing.rst:153
msgid ""
"Frameworks expecting callback functions of specific signatures might be type"
" hinted using ``Callable[[Arg1Type, Arg2Type], ReturnType]``."
msgstr ""
"期望特定签名的回调函数的框架可以将类型标注为 ``Callable[[Arg1Type, Arg2Type], ReturnType]``。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/typing.rst:156
msgid "For example::"
msgstr "例如 ::"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/typing.rst:167
msgid ""
"It is possible to declare the return type of a callable without specifying "
"the call signature by substituting a literal ellipsis for the list of "
"arguments in the type hint: ``Callable[..., ReturnType]``."
msgstr ""
"通过用文字省略号替换类型提示中的参数列表： ``Callable[...，ReturnType]``，可以声明可调用的返回类型，而无需指定调用签名。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/typing.rst:174
msgid "Generics"
msgstr "泛型(Generic)"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/typing.rst:176
msgid ""
"Since type information about objects kept in containers cannot be statically"
" inferred in a generic way, abstract base classes have been extended to "
"support subscription to denote expected types for container elements."
msgstr "由于无法以通用方式静态推断有关保存在容器中的对象的类型信息，因此抽象基类已扩展为支持订阅以表示容器元素的预期类型。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/typing.rst:187
msgid ""
"Generics can be parameterized by using a new factory available in typing "
"called :class:`TypeVar`."
msgstr "泛型可以通过使用typing模块中名为 :class:`TypeVar` 的新工厂进行参数化。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/typing.rst:201
msgid "User-defined generic types"
msgstr "用户定义的泛型类型"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/typing.rst:203
msgid "A user-defined class can be defined as a generic class."
msgstr "用户定义的类可以定义为泛型类。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/typing.rst:229
msgid ""
"``Generic[T]`` as a base class defines that the class ``LoggedVar`` takes a "
"single type parameter ``T`` . This also makes ``T`` valid as a type within "
"the class body."
msgstr ""
"``Generic[T]`` 作为基类定义了类 ``LoggedVar`` 采用单个类型参数 ``T``。这也使得 ``T`` "
"作为类体内的一个类型有效。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/typing.rst:233
msgid ""
"The :class:`Generic` base class defines :meth:`__class_getitem__` so that "
"``LoggedVar[t]`` is valid as a type::"
msgstr ""
":class:`Generic` 基类定义了 :meth:`__class_getitem__` ，使得 ``LoggedVar[t]`` "
"作为类型有效："

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/typing.rst:242
msgid ""
"A generic type can have any number of type variables, and type variables may"
" be constrained::"
msgstr "泛型类型可以有任意数量的类型变量，并且类型变量可能会受到限制::"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/typing.rst:254
msgid ""
"Each type variable argument to :class:`Generic` must be distinct. This is "
"thus invalid::"
msgstr ":class:`Generic` 每个参数的类型变量必须是不同的。这是无效的::"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/typing.rst:265
msgid "You can use multiple inheritance with :class:`Generic`::"
msgstr "您可以对 :class:`Generic` 使用多重继承::"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/typing.rst:274
msgid ""
"When inheriting from generic classes, some type variables could be fixed::"
msgstr "从泛型类继承时，某些类型变量可能是固定的::"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/typing.rst:283
msgid "In this case ``MyDict`` has a single parameter, ``T``."
msgstr "在这种情况下，``MyDict`` 只有一个参数，``T``。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/typing.rst:285
msgid ""
"Using a generic class without specifying type parameters assumes :data:`Any`"
" for each position. In the following example, ``MyIterable`` is not generic "
"but implicitly inherits from ``Iterable[Any]``::"
msgstr ""
"在不指定类型参数的情况下使用泛型类别会为每个位置假设 :data:`Any`。在下面的例子中，``MyIterable`` 不是泛型，但是隐式继承自 "
"``Iterable[Any]``::"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/typing.rst:293
msgid "User defined generic type aliases are also supported. Examples::"
msgstr "用户定义的通用类型别名也受支持。例子::"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/typing.rst:309
msgid ":class:`Generic` no longer has a custom metaclass."
msgstr ":class:`Generic` 不再拥有一个自定义的元类。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/typing.rst:312
msgid ""
"A user-defined generic class can have ABCs as base classes without a "
"metaclass conflict. Generic metaclasses are not supported. The outcome of "
"parameterizing generics is cached, and most types in the typing module are "
"hashable and comparable for equality."
msgstr ""
"一个用户定义的泛型类能够使用抽象基本类作为基类，而不会发生元类冲突。泛型元类不再被支持。参数化泛型的结果会被缓存，并且在 typing "
"模块中的大部分类型是可哈希且可比较相等性的。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/typing.rst:319
msgid "The :data:`Any` type"
msgstr ":data:`Any` 类型"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/typing.rst:321
msgid ""
"A special kind of type is :data:`Any`. A static type checker will treat "
"every type as being compatible with :data:`Any` and :data:`Any` as being "
"compatible with every type."
msgstr ""
":data:`Any` 是一种特殊的类型。静态类型检查器将所有类型视为与 :data:`Any` 兼容，反之亦然， :data:`Any` "
"也与所有类型相兼容。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/typing.rst:325
msgid ""
"This means that it is possible to perform any operation or method call on a "
"value of type on :data:`Any` and assign it to any variable::"
msgstr "这意味着可对类型为 :data:`Any` 的值执行任何操作或方法调用，并将其赋值给任何变量::"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/typing.rst:343
msgid ""
"Notice that no typechecking is performed when assigning a value of type "
":data:`Any` to a more precise type. For example, the static type checker did"
" not report an error when assigning ``a`` to ``s`` even though ``s`` was "
"declared to be of type :class:`str` and receives an :class:`int` value at "
"runtime!"
msgstr ""
"需要注意的是，将 :data:`Any` 类型的值赋值给另一个更具体的类型时，Python不会执行类型检查。例如，当把 ``a`` 赋值给 ``s`` "
"时，即使 ``s`` 被声明为 :class:`str` 类型，在运行时接收到的是 :class:`int` 值，静态类型检查器也不会报错。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/typing.rst:349
msgid ""
"Furthermore, all functions without a return type or parameter types will "
"implicitly default to using :data:`Any`::"
msgstr "此外，所有返回值无类型或形参无类型的函数将隐式地默认使用 :data:`Any` 类型::"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/typing.rst:362
msgid ""
"This behavior allows :data:`Any` to be used as an *escape hatch* when you "
"need to mix dynamically and statically typed code."
msgstr "当需要混用动态类型和静态类型的代码时，上述行为可以让 :data:`Any` 被用作 *应急出口* 。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/typing.rst:365
msgid ""
"Contrast the behavior of :data:`Any` with the behavior of :class:`object`. "
"Similar to :data:`Any`, every type is a subtype of :class:`object`. However,"
" unlike :data:`Any`, the reverse is not true: :class:`object` is *not* a "
"subtype of every other type."
msgstr ""
":data:`Any` 和 :class:`object` 的行为对比。与 :data:`Any` 相似，所有的类型都是 :class:`object`"
" 的子类型。然而不同于 :data:`Any`，反之并不成立： :class:`object` *不是* 其他所有类型的子类型。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/typing.rst:370
msgid ""
"That means when the type of a value is :class:`object`, a type checker will "
"reject almost all operations on it, and assigning it to a variable (or using"
" it as a return value) of a more specialized type is a type error. For "
"example::"
msgstr ""
"这意味着当一个值的类型是 :class:`object` "
"的时候，类型检查器会拒绝对它的几乎所有的操作。把它赋值给一个指定了类型的变量（或者当作返回值）是一个类型错误。比如说："

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/typing.rst:392
msgid ""
"Use :class:`object` to indicate that a value could be any type in a typesafe"
" manner. Use :data:`Any` to indicate that a value is dynamically typed."
msgstr "使用 :class:`object` 示意一个值可以类型安全地兼容任何类型。使用 :data:`Any` 示意一个值地类型是动态定义的。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/typing.rst:396
msgid "Classes, functions, and decorators"
msgstr "类,函数和修饰器."

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/typing.rst:398
msgid "The module defines the following classes, functions and decorators:"
msgstr "这个模块定义了如下的类,模块和修饰器."

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/typing.rst:402
msgid "Type variable."
msgstr "类型变量"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/typing.rst:404
#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/typing.rst:833
msgid "Usage::"
msgstr "用法::"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/typing.rst:409
msgid ""
"Type variables exist primarily for the benefit of static type checkers.  "
"They serve as the parameters for generic types as well as for generic "
"function definitions.  See class Generic for more information on generic "
"types.  Generic functions work as follows::"
msgstr ""

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/typing.rst:422
msgid ""
"The latter example's signature is essentially the overloading of ``(str, "
"str) -> str`` and ``(bytes, bytes) -> bytes``.  Also note that if the "
"arguments are instances of some subclass of :class:`str`, the return type is"
" still plain :class:`str`."
msgstr ""
"本质上，后例的签名重载了 ``(str, str) -> str`` 与 ``(bytes, bytes) -> bytes``。注意，参数是 "
":class:`str` 子类的实例时，返回类型仍是纯 :class:`str`。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/typing.rst:427
msgid ""
"At runtime, ``isinstance(x, T)`` will raise :exc:`TypeError`.  In general, "
":func:`isinstance` and :func:`issubclass` should not be used with types."
msgstr ""
"``isinstance(x, T)`` 会在运行时抛出 :exc:`TypeError` 异常。一般地说， :func:`isinstance` 和 "
":func:`issubclass` 不应该和类型一起使用。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/typing.rst:430
msgid ""
"Type variables may be marked covariant or contravariant by passing "
"``covariant=True`` or ``contravariant=True``.  See :pep:`484` for more "
"details.  By default type variables are invariant.  Alternatively, a type "
"variable may specify an upper bound using ``bound=<type>``. This means that "
"an actual type substituted (explicitly or implicitly) for the type variable "
"must be a subclass of the boundary type, see :pep:`484`."
msgstr ""
"通过 ``covariant=True`` 或 ``contravariant=True`` 可以把类型变量标记为协变量或逆变量。详见 "
":pep:`484`。默认情况下，类型变量是不变量。类型变量还可以用 ``bound=<type>`` "
"指定上限。这里的意思是，（显式或隐式地）取代类型变量的实际类型必须是限定类型的子类，详见 :pep:`484`。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/typing.rst:440
msgid "Abstract base class for generic types."
msgstr "用于泛型类型的抽象基类。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/typing.rst:442
msgid ""
"A generic type is typically declared by inheriting from an instantiation of "
"this class with one or more type variables. For example, a generic mapping "
"type might be defined as::"
msgstr "泛型类型一般通过继承含一个或多个类型变量的类实例进行声明。例如，泛型映射类型定义如下："

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/typing.rst:451
msgid "This class can then be used as follows::"
msgstr "这个类之后可以被这样用:"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/typing.rst:464
msgid ""
"A variable annotated with ``C`` may accept a value of type ``C``. In "
"contrast, a variable annotated with ``Type[C]`` may accept values that are "
"classes themselves -- specifically, it will accept the *class object* of "
"``C``. For example::"
msgstr ""
"一个注解为 ``C`` 的变量可以接受一个类型为 ``C`` 的值。相对地，一个注解为 ``Type[C]`` 的变量可以接受本身为类的值 —— "
"更精确地说它接受 ``C`` 的 *类对象* ，例如："

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/typing.rst:473
msgid "Note that ``Type[C]`` is covariant::"
msgstr "注意 ``Type[C]`` 是协变的："

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/typing.rst:485
msgid ""
"The fact that ``Type[C]`` is covariant implies that all subclasses of ``C`` "
"should implement the same constructor signature and class method signatures "
"as ``C``. The type checker should flag violations of this, but should also "
"allow constructor calls in subclasses that match the constructor calls in "
"the indicated base class. How the type checker is required to handle this "
"particular case may change in future revisions of :pep:`484`."
msgstr ""
" ``Type[C]`` 是协变的这一事实暗示了任何 ``C`` 的子类应当实现与 ``C`` "
"相同的构造器签名和类方法签名。类型检查器应当标记违反的情况，但应当也允许子类中调用构造器符合指示的基类。类型检查器被要求如何处理这种情况可能会在 "
":pep:`484` 将来的版本中改变。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/typing.rst:493
msgid ""
"The only legal parameters for :class:`Type` are classes, :data:`Any`, "
":ref:`type variables <generics>`, and unions of any of these types. For "
"example::"
msgstr ""
" :class:`Type` 合法的参数仅有类、 :data:`Any` 、:ref:`类型变量<generics>` 以及上述类型的联合类型。例如："

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/typing.rst:499
msgid ""
"``Type[Any]`` is equivalent to ``Type`` which in turn is equivalent to "
"``type``, which is the root of Python's metaclass hierarchy."
msgstr " ``Type[Any]`` 等价于 ``Type``，因此继而等价于 ``type``，它是 Python 的元类层级的根部。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/typing.rst:506
msgid "A generic version of :class:`collections.abc.Iterable`."
msgstr ":class:`collections.abc.Iterable` 的泛型版本。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/typing.rst:510
msgid "A generic version of :class:`collections.abc.Iterator`."
msgstr ":class:`collections.abc.Iterator` 的泛型版本。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/typing.rst:514
msgid "A generic version of :class:`collections.abc.Reversible`."
msgstr ":class:`collections.abc.Reversible` 的泛型版本。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/typing.rst:518
msgid "An ABC with one abstract method ``__int__``."
msgstr "含抽象方法 ``__int__`` 的抽象基类。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/typing.rst:522
msgid "An ABC with one abstract method ``__float__``."
msgstr "含抽象方法 ``__float__`` 的抽象基类。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/typing.rst:526
msgid "An ABC with one abstract method ``__complex__``."
msgstr "含抽象方法 ``__complex__`` 的抽象基类。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/typing.rst:530
msgid "An ABC with one abstract method ``__bytes__``."
msgstr "含抽象方法 ``__bytes__`` 的抽象基类（ABC）"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/typing.rst:534
msgid ""
"An ABC with one abstract method ``__abs__`` that is covariant in its return "
"type."
msgstr "含抽象方法 ``__abs__`` 的抽象基类（ABC）是其返回类型里的协变量。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/typing.rst:539
msgid ""
"An ABC with one abstract method ``__round__`` that is covariant in its "
"return type."
msgstr "含抽象方法 ``__round__`` 的抽象基类，是其返回类型的协变量。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/typing.rst:544
msgid "A generic version of :class:`collections.abc.Container`."
msgstr ":class:`collections.abc.Container` 的泛型版本。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/typing.rst:548
msgid "An alias to :class:`collections.abc.Hashable`"
msgstr ":class:`collections.abc.Hashable` 的别名。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/typing.rst:552
msgid "An alias to :class:`collections.abc.Sized`"
msgstr ":class:`collections.abc.Sized` 的别名。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/typing.rst:556
msgid "A generic version of :class:`collections.abc.Collection`"
msgstr ":class:`collections.abc.Collection` 的泛型版本。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/typing.rst:562
msgid "A generic version of :class:`collections.abc.Set`."
msgstr ":class:`collections.abc.Set`  的泛型版本。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/typing.rst:566
msgid "A generic version of :class:`collections.abc.MutableSet`."
msgstr ":class:`collections.abc.MutableSet` 的泛型版本。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/typing.rst:570
msgid ""
"A generic version of :class:`collections.abc.Mapping`. This type can be used"
" as follows::"
msgstr ":class:`collections.abc.Mapping` 的泛型版本。这个类型可以如下使用::"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/typing.rst:578
msgid "A generic version of :class:`collections.abc.MutableMapping`."
msgstr ":class:`collections.abc.MutableMapping` 的泛型版本。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/typing.rst:582
msgid "A generic version of :class:`collections.abc.Sequence`."
msgstr ":class:`collections.abc.Sequence` 的泛型版本。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/typing.rst:586
msgid "A generic version of :class:`collections.abc.MutableSequence`."
msgstr ":class:`collections.abc.MutableSequence` 的泛型版本。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/typing.rst:590
msgid "A generic version of :class:`collections.abc.ByteString`."
msgstr ":class:`collections.abc.ByteString` 的泛型版本。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/typing.rst:592
msgid ""
"This type represents the types :class:`bytes`, :class:`bytearray`, and "
":class:`memoryview`."
msgstr ""

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/typing.rst:595
msgid ""
"As a shorthand for this type, :class:`bytes` can be used to annotate "
"arguments of any of the types mentioned above."
msgstr "作为该类型的简称，:class:`bytes` 可用于标注上述任意类型的参数。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/typing.rst:600
msgid "A generic version of :class:`collections.deque`."
msgstr ":class:`collections.deque` 的泛型版本。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/typing.rst:607
msgid ""
"Generic version of :class:`list`. Useful for annotating return types. To "
"annotate arguments it is preferred to use an abstract collection type such "
"as :class:`Sequence` or :class:`Iterable`."
msgstr ""
":class:`list` 的泛型版本。适用于注解返回类型。注解参数时，最好使用 :class:`Sequence` 或 "
":class:`Iterable` 等抽象容器类型。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/typing.rst:612
msgid "This type may be used as follows::"
msgstr "这个类型可以这样用:"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/typing.rst:624
msgid ""
"A generic version of :class:`builtins.set <set>`. Useful for annotating "
"return types. To annotate arguments it is preferred to use an abstract "
"collection type such as :class:`AbstractSet`."
msgstr ""
":class:`builtins.set <set>` 的泛型版本。适用于注解返回类型。注解参数时，最好使用 :class:`AbstractSet` "
"等抽象容器类型。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/typing.rst:630
msgid "A generic version of :class:`builtins.frozenset <frozenset>`."
msgstr ":class:`builtins.frozenset <frozenset>` 的泛型版本。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/typing.rst:634
msgid "A generic version of :class:`collections.abc.MappingView`."
msgstr ":class:`collections.abc.MappingView` 的泛型版本。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/typing.rst:638
msgid "A generic version of :class:`collections.abc.KeysView`."
msgstr ":class:`collections.abc.KeysView` 的泛型版本。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/typing.rst:642
msgid "A generic version of :class:`collections.abc.ItemsView`."
msgstr ":class:`collections.abc.ItemsView` 的泛型版本。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/typing.rst:646
msgid "A generic version of :class:`collections.abc.ValuesView`."
msgstr ":class:`collections.abc.ValuesView` 的泛型版本。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/typing.rst:650
msgid "A generic version of :class:`collections.abc.Awaitable`."
msgstr ":class:`collections.abc.Awaitable` 的泛型版本。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/typing.rst:656
msgid ""
"A generic version of :class:`collections.abc.Coroutine`. The variance and "
"order of type variables correspond to those of :class:`Generator`, for "
"example::"
msgstr ""
":class:`collections.abc.Coroutine` 的泛型版本。类型变量的的差异和顺序与 :class:`Generator` "
"的内容相对应，例如："

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/typing.rst:671
msgid "A generic version of :class:`collections.abc.AsyncIterable`."
msgstr ":class:`collections.abc.AsyncIterable` 的泛型版本。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/typing.rst:677
msgid "A generic version of :class:`collections.abc.AsyncIterator`."
msgstr ":class:`collections.abc.AsyncIterator` 的泛型版本。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/typing.rst:683
msgid "A generic version of :class:`contextlib.AbstractContextManager`."
msgstr ":class:`contextlib.AbstractContextManager` 的泛型版本。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/typing.rst:690
msgid "A generic version of :class:`contextlib.AbstractAsyncContextManager`."
msgstr ":class:`contextlib.AbstractAsyncContextManager` 的泛型版本。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/typing.rst:697
msgid ""
"A generic version of :class:`dict`. Useful for annotating return types. To "
"annotate arguments it is preferred to use an abstract collection type such "
"as :class:`Mapping`."
msgstr ""
":class:`dict` 的泛型版本。对标注返回类型比较有用。如果要标注参数的话，使用如 :class:`Mapping` "
"的抽象容器类型是更好的选择。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/typing.rst:701
msgid "This type can be used as follows::"
msgstr "这个类型可以这样使用::"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/typing.rst:708
msgid "A generic version of :class:`collections.defaultdict`."
msgstr ":class:`collections.defaultdict` 的泛型版本。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/typing.rst:714
msgid "A generic version of :class:`collections.OrderedDict`."
msgstr ":class:`collections.OrderedDict` 的泛型版本。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/typing.rst:720
msgid "A generic version of :class:`collections.Counter`."
msgstr ":class:`collections.Counter` 的泛型版本。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/typing.rst:727
msgid "A generic version of :class:`collections.ChainMap`."
msgstr ":class:`collections.ChainMap` 的泛型版本。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/typing.rst:734
msgid ""
"A generator can be annotated by the generic type ``Generator[YieldType, "
"SendType, ReturnType]``. For example::"
msgstr "生成器可以由泛型类型 ``Generator[YieldType, SendType, ReturnType]`` 注解。例如："

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/typing.rst:743
msgid ""
"Note that unlike many other generics in the typing module, the ``SendType`` "
"of :class:`Generator` behaves contravariantly, not covariantly or "
"invariantly."
msgstr ""
"注意，与 typing 模块里的其他泛型不同， :class:`Generator` 的``SendType`` 的操作是逆变的， 不是协变，也是不变。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/typing.rst:747
msgid ""
"If your generator will only yield values, set the ``SendType`` and "
"``ReturnType`` to ``None``::"
msgstr "如果生成器只生成值，可将 ``SendType`` 与 ``ReturnType`` 设为 ``None``："

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/typing.rst:755
msgid ""
"Alternatively, annotate your generator as having a return type of either "
"``Iterable[YieldType]`` or ``Iterator[YieldType]``::"
msgstr "另外，把生成器注解为返回类型"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/typing.rst:765
msgid ""
"An async generator can be annotated by the generic type "
"``AsyncGenerator[YieldType, SendType]``. For example::"
msgstr "异步生成器可由泛型类型 ``AsyncGenerator[YieldType, SendType]`` 注解。例如："

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/typing.rst:774
msgid ""
"Unlike normal generators, async generators cannot return a value, so there "
"is no ``ReturnType`` type parameter. As with :class:`Generator`, the "
"``SendType`` behaves contravariantly."
msgstr ""
"与常规生成器不同，异步生成器不能返回值，因此没有 ``ReturnType`` 类型参数。 与 :class:`Generator` "
"类似，``SendType`` 也属于逆变行为。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/typing.rst:778
msgid ""
"If your generator will only yield values, set the ``SendType`` to ``None``::"
msgstr "如果生成器只产生值，可将 ``SendType`` 设置为 ``None``："

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/typing.rst:786
msgid ""
"Alternatively, annotate your generator as having a return type of either "
"``AsyncIterable[YieldType]`` or ``AsyncIterator[YieldType]``::"
msgstr ""
"此外，可用 ``AsyncIterable[YieldType]`` 或 ``AsyncIterator[YieldType]`` 注解生成器的类型："

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/typing.rst:798
msgid ""
"``Text`` is an alias for ``str``. It is provided to supply a forward "
"compatible path for Python 2 code: in Python 2, ``Text`` is an alias for "
"``unicode``."
msgstr ""
"``Text`` 是 ``str`` 的别名。提供了对 Python 2 代码的向下兼容：Python 2 中，``Text`` "
"是``unicode`` 的别名。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/typing.rst:802
msgid ""
"Use ``Text`` to indicate that a value must contain a unicode string in a "
"manner that is compatible with both Python 2 and Python 3::"
msgstr "用 "

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/typing.rst:814
msgid ""
"Generic type ``IO[AnyStr]`` and its subclasses ``TextIO(IO[str])`` and "
"``BinaryIO(IO[bytes])`` represent the types of I/O streams such as returned "
"by :func:`open`."
msgstr ""
"泛型类型 ``IO[AnyStr]`` 及其子类 ``TextIO(IO[str])`` 与 ``BinaryIO(IO[bytes])`` 表示 "
"I/O 流的类型，例如 :func:`open` 所返回的对象。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/typing.rst:822
msgid ""
"These type aliases correspond to the return types from :func:`re.compile` "
"and :func:`re.match`.  These types (and the corresponding functions) are "
"generic in ``AnyStr`` and can be made specific by writing ``Pattern[str]``, "
"``Pattern[bytes]``, ``Match[str]``, or ``Match[bytes]``."
msgstr ""
"这些类型对应的是从 :func:`re.compile` 和 :func:`re.match` 返回的类型。 这些类型（及相应的函数）是 "
"``AnyStr`` 中的泛型并可通过编写 ``Pattern[str]``, ``Pattern[bytes]``, ``Match[str]`` 或"
" ``Match[bytes]`` 来具体指定。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/typing.rst:831
msgid "Typed version of :func:`collections.namedtuple`."
msgstr ":func:`collections.namedtuple` 的类型版本。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/typing.rst:839
msgid "This is equivalent to::"
msgstr "这相当于::"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/typing.rst:843
msgid ""
"To give a field a default value, you can assign to it in the class body::"
msgstr "为字段提供默认值，要在类体内赋值："

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/typing.rst:852
msgid ""
"Fields with a default value must come after any fields without a default."
msgstr "带默认值的字段必须在不带默认值的字段后面。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/typing.rst:854
msgid ""
"The resulting class has two extra attributes: ``_field_types``, giving a "
"dict mapping field names to types, and ``_field_defaults``, a dict mapping "
"field names to default values.  (The field names are in the ``_fields`` "
"attribute, which is part of the namedtuple API.)"
msgstr ""

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/typing.rst:859
msgid "``NamedTuple`` subclasses can also have docstrings and methods::"
msgstr "``NamedTuple`` 子类也支持文档字符串与方法："

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/typing.rst:869
msgid "Backward-compatible usage::"
msgstr "反向兼容用法："

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/typing.rst:873
msgid "Added support for :pep:`526` variable annotation syntax."
msgstr "添加了对 :pep:`526` 中变量注解句法的支持。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/typing.rst:876
msgid "Added support for default values, methods, and docstrings."
msgstr "添加了对默认值、方法、文档字符串的支持。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/typing.rst:881
msgid ""
"A class used for internal typing representation of string forward "
"references. For example, ``List[\"SomeClass\"]`` is implicitly transformed "
"into ``List[ForwardRef(\"SomeClass\")]``.  This class should not be "
"instantiated by a user, but may be used by introspection tools."
msgstr ""
"用于字符串前向引用的内部类型表示的类。 例如，``List[\"SomeClass\"]`` 会被隐式转换为 "
"``List[ForwardRef(\"SomeClass\")]``。 这个类不应由用户来实例化，但可以由内省工具使用。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/typing.rst:888
msgid ""
"A helper function to indicate a distinct types to a typechecker, see "
":ref:`distinct`. At runtime it returns a function that returns its argument."
" Usage::"
msgstr ""

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/typing.rst:899
msgid "Cast a value to a type."
msgstr "把值强制转换为类型。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/typing.rst:901
msgid ""
"This returns the value unchanged.  To the type checker this signals that the"
" return value has the designated type, but at runtime we intentionally don't"
" check anything (we want this to be as fast as possible)."
msgstr "不变更返回值。对类型检查器来说，这代表了返回值具有指定的类型，但在运行时，故意不做任何检查（目的是让该检查速度尽量快）。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/typing.rst:908
msgid ""
"Return a dictionary containing type hints for a function, method, module or "
"class object."
msgstr "返回一个字典，字典内含有函数、方法、模块或类对象的类型提示。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/typing.rst:911
msgid ""
"This is often the same as ``obj.__annotations__``. In addition, forward "
"references encoded as string literals are handled by evaluating them in "
"``globals`` and ``locals`` namespaces. If necessary, ``Optional[t]`` is "
"added for function and method annotations if a default value equal to "
"``None`` is set. For a class ``C``, return a dictionary constructed by "
"merging all the ``__annotations__`` along ``C.__mro__`` in reverse order."
msgstr ""
"一般情况下，与 ``obj.__annotations__`` 相同。此外，可通过在 ``globals`` 与 ``locals`` "
"命名空间里进行评估，以此来处理编码为字符串字面量的前向引用。如有需要，在默认值设置为 ``None``时，可为函数或方法注解添加 "
"``Optional[t]``。对于类 ``C``，则返回一个由所有 ``__annotations__`` 与 ``C.__mro__`` "
"逆序合并而成的字典。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/typing.rst:921
msgid ""
"The ``@overload`` decorator allows describing functions and methods that "
"support multiple different combinations of argument types. A series of "
"``@overload``-decorated definitions must be followed by exactly one "
"non-``@overload``-decorated definition (for the same function/method). The "
"``@overload``-decorated definitions are for the benefit of the type checker "
"only, since they will be overwritten by the non-``@overload``-decorated "
"definition, while the latter is used at runtime but should be ignored by a "
"type checker.  At runtime, calling a ``@overload``-decorated function "
"directly will raise :exc:`NotImplementedError`. An example of overload that "
"gives a more precise type than can be expressed using a union or a type "
"variable::"
msgstr ""
"``@overload`` 装饰器可以修饰支持多个不同参数类型组合的函数或方法。``@overload`` - 装饰定义的系列必须紧跟一个非 "
"``@overload``-装饰定义（用于同一个函数/方法）。``@overload``-装饰定义仅是为了协助类型检查器， 因为该装饰器会被非 "
"``@overload``-装饰定义覆盖，后者用于运行时，而且会被类型检查器忽略。在运行时直接调用 ``@overload`` 装饰的函数会触发 "
":exc:`NotImplementedError`。下面的重载示例给出了比联合类型或类型变量更精准的类型："

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/typing.rst:945
msgid "See :pep:`484` for details and comparison with other typing semantics."
msgstr "详见 :pep:`484`，与其他类型语义进行对比。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/typing.rst:949
msgid "Decorator to indicate that annotations are not type hints."
msgstr "用于指明标注不是类型提示的装饰器。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/typing.rst:951
msgid ""
"This works as class or function :term:`decorator`.  With a class, it applies"
" recursively to all methods defined in that class (but not to methods "
"defined in its superclasses or subclasses)."
msgstr ""
"此 :term:`decorator` "
"装饰器生效于类或函数上。如果作用于类上的话，它会递归地作用于这个类的所定义的所有方法上（但是对于超类或子类所定义的方法不会生效）。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/typing.rst:955
msgid "This mutates the function(s) in place."
msgstr "此方法会就地地修改函数。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/typing.rst:959
msgid "Decorator to give another decorator the :func:`no_type_check` effect."
msgstr "使其它装饰器起到 :func:`no_type_check` 效果的装饰器。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/typing.rst:961
msgid ""
"This wraps the decorator with something that wraps the decorated function in"
" :func:`no_type_check`."
msgstr "本装饰器用 :func:`no_type_check` 里的装饰函数打包其他装饰器。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/typing.rst:966
msgid "Decorator to mark a class or function to be unavailable at runtime."
msgstr "标记一个类或函数在运行时内不可用的装饰器。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/typing.rst:968
msgid ""
"This decorator is itself not available at runtime. It is mainly intended to "
"mark classes that are defined in type stub files if an implementation "
"returns an instance of a private class::"
msgstr "在运行时，该装饰器本身不可用。实现返回了私有类实例时，它主要是用于标记在类型存根文件中定义的类。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/typing.rst:979
msgid ""
"Note that returning instances of private classes is not recommended. It is "
"usually preferable to make such classes public."
msgstr "注意，不建议返回私有类的实例，最好将这些类设为公共类。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/typing.rst:984
msgid "Special type indicating an unconstrained type."
msgstr "特殊类型，表明类型没有任何限制。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/typing.rst:986
msgid "Every type is compatible with :data:`Any`."
msgstr "每一个类型都对 :data:`Any` 兼容。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/typing.rst:987
msgid ":data:`Any` is compatible with every type."
msgstr ":data:`Any` 对每一个类型都兼容。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/typing.rst:991
msgid "Special type indicating that a function never returns. For example::"
msgstr "标记一个函数没有返回值的特殊类型。比如说::"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/typing.rst:1004
msgid "Union type; ``Union[X, Y]`` means either X or Y."
msgstr "联合类型； ``Union[X, Y]`` 意味着：要不是 X，要不是 Y。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/typing.rst:1006
msgid "To define a union, use e.g. ``Union[int, str]``.  Details:"
msgstr "使用形如 ``Union[int, str]`` 的形式来定义一个联合类型。细节如下:"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/typing.rst:1008
msgid "The arguments must be types and there must be at least one."
msgstr "参数必须是类型，而且必须至少有一个参数。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/typing.rst:1010
msgid "Unions of unions are flattened, e.g.::"
msgstr "联合类型的联合类型会被展开打平，比如::"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/typing.rst:1014
msgid "Unions of a single argument vanish, e.g.::"
msgstr "仅有一个参数的联合类型会坍缩成参数自身，比如::"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/typing.rst:1018
msgid "Redundant arguments are skipped, e.g.::"
msgstr "多余的参数会被跳过，比如::"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/typing.rst:1022
msgid "When comparing unions, the argument order is ignored, e.g.::"
msgstr "在比较联合类型的时候，参数顺序会被忽略，比如::"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/typing.rst:1026
msgid "You cannot subclass or instantiate a union."
msgstr "你不能继承或者实例化一个联合类型。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/typing.rst:1028
msgid "You cannot write ``Union[X][Y]``."
msgstr "你不能写成 ``Union[X][Y]`` 。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/typing.rst:1030
msgid "You can use ``Optional[X]`` as a shorthand for ``Union[X, None]``."
msgstr "你可以使用 ``Optional[X]`` 作为 ``Union[X, None]`` 的缩写。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/typing.rst:1032
msgid "Don't remove explicit subclasses from unions at runtime."
msgstr "不要在运行时内从联合类型中移除显式说明的子类。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/typing.rst:1037
msgid "Optional type."
msgstr "可选类型。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/typing.rst:1039
msgid "``Optional[X]`` is equivalent to ``Union[X, None]``."
msgstr " ``Optional[X]`` 等价于 ``Union[X, None]`` 。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/typing.rst:1041
msgid ""
"Note that this is not the same concept as an optional argument, which is one"
" that has a default.  An optional argument with a default does not require "
"the ``Optional`` qualifier on its type annotation just because it is "
"optional. For example::"
msgstr ""
"请注意，这与可选参数并非相同的概念。可选参数是一个具有默认值的参数。可选参数的类型注解并不因为它是可选的就需要 ``Optional`` 限定符。例如："

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/typing.rst:1049
msgid ""
"On the other hand, if an explicit value of ``None`` is allowed, the use of "
"``Optional`` is appropriate, whether the argument is optional or not. For "
"example::"
msgstr "另一方面，如果允许显式地传递值 ``None`` ， 使用 ``Optional`` 也是正当的，无论该参数是否是可选的。例如："

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/typing.rst:1058
msgid ""
"Tuple type; ``Tuple[X, Y]`` is the type of a tuple of two items with the "
"first item of type X and the second of type Y. The type of the empty tuple "
"can be written as ``Tuple[()]``."
msgstr ""
"元组类型； ``Tuple[X, Y]`` 标注了一个二元组类型，其第一个元素的类型为 X 且第二个元素的类型为 Y。空元组的类型可写作 "
"``Tuple[()]`` 。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/typing.rst:1062
msgid ""
"Example: ``Tuple[T1, T2]`` is a tuple of two elements corresponding to type "
"variables T1 and T2.  ``Tuple[int, float, str]`` is a tuple of an int, a "
"float and a string."
msgstr ""
"举例： ``Tuple[T1, T2]`` 是一个二元组，类型分别为 T1 和 T2。 ``Tuple[int, float, str]`` "
"是一个由整数、浮点数和字符串组成的三元组。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/typing.rst:1066
msgid ""
"To specify a variable-length tuple of homogeneous type, use literal "
"ellipsis, e.g. ``Tuple[int, ...]``. A plain :data:`Tuple` is equivalent to "
"``Tuple[Any, ...]``, and in turn to :class:`tuple`."
msgstr ""
"为表达一个同类型元素的变长元组，使用省略号字面量，如 ``Tuple[int, ...]`` 。单独的一个 :data:`Tuple` 等价于 "
"``Tuple[Any, ...]``，进而等价于 :class:`tuple` 。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/typing.rst:1072
msgid "Callable type; ``Callable[[int], str]`` is a function of (int) -> str."
msgstr "可调用类型； ``Callable[[int], str]`` 是一个函数，接受一个 int 参数，返回一个 str 。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/typing.rst:1074
msgid ""
"The subscription syntax must always be used with exactly two values: the "
"argument list and the return type.  The argument list must be a list of "
"types or an ellipsis; the return type must be a single type."
msgstr "下标值的语法必须恰为两个值：参数列表和返回类型。参数列表必须是一个类型和省略号组成的列表；返回值必须是单一一个类型。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/typing.rst:1079
msgid ""
"There is no syntax to indicate optional or keyword arguments; such function "
"types are rarely used as callback types. ``Callable[..., ReturnType]`` "
"(literal ellipsis) can be used to type hint a callable taking any number of "
"arguments and returning ``ReturnType``.  A plain :data:`Callable` is "
"equivalent to ``Callable[..., Any]``, and in turn to "
":class:`collections.abc.Callable`."
msgstr ""
"不存在语法来表示可选的或关键词参数，这类函数类型罕见用于回调函数。 ``Callable[..., ReturnType]`` "
"（使用字面省略号）能被用于提示一个可调用对象，接受任意数量的参数并且返回 ``ReturnType``。单独的 :data:`Callable` 等价于"
" ``Callable[..., Any]`` ，并且进而等价于 :class:`collections.abc.Callable` 。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/typing.rst:1089
msgid "Special type construct to mark class variables."
msgstr "特殊的类型构造器，用以标记类变量。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/typing.rst:1091
msgid ""
"As introduced in :pep:`526`, a variable annotation wrapped in ClassVar "
"indicates that a given attribute is intended to be used as a class variable "
"and should not be set on instances of that class. Usage::"
msgstr "在 :pep:`526` 中被引入，ClassVar 包裹起来的变量注解指示了给定属性预期用于类变量，并且不应在类的实例上被设置。用法："

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/typing.rst:1099
msgid ":data:`ClassVar` accepts only types and cannot be further subscribed."
msgstr ":data:`ClassVar` 仅接受类型，并且不能被再次下标。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/typing.rst:1101
msgid ""
":data:`ClassVar` is not a class itself, and should not be used with "
":func:`isinstance` or :func:`issubclass`. :data:`ClassVar` does not change "
"Python runtime behavior, but it can be used by third-party type checkers. "
"For example, a type checker might flag the following code as an error::"
msgstr ""
":data:`ClassVar` 本身并不是一个类，并且不应与 :func:`isinstance` or :func:`issubclass` "
"一起使用。 :data:`ClassVar` 并不改变 Python "
"运行时行为，但它可以被用于第三方类型检查器。例如，某个类型检查器可能会标记以下代码为错误的："

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/typing.rst:1115
msgid ""
"``AnyStr`` is a type variable defined as ``AnyStr = TypeVar('AnyStr', str, "
"bytes)``."
msgstr "``AnyStr`` 类型变量的定义为 ``AnyStr = TypeVar('AnyStr', str, bytes)``。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/typing.rst:1118
msgid ""
"It is meant to be used for functions that may accept any kind of string "
"without allowing different kinds of strings to mix. For example::"
msgstr "这里指的是，它可以接受任意同类字符串，但不支持混用不同类别的字符串。例如："

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/typing.rst:1130
msgid ""
"A special constant that is assumed to be ``True`` by 3rd party static type "
"checkers. It is ``False`` at runtime. Usage::"
msgstr "被第三方静态类型检查器假定为 ``True`` 的特殊常量。 在运行时为 ``False``。 用法如下::"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/typing.rst:1139
msgid ""
"Note that the first type annotation must be enclosed in quotes, making it a "
"\"forward reference\", to hide the ``expensive_mod`` reference from the "
"interpreter runtime.  Type annotations for local variables are not "
"evaluated, so the second annotation does not need to be enclosed in quotes."
msgstr ""
