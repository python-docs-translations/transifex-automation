# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2023, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Kder <kder@live.cn>, 2020
# Trim21 <i@trim21.me>, 2020
# rpish yao <rpishmail@gmail.com>, 2020
# ww song <sww4718168@gmail.com>, 2020
# JW H <hjwdhjwd@gmail.com>, 2020
# Siyuan Xu, 2020
# jaystone776 <1732865113@qq.com>, 2021
# Freesand Leo <yuqinju@163.com>, 2021
# Rafael Fontenelle <rffontenelle@gmail.com>, 2023
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-08 16:17+0000\n"
"PO-Revision-Date: 2020-05-30 12:12+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2023\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/"
"teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/typing.rst:2
msgid ":mod:`typing` --- Support for type hints"
msgstr ":mod:`typing` —— 对类型提示的支持"

#: ../../library/typing.rst:9
msgid "**Source code:** :source:`Lib/typing.py`"
msgstr "**源代码：** :source:`Lib/typing.py`"

#: ../../library/typing.rst:13
msgid ""
"The Python runtime does not enforce function and variable type annotations. "
"They can be used by third party tools such as type checkers, IDEs, linters, "
"etc."
msgstr ""
"Python 运行时不强制要求函数与变量类型注解。它们可被类型检查器、IDE、错误检查"
"器等第三方工具使用。"

#: ../../library/typing.rst:19
msgid ""
"This module provides runtime support for type hints as specified by :pep:"
"`484`, :pep:`526`, :pep:`544`, :pep:`586`, :pep:`589`, and :pep:`591`. The "
"most fundamental support consists of the types :data:`Any`, :data:`Union`, :"
"data:`Tuple`, :data:`Callable`, :class:`TypeVar`, and :class:`Generic`.  For "
"full specification please see :pep:`484`.  For a simplified introduction to "
"type hints see :pep:`483`."
msgstr ""
"此模块为运行时提供了 :pep:`484` 、 :pep:`526` 、 :pep:`544` 、 :pep:"
"`586` 、 :pep:`589` 和 :pep:`591` 规定的类型提示。最基本的支持由 :data:"
"`Any`，:data:`Union`，:data:`Tuple`，:data:`Callable`，:class:`TypeVar` 和 :"
"class:`Generic` 类型组成。有关完整的规范，请参阅 :pep:`484`。有关类型提示的简"
"单介绍，请参阅 :PEP:`483`。"

#: ../../library/typing.rst:27
msgid ""
"The function below takes and returns a string and is annotated as follows::"
msgstr "下面的函数接收与返回的都是字符串，注解方式如下："

#: ../../library/typing.rst:32
msgid ""
"In the function ``greeting``, the argument ``name`` is expected to be of "
"type :class:`str` and the return type :class:`str`. Subtypes are accepted as "
"arguments."
msgstr ""
"``greeting`` 函数中，参数 ``name`` 的类型应是 :class:`str`，返回类型是 :"
"class:`str`。子类型也可以作为参数。"

#: ../../library/typing.rst:37
msgid "Type aliases"
msgstr "类型别名"

#: ../../library/typing.rst:39
msgid ""
"A type alias is defined by assigning the type to the alias. In this example, "
"``Vector`` and ``List[float]`` will be treated as interchangeable synonyms::"
msgstr ""
"类型别名通过将类型分配给别名来定义。在这个例子中， ``Vector`` 和 "
"``List[float]`` 将被视为可互换的同义词::"

#: ../../library/typing.rst:51
msgid ""
"Type aliases are useful for simplifying complex type signatures. For "
"example::"
msgstr "类型别名适用于简化复杂的类型签名。例如："

#: ../../library/typing.rst:69
msgid ""
"Note that ``None`` as a type hint is a special case and is replaced by "
"``type(None)``."
msgstr ""
"请注意，``None`` 作为类型提示是一种特殊情况，并且由 ``type(None)`` 取代。"

#: ../../library/typing.rst:75
msgid "NewType"
msgstr "NewType"

#: ../../library/typing.rst:77
msgid "Use the :func:`NewType` helper function to create distinct types::"
msgstr "使用 :func:`NewType` 辅助函数创建不同的类型::"

#: ../../library/typing.rst:84
msgid ""
"The static type checker will treat the new type as if it were a subclass of "
"the original type. This is useful in helping catch logical errors::"
msgstr "静态类型检查器把新类型当作原始类型的子类，这种方式适用于捕捉逻辑错误："

#: ../../library/typing.rst:96
msgid ""
"You may still perform all ``int`` operations on a variable of type "
"``UserId``, but the result will always be of type ``int``. This lets you "
"pass in a ``UserId`` wherever an ``int`` might be expected, but will prevent "
"you from accidentally creating a ``UserId`` in an invalid way::"
msgstr ""
"``UserId`` 类型的变量可执行所有 ``int`` 操作，但返回结果都是 ``int`` 类型。这"
"种方式允许在预期 ``int`` 时传入 ``UserId``，还能防止意外创建无效的 "
"``UserId``："

#: ../../library/typing.rst:104
msgid ""
"Note that these checks are enforced only by the static type checker. At "
"runtime, the statement ``Derived = NewType('Derived', Base)`` will make "
"``Derived`` a function that immediately returns whatever parameter you pass "
"it. That means the expression ``Derived(some_value)`` does not create a new "
"class or introduce any overhead beyond that of a regular function call."
msgstr ""
"注意，这些检查只由静态类型检查器强制执行。 在运行时，语句 ``Derived = "
"NewType('Derived', Base)`` 将产生一个 ``Derived`` 函数，该函数立即返回你传递"
"给它的任何参数。 这意味着表达式 ``Derived(some_value)`` 不会创建一个新的类，"
"也不会引入超出常规函数调用的很多开销。"

#: ../../library/typing.rst:110
msgid ""
"More precisely, the expression ``some_value is Derived(some_value)`` is "
"always true at runtime."
msgstr ""
"更确切地说，在运行时，``some_value is Derived(some_value)`` 表达式总为 True。"

#: ../../library/typing.rst:113
msgid ""
"This also means that it is not possible to create a subtype of ``Derived`` "
"since it is an identity function at runtime, not an actual type::"
msgstr ""
"这也意味着无法创建 ``Derived`` 的子类型，因为它是运行时的标识函数，而不是实际"
"的类型::"

#: ../../library/typing.rst:123
msgid ""
"However, it is possible to create a :func:`NewType` based on a 'derived' "
"``NewType``::"
msgstr ""
"然而，我们可以在 \"派生的\" ``NewType`` 的基础上创建一个 :class:`NewType`。"

#: ../../library/typing.rst:131
msgid "and typechecking for ``ProUserId`` will work as expected."
msgstr "同时，``ProUserId`` 的类型检查也可以按预期执行。"

#: ../../library/typing.rst:133
msgid "See :pep:`484` for more details."
msgstr "详见 :pep:`484`。"

#: ../../library/typing.rst:137
msgid ""
"Recall that the use of a type alias declares two types to be *equivalent* to "
"one another. Doing ``Alias = Original`` will make the static type checker "
"treat ``Alias`` as being *exactly equivalent* to ``Original`` in all cases. "
"This is useful when you want to simplify complex type signatures."
msgstr ""
"回想一下，使用类型别名声明两种类型彼此 *等效* 。``Alias = Original`` 将使静态"
"类型检查对待所有情况下 ``Alias`` *完全等同于* ``Original``。当您想简化复杂类"
"型签名时，这很有用。"

#: ../../library/typing.rst:142
msgid ""
"In contrast, ``NewType`` declares one type to be a *subtype* of another. "
"Doing ``Derived = NewType('Derived', Original)`` will make the static type "
"checker treat ``Derived`` as a *subclass* of ``Original``, which means a "
"value of type ``Original`` cannot be used in places where a value of type "
"``Derived`` is expected. This is useful when you want to prevent logic "
"errors with minimal runtime cost."
msgstr ""
"反之，``NewType`` 声明把一种类型当作另一种类型的 *子类型*。``Derived = "
"NewType('Derived', Original)`` 时，静态类型检查器把 ``Derived`` 当作 "
"``Original`` 的 *子类* ，即，``Original`` 类型的值不能用在预期 ``Derived`` 类"
"型的位置。这种方式适用于以最小运行时成本防止逻辑错误。"

#: ../../library/typing.rst:152
msgid "Callable"
msgstr "Callable"

#: ../../library/typing.rst:154
msgid ""
"Frameworks expecting callback functions of specific signatures might be type "
"hinted using ``Callable[[Arg1Type, Arg2Type], ReturnType]``."
msgstr ""
"期望特定签名的回调函数的框架可以将类型标注为 ``Callable[[Arg1Type, "
"Arg2Type], ReturnType]``。"

#: ../../library/typing.rst:157
msgid "For example::"
msgstr "例如："

#: ../../library/typing.rst:168
msgid ""
"It is possible to declare the return type of a callable without specifying "
"the call signature by substituting a literal ellipsis for the list of "
"arguments in the type hint: ``Callable[..., ReturnType]``."
msgstr ""
"通过用文字省略号替换类型提示中的参数列表： ``Callable[...，ReturnType]``，可"
"以声明可调用的返回类型，而无需指定调用签名。"

#: ../../library/typing.rst:175
msgid "Generics"
msgstr "泛型（Generic）"

#: ../../library/typing.rst:177
msgid ""
"Since type information about objects kept in containers cannot be statically "
"inferred in a generic way, abstract base classes have been extended to "
"support subscription to denote expected types for container elements."
msgstr ""
"由于无法以通用方式静态推断有关保存在容器中的对象的类型信息，因此抽象基类已扩"
"展为支持订阅以表示容器元素的预期类型。"

#: ../../library/typing.rst:188
msgid ""
"Generics can be parameterized by using a new factory available in typing "
"called :class:`TypeVar`."
msgstr "泛型可以通过使用typing模块中名为 :class:`TypeVar` 的新工厂进行参数化。"

#: ../../library/typing.rst:202
msgid "User-defined generic types"
msgstr "用户定义的泛型类型"

#: ../../library/typing.rst:204
msgid "A user-defined class can be defined as a generic class."
msgstr "用户定义的类可以定义为泛型类。"

#: ../../library/typing.rst:230
msgid ""
"``Generic[T]`` as a base class defines that the class ``LoggedVar`` takes a "
"single type parameter ``T`` . This also makes ``T`` valid as a type within "
"the class body."
msgstr ""
"``Generic[T]`` 作为基类定义了类 ``LoggedVar`` 采用单个类型参数 ``T``。这也使"
"得 ``T`` 作为类体内的一个类型有效。"

#: ../../library/typing.rst:234
msgid ""
"The :class:`Generic` base class defines :meth:`__class_getitem__` so that "
"``LoggedVar[t]`` is valid as a type::"
msgstr ""
":class:`Generic` 基类定义了 :meth:`__class_getitem__` ，使得 "
"``LoggedVar[t]`` 作为类型有效："

#: ../../library/typing.rst:243
msgid ""
"A generic type can have any number of type variables, and type variables may "
"be constrained::"
msgstr "泛型类型可以有任意数量的类型变量，并且类型变量可能会受到限制::"

#: ../../library/typing.rst:255
msgid ""
"Each type variable argument to :class:`Generic` must be distinct. This is "
"thus invalid::"
msgstr ":class:`Generic` 类型变量的参数应各不相同。下列代码就是无效的："

#: ../../library/typing.rst:266
msgid "You can use multiple inheritance with :class:`Generic`::"
msgstr "您可以对 :class:`Generic` 使用多重继承::"

#: ../../library/typing.rst:275
msgid ""
"When inheriting from generic classes, some type variables could be fixed::"
msgstr "从泛型类继承时，某些类型变量可能是固定的::"

#: ../../library/typing.rst:284
msgid "In this case ``MyDict`` has a single parameter, ``T``."
msgstr "比如，本例中 ``MyDict`` 调用的单参数，``T``。"

#: ../../library/typing.rst:286
msgid ""
"Using a generic class without specifying type parameters assumes :data:`Any` "
"for each position. In the following example, ``MyIterable`` is not generic "
"but implicitly inherits from ``Iterable[Any]``::"
msgstr ""
"在不指定类型参数的情况下使用泛型类别会为每个位置假设 :data:`Any`。在下面的例"
"子中，``MyIterable`` 不是泛型，但是隐式继承自 ``Iterable[Any]``::"

#: ../../library/typing.rst:294
msgid "User defined generic type aliases are also supported. Examples::"
msgstr "用户定义的通用类型别名也受支持。例子::"

#: ../../library/typing.rst:310
msgid ":class:`Generic` no longer has a custom metaclass."
msgstr ":class:`Generic` 不再支持自定义元类。"

#: ../../library/typing.rst:313
msgid ""
"A user-defined generic class can have ABCs as base classes without a "
"metaclass conflict. Generic metaclasses are not supported. The outcome of "
"parameterizing generics is cached, and most types in the typing module are "
"hashable and comparable for equality."
msgstr ""
"一个用户定义的泛型类能够使用抽象基本类作为基类，而不会发生元类冲突。泛型元类"
"不再被支持。参数化泛型的结果会被缓存，并且在 typing 模块中的大部分类型是可哈"
"希且可比较相等性的。"

#: ../../library/typing.rst:320
msgid "The :data:`Any` type"
msgstr ":data:`Any` 类型"

#: ../../library/typing.rst:322
msgid ""
"A special kind of type is :data:`Any`. A static type checker will treat "
"every type as being compatible with :data:`Any` and :data:`Any` as being "
"compatible with every type."
msgstr ""
":data:`Any` 是一种特殊的类型。静态类型检查器认为所有类型均与 :data:`Any` 兼"
"容，同样，:data:`Any` 也与所有类型兼容。"

#: ../../library/typing.rst:326
msgid ""
"This means that it is possible to perform any operation or method call on a "
"value of type :data:`Any` and assign it to any variable::"
msgstr ""
"也就是说，可对 :data:`Any` 类型的值执行任何操作或方法调用，并赋值给任意变量："

#: ../../library/typing.rst:344
msgid ""
"Notice that no typechecking is performed when assigning a value of type :"
"data:`Any` to a more precise type. For example, the static type checker did "
"not report an error when assigning ``a`` to ``s`` even though ``s`` was "
"declared to be of type :class:`str` and receives an :class:`int` value at "
"runtime!"
msgstr ""
"需要注意的是，将 :data:`Any` 类型的值赋值给另一个更具体的类型时，Python不会执"
"行类型检查。例如，当把 ``a`` 赋值给 ``s`` 时，即使 ``s`` 被声明为 :class:"
"`str` 类型，在运行时接收到的是 :class:`int` 值，静态类型检查器也不会报错。"

#: ../../library/typing.rst:350
msgid ""
"Furthermore, all functions without a return type or parameter types will "
"implicitly default to using :data:`Any`::"
msgstr "此外，未指定返回值与参数类型的函数，都隐式地默认使用 :data:`Any`："

#: ../../library/typing.rst:363
msgid ""
"This behavior allows :data:`Any` to be used as an *escape hatch* when you "
"need to mix dynamically and statically typed code."
msgstr "需要混用动态与静态类型代码时，此操作把 :data:`Any` 当作 *应急出口*。"

#: ../../library/typing.rst:366
msgid ""
"Contrast the behavior of :data:`Any` with the behavior of :class:`object`. "
"Similar to :data:`Any`, every type is a subtype of :class:`object`. However, "
"unlike :data:`Any`, the reverse is not true: :class:`object` is *not* a "
"subtype of every other type."
msgstr ""
":data:`Any` 和 :class:`object` 的区别。与 :data:`Any` 相似，所有类型都是 :"
"class:`object` 的子类型。然而，与 :data:`Any` 不同，object 不可逆：:class:"
"`object` *不是* 其它类型的子类型。"

#: ../../library/typing.rst:371
msgid ""
"That means when the type of a value is :class:`object`, a type checker will "
"reject almost all operations on it, and assigning it to a variable (or using "
"it as a return value) of a more specialized type is a type error. For "
"example::"
msgstr ""
"就是说，值的类型是 :class:`object` 时，类型检查器几乎会拒绝所有对它的操作，并"
"且，把它赋给更精确的类型变量（或返回值）属于类型错误。例如："

#: ../../library/typing.rst:393
msgid ""
"Use :class:`object` to indicate that a value could be any type in a typesafe "
"manner. Use :data:`Any` to indicate that a value is dynamically typed."
msgstr ""
"使用 :class:`object`，说明值能以类型安全的方式转为任何类型。使用 :data:"
"`Any`，说明值是动态类型。"

#: ../../library/typing.rst:398
msgid "Nominal vs structural subtyping"
msgstr "名义子类型 vs 结构子类型"

#: ../../library/typing.rst:400
msgid ""
"Initially :pep:`484` defined Python static type system as using *nominal "
"subtyping*. This means that a class ``A`` is allowed where a class ``B`` is "
"expected if and only if ``A`` is a subclass of ``B``."
msgstr ""
"最初 :pep:`484` 将 Python 的静态类型系统定义为使用 *名义性子类型*。即是说，当"
"且仅当 ``A`` 是 ``B`` 的子类时，可在需要 ``B`` 类时提供 ``A`` 类。"

#: ../../library/typing.rst:404
msgid ""
"This requirement previously also applied to abstract base classes, such as :"
"class:`~collections.abc.Iterable`. The problem with this approach is that a "
"class had to be explicitly marked to support them, which is unpythonic and "
"unlike what one would normally do in idiomatic dynamically typed Python "
"code. For example, this conforms to :pep:`484`::"
msgstr ""
"此项要求以前也适用于抽象基类，例如，:class:`~collections.abc.Iterable` 。这种"
"方式的问题在于，定义类时必须显式说明，既不 Pythonic，也不是动态类型式 Python "
"代码的惯用写法。例如，下列代码就遵从了 :pep:`484` 的规范："

#: ../../library/typing.rst:417
msgid ""
":pep:`544` allows to solve this problem by allowing users to write the above "
"code without explicit base classes in the class definition, allowing "
"``Bucket`` to be implicitly considered a subtype of both ``Sized`` and "
"``Iterable[int]`` by static type checkers. This is known as *structural "
"subtyping* (or static duck-typing)::"
msgstr ""
":pep:`544` 允许用户在类定义时不显式说明基类，从而解决了这一问题，静态类型检查"
"器隐式认为 ``Bucket`` 既是 ``Sized`` 的子类型，又是 ``Iterable[int]`` 的子类"
"型。这就是 *结构子类型* （又称为静态鸭子类型）："

#: ../../library/typing.rst:433
msgid ""
"Moreover, by subclassing a special class :class:`Protocol`, a user can "
"define new custom protocols to fully enjoy structural subtyping (see "
"examples below)."
msgstr ""
"此外，结构子类型的优势在于，通过继承特殊类 :class:`Protocol` ，用户可以定义新"
"的自定义协议（见下文中的例子）。"

#: ../../library/typing.rst:439
msgid "Classes, functions, and decorators"
msgstr "类,函数和修饰器."

#: ../../library/typing.rst:441
msgid "The module defines the following classes, functions and decorators:"
msgstr "这个模块定义了如下的类,模块和修饰器."

#: ../../library/typing.rst:445
msgid "Type variable."
msgstr "类型变量。"

#: ../../library/typing.rst:447 ../../library/typing.rst:915
msgid "Usage::"
msgstr "用法："

#: ../../library/typing.rst:452
msgid ""
"Type variables exist primarily for the benefit of static type checkers.  "
"They serve as the parameters for generic types as well as for generic "
"function definitions.  See class Generic for more information on generic "
"types.  Generic functions work as follows::"
msgstr ""

#: ../../library/typing.rst:465
msgid ""
"The latter example's signature is essentially the overloading of ``(str, "
"str) -> str`` and ``(bytes, bytes) -> bytes``.  Also note that if the "
"arguments are instances of some subclass of :class:`str`, the return type is "
"still plain :class:`str`."
msgstr ""
"本质上，后例的签名重载了 ``(str, str) -> str`` 与 ``(bytes, bytes) -> "
"bytes``。注意，参数是 :class:`str` 子类的实例时，返回类型仍是纯 :class:"
"`str`。"

#: ../../library/typing.rst:470
msgid ""
"At runtime, ``isinstance(x, T)`` will raise :exc:`TypeError`.  In general, :"
"func:`isinstance` and :func:`issubclass` should not be used with types."
msgstr ""
"``isinstance(x, T)`` 会在运行时抛出 :exc:`TypeError` 异常。一般地说， :func:"
"`isinstance` 和 :func:`issubclass` 不应该和类型一起使用。"

#: ../../library/typing.rst:473
msgid ""
"Type variables may be marked covariant or contravariant by passing "
"``covariant=True`` or ``contravariant=True``.  See :pep:`484` for more "
"details.  By default type variables are invariant.  Alternatively, a type "
"variable may specify an upper bound using ``bound=<type>``. This means that "
"an actual type substituted (explicitly or implicitly) for the type variable "
"must be a subclass of the boundary type, see :pep:`484`."
msgstr ""
"通过 ``covariant=True`` 或 ``contravariant=True`` 可以把类型变量标记为协变量"
"或逆变量。详见 :pep:`484`。默认情况下，类型变量是不变量。类型变量还可以用 "
"``bound=<type>`` 指定上限。这里的意思是，（显式或隐式地）取代类型变量的实际类"
"型必须是限定类型的子类，详见 :pep:`484`。"

#: ../../library/typing.rst:483
msgid "Abstract base class for generic types."
msgstr "用于泛型类型的抽象基类。"

#: ../../library/typing.rst:485
msgid ""
"A generic type is typically declared by inheriting from an instantiation of "
"this class with one or more type variables. For example, a generic mapping "
"type might be defined as::"
msgstr ""
"泛型类型一般通过继承含一个或多个类型变量的类实例进行声明。例如，泛型映射类型"
"定义如下："

#: ../../library/typing.rst:494
msgid "This class can then be used as follows::"
msgstr "该类的用法如下："

#: ../../library/typing.rst:507
msgid ""
"Base class for protocol classes. Protocol classes are defined like this::"
msgstr "Protocol 类的基类。Protocol 类的定义如下："

#: ../../library/typing.rst:513
msgid ""
"Such classes are primarily used with static type checkers that recognize "
"structural subtyping (static duck-typing), for example::"
msgstr ""
"这些类主要与静态类型检查器搭配使用，用来识别结构子类型（静态鸭子类型），例"
"如："

#: ../../library/typing.rst:525
msgid ""
"See :pep:`544` for details. Protocol classes decorated with :func:"
"`runtime_checkable` (described later) act as simple-minded runtime protocols "
"that check only the presence of given attributes, ignoring their type "
"signatures."
msgstr ""
"详见 :pep:`544`。Protocol 类用 :func:`runtime_checkable` （见下文）装饰，忽略"
"类型签名，仅检查给定属性是否存在，充当简要的运行时协议。"

#: ../../library/typing.rst:530
msgid "Protocol classes can be generic, for example::"
msgstr "Protocol 类可以是泛型，例如："

#: ../../library/typing.rst:540
msgid ""
"A variable annotated with ``C`` may accept a value of type ``C``. In "
"contrast, a variable annotated with ``Type[C]`` may accept values that are "
"classes themselves -- specifically, it will accept the *class object* of "
"``C``. For example::"
msgstr ""
"一个注解为 ``C`` 的变量可以接受一个类型为 ``C`` 的值。相对地，一个注解为 "
"``Type[C]`` 的变量可以接受本身为类的值 —— 更精确地说它接受 ``C`` 的 *类对象"
"* ，例如："

#: ../../library/typing.rst:549
msgid "Note that ``Type[C]`` is covariant::"
msgstr "注意 ``Type[C]`` 是协变的："

#: ../../library/typing.rst:561
msgid ""
"The fact that ``Type[C]`` is covariant implies that all subclasses of ``C`` "
"should implement the same constructor signature and class method signatures "
"as ``C``. The type checker should flag violations of this, but should also "
"allow constructor calls in subclasses that match the constructor calls in "
"the indicated base class. How the type checker is required to handle this "
"particular case may change in future revisions of :pep:`484`."
msgstr ""
" ``Type[C]`` 是协变的这一事实暗示了任何 ``C`` 的子类应当实现与 ``C`` 相同的构"
"造器签名和类方法签名。类型检查器应当标记违反的情况，但应当也允许子类中调用构"
"造器符合指示的基类。类型检查器被要求如何处理这种情况可能会在 :pep:`484` 将来"
"的版本中改变。"

#: ../../library/typing.rst:569
msgid ""
"The only legal parameters for :class:`Type` are classes, :data:`Any`, :ref:"
"`type variables <generics>`, and unions of any of these types. For example::"
msgstr ""
" :class:`Type` 合法的参数仅有类、 :data:`Any` 、:ref:`类型变量<generics>` 以"
"及上述类型的联合类型。例如："

#: ../../library/typing.rst:575
msgid ""
"``Type[Any]`` is equivalent to ``Type`` which in turn is equivalent to "
"``type``, which is the root of Python's metaclass hierarchy."
msgstr ""
" ``Type[Any]`` 等价于 ``Type``，因此继而等价于 ``type``，它是 Python 的元类层"
"级的根部。"

#: ../../library/typing.rst:582
msgid "A generic version of :class:`collections.abc.Iterable`."
msgstr ":class:`collections.abc.Iterable` 的泛型版本。"

#: ../../library/typing.rst:586
msgid "A generic version of :class:`collections.abc.Iterator`."
msgstr ":class:`collections.abc.Iterator` 的泛型版本。"

#: ../../library/typing.rst:590
msgid "A generic version of :class:`collections.abc.Reversible`."
msgstr ":class:`collections.abc.Reversible` 的泛型版本。"

#: ../../library/typing.rst:594
msgid "An ABC with one abstract method ``__int__``."
msgstr "一个抽象基类，含一个抽象方法 ``__int__``。"

#: ../../library/typing.rst:598
msgid "An ABC with one abstract method ``__float__``."
msgstr "一个抽象基类，含一个抽象方法 ``__float__``。"

#: ../../library/typing.rst:602
msgid "An ABC with one abstract method ``__complex__``."
msgstr "一个抽象基类，含一个抽象方法 ``__complex__``。"

#: ../../library/typing.rst:606
msgid "An ABC with one abstract method ``__bytes__``."
msgstr "一个抽象基类，含一个抽象方法 ``__bytes__``。"

#: ../../library/typing.rst:610
msgid "An ABC with one abstract method ``__index__``."
msgstr "一个抽象基类，含一个抽象方法 ``__index__``。"

#: ../../library/typing.rst:616
msgid ""
"An ABC with one abstract method ``__abs__`` that is covariant in its return "
"type."
msgstr "一个抽象基类，含一个抽象方法 ``__abs__``，该方法与其返回类型协变。"

#: ../../library/typing.rst:621
msgid ""
"An ABC with one abstract method ``__round__`` that is covariant in its "
"return type."
msgstr "一个抽象基类，含一个抽象方法 ``__round__``，该方法与其返回类型协变。"

#: ../../library/typing.rst:626
msgid "A generic version of :class:`collections.abc.Container`."
msgstr ":class:`collections.abc.Container` 的泛型版本。"

#: ../../library/typing.rst:630
msgid "An alias to :class:`collections.abc.Hashable`"
msgstr ":class:`collections.abc.Hashable` 的别名。"

#: ../../library/typing.rst:634
msgid "An alias to :class:`collections.abc.Sized`"
msgstr ":class:`collections.abc.Sized` 的别名。"

#: ../../library/typing.rst:638
msgid "A generic version of :class:`collections.abc.Collection`"
msgstr ":class:`collections.abc.Collection` 的泛型版本。"

#: ../../library/typing.rst:644
msgid "A generic version of :class:`collections.abc.Set`."
msgstr ":class:`collections.abc.Set`  的泛型版本。"

#: ../../library/typing.rst:648
msgid "A generic version of :class:`collections.abc.MutableSet`."
msgstr ":class:`collections.abc.MutableSet` 的泛型版本。"

#: ../../library/typing.rst:652
msgid ""
"A generic version of :class:`collections.abc.Mapping`. This type can be used "
"as follows::"
msgstr ":class:`collections.abc.Mapping` 的泛型版本。这个类型可以如下使用::"

#: ../../library/typing.rst:660
msgid "A generic version of :class:`collections.abc.MutableMapping`."
msgstr ":class:`collections.abc.MutableMapping` 的泛型版本。"

#: ../../library/typing.rst:664
msgid "A generic version of :class:`collections.abc.Sequence`."
msgstr ":class:`collections.abc.Sequence` 的泛型版本。"

#: ../../library/typing.rst:668
msgid "A generic version of :class:`collections.abc.MutableSequence`."
msgstr ":class:`collections.abc.MutableSequence` 的泛型版本。"

#: ../../library/typing.rst:672
msgid "A generic version of :class:`collections.abc.ByteString`."
msgstr ":class:`collections.abc.ByteString` 的泛型版本。"

#: ../../library/typing.rst:674
msgid ""
"This type represents the types :class:`bytes`, :class:`bytearray`, and :"
"class:`memoryview` of byte sequences."
msgstr ""
"该类型代表了 :class:`bytes`、:class:`bytearray`、:class:`memoryview` 等字节序"
"列类型。"

#: ../../library/typing.rst:677
msgid ""
"As a shorthand for this type, :class:`bytes` can be used to annotate "
"arguments of any of the types mentioned above."
msgstr "作为该类型的简称，:class:`bytes` 可用于标注上述任意类型的参数。"

#: ../../library/typing.rst:682
msgid "A generic version of :class:`collections.deque`."
msgstr ":class:`collections.deque` 的泛型版本。"

#: ../../library/typing.rst:689
msgid ""
"Generic version of :class:`list`. Useful for annotating return types. To "
"annotate arguments it is preferred to use an abstract collection type such "
"as :class:`Sequence` or :class:`Iterable`."
msgstr ""
":class:`list` 的泛型版本。适用于注解返回类型。注解参数时，最好使用 :class:"
"`Sequence` 或 :class:`Iterable` 等抽象容器类型。"

#: ../../library/typing.rst:694
msgid "This type may be used as follows::"
msgstr "该类型用法如下："

#: ../../library/typing.rst:706
msgid ""
"A generic version of :class:`builtins.set <set>`. Useful for annotating "
"return types. To annotate arguments it is preferred to use an abstract "
"collection type such as :class:`AbstractSet`."
msgstr ""
":class:`builtins.set <set>` 的泛型版本。适用于注解返回类型。注解参数时，最好"
"使用 :class:`AbstractSet` 等抽象容器类型。"

#: ../../library/typing.rst:712
msgid "A generic version of :class:`builtins.frozenset <frozenset>`."
msgstr ":class:`builtins.frozenset <frozenset>` 的泛型版本。"

#: ../../library/typing.rst:716
msgid "A generic version of :class:`collections.abc.MappingView`."
msgstr ":class:`collections.abc.MappingView` 的泛型版本。"

#: ../../library/typing.rst:720
msgid "A generic version of :class:`collections.abc.KeysView`."
msgstr ":class:`collections.abc.KeysView` 的泛型版本。"

#: ../../library/typing.rst:724
msgid "A generic version of :class:`collections.abc.ItemsView`."
msgstr ":class:`collections.abc.ItemsView` 的泛型版本。"

#: ../../library/typing.rst:728
msgid "A generic version of :class:`collections.abc.ValuesView`."
msgstr ":class:`collections.abc.ValuesView` 的泛型版本。"

#: ../../library/typing.rst:732
msgid "A generic version of :class:`collections.abc.Awaitable`."
msgstr ":class:`collections.abc.Awaitable` 的泛型版本。"

#: ../../library/typing.rst:738
msgid ""
"A generic version of :class:`collections.abc.Coroutine`. The variance and "
"order of type variables correspond to those of :class:`Generator`, for "
"example::"
msgstr ""
":class:`collections.abc.Coroutine` 的泛型版本。类型变量的的差异和顺序与 :"
"class:`Generator` 的内容相对应，例如："

#: ../../library/typing.rst:753
msgid "A generic version of :class:`collections.abc.AsyncIterable`."
msgstr ":class:`collections.abc.AsyncIterable` 的泛型版本。"

#: ../../library/typing.rst:759
msgid "A generic version of :class:`collections.abc.AsyncIterator`."
msgstr ":class:`collections.abc.AsyncIterator` 的泛型版本。"

#: ../../library/typing.rst:765
msgid "A generic version of :class:`contextlib.AbstractContextManager`."
msgstr ":class:`contextlib.AbstractContextManager` 的泛型版本。"

#: ../../library/typing.rst:772
msgid "A generic version of :class:`contextlib.AbstractAsyncContextManager`."
msgstr ":class:`contextlib.AbstractAsyncContextManager` 的泛型版本。"

#: ../../library/typing.rst:779
msgid ""
"A generic version of :class:`dict`. Useful for annotating return types. To "
"annotate arguments it is preferred to use an abstract collection type such "
"as :class:`Mapping`."
msgstr ""
":class:`dict` 的泛型版本。对标注返回类型比较有用。如果要标注参数的话，使用"
"如 :class:`Mapping` 的抽象容器类型是更好的选择。"

#: ../../library/typing.rst:783
msgid "This type can be used as follows::"
msgstr "该类型用法如下："

#: ../../library/typing.rst:790
msgid "A generic version of :class:`collections.defaultdict`."
msgstr ":class:`collections.defaultdict` 的泛型版本。"

#: ../../library/typing.rst:796
msgid "A generic version of :class:`collections.OrderedDict`."
msgstr ":class:`collections.OrderedDict` 的泛型版本。"

#: ../../library/typing.rst:802
msgid "A generic version of :class:`collections.Counter`."
msgstr ":class:`collections.Counter` 的泛型版本。"

#: ../../library/typing.rst:809
msgid "A generic version of :class:`collections.ChainMap`."
msgstr ":class:`collections.ChainMap` 的泛型版本。"

#: ../../library/typing.rst:816
msgid ""
"A generator can be annotated by the generic type ``Generator[YieldType, "
"SendType, ReturnType]``. For example::"
msgstr ""
"生成器可以由泛型类型 ``Generator[YieldType, SendType, ReturnType]`` 注解。例"
"如："

#: ../../library/typing.rst:825
msgid ""
"Note that unlike many other generics in the typing module, the ``SendType`` "
"of :class:`Generator` behaves contravariantly, not covariantly or "
"invariantly."
msgstr ""
"注意，与 typing 模块里的其他泛型不同， :class:`Generator` 的 ``SendType`` 属"
"于逆变行为，不是协变行为，也是不变行为。"

#: ../../library/typing.rst:829
msgid ""
"If your generator will only yield values, set the ``SendType`` and "
"``ReturnType`` to ``None``::"
msgstr ""
"如果生成器只产生值，可将 ``SendType`` 与 ``ReturnType`` 设为 ``None``："

#: ../../library/typing.rst:837
msgid ""
"Alternatively, annotate your generator as having a return type of either "
"``Iterable[YieldType]`` or ``Iterator[YieldType]``::"
msgstr ""
"此外，还可以把生成器的返回类型注解为 ``Iterable[YieldType]`` 或 "
"``Iterator[YieldType]``："

#: ../../library/typing.rst:847
msgid ""
"An async generator can be annotated by the generic type "
"``AsyncGenerator[YieldType, SendType]``. For example::"
msgstr ""
"异步生成器可由泛型类型 ``AsyncGenerator[YieldType, SendType]`` 注解。例如："

#: ../../library/typing.rst:856
msgid ""
"Unlike normal generators, async generators cannot return a value, so there "
"is no ``ReturnType`` type parameter. As with :class:`Generator`, the "
"``SendType`` behaves contravariantly."
msgstr ""
"与常规生成器不同，异步生成器不能返回值，因此没有 ``ReturnType`` 类型参数。 "
"与 :class:`Generator` 类似，``SendType`` 也属于逆变行为。"

#: ../../library/typing.rst:860
msgid ""
"If your generator will only yield values, set the ``SendType`` to ``None``::"
msgstr "如果生成器只产生值，可将 ``SendType`` 设置为 ``None``："

#: ../../library/typing.rst:868
msgid ""
"Alternatively, annotate your generator as having a return type of either "
"``AsyncIterable[YieldType]`` or ``AsyncIterator[YieldType]``::"
msgstr ""
"此外，可用 ``AsyncIterable[YieldType]`` 或 ``AsyncIterator[YieldType]`` 注解"
"生成器的返回类型："

#: ../../library/typing.rst:880
msgid ""
"``Text`` is an alias for ``str``. It is provided to supply a forward "
"compatible path for Python 2 code: in Python 2, ``Text`` is an alias for "
"``unicode``."
msgstr ""
"``Text`` 是 ``str`` 的别名。提供了对 Python 2 代码的向下兼容：Python 2 中，"
"``Text`` 是``unicode`` 的别名。"

#: ../../library/typing.rst:884
msgid ""
"Use ``Text`` to indicate that a value must contain a unicode string in a "
"manner that is compatible with both Python 2 and Python 3::"
msgstr ""
"使用 ``Text`` 时，值中必须包含 unicode 字符串，以兼容 Python 2 和 Python 3："

#: ../../library/typing.rst:896
msgid ""
"Generic type ``IO[AnyStr]`` and its subclasses ``TextIO(IO[str])`` and "
"``BinaryIO(IO[bytes])`` represent the types of I/O streams such as returned "
"by :func:`open`."
msgstr ""
"泛型 ``IO[AnyStr]`` 及其子类 ``TextIO(IO[str])``、``BinaryIO(IO[bytes])`` 表"
"示 I/O 流——例如 :func:`open` 返回的对象——的类型。"

#: ../../library/typing.rst:904
msgid ""
"These type aliases correspond to the return types from :func:`re.compile` "
"and :func:`re.match`.  These types (and the corresponding functions) are "
"generic in ``AnyStr`` and can be made specific by writing ``Pattern[str]``, "
"``Pattern[bytes]``, ``Match[str]``, or ``Match[bytes]``."
msgstr ""
"这些类型对应的是从 :func:`re.compile` 和 :func:`re.match` 返回的类型。 这些类"
"型（及相应的函数）是 ``AnyStr`` 中的泛型并可通过编写 ``Pattern[str]``, "
"``Pattern[bytes]``, ``Match[str]`` 或 ``Match[bytes]`` 来具体指定。"

#: ../../library/typing.rst:913
msgid "Typed version of :func:`collections.namedtuple`."
msgstr ":func:`collections.namedtuple` 的类型版本。"

#: ../../library/typing.rst:921
msgid "This is equivalent to::"
msgstr "这相当于："

#: ../../library/typing.rst:925
msgid ""
"To give a field a default value, you can assign to it in the class body::"
msgstr "为字段提供默认值，要在类体内赋值："

#: ../../library/typing.rst:934
msgid ""
"Fields with a default value must come after any fields without a default."
msgstr "带默认值的字段必须在不带默认值的字段后面。"

#: ../../library/typing.rst:936
msgid ""
"The resulting class has an extra attribute ``__annotations__`` giving a dict "
"that maps the field names to the field types.  (The field names are in the "
"``_fields`` attribute and the default values are in the ``_field_defaults`` "
"attribute both of which are part of the namedtuple API.)"
msgstr ""
"生成的类具有 ``__annotations__`` 这个附加属性，提供了映射字段名与字段类型的字"
"典。（字段名在 ）"

#: ../../library/typing.rst:942
msgid "``NamedTuple`` subclasses can also have docstrings and methods::"
msgstr "``NamedTuple`` 子类也支持文档字符串与方法："

#: ../../library/typing.rst:952
msgid "Backward-compatible usage::"
msgstr "反向兼容用法："

#: ../../library/typing.rst:956
msgid "Added support for :pep:`526` variable annotation syntax."
msgstr "添加了对 :pep:`526` 中变量注解句法的支持。"

#: ../../library/typing.rst:959
msgid "Added support for default values, methods, and docstrings."
msgstr "添加了对默认值、方法、文档字符串的支持。"

#: ../../library/typing.rst:965
msgid ""
"Deprecated the ``_field_types`` attribute in favor of the more standard "
"``__annotations__`` attribute which has the same information."
msgstr ""

#: ../../library/typing.rst:966
msgid ""
"The ``_field_types`` and ``__annotations__`` attributes are now regular "
"dictionaries instead of instances of ``OrderedDict``."
msgstr ""
"``_field_types`` 和 ``__annotations__`` 属性现已使用常规字典，不再使用 "
"``OrderedDict`` 实例。"

#: ../../library/typing.rst:972
msgid ""
"A simple typed namespace. At runtime it is equivalent to a plain :class:"
"`dict`."
msgstr ""

#: ../../library/typing.rst:975
msgid ""
"``TypedDict`` creates a dictionary type that expects all of its instances to "
"have a certain set of keys, where each key is associated with a value of a "
"consistent type. This expectation is not checked at runtime but is only "
"enforced by type checkers. Usage::"
msgstr ""

#: ../../library/typing.rst:991
msgid ""
"The type info for introspection can be accessed via ``Point2D."
"__annotations__`` and ``Point2D.__total__``.  To allow using this feature "
"with older versions of Python that do not support :pep:`526`, ``TypedDict`` "
"supports two additional equivalent syntactic forms::"
msgstr ""
"用于内省的类型信息可通过 ``Point2D.__annotations__`` 和 ``Point2D."
"__total__`` 访问。为了让不支持 :pep:`526` 的老版 Python 也能使用此功能，"
"``TypedDict`` 支持两个附加的等价句法形式："

#: ../../library/typing.rst:999
msgid ""
"By default, all keys must be present in a TypedDict. It is possible to "
"override this by specifying totality. Usage::"
msgstr ""
"默认情况下，所有键都必须列在 TypedDict 里。不过，也可以通过指定 total 参数进"
"行重写。用法如下："

#: ../../library/typing.rst:1007
msgid ""
"This means that a point2D TypedDict can have any of the keys omitted. A type "
"checker is only expected to support a literal False or True as the value of "
"the total argument. True is the default, and makes all items defined in the "
"class body be required."
msgstr ""
"这段代码的意思是，可以省略 point2D 这个 TypedDict 中的任意键。类型核查器只支"
"持字面量 False 或 True 作为 total 参数的值。True 是默认值，表明在类体中，必须"
"定义所有项目。"

#: ../../library/typing.rst:1012
msgid ""
"See :pep:`589` for more examples and detailed rules of using ``TypedDict``."
msgstr "更多示例与 ``TypedDict`` 的详细规则，详见 :pep:`589`。"

#: ../../library/typing.rst:1018
msgid ""
"A class used for internal typing representation of string forward "
"references. For example, ``List[\"SomeClass\"]`` is implicitly transformed "
"into ``List[ForwardRef(\"SomeClass\")]``.  This class should not be "
"instantiated by a user, but may be used by introspection tools."
msgstr ""
"用于字符串前向引用的内部类型表示的类。 例如，``List[\"SomeClass\"]`` 会被隐式"
"转换为 ``List[ForwardRef(\"SomeClass\")]``。 这个类不应由用户来实例化，但可以"
"由内省工具使用。"

#: ../../library/typing.rst:1027
msgid ""
"A helper function to indicate a distinct type to a typechecker, see :ref:"
"`distinct`. At runtime it returns a function that returns its argument. "
"Usage::"
msgstr ""
"用于为类型核查器标明不同类型的辅助函数，参阅 :ref:`distinct`。在运行时，用于"
"返回一个函数，该函数返回它的参数。用法如下："

#: ../../library/typing.rst:1038
msgid "Cast a value to a type."
msgstr "把一个值转换为指定的类型。"

#: ../../library/typing.rst:1040
msgid ""
"This returns the value unchanged.  To the type checker this signals that the "
"return value has the designated type, but at runtime we intentionally don't "
"check anything (we want this to be as fast as possible)."
msgstr ""
"这会把值原样返回。对类型检查器而言这代表了返回值具有指定的类型，在运行时我们"
"故意没有设计任何检查（我们希望让这尽量快）。"

#: ../../library/typing.rst:1047
msgid ""
"Return a dictionary containing type hints for a function, method, module or "
"class object."
msgstr "返回函数、方法、模块、类对象的类型提示的字典。"

#: ../../library/typing.rst:1050
msgid ""
"This is often the same as ``obj.__annotations__``. In addition, forward "
"references encoded as string literals are handled by evaluating them in "
"``globals`` and ``locals`` namespaces. If necessary, ``Optional[t]`` is "
"added for function and method annotations if a default value equal to "
"``None`` is set. For a class ``C``, return a dictionary constructed by "
"merging all the ``__annotations__`` along ``C.__mro__`` in reverse order."
msgstr ""
"一般情况下，与 ``obj.__annotations__`` 相同。此外，可通过在 ``globals`` 与 "
"``locals`` 命名空间里进行评估，以此来处理编码为字符串字面量的前向引用。如有需"
"要，在默认值设置为 ``None``时，可为函数或方法注解添加 ``Optional[t]``。对于"
"类 ``C``，则返回一个由所有 ``__annotations__`` 与 ``C.__mro__`` 逆序合并而成"
"的字典。"

#: ../../library/typing.rst:1061
msgid "Provide basic introspection for generic types and special typing forms."
msgstr "为泛型类型与特殊类型形式提供了基本内省功能。"

#: ../../library/typing.rst:1063
msgid ""
"For a typing object of the form ``X[Y, Z, ...]`` these functions return "
"``X`` and ``(Y, Z, ...)``. If ``X`` is a generic alias for a builtin or :mod:"
"`collections` class, it gets normalized to the original class. For "
"unsupported objects return ``None`` and ``()`` correspondingly. Examples::"
msgstr ""

#: ../../library/typing.rst:1079
msgid ""
"The ``@overload`` decorator allows describing functions and methods that "
"support multiple different combinations of argument types. A series of "
"``@overload``-decorated definitions must be followed by exactly one non-"
"``@overload``-decorated definition (for the same function/method). The "
"``@overload``-decorated definitions are for the benefit of the type checker "
"only, since they will be overwritten by the non-``@overload``-decorated "
"definition, while the latter is used at runtime but should be ignored by a "
"type checker.  At runtime, calling a ``@overload``-decorated function "
"directly will raise :exc:`NotImplementedError`. An example of overload that "
"gives a more precise type than can be expressed using a union or a type "
"variable::"
msgstr ""
"``@overload`` 装饰器可以修饰支持多个不同参数类型组合的函数或方法。"
"``@overload`` - 装饰定义的系列必须紧跟一个非 ``@overload``-装饰定义（用于同一"
"个函数/方法）。``@overload``-装饰定义仅是为了协助类型检查器， 因为该装饰器会"
"被非 ``@overload``-装饰定义覆盖，后者用于运行时，而且会被类型检查器忽略。在运"
"行时直接调用 ``@overload`` 装饰的函数会触发 :exc:`NotImplementedError`。下面"
"的重载示例给出了比联合类型或类型变量更精准的类型："

#: ../../library/typing.rst:1103
msgid "See :pep:`484` for details and comparison with other typing semantics."
msgstr "详见 :pep:`484`，与其他类型语义进行对比。"

#: ../../library/typing.rst:1107
msgid ""
"A decorator to indicate to type checkers that the decorated method cannot be "
"overridden, and the decorated class cannot be subclassed. For example::"
msgstr "告知类型检查器被装饰的方法不能被覆盖，且被装饰的类不能作为子类，例如："

#: ../../library/typing.rst:1125 ../../library/typing.rst:1352
msgid ""
"There is no runtime checking of these properties. See :pep:`591` for more "
"details."
msgstr "这些属性没有运行时检查。详见 :pep:`591`。"

#: ../../library/typing.rst:1132
msgid "Decorator to indicate that annotations are not type hints."
msgstr "标明注解不是类型提示的装饰器。"

#: ../../library/typing.rst:1134
msgid ""
"This works as class or function :term:`decorator`.  With a class, it applies "
"recursively to all methods defined in that class (but not to methods defined "
"in its superclasses or subclasses)."
msgstr ""
"此 :term:`decorator` 装饰器生效于类或函数上。如果作用于类上的话，它会递归地作"
"用于这个类的所定义的所有方法上（但是对于超类或子类所定义的方法不会生效）。"

#: ../../library/typing.rst:1138
msgid "This mutates the function(s) in place."
msgstr "此方法会就地地修改函数。"

#: ../../library/typing.rst:1142
msgid "Decorator to give another decorator the :func:`no_type_check` effect."
msgstr "让其他装饰器具有 :func:`no_type_check` 效果的装饰器。"

#: ../../library/typing.rst:1144
msgid ""
"This wraps the decorator with something that wraps the decorated function "
"in :func:`no_type_check`."
msgstr "本装饰器用 :func:`no_type_check` 里的装饰函数打包其他装饰器。"

#: ../../library/typing.rst:1149
msgid "Decorator to mark a class or function to be unavailable at runtime."
msgstr "标记一个类或函数在运行时内不可用的装饰器。"

#: ../../library/typing.rst:1151
msgid ""
"This decorator is itself not available at runtime. It is mainly intended to "
"mark classes that are defined in type stub files if an implementation "
"returns an instance of a private class::"
msgstr ""
"在运行时，该装饰器本身不可用。实现返回的是私有类实例时，它主要是用于标记在类"
"型存根文件中定义的类。"

#: ../../library/typing.rst:1162
msgid ""
"Note that returning instances of private classes is not recommended. It is "
"usually preferable to make such classes public."
msgstr "注意，建议不要返回私有类实例，最好将之设为公共类。"

#: ../../library/typing.rst:1167
msgid "Mark a protocol class as a runtime protocol."
msgstr "用于把 Protocol 类标记为运行时协议。"

#: ../../library/typing.rst:1169
msgid ""
"Such a protocol can be used with :func:`isinstance` and :func:`issubclass`. "
"This raises :exc:`TypeError` when applied to a non-protocol class.  This "
"allows a simple-minded structural check, very similar to \"one trick "
"ponies\" in :mod:`collections.abc` such as :class:`~collections.abc."
"Iterable`.  For example::"
msgstr ""
"该协议可以与 :func:`isinstance` 和 :func:`issubclass` 一起使用。应用于非协议"
"的类时，会触发 :exc:`TypeError`。该指令支持简易结构检查，与 :mod:"
"`collections.abc` 的 :class:`~collections.abc.Iterable` 非常类似，只擅长做一"
"件事。  例如："

#: ../../library/typing.rst:1180
msgid ""
"**Warning:** this will check only the presence of the required methods, not "
"their type signatures!"
msgstr "**警告:** 这将只检查所需方法是否存在，而不检查其类型签名！"

#: ../../library/typing.rst:1187
msgid "Special type indicating an unconstrained type."
msgstr "不受限的特殊类型。"

#: ../../library/typing.rst:1189
msgid "Every type is compatible with :data:`Any`."
msgstr "所有类型都与 :data:`Any` 兼容。"

#: ../../library/typing.rst:1190
msgid ":data:`Any` is compatible with every type."
msgstr ":data:`Any` 与所有类型都兼容。"

#: ../../library/typing.rst:1194
msgid "Special type indicating that a function never returns. For example::"
msgstr "标记一个函数没有返回值的特殊类型。比如说::"

#: ../../library/typing.rst:1207
msgid "Union type; ``Union[X, Y]`` means either X or Y."
msgstr "联合类型； ``Union[X, Y]`` 意味着：要不是 X，要不是 Y。"

#: ../../library/typing.rst:1209
msgid "To define a union, use e.g. ``Union[int, str]``.  Details:"
msgstr "使用形如 ``Union[int, str]`` 的形式来定义一个联合类型。细节如下:"

#: ../../library/typing.rst:1211
msgid "The arguments must be types and there must be at least one."
msgstr "参数必须是某种类型，且至少有一个。"

#: ../../library/typing.rst:1213
msgid "Unions of unions are flattened, e.g.::"
msgstr "联合类型之联合类型会被展平，例如："

#: ../../library/typing.rst:1217
msgid "Unions of a single argument vanish, e.g.::"
msgstr "单参数之联合类型就是该参数自身，例如："

#: ../../library/typing.rst:1221
msgid "Redundant arguments are skipped, e.g.::"
msgstr "冗余的参数会被跳过，例如："

#: ../../library/typing.rst:1225
msgid "When comparing unions, the argument order is ignored, e.g.::"
msgstr "比较联合类型，不涉及参数顺序，例如："

#: ../../library/typing.rst:1229
msgid "You cannot subclass or instantiate a union."
msgstr "你不能继承或者实例化一个联合类型。"

#: ../../library/typing.rst:1231
msgid "You cannot write ``Union[X][Y]``."
msgstr "没有 ``Union[X][Y]`` 这种写法。"

#: ../../library/typing.rst:1233
msgid "You can use ``Optional[X]`` as a shorthand for ``Union[X, None]``."
msgstr "你可以使用 ``Optional[X]`` 作为 ``Union[X, None]`` 的缩写。"

#: ../../library/typing.rst:1235
msgid "Don't remove explicit subclasses from unions at runtime."
msgstr "在运行时，不要移除联合类型中的显式子类。"

#: ../../library/typing.rst:1240
msgid "Optional type."
msgstr "可选类型。"

#: ../../library/typing.rst:1242
msgid "``Optional[X]`` is equivalent to ``Union[X, None]``."
msgstr " ``Optional[X]`` 等价于 ``Union[X, None]`` 。"

#: ../../library/typing.rst:1244
msgid ""
"Note that this is not the same concept as an optional argument, which is one "
"that has a default.  An optional argument with a default does not require "
"the ``Optional`` qualifier on its type annotation just because it is "
"optional. For example::"
msgstr ""
"注意，可选类型与含默认值的可选参数不同。含默认值的可选参数不需要在类型注解上"
"添加 ``Optional`` 限定符，因为它仅是可选的。例如："

#: ../../library/typing.rst:1252
msgid ""
"On the other hand, if an explicit value of ``None`` is allowed, the use of "
"``Optional`` is appropriate, whether the argument is optional or not. For "
"example::"
msgstr ""
"另一方面，显式应用 ``None`` 值时，不管该参数是否可选， ``Optional`` 都适用。"
"例如："

#: ../../library/typing.rst:1261
msgid ""
"Tuple type; ``Tuple[X, Y]`` is the type of a tuple of two items with the "
"first item of type X and the second of type Y. The type of the empty tuple "
"can be written as ``Tuple[()]``."
msgstr ""
"元组类型； ``Tuple[X, Y]`` 标注了一个二元组类型，其第一个元素的类型为 X 且第"
"二个元素的类型为 Y。空元组的类型可写作 ``Tuple[()]`` 。"

#: ../../library/typing.rst:1265
msgid ""
"Example: ``Tuple[T1, T2]`` is a tuple of two elements corresponding to type "
"variables T1 and T2.  ``Tuple[int, float, str]`` is a tuple of an int, a "
"float and a string."
msgstr ""
"举例： ``Tuple[T1, T2]`` 是一个二元组，类型分别为 T1 和 T2。 ``Tuple[int, "
"float, str]`` 是一个由整数、浮点数和字符串组成的三元组。"

#: ../../library/typing.rst:1269
msgid ""
"To specify a variable-length tuple of homogeneous type, use literal "
"ellipsis, e.g. ``Tuple[int, ...]``. A plain :data:`Tuple` is equivalent to "
"``Tuple[Any, ...]``, and in turn to :class:`tuple`."
msgstr ""
"为表达一个同类型元素的变长元组，使用省略号字面量，如 ``Tuple[int, ...]`` 。单"
"独的一个 :data:`Tuple` 等价于 ``Tuple[Any, ...]``，进而等价于 :class:"
"`tuple` 。"

#: ../../library/typing.rst:1275
msgid "Callable type; ``Callable[[int], str]`` is a function of (int) -> str."
msgstr ""
"可调用类型； ``Callable[[int], str]`` 是一个函数，接受一个 int 参数，返回一"
"个 str 。"

#: ../../library/typing.rst:1277
msgid ""
"The subscription syntax must always be used with exactly two values: the "
"argument list and the return type.  The argument list must be a list of "
"types or an ellipsis; the return type must be a single type."
msgstr ""
"下标值的语法必须恰为两个值：参数列表和返回类型。参数列表必须是一个类型和省略"
"号组成的列表；返回值必须是单一一个类型。"

#: ../../library/typing.rst:1282
msgid ""
"There is no syntax to indicate optional or keyword arguments; such function "
"types are rarely used as callback types. ``Callable[..., ReturnType]`` "
"(literal ellipsis) can be used to type hint a callable taking any number of "
"arguments and returning ``ReturnType``.  A plain :data:`Callable` is "
"equivalent to ``Callable[..., Any]``, and in turn to :class:`collections.abc."
"Callable`."
msgstr ""
"不存在语法来表示可选的或关键词参数，这类函数类型罕见用于回调函数。 "
"``Callable[..., ReturnType]`` （使用字面省略号）能被用于提示一个可调用对象，"
"接受任意数量的参数并且返回 ``ReturnType``。单独的 :data:`Callable` 等价于 "
"``Callable[..., Any]`` ，并且进而等价于 :class:`collections.abc.Callable` 。"

#: ../../library/typing.rst:1292
msgid ""
"A type that can be used to indicate to type checkers that the corresponding "
"variable or function parameter has a value equivalent to the provided "
"literal (or one of several literals). For example::"
msgstr ""
"该类型将指示类型检查器该变量或者函数参数的值等价于提供的字面量（或者提供的几"
"个字面量的其中之一）。例如："

#: ../../library/typing.rst:1306
msgid ""
"``Literal[...]`` cannot be subclassed. At runtime, an arbitrary value is "
"allowed as type argument to ``Literal[...]``, but type checkers may impose "
"restrictions. See :pep:`586` for more details about literal types."
msgstr ""
"``Literal[...]`` 不能创建子类。在运行时，任意值均可作为 ``Literal[...]`` 的类"
"型参数，但类型检查器可以对此加以限制。字面量类型详见 :pep:`586` 。"

#: ../../library/typing.rst:1314
msgid "Special type construct to mark class variables."
msgstr "标记类变量的特殊类型构造器。"

#: ../../library/typing.rst:1316
msgid ""
"As introduced in :pep:`526`, a variable annotation wrapped in ClassVar "
"indicates that a given attribute is intended to be used as a class variable "
"and should not be set on instances of that class. Usage::"
msgstr ""
"如 :pep:`526` 所述，打包在 ClassVar 内的变量注解是指，给定属性应当用作类变"
"量，而不应设置在类实例上。用法如下："

#: ../../library/typing.rst:1324
msgid ":data:`ClassVar` accepts only types and cannot be further subscribed."
msgstr ":data:`ClassVar` 仅接受类型，也不能使用下标。"

#: ../../library/typing.rst:1326
msgid ""
":data:`ClassVar` is not a class itself, and should not be used with :func:"
"`isinstance` or :func:`issubclass`. :data:`ClassVar` does not change Python "
"runtime behavior, but it can be used by third-party type checkers. For "
"example, a type checker might flag the following code as an error::"
msgstr ""
":data:`ClassVar` 本身不是类，不应用于 :func:`isinstance` 或 :func:"
"`issubclass`。:data:`ClassVar` 不改变 Python 运行时行为，但可以用于第三方类型"
"检查器。例如，类型检查器会认为以下代码有错："

#: ../../library/typing.rst:1340
msgid ""
"A special typing construct to indicate to type checkers that a name cannot "
"be re-assigned or overridden in a subclass. For example::"
msgstr ""
"一个特殊的类型构造来指示类型检查器该名称不能被再次赋值或者在子类中被重载。例"
"如："

#: ../../library/typing.rst:1359
msgid ""
"``AnyStr`` is a type variable defined as ``AnyStr = TypeVar('AnyStr', str, "
"bytes)``."
msgstr ""
"``AnyStr`` 类型变量的定义为 ``AnyStr = TypeVar('AnyStr', str, bytes)``。"

#: ../../library/typing.rst:1362
msgid ""
"It is meant to be used for functions that may accept any kind of string "
"without allowing different kinds of strings to mix. For example::"
msgstr ""
"这里指的是，它可以接受任意同类字符串，但不支持混用不同类别的字符串。例如："

#: ../../library/typing.rst:1374
msgid ""
"A special constant that is assumed to be ``True`` by 3rd party static type "
"checkers. It is ``False`` at runtime. Usage::"
msgstr ""
"被第三方静态类型检查器假定为 ``True`` 的特殊常量。 在运行时为 ``False``。 用"
"法如下::"

#: ../../library/typing.rst:1383
msgid ""
"Note that the first type annotation must be enclosed in quotes, making it a "
"\"forward reference\", to hide the ``expensive_mod`` reference from the "
"interpreter runtime.  Type annotations for local variables are not "
"evaluated, so the second annotation does not need to be enclosed in quotes."
msgstr ""
