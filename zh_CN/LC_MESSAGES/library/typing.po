# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2023, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# MuSheng Chen <sheng.2179@gmail.com>, 2021
# ww song <sww4718168@gmail.com>, 2021
# Siyuan Xu, 2021
# jaystone776 <1732865113@qq.com>, 2021
# WH-2099 <wh2099@outlook.com>, 2022
# Alpha Du <alphanow@gmail.com>, 2022
# Jing Li <tes286.lijing@gmail.com>, 2022
# Dai Xu <daixu61@hotmail.com>, 2022
# helloworldSB <warningfor163@foxmail.com>, 2022
# Sefank <sefank@foxmail.com>, 2022
# Nyuan Zhang, 2023
# Jason Ren, 2023
# Freesand Leo <yuqinju@163.com>, 2023
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-06-09 14:13+0000\n"
"PO-Revision-Date: 2021-06-28 01:16+0000\n"
"Last-Translator: Freesand Leo <yuqinju@163.com>, 2023\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/"
"teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/typing.rst:3
msgid ":mod:`typing` --- Support for type hints"
msgstr ":mod:`typing` —— 类型注解支持"

#: ../../library/typing.rst:16
msgid "**Source code:** :source:`Lib/typing.py`"
msgstr "**源码：** :source:`Lib/typing.py`"

#: ../../library/typing.rst:20
msgid ""
"The Python runtime does not enforce function and variable type annotations. "
"They can be used by third party tools such as type checkers, IDEs, linters, "
"etc."
msgstr ""
"Python 运行时不强制执行函数和变量类型注解，但这些注解可用于类型检查器、IDE、"
"静态检查器等第三方工具。"

#: ../../library/typing.rst:26
msgid ""
"This module provides runtime support for type hints. The most fundamental "
"support consists of the types :data:`Any`, :data:`Union`, :data:`Callable`, :"
"class:`TypeVar`, and :class:`Generic`. For a specification, please see :pep:"
"`484`. For a simplified introduction to type hints, see :pep:`483`."
msgstr ""
"这个模块提供了对类型提示的运行时支持。 最基本的支持包括 :data:`Any`, :data:"
"`Union`, :data:`Callable`, :class:`TypeVar` 和 :class:`Generic` 等类型。 关于"
"完整的规范，请参阅 :pep:`484`。 要获取对类型提示的简要介绍，请参阅 :pep:"
"`483`。"

#: ../../library/typing.rst:32
msgid ""
"The function below takes and returns a string and is annotated as follows::"
msgstr "下面的函数接收与返回的都是字符串，注解方式如下："

#: ../../library/typing.rst:37
msgid ""
"In the function ``greeting``, the argument ``name`` is expected to be of "
"type :class:`str` and the return type :class:`str`. Subtypes are accepted as "
"arguments."
msgstr ""
"``greeting`` 函数中，参数 ``name`` 的类型是 :class:`str`，返回类型也是 :"
"class:`str`。子类型也可以当作参数。"

#: ../../library/typing.rst:41
msgid ""
"New features are frequently added to the ``typing`` module. The "
"`typing_extensions <https://pypi.org/project/typing-extensions/>`_ package "
"provides backports of these new features to older versions of Python."
msgstr ""
"新的功能频繁地被添加到 ``typing`` 模块中。`typing_extensions <https://pypi."
"org/project/typing-extensions/>`_ 包提供了这些新功能对旧版本 Python 的向后移"
"植。"

#: ../../library/typing.rst:45
msgid ""
"For a summary of deprecated features and a deprecation timeline, please see "
"`Deprecation Timeline of Major Features`_."
msgstr ""
"要获取已弃用特性及其弃用时间线的概要，请参阅 `Deprecation Timeline of Major "
"Features`_。"

#: ../../library/typing.rst:50
msgid ""
"For a quick overview of type hints, refer to `this cheat sheet <https://mypy."
"readthedocs.io/en/stable/cheat_sheet_py3.html>`_."
msgstr ""
"要获取有关类型提示的简要介绍，请参考 `这个备忘单 <https://mypy.readthedocs."
"io/en/stable/cheat_sheet_py3.html>`_。"

#: ../../library/typing.rst:53
msgid ""
"The \"Type System Reference\" section of https://mypy.readthedocs.io/ -- "
"since the Python typing system is standardised via PEPs, this reference "
"should broadly apply to most Python type checkers, although some parts may "
"still be specific to mypy."
msgstr ""
"https://mypy.readthedocs.io/ 的 \"Type System Reference\" 小节 -- 由于 "
"Python 类型系统是通过 PEP 来标准化的，该参考应当广泛适用于大多数 Python 类型"
"检查器，不过有部分内容仍然是 mypy 专属的。"

#: ../../library/typing.rst:58
msgid ""
"The documentation at https://typing.readthedocs.io/ serves as useful "
"reference for type system features, useful typing related tools and typing "
"best practices."
msgstr ""
"位于 https://typing.readthedocs.io/ 的文档提供有用的类型系统功能参考, 类型关"
"系工具以及练习"

#: ../../library/typing.rst:64
msgid "Relevant PEPs"
msgstr "相关的 PEP"

#: ../../library/typing.rst:66
msgid ""
"Since the initial introduction of type hints in :pep:`484` and :pep:`483`, a "
"number of PEPs have modified and enhanced Python's framework for type "
"annotations:"
msgstr ""

#: ../../library/typing.rst:76
msgid ":pep:`526`: Syntax for Variable Annotations"
msgstr ":pep:`526`: 变量注解的语法"

#: ../../library/typing.rst:76
msgid ""
"*Introducing* syntax for annotating variables outside of function "
"definitions, and :data:`ClassVar`"
msgstr "*引入* 在函数定义之外标注变量的语法，以及 :data:`ClassVar` 。"

#: ../../library/typing.rst:79
msgid ":pep:`544`: Protocols: Structural subtyping (static duck typing)"
msgstr ":pep:`544`: Protocol：结构子类型（静态鸭子类型）。"

#: ../../library/typing.rst:79
msgid ""
"*Introducing* :class:`Protocol` and the :func:"
"`@runtime_checkable<runtime_checkable>` decorator"
msgstr ""
"*引入* :class:`Protocol` 和 :func:`@runtime_checkable <runtime_checkable>` 装"
"饰器。"

#: ../../library/typing.rst:82
msgid ":pep:`585`: Type Hinting Generics In Standard Collections"
msgstr ":pep:`585`: 标准集合中的类型提示泛型"

#: ../../library/typing.rst:82
msgid ""
"*Introducing* :class:`types.GenericAlias` and the ability to use standard "
"library classes as :ref:`generic types<types-genericalias>`"
msgstr ""
"*引入* :class:`types.GenericAlias` 和使用标准库类作为 :ref:`通用类型 <types-"
"genericalias>` 的能力。"

#: ../../library/typing.rst:84
msgid ":pep:`586`: Literal Types"
msgstr ":pep:`586`: 文字类型"

#: ../../library/typing.rst:85
msgid "*Introducing* :data:`Literal`"
msgstr "*引入* :data:`Literal`"

#: ../../library/typing.rst:86
msgid ""
":pep:`589`: TypedDict: Type Hints for Dictionaries with a Fixed Set of Keys"
msgstr ":pep:`589`: TypedDict: 具有固定键集的字典的类型提示"

#: ../../library/typing.rst:87
msgid "*Introducing* :class:`TypedDict`"
msgstr "*引入* :class:`TypedDict`"

#: ../../library/typing.rst:88
msgid ":pep:`591`: Adding a final qualifier to typing"
msgstr ":pep:`591`: 为 typing 添加最终限定符"

#: ../../library/typing.rst:89
msgid "*Introducing* :data:`Final` and the :func:`@final<final>` decorator"
msgstr "*引入* :data:`Final` 和 :func:`@final<final>` 装饰器"

#: ../../library/typing.rst:90
msgid ":pep:`593`: Flexible function and variable annotations"
msgstr ":pep:`593`: 灵活的函数和变量注解"

#: ../../library/typing.rst:91
msgid "*Introducing* :data:`Annotated`"
msgstr "*引入* :data:`Annotated`"

#: ../../library/typing.rst:94
msgid ":pep:`604`: Allow writing union types as ``X | Y``"
msgstr ":pep:`604`: 允许 ``X | Y`` 形式的联合类型写法"

#: ../../library/typing.rst:93
msgid ""
"*Introducing* :data:`types.UnionType` and the ability to use the binary-or "
"operator ``|`` to signify a :ref:`union of types<types-union>`"
msgstr ""
"*引入* :data:`types.UnionType` 和使用二元或运算符 ``|`` 来表示 :ref:`类型联"
"合 <types-union>` 的能力。"

#: ../../library/typing.rst:96
msgid ":pep:`612`: Parameter Specification Variables"
msgstr ":pep:`612`: 形参规格变量"

#: ../../library/typing.rst:97
msgid "*Introducing* :class:`ParamSpec` and :data:`Concatenate`"
msgstr "*引入* :class:`ParamSpec` 和 :data:`Concatenate`"

#: ../../library/typing.rst:98
msgid ":pep:`613`: Explicit Type Aliases"
msgstr ":pep:`613`: 显式类型别名"

#: ../../library/typing.rst:99
msgid "*Introducing* :data:`TypeAlias`"
msgstr "*引入* :data:`TypeAlias`"

#: ../../library/typing.rst:100
msgid ":pep:`646`: Variadic Generics"
msgstr ":pep:`646`：可变参数泛型"

#: ../../library/typing.rst:101
msgid "*Introducing* :data:`TypeVarTuple`"
msgstr "*引入* :data:`TypeVarTuple`"

#: ../../library/typing.rst:102
msgid ":pep:`647`: User-Defined Type Guards"
msgstr ":pep:`647`: 用户自定义的类型保护器"

#: ../../library/typing.rst:103
msgid "*Introducing* :data:`TypeGuard`"
msgstr "*引入* :data:`TypeGuard`"

#: ../../library/typing.rst:104
msgid ""
":pep:`655`: Marking individual TypedDict items as required or potentially "
"missing"
msgstr ":pep:`655`：将单个 TypedDict 项标记为必填或非必填项"

#: ../../library/typing.rst:105
msgid "*Introducing* :data:`Required` and :data:`NotRequired`"
msgstr "*引入* :data:`Required` 和 :data:`NotRequired`"

#: ../../library/typing.rst:106
msgid ":pep:`673`: Self type"
msgstr ":pep:`673`：Self 类型"

#: ../../library/typing.rst:107
msgid "*Introducing* :data:`Self`"
msgstr "*引入* :data:`Self`"

#: ../../library/typing.rst:108
msgid ":pep:`675`: Arbitrary Literal String Type"
msgstr ":pep:`675`：任意字面值字符串类型"

#: ../../library/typing.rst:109
msgid "*Introducing* :data:`LiteralString`"
msgstr "*引入* :data:`LiteralString`"

#: ../../library/typing.rst:110
msgid ":pep:`681`: Data Class Transforms"
msgstr ":pep:`681`：数据类变换"

#: ../../library/typing.rst:111
msgid ""
"*Introducing* the :func:`@dataclass_transform<dataclass_transform>` decorator"
msgstr "*引入* :func:`@dataclass_transform<dataclass_transform>` 装饰器"

#: ../../library/typing.rst:113
msgid ":pep:`692`: Using ``TypedDict`` for more precise ``**kwargs`` typing"
msgstr ""

#: ../../library/typing.rst:113
msgid ""
"*Introducing* a new way of typing ``**kwargs`` with :data:`Unpack` and :data:"
"`TypedDict`"
msgstr ""

#: ../../library/typing.rst:115
msgid ":pep:`695`: Type Parameter Syntax"
msgstr ""

#: ../../library/typing.rst:116
msgid ""
"*Introducing* builtin syntax for creating generic functions, classes, and "
"type aliases."
msgstr ""

#: ../../library/typing.rst:118
msgid ":pep:`698`: Adding an override decorator to typing"
msgstr ""

#: ../../library/typing.rst:118
msgid "*Introducing* the :func:`@override<override>` decorator"
msgstr ""

#: ../../library/typing.rst:128
msgid "Type aliases"
msgstr "类型别名"

#: ../../library/typing.rst:130
msgid ""
"A type alias is defined using the :keyword:`type` statement, which creates "
"an instance of :class:`TypeAliasType`. In this example, ``Vector`` and "
"``list[float]`` will be treated equivalently by static type checkers::"
msgstr ""

#: ../../library/typing.rst:143
msgid ""
"Type aliases are useful for simplifying complex type signatures. For "
"example::"
msgstr "类型别名适用于简化复杂的类型签名。例如："

#: ../../library/typing.rst:161
msgid ""
"Note that ``None`` as a type hint is a special case and is replaced by "
"``type(None)``."
msgstr "注意，``None`` 是一种类型提示特例，已被 ``type(None)`` 取代。"

#: ../../library/typing.rst:164
msgid ""
"The :keyword:`type` statement is new in Python 3.12. For backwards "
"compatibility, type aliases can also be created through simple assignment::"
msgstr ""

#: ../../library/typing.rst:169
msgid ""
"Or marked with :data:`TypeAlias` to make it explicit that this is a type "
"alias, not a normal variable assignment::"
msgstr ""

#: ../../library/typing.rst:179
msgid "NewType"
msgstr "NewType"

#: ../../library/typing.rst:181
msgid "Use the :class:`NewType` helper to create distinct types::"
msgstr "使用 :class:`NewType` 助手来创建不同的类型 ::"

#: ../../library/typing.rst:188
msgid ""
"The static type checker will treat the new type as if it were a subclass of "
"the original type. This is useful in helping catch logical errors::"
msgstr "静态类型检查器把新类型当作原始类型的子类，这种方式适用于捕捉逻辑错误："

#: ../../library/typing.rst:200
msgid ""
"You may still perform all ``int`` operations on a variable of type "
"``UserId``, but the result will always be of type ``int``. This lets you "
"pass in a ``UserId`` wherever an ``int`` might be expected, but will prevent "
"you from accidentally creating a ``UserId`` in an invalid way::"
msgstr ""
"``UserId`` 类型的变量可执行所有 ``int`` 操作，但返回结果都是 ``int`` 类型。这"
"种方式允许在预期 ``int`` 时传入 ``UserId``，还能防止意外创建无效的 "
"``UserId``："

#: ../../library/typing.rst:208
msgid ""
"Note that these checks are enforced only by the static type checker. At "
"runtime, the statement ``Derived = NewType('Derived', Base)`` will make "
"``Derived`` a callable that immediately returns whatever parameter you pass "
"it. That means the expression ``Derived(some_value)`` does not create a new "
"class or introduce much overhead beyond that of a regular function call."
msgstr ""
"注意，这些检查只由静态类型检查器强制执行。在运行时，语句 ``Derived = "
"NewType('Derived', Base)`` 将产生一个 ``Derived`` 可调用对象，该对象立即返回"
"你传递给它的任何参数。 这意味着语句 ``Derived(some_value)`` 不会创建一个新的"
"类，也不会引入超出常规函数调用的很多开销。"

#: ../../library/typing.rst:214
msgid ""
"More precisely, the expression ``some_value is Derived(some_value)`` is "
"always true at runtime."
msgstr ""
"更确切地说，在运行时，``some_value is Derived(some_value)`` 表达式总为 True。"

#: ../../library/typing.rst:217
msgid "It is invalid to create a subtype of ``Derived``::"
msgstr "创建 ``Derived`` 的子类型是无效的::"

#: ../../library/typing.rst:226
msgid ""
"However, it is possible to create a :class:`NewType` based on a 'derived' "
"``NewType``::"
msgstr ""
"然而，我们可以在 \"派生的\" ``NewType`` 的基础上创建一个 :class:`NewType`。"

#: ../../library/typing.rst:234
msgid "and typechecking for ``ProUserId`` will work as expected."
msgstr "同时，``ProUserId`` 的类型检查也可以按预期执行。"

#: ../../library/typing.rst:236
msgid "See :pep:`484` for more details."
msgstr "详见 :pep:`484`。"

#: ../../library/typing.rst:240
msgid ""
"Recall that the use of a type alias declares two types to be *equivalent* to "
"one another. Doing ``type Alias = Original`` will make the static type "
"checker treat ``Alias`` as being *exactly equivalent* to ``Original`` in all "
"cases. This is useful when you want to simplify complex type signatures."
msgstr ""

#: ../../library/typing.rst:245
msgid ""
"In contrast, ``NewType`` declares one type to be a *subtype* of another. "
"Doing ``Derived = NewType('Derived', Original)`` will make the static type "
"checker treat ``Derived`` as a *subclass* of ``Original``, which means a "
"value of type ``Original`` cannot be used in places where a value of type "
"``Derived`` is expected. This is useful when you want to prevent logic "
"errors with minimal runtime cost."
msgstr ""
"反之，``NewType`` 声明把一种类型当作另一种类型的 *子类型*。``Derived = "
"NewType('Derived', Original)`` 时，静态类型检查器把 ``Derived`` 当作 "
"``Original`` 的 *子类* ，即，``Original`` 类型的值不能用在预期 ``Derived`` 类"
"型的位置。这种方式适用于以最小运行时成本防止逻辑错误。"

#: ../../library/typing.rst:254
msgid ""
"``NewType`` is now a class rather than a function.  As a result, there is "
"some additional runtime cost when calling ``NewType`` over a regular "
"function."
msgstr ""

#: ../../library/typing.rst:259
msgid ""
"The performance of calling ``NewType`` has been restored to its level in "
"Python 3.9."
msgstr ""

#: ../../library/typing.rst:265
msgid "Callable"
msgstr "可调对象（Callable）"

#: ../../library/typing.rst:267
msgid ""
"Frameworks expecting callback functions of specific signatures might be type "
"hinted using ``Callable[[Arg1Type, Arg2Type], ReturnType]``."
msgstr ""
"预期特定签名回调函数的框架可以用 ``Callable[[Arg1Type, Arg2Type], "
"ReturnType]`` 实现类型提示。"

#: ../../library/typing.rst:270 ../../library/typing.rst:3209
#: ../../library/typing.rst:3345
msgid "For example:"
msgstr "例如:"

#: ../../library/typing.rst:288
msgid ""
"It is possible to declare the return type of a callable without specifying "
"the call signature by substituting a literal ellipsis for the list of "
"arguments in the type hint: ``Callable[..., ReturnType]``."
msgstr ""
"无需指定调用签名，用省略号字面量替换类型提示里的参数列表： ``Callable[..., "
"ReturnType]``，就可以声明可调对象的返回类型。"

#: ../../library/typing.rst:292 ../../library/typing.rst:989
msgid ""
"Callables which take other callables as arguments may indicate that their "
"parameter types are dependent on each other using :class:`ParamSpec`. "
"Additionally, if that callable adds or removes arguments from other "
"callables, the :data:`Concatenate` operator may be used.  They take the form "
"``Callable[ParamSpecVariable, ReturnType]`` and "
"``Callable[Concatenate[Arg1Type, Arg2Type, ..., ParamSpecVariable], "
"ReturnType]`` respectively."
msgstr ""
"以其他可调用对象为参数的可调用对象可以使用 :class:`ParamSpec` 来表明其参数类"
"型是相互依赖的。 此外，如果该可调用对象增加或删除了其他可调用对象的参数，可以"
"使用 :data:`Concatenate` 操作符。 它们分别采取 ``Callable[ParamSpecVariable, "
"ReturnType]`` 和 ``Callable[Concatenate[Arg1Type, Arg2Type, ..., "
"ParamSpecVariable], ReturnType]`` 的形式。"

#: ../../library/typing.rst:300 ../../library/typing.rst:1001
msgid ""
"``Callable`` now supports :class:`ParamSpec` and :data:`Concatenate`. See :"
"pep:`612` for more details."
msgstr ""
"``Callable`` 现在支持 :class:`ParamSpec` 和 :data:`Concatenate`。 详情见 :"
"pep:`612`。"

#: ../../library/typing.rst:305
msgid ""
"The documentation for :class:`ParamSpec` and :class:`Concatenate` provides "
"examples of usage in ``Callable``."
msgstr ""
":class:`ParamSpec` 和 :class:`Concatenate` 的文档提供了在 ``Callable`` 中使用"
"的例子。"

#: ../../library/typing.rst:311
msgid "Generics"
msgstr "泛型（Generic）"

#: ../../library/typing.rst:313
msgid ""
"Since type information about objects kept in containers cannot be statically "
"inferred in a generic way, many container classes in the standard library "
"support subscription to denote the expected types of container elements."
msgstr ""

#: ../../library/typing.rst:330
msgid ""
"Generic functions and classes can be parameterized by using :ref:`type "
"parameter syntax <type-params>`::"
msgstr ""

#: ../../library/typing.rst:338
msgid "Or by using the :class:`TypeVar` factory directly::"
msgstr ""

#: ../../library/typing.rst:348
msgid "Syntactic support for generics is new in Python 3.12."
msgstr ""

#: ../../library/typing.rst:354
msgid "User-defined generic types"
msgstr "用户定义的泛型类型"

#: ../../library/typing.rst:356
msgid "A user-defined class can be defined as a generic class."
msgstr "用户定义的类可以定义为泛型类。"

#: ../../library/typing.rst:379
msgid ""
"This syntax indicates that the class ``LoggedVar`` is parameterised around a "
"single :class:`type variable <TypeVar>` ``T`` . This also makes ``T`` valid "
"as a type within the class body."
msgstr ""

#: ../../library/typing.rst:383
msgid ""
"Generic classes implicitly inherit from :class:`Generic`. For compatibility "
"with Python 3.11 and lower, it is also possible to inherit explicitly from :"
"class:`Generic` to indicate a generic class::"
msgstr ""

#: ../../library/typing.rst:394
msgid ""
"Generic classes have :meth:`~object.__class_getitem__` methods, meaning they "
"can be parameterised at runtime (e.g. ``LoggedVar[int]`` below)::"
msgstr ""

#: ../../library/typing.rst:403
msgid ""
"A generic type can have any number of type variables. All varieties of :"
"class:`TypeVar` are permissible as parameters for a generic type::"
msgstr ""
"一个泛型可以有任何数量的类型变量。所有种类的 :class:`TypeVar` 都可以作为泛型"
"的参数::"

#: ../../library/typing.rst:418
msgid ""
"Each type variable argument to :class:`Generic` must be distinct. This is "
"thus invalid::"
msgstr ":class:`Generic` 类型变量的参数应各不相同。下列代码就是无效的："

#: ../../library/typing.rst:432
msgid "Generic classes can also inherit from other classes::"
msgstr ""

#: ../../library/typing.rst:439
msgid ""
"When inheriting from generic classes, some type parameters could be fixed::"
msgstr ""

#: ../../library/typing.rst:446
msgid "In this case ``MyDict`` has a single parameter, ``T``."
msgstr "比如，本例中 ``MyDict`` 调用的单参数，``T``。"

#: ../../library/typing.rst:448
msgid ""
"Using a generic class without specifying type parameters assumes :data:`Any` "
"for each position. In the following example, ``MyIterable`` is not generic "
"but implicitly inherits from ``Iterable[Any]``:"
msgstr ""

#: ../../library/typing.rst:459
msgid "User-defined generic type aliases are also supported. Examples::"
msgstr ""

#: ../../library/typing.rst:474
msgid ""
"For backward compatibility, generic type aliases can also be created through "
"a simple assignment::"
msgstr ""

#: ../../library/typing.rst:483
msgid ":class:`Generic` no longer has a custom metaclass."
msgstr ":class:`Generic` 不再支持自定义元类。"

#: ../../library/typing.rst:486
msgid ""
"Syntactic support for generics and type aliases is new in version 3.12. "
"Previously, generic classes had to explicitly inherit from :class:`Generic` "
"or contain a type variable in one of their bases."
msgstr ""

#: ../../library/typing.rst:491
msgid ""
"User-defined generics for parameter expressions are also supported via "
"parameter specification variables in the form ``[**P]``.  The behavior is "
"consistent with type variables' described above as parameter specification "
"variables are treated by the typing module as a specialized type variable.  "
"The one exception to this is that a list of types can be used to substitute "
"a :class:`ParamSpec`::"
msgstr ""

#: ../../library/typing.rst:502
msgid ""
"Classes generic over a :class:`ParamSpec` can also be created using explicit "
"inheritance from :class:`Generic`. In this case, ``**`` is not used::"
msgstr ""

#: ../../library/typing.rst:512
msgid ""
"Another difference between :class:`TypeVar` and :class:`ParamSpec` is that a "
"generic with only one parameter specification variable will accept parameter "
"lists in the forms ``X[[Type1, Type2, ...]]`` and also ``X[Type1, "
"Type2, ...]`` for aesthetic reasons.  Internally, the latter is converted to "
"the former, so the following are equivalent::"
msgstr ""

#: ../../library/typing.rst:525
msgid ""
"Note that generics with :class:`ParamSpec` may not have correct "
"``__parameters__`` after substitution in some cases because they are "
"intended primarily for static type checking."
msgstr ""

#: ../../library/typing.rst:529
msgid ""
":class:`Generic` can now be parameterized over parameter expressions. See :"
"class:`ParamSpec` and :pep:`612` for more details."
msgstr ""
":class:`Generic` 现在可以通过参数表达式进行参数化。参见 :class:`ParamSpec` "
"和 :pep:`612` 以了解更多细节。"

#: ../../library/typing.rst:533
msgid ""
"A user-defined generic class can have ABCs as base classes without a "
"metaclass conflict. Generic metaclasses are not supported. The outcome of "
"parameterizing generics is cached, and most types in the typing module are :"
"term:`hashable` and comparable for equality."
msgstr ""
"用户定义的泛型类可以将 ABC 作为基类而不会导致元类冲突。 参数化泛型的输出结果"
"会被缓存，且 typing 模块中的大多数类型都是 :term:`hashable` 并且支持相等性比"
"较。"

#: ../../library/typing.rst:540
msgid "The :data:`Any` type"
msgstr ":data:`Any` 类型"

#: ../../library/typing.rst:542
msgid ""
"A special kind of type is :data:`Any`. A static type checker will treat "
"every type as being compatible with :data:`Any` and :data:`Any` as being "
"compatible with every type."
msgstr ""
":data:`Any` 是一种特殊的类型。静态类型检查器认为所有类型均与 :data:`Any` 兼"
"容，同样，:data:`Any` 也与所有类型兼容。"

#: ../../library/typing.rst:546
msgid ""
"This means that it is possible to perform any operation or method call on a "
"value of type :data:`Any` and assign it to any variable::"
msgstr ""
"也就是说，可对 :data:`Any` 类型的值执行任何操作或方法调用，并赋值给任意变量："

#: ../../library/typing.rst:564
msgid ""
"Notice that no type checking is performed when assigning a value of type :"
"data:`Any` to a more precise type. For example, the static type checker did "
"not report an error when assigning ``a`` to ``s`` even though ``s`` was "
"declared to be of type :class:`str` and receives an :class:`int` value at "
"runtime!"
msgstr ""
"注意，:data:`Any` 类型的值赋给更精确的类型时，不执行类型检查。例如，把 ``a`` "
"赋给 ``s``，在运行时，即便 ``s`` 已声明为 :class:`str` 类型，但接收 :class:"
"`int` 值时，静态类型检查器也不会报错。"

#: ../../library/typing.rst:570
msgid ""
"Furthermore, all functions without a return type or parameter types will "
"implicitly default to using :data:`Any`::"
msgstr "此外，未指定返回值与参数类型的函数，都隐式地默认使用 :data:`Any`："

#: ../../library/typing.rst:583
msgid ""
"This behavior allows :data:`Any` to be used as an *escape hatch* when you "
"need to mix dynamically and statically typed code."
msgstr "需要混用动态与静态类型代码时，此操作把 :data:`Any` 当作 *应急出口*。"

#: ../../library/typing.rst:586
msgid ""
"Contrast the behavior of :data:`Any` with the behavior of :class:`object`. "
"Similar to :data:`Any`, every type is a subtype of :class:`object`. However, "
"unlike :data:`Any`, the reverse is not true: :class:`object` is *not* a "
"subtype of every other type."
msgstr ""
":data:`Any` 和 :class:`object` 的区别。与 :data:`Any` 相似，所有类型都是 :"
"class:`object` 的子类型。然而，与 :data:`Any` 不同，object 不可逆：:class:"
"`object` *不是* 其它类型的子类型。"

#: ../../library/typing.rst:591
msgid ""
"That means when the type of a value is :class:`object`, a type checker will "
"reject almost all operations on it, and assigning it to a variable (or using "
"it as a return value) of a more specialized type is a type error. For "
"example::"
msgstr ""
"就是说，值的类型是 :class:`object` 时，类型检查器几乎会拒绝所有对它的操作，并"
"且，把它赋给更精确的类型变量（或返回值）属于类型错误。例如："

#: ../../library/typing.rst:613
msgid ""
"Use :class:`object` to indicate that a value could be any type in a typesafe "
"manner. Use :data:`Any` to indicate that a value is dynamically typed."
msgstr ""
"使用 :class:`object`，说明值能以类型安全的方式转为任何类型。使用 :data:"
"`Any`，说明值是动态类型。"

#: ../../library/typing.rst:618
msgid "Nominal vs structural subtyping"
msgstr "名义子类型 vs 结构子类型"

#: ../../library/typing.rst:620
msgid ""
"Initially :pep:`484` defined the Python static type system as using *nominal "
"subtyping*. This means that a class ``A`` is allowed where a class ``B`` is "
"expected if and only if ``A`` is a subclass of ``B``."
msgstr ""
"最初 :pep:`484` 将 Python 静态类型系统定义为使用 *名义子类型*。这意味着当且仅"
"当类 ``A`` 是 ``B`` 的子类时，才满足有类 ``B`` 预期时使用类 ``A`` 。"

#: ../../library/typing.rst:624
msgid ""
"This requirement previously also applied to abstract base classes, such as :"
"class:`~collections.abc.Iterable`. The problem with this approach is that a "
"class had to be explicitly marked to support them, which is unpythonic and "
"unlike what one would normally do in idiomatic dynamically typed Python "
"code. For example, this conforms to :pep:`484`::"
msgstr ""
"此项要求以前也适用于抽象基类，例如，:class:`~collections.abc.Iterable` 。这种"
"方式的问题在于，定义类时必须显式说明，既不 Pythonic，也不是动态类型式 Python "
"代码的惯用写法。例如，下列代码就遵从了 :pep:`484` 的规范："

#: ../../library/typing.rst:637
msgid ""
":pep:`544` allows to solve this problem by allowing users to write the above "
"code without explicit base classes in the class definition, allowing "
"``Bucket`` to be implicitly considered a subtype of both ``Sized`` and "
"``Iterable[int]`` by static type checkers. This is known as *structural "
"subtyping* (or static duck-typing)::"
msgstr ""
":pep:`544` 允许用户在类定义时不显式说明基类，从而解决了这一问题，静态类型检查"
"器隐式认为 ``Bucket`` 既是 ``Sized`` 的子类型，又是 ``Iterable[int]`` 的子类"
"型。这就是 *结构子类型* （又称为静态鸭子类型）："

#: ../../library/typing.rst:653
msgid ""
"Moreover, by subclassing a special class :class:`Protocol`, a user can "
"define new custom protocols to fully enjoy structural subtyping (see "
"examples below)."
msgstr ""
"此外，结构子类型的优势在于，通过继承特殊类 :class:`Protocol` ，用户可以定义新"
"的自定义协议（见下文中的例子）。"

#: ../../library/typing.rst:658
msgid "Module contents"
msgstr "模块内容"

#: ../../library/typing.rst:660
msgid "The module defines the following classes, functions and decorators."
msgstr "本模块定义了下列类、函数和修饰器。"

#: ../../library/typing.rst:664
msgid ""
"This module defines several deprecated aliases to pre-existing standard "
"library classes. These were originally included in the typing module in "
"order to support parameterizing these generic classes using ``[]``. However, "
"the aliases became redundant in Python 3.9 when the corresponding pre-"
"existing classes were enhanced to support ``[]``."
msgstr ""

#: ../../library/typing.rst:670
msgid ""
"The redundant types are deprecated as of Python 3.9 but no deprecation "
"warnings are issued by the interpreter. It is expected that type checkers "
"will flag the deprecated types when the checked program targets Python 3.9 "
"or newer."
msgstr ""

#: ../../library/typing.rst:675
msgid ""
"The deprecated types will be removed from the :mod:`typing` module no sooner "
"than the first Python version released 5 years after the release of Python "
"3.9.0. See details in :pep:`585`—*Type Hinting Generics In Standard "
"Collections*."
msgstr ""
"在 Python 3.9.0 发布至少 5 年之后的第一个 Python 版本将从 :mod:`typing` 模块"
"中移除这些已弃用的类型。 详见 :pep:`585`—*Type Hinting Generics In Standard "
"Collections*。"

#: ../../library/typing.rst:681
msgid "Special typing primitives"
msgstr "特殊类型原语"

#: ../../library/typing.rst:684
msgid "Special types"
msgstr "特殊类型"

#: ../../library/typing.rst:686
msgid "These can be used as types in annotations and do not support ``[]``."
msgstr "这些类型可用于类型注解，但不支持 ``[]``。"

#: ../../library/typing.rst:690
msgid "Special type indicating an unconstrained type."
msgstr "不受限的特殊类型。"

#: ../../library/typing.rst:692
msgid "Every type is compatible with :data:`Any`."
msgstr "所有类型都与 :data:`Any` 兼容。"

#: ../../library/typing.rst:693
msgid ":data:`Any` is compatible with every type."
msgstr ":data:`Any` 与所有类型都兼容。"

#: ../../library/typing.rst:695
msgid ""
":data:`Any` can now be used as a base class. This can be useful for avoiding "
"type checker errors with classes that can duck type anywhere or are highly "
"dynamic."
msgstr ""
":data:`Any` 现在可以用作基类。这有助于避免类型检查器在高度动态或可通过鸭子类"
"型使用的类上报错。"

#: ../../library/typing.rst:702
msgid ""
"``AnyStr`` is a :ref:`constrained type variable <typing-constrained-"
"typevar>` defined as ``AnyStr = TypeVar('AnyStr', str, bytes)``."
msgstr ""
"``AnyStr`` 是一个定义为 ``AnyStr = TypeVar('AnyStr', str, bytes)`` 的 :ref:`"
"约束类型变量 <typing-constrained-typevar>`。"

#: ../../library/typing.rst:705
msgid ""
"It is meant to be used for functions that may accept any kind of string "
"without allowing different kinds of strings to mix. For example::"
msgstr ""
"这里指的是，它可以接受任意同类字符串，但不支持混用不同类别的字符串。例如："

#: ../../library/typing.rst:717
msgid ""
"Special type that includes only literal strings. A string literal is "
"compatible with ``LiteralString``, as is another ``LiteralString``, but an "
"object typed as just ``str`` is not. A string created by composing "
"``LiteralString``-typed objects is also acceptable as a ``LiteralString``."
msgstr ""
"只包含字符串字面值的特殊类型。字符串字面值或其他 ``LiteralString`` 和 "
"``LiteralString`` 兼容，但 ``str`` 对象不与其兼容。通过组合 "
"``LiteralString`` 产生的字符串也被认为是 ``LiteralString`` 。"

#: ../../library/typing.rst:723 ../../library/typing.rst:1871
msgid "Example:"
msgstr "示例:"

#: ../../library/typing.rst:739
msgid ""
"This is useful for sensitive APIs where arbitrary user-generated strings "
"could generate problems. For example, the two cases above that generate type "
"checker errors could be vulnerable to an SQL injection attack."
msgstr ""
"这对于用户输入的任意字符串可以导致问题的敏感 API 很有用。例如，上述导致类型检"
"查器错误的例子可能有 SQL 注入攻击风险。"

#: ../../library/typing.rst:744
msgid "See :pep:`675` for more details."
msgstr "See :pep:`675` for more details."

#: ../../library/typing.rst:750
msgid ""
"The `bottom type <https://en.wikipedia.org/wiki/Bottom_type>`_, a type that "
"has no members."
msgstr ""
"`底类型 <https://en.wikipedia.org/wiki/Bottom_type>`_，一个没有成员的类型。"

#: ../../library/typing.rst:753
msgid ""
"This can be used to define a function that should never be called, or a "
"function that never returns::"
msgstr "这可以用于定义一个永不应该被调用的函数，或一个永不返回的函数："

#: ../../library/typing.rst:773
msgid ""
"On older Python versions, :data:`NoReturn` may be used to express the same "
"concept. ``Never`` was added to make the intended meaning more explicit."
msgstr ""
"在更老的 Python 版本上，:data:`NoReturn` 可被用于表达相同的概念。 ``Never`` "
"为了更显式地表达这个意图被加入。"

#: ../../library/typing.rst:778
msgid "Special type indicating that a function never returns. For example::"
msgstr "标记没有返回值的函数的特殊类型。例如："

#: ../../library/typing.rst:786
msgid ""
"``NoReturn`` can also be used as a `bottom type <https://en.wikipedia.org/"
"wiki/Bottom_type>`_, a type that has no values. Starting in Python 3.11, "
"the :data:`Never` type should be used for this concept instead. Type "
"checkers should treat the two equivalently."
msgstr ""
"``NoReturn`` 也可以用于 `底类型 <https://en.wikipedia.org/wiki/"
"Bottom_type>`_ 的定义，这是一种没有值的类型。自从 Python 3.11 开始，应该使"
"用 :data:`Never` 类型代替这个概念。类型检查器应该将这两种类型视为等价。"

#: ../../library/typing.rst:797
msgid "Special type to represent the current enclosed class. For example::"
msgstr "代表当前封包类的特殊类型。 例如::"

#: ../../library/typing.rst:808
msgid ""
"This annotation is semantically equivalent to the following, albeit in a "
"more succinct fashion::"
msgstr "此标准在语法上等价于以下代码，但形式更为简洁::"

#: ../../library/typing.rst:820
msgid "In general if something currently follows the pattern of::"
msgstr "总的来说如果某段代码目前遵循以下模式::"

#: ../../library/typing.rst:827
msgid ""
"You should use :data:`Self` as calls to ``SubclassOfFoo.return_self`` would "
"have ``Foo`` as the return type and not ``SubclassOfFoo``."
msgstr ""
"你应当将 :data:`Self` 用于对 ``SubclassOfFoo.return_self`` 的调用并应当得到 "
"``Foo`` 而不是 ``SubclassOfFoo`` 作为返回类型。"

#: ../../library/typing.rst:830
msgid "Other common use cases include:"
msgstr "其它常见用例包括："

#: ../../library/typing.rst:832
msgid ""
":class:`classmethod`\\s that are used as alternative constructors and return "
"instances of the ``cls`` parameter."
msgstr "被用作替代构造器的 :class:`classmethod`，它将返回 ``cls`` 形参的实例。"

#: ../../library/typing.rst:834
msgid "Annotating an :meth:`~object.__enter__` method which returns self."
msgstr "标注一个返回自身的 :meth:`~object.__enter__` 方法。"

#: ../../library/typing.rst:836
msgid "See :pep:`673` for more details."
msgstr "更多细节请参见 :pep:`673`。"

#: ../../library/typing.rst:842
msgid ""
"Special annotation for explicitly declaring a :ref:`type alias <type-"
"aliases>`."
msgstr ""

#: ../../library/typing.rst:844 ../../library/typing.rst:1368
msgid "For example::"
msgstr "例如："

#: ../../library/typing.rst:850
msgid ""
"``TypeAlias`` is particularly useful on older Python versions for annotating "
"aliases that make use of forward references, as it can be hard for type "
"checkers to distinguish these from normal variable assignments:"
msgstr ""

#: ../../library/typing.rst:870
msgid "See :pep:`613` for more details."
msgstr "请参阅 :pep:`613` 了解详情。"

#: ../../library/typing.rst:874
msgid ""
":data:`TypeAlias` is deprecated in favor of the :keyword:`type` statement, "
"which creates instances of :class:`TypeAliasType` and which natively "
"supports forward references. Note that while :data:`TypeAlias` and :class:"
"`TypeAliasType` serve similar purposes and have similar names, they are "
"distinct and the latter is not the type of the former. Removal of :data:"
"`TypeAlias` is not currently planned, but users are encouraged to migrate "
"to :keyword:`type` statements."
msgstr ""

#: ../../library/typing.rst:885
msgid "Special forms"
msgstr "特殊形式"

#: ../../library/typing.rst:887
msgid ""
"These can be used as types in annotations using ``[]``, each having a unique "
"syntax."
msgstr "可用于类型注解，且支持 ``[]`` ，每种形式都有其独特的句法。"

#: ../../library/typing.rst:891
msgid "Deprecated alias for :class:`tuple`."
msgstr ""

#: ../../library/typing.rst:893
msgid ""
"``Tuple[X, Y]`` is the type of a tuple of two items with the first item of "
"type X and the second of type Y. The type of the empty tuple can be written "
"as ``Tuple[()]``."
msgstr ""

#: ../../library/typing.rst:897
msgid ""
"Example: ``Tuple[T1, T2]`` is a tuple of two elements corresponding to type "
"variables T1 and T2.  ``Tuple[int, float, str]`` is a tuple of an int, a "
"float and a string."
msgstr ""
"例：``Tuple[T1, T2]`` 是二项元组，类型变量分别为 T1 和 T2。``Tuple[int, "
"float, str]`` 是由整数、浮点数、字符串组成的三项元组。"

#: ../../library/typing.rst:901
msgid ""
"To specify a variable-length tuple of homogeneous type, use literal "
"ellipsis, e.g. ``Tuple[int, ...]``. A plain ``Tuple`` annotation is "
"equivalent to ``tuple``, ``Tuple[Any, ...]``, or ``tuple[Any, ...]``."
msgstr ""

#: ../../library/typing.rst:905
msgid ""
":class:`builtins.tuple <tuple>` now supports subscripting (``[]``). See :pep:"
"`585` and :ref:`types-genericalias`."
msgstr ""
":class:`builtins.tuple <tuple>` 现在支持下标操作（``[]``）。参见 :pep:`585` "
"和 :ref:`types-genericalias`。"

#: ../../library/typing.rst:911
msgid ""
"Union type; ``Union[X, Y]`` is equivalent to ``X | Y`` and means either X or "
"Y."
msgstr "联合类型； ``Union[X, Y]`` 等价于 ``X | Y`` ，意味着满足 X 或 Y 之一。"

#: ../../library/typing.rst:913
msgid ""
"To define a union, use e.g. ``Union[int, str]`` or the shorthand ``int | "
"str``. Using that shorthand is recommended. Details:"
msgstr ""
"要定义一个联合类型，可以使用类似 ``Union[int, str]`` 或简写 ``int | str``。建"
"议使用这种简写。细节:"

#: ../../library/typing.rst:915
msgid "The arguments must be types and there must be at least one."
msgstr "参数必须是某种类型，且至少有一个。"

#: ../../library/typing.rst:917
msgid "Unions of unions are flattened, e.g.::"
msgstr "联合类型之联合类型会被展平，例如："

#: ../../library/typing.rst:921
msgid "Unions of a single argument vanish, e.g.::"
msgstr "单参数之联合类型就是该参数自身，例如："

#: ../../library/typing.rst:925
msgid "Redundant arguments are skipped, e.g.::"
msgstr "冗余的参数会被跳过，例如："

#: ../../library/typing.rst:929
msgid "When comparing unions, the argument order is ignored, e.g.::"
msgstr "比较联合类型，不涉及参数顺序，例如："

#: ../../library/typing.rst:933
msgid "You cannot subclass or instantiate a ``Union``."
msgstr "``Union`` 不能作为子类，也不能实例化。"

#: ../../library/typing.rst:935
msgid "You cannot write ``Union[X][Y]``."
msgstr "不支持 ``Union[X][Y]`` 这种写法。"

#: ../../library/typing.rst:937
msgid "Don't remove explicit subclasses from unions at runtime."
msgstr "在运行时，不要移除联合类型中的显式子类。"

#: ../../library/typing.rst:940
msgid ""
"Unions can now be written as ``X | Y``. See :ref:`union type "
"expressions<types-union>`."
msgstr ""
"联合类型现在可以写成 ``X | Y``。 参见 :ref:`联合类型表达式 <types-union>`。"

#: ../../library/typing.rst:946
msgid "Optional type."
msgstr "可选类型。"

#: ../../library/typing.rst:948
msgid "``Optional[X]`` is equivalent to ``X | None`` (or ``Union[X, None]``)."
msgstr "``Optional[X]`` 等价于 ``X | None`` （或 ``Union[X, None]`` ） 。"

#: ../../library/typing.rst:950
msgid ""
"Note that this is not the same concept as an optional argument, which is one "
"that has a default.  An optional argument with a default does not require "
"the ``Optional`` qualifier on its type annotation just because it is "
"optional. For example::"
msgstr ""
"注意，可选类型与含默认值的可选参数不同。含默认值的可选参数不需要在类型注解上"
"添加 ``Optional`` 限定符，因为它仅是可选的。例如："

#: ../../library/typing.rst:958
msgid ""
"On the other hand, if an explicit value of ``None`` is allowed, the use of "
"``Optional`` is appropriate, whether the argument is optional or not. For "
"example::"
msgstr ""
"另一方面，显式应用 ``None`` 值时，不管该参数是否可选， ``Optional`` 都适用。"
"例如："

#: ../../library/typing.rst:965
msgid ""
"Optional can now be written as ``X | None``. See :ref:`union type "
"expressions<types-union>`."
msgstr ""
"可选参数现在可以写成 ``X | None``。 参见 :ref:`联合类型表达式 <types-"
"union>`。"

#: ../../library/typing.rst:971
msgid "Deprecated alias to :class:`collections.abc.Callable`."
msgstr ""

#: ../../library/typing.rst:973
msgid ""
"``Callable[[int], str]`` signifies a function that takes a single parameter "
"of type :class:`int` and returns a :class:`str`."
msgstr ""

#: ../../library/typing.rst:976
msgid ""
"The subscription syntax must always be used with exactly two values: the "
"argument list and the return type.  The argument list must be a list of "
"types, a :class:`ParamSpec`, :data:`Concatenate`, or an ellipsis. The return "
"type must be a single type."
msgstr ""

#: ../../library/typing.rst:981
msgid ""
"There is no syntax to indicate optional or keyword arguments; such function "
"types are rarely used as callback types. ``Callable[..., ReturnType]`` "
"(literal ellipsis) can be used to type hint a callable taking any number of "
"arguments and returning ``ReturnType``.  A plain :data:`Callable` is "
"equivalent to ``Callable[..., Any]``, and in turn to :class:`collections.abc."
"Callable`."
msgstr ""
"没有说明可选参数或关键字参数的句法；这类函数类型很少用作回调类型。"
"``Callable[..., ReturnType]`` （省略号字面量）可用于为接受任意数量参数，并返"
"回 ``ReturnType`` 的可调对象提供类型提示。纯 :data:`Callable` 等价于 "
"``Callable[..., Any]``，进而等价于 :class:`collections.abc.Callable` 。"

#: ../../library/typing.rst:997
msgid ""
":class:`collections.abc.Callable` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.Callable` 现在支持下标操作（``[]``）。参见 :pep:"
"`585` 和 :ref:`types-genericalias`。"

#: ../../library/typing.rst:1006
msgid ""
"The documentation for :class:`ParamSpec` and :class:`Concatenate` provide "
"examples of usage with ``Callable``."
msgstr ""
":class:`ParamSpec` 和 :class:`Concatenate` 的文档提供了使用 ``Callable`` 的例"
"子。"

#: ../../library/typing.rst:1011
msgid ""
"Used with :data:`Callable` and :class:`ParamSpec` to type annotate a higher "
"order callable which adds, removes, or transforms parameters of another "
"callable.  Usage is in the form ``Concatenate[Arg1Type, Arg2Type, ..., "
"ParamSpecVariable]``. ``Concatenate`` is currently only valid when used as "
"the first argument to a :data:`Callable`. The last parameter to "
"``Concatenate`` must be a :class:`ParamSpec` or ellipsis (``...``)."
msgstr ""
"与 :data:`Callable` 和 :class:`ParamSpec` 一起使用来对高阶可调用对象进行类型"
"标注，该可象可以添加、移除或转换另一个可调用对象的形参。 使用形式为 "
"``Concatenate[Arg1Type, Arg2Type, ..., ParamSpecVariable]``。 "
"``Concatenate`` 目前只在用作传给 :data:`Callable` 的第一个参数时有效。 传给 "
"``Concatenate`` 的最后一个形参必须为 :class:`ParamSpec` 或省略符 (``...``)。"

#: ../../library/typing.rst:1019
msgid ""
"For example, to annotate a decorator ``with_lock`` which provides a :class:"
"`threading.Lock` to the decorated function,  ``Concatenate`` can be used to "
"indicate that ``with_lock`` expects a callable which takes in a ``Lock`` as "
"the first argument, and returns a callable with a different type signature.  "
"In this case, the :class:`ParamSpec` indicates that the returned callable's "
"parameter types are dependent on the parameter types of the callable being "
"passed in::"
msgstr ""
"例如，为了注释一个装饰器 ``with_lock``，它为被装饰的函数提供了 :class:"
"`threading.Lock`，``Concatenate`` 可以用来表示 ``with_lock`` 期望一个可调用对"
"象，该对象接收一个 ``Lock`` 作为第一个参数，并返回一个具有不同类型签名的可调"
"用对象。 在这种情况下，:class:`ParamSpec` 表示返回的可调用对象的参数类型取决"
"于被传入的可调用程序的参数类型::"

#: ../../library/typing.rst:1058 ../../library/typing.rst:1845
msgid ""
":pep:`612` -- Parameter Specification Variables (the PEP which introduced "
"``ParamSpec`` and ``Concatenate``)."
msgstr ""
":pep:`612` -- 参数规范变量（引入 ``ParamSpec`` 和 ``Concatenate`` 的 PEP）。"

#: ../../library/typing.rst:1060
msgid ":class:`ParamSpec` and :class:`Callable`."
msgstr ":class:`ParamSpec` 和 :class:`Callable`。"

#: ../../library/typing.rst:1065
msgid "Deprecated alias to :class:`type`."
msgstr ""

#: ../../library/typing.rst:1067
msgid ""
"A variable annotated with ``C`` may accept a value of type ``C``. In "
"contrast, a variable annotated with ``type[C]`` or ``Type[C]`` may accept "
"values that are classes themselves -- specifically, it will accept the "
"*class object* of ``C``. For example::"
msgstr ""

#: ../../library/typing.rst:1076
msgid "Note that ``Type[C]`` is covariant::"
msgstr "注意，``Type[C]`` 为协变量："

#: ../../library/typing.rst:1088
msgid ""
"The fact that ``Type[C]`` is covariant implies that all subclasses of ``C`` "
"should implement the same constructor signature and class method signatures "
"as ``C``. The type checker should flag violations of this, but should also "
"allow constructor calls in subclasses that match the constructor calls in "
"the indicated base class. How the type checker is required to handle this "
"particular case may change in future revisions of :pep:`484`."
msgstr ""
"``Type[C]`` 为协变量的意思是指， ``C`` 的所有子类都应使用与 ``C`` 相同的构造"
"器签名及类方法签名。类型检查器应标记违反此项规定的内容，但也应允许符合指定基"
"类构造器调用的子类进行构造器调用。:pep:`484`  修订版将来可能会调整类型检查器"
"对这种特例的处理方式。"

#: ../../library/typing.rst:1096
msgid ""
"The only legal parameters for :class:`Type` are classes, :data:`Any`, :ref:"
"`type variables <generics>`, and unions of any of these types. For example::"
msgstr ""
" :class:`Type` 合法的参数仅有类、:data:`Any` 、:ref:`类型变量<generics>` 以及"
"上述类型的联合类型。例如："

#: ../../library/typing.rst:1102
msgid ""
"``Type[Any]`` is equivalent to ``Type`` which in turn is equivalent to "
"``type``, which is the root of Python's metaclass hierarchy."
msgstr ""
" ``Type[Any]`` 等价于 ``Type``，进而等价于 Python 元类架构的根基，``type``。"

#: ../../library/typing.rst:1107
msgid ""
":class:`builtins.type <type>` now supports subscripting (``[]``). See :pep:"
"`585` and :ref:`types-genericalias`."
msgstr ""
":class:`builtins.type <type>` 现在支持下标操作 (``[]``)。 参见 :pep:`585` "
"和 :ref:`types-genericalias`。"

#: ../../library/typing.rst:1113
msgid ""
"A type that can be used to indicate to type checkers that the corresponding "
"variable or function parameter has a value equivalent to the provided "
"literal (or one of several literals). For example::"
msgstr ""
"表示类型检查器对应变量或函数参数的值等价于给定字面量（或多个字面量之一）的类"
"型。例如："

#: ../../library/typing.rst:1127
msgid ""
"``Literal[...]`` cannot be subclassed. At runtime, an arbitrary value is "
"allowed as type argument to ``Literal[...]``, but type checkers may impose "
"restrictions. See :pep:`586` for more details about literal types."
msgstr ""
"``Literal[...]`` 不能创建子类。在运行时，任意值均可作为 ``Literal[...]`` 的类"
"型参数，但类型检查器可以对此加以限制。字面量类型详见 :pep:`586` 。"

#: ../../library/typing.rst:1133
msgid ""
"``Literal`` now de-duplicates parameters.  Equality comparisons of "
"``Literal`` objects are no longer order dependent. ``Literal`` objects will "
"now raise a :exc:`TypeError` exception during equality comparisons if one of "
"their parameters are not :term:`hashable`."
msgstr ""
"``Literal`` 现在能去除形参的重复。 ``Literal`` 对象的相等性比较不再依赖顺"
"序。 现在如果有某个参数不为 :term:`hashable`，``Literal`` 对象在相等性比较期"
"间将引发 :exc:`TypeError`。"

#: ../../library/typing.rst:1141
msgid "Special type construct to mark class variables."
msgstr "标记类变量的特殊类型构造器。"

#: ../../library/typing.rst:1143
msgid ""
"As introduced in :pep:`526`, a variable annotation wrapped in ClassVar "
"indicates that a given attribute is intended to be used as a class variable "
"and should not be set on instances of that class. Usage::"
msgstr ""
"如 :pep:`526` 所述，打包在 ClassVar 内的变量注解是指，给定属性应当用作类变"
"量，而不应设置在类实例上。用法如下："

#: ../../library/typing.rst:1151
msgid ":data:`ClassVar` accepts only types and cannot be further subscribed."
msgstr ":data:`ClassVar` 仅接受类型，也不能使用下标。"

#: ../../library/typing.rst:1153
msgid ""
":data:`ClassVar` is not a class itself, and should not be used with :func:"
"`isinstance` or :func:`issubclass`. :data:`ClassVar` does not change Python "
"runtime behavior, but it can be used by third-party type checkers. For "
"example, a type checker might flag the following code as an error::"
msgstr ""
":data:`ClassVar` 本身不是类，不应用于 :func:`isinstance` 或 :func:"
"`issubclass`。:data:`ClassVar` 不改变 Python 运行时行为，但可以用于第三方类型"
"检查器。例如，类型检查器会认为以下代码有错："

#: ../../library/typing.rst:1167
msgid ""
"A special typing construct to indicate to type checkers that a name cannot "
"be re-assigned or overridden in a subclass. For example::"
msgstr "告知类型检查器某名称不能再次赋值或在子类中重写的特殊类型构造器。例如："

#: ../../library/typing.rst:1179 ../../library/typing.rst:3170
msgid ""
"There is no runtime checking of these properties. See :pep:`591` for more "
"details."
msgstr "这些属性没有运行时检查。详见 :pep:`591`。"

#: ../../library/typing.rst:1188
msgid ""
"Special typing constructs that mark individual keys of a :class:`TypedDict` "
"as either required or non-required respectively."
msgstr "将 :class:`TypedDict` 中单独的键分别标记为必需或非必需的特殊类型构造。"

#: ../../library/typing.rst:1191
msgid "See :class:`TypedDict` and :pep:`655` for more details."
msgstr "详情参见 :class:`TypedDict` 和 :pep:`655`。"

#: ../../library/typing.rst:1197
msgid "Special typing form to add context-specific metadata to an annotation."
msgstr ""

#: ../../library/typing.rst:1199
msgid ""
"Add metadata ``x`` to a given type ``T`` by using the annotation "
"``Annotated[T, x]``. Metadata added using ``Annotated`` can be used by "
"static analysis tools or at runtime. At runtime, the metadata is stored in "
"a :attr:`!__metadata__` attribute."
msgstr ""

#: ../../library/typing.rst:1204
msgid ""
"If a library or tool encounters an annotation ``Annotated[T, x]`` and has no "
"special logic for the metadata, it should ignore the metadata and simply "
"treat the annotation as ``T``. As such, ``Annotated`` can be useful for code "
"that wants to use annotations for purposes outside Python's static typing "
"system."
msgstr ""

#: ../../library/typing.rst:1210
msgid ""
"Using ``Annotated[T, x]`` as an annotation still allows for static "
"typechecking of ``T``, as type checkers will simply ignore the metadata "
"``x``. In this way, ``Annotated`` differs from the :func:`@no_type_check "
"<no_type_check>` decorator, which can also be used for adding annotations "
"outside the scope of the typing system, but completely disables typechecking "
"for a function or class."
msgstr ""

#: ../../library/typing.rst:1217
msgid ""
"The responsibility of how to interpret the metadata lies with the the tool "
"or library encountering an ``Annotated`` annotation. A tool or library "
"encountering an ``Annotated`` type can scan through the metadata elements to "
"determine if they are of interest (e.g., using :func:`isinstance`)."
msgstr ""

#: ../../library/typing.rst:1225
msgid ""
"Here is an example of how you might use ``Annotated`` to add metadata to "
"type annotations if you were doing range analysis:"
msgstr ""

#: ../../library/typing.rst:1238
msgid "Details of the syntax:"
msgstr ""

#: ../../library/typing.rst:1240
msgid "The first argument to ``Annotated`` must be a valid type"
msgstr "``Annotated`` 的第一个参数必须是有效类型。"

#: ../../library/typing.rst:1242
msgid ""
"Multiple metadata elements can be supplied (``Annotated`` supports variadic "
"arguments)::"
msgstr ""

#: ../../library/typing.rst:1251
msgid ""
"It is up to the tool consuming the annotations to decide whether the client "
"is allowed to add multiple metadata elements to one annotation and how to "
"merge those annotations."
msgstr ""

#: ../../library/typing.rst:1255
msgid ""
"``Annotated`` must be subscripted with at least two arguments "
"( ``Annotated[int]`` is not valid)"
msgstr ""

#: ../../library/typing.rst:1258
msgid ""
"The order of the metadata elements is preserved and matters for equality "
"checks::"
msgstr ""

#: ../../library/typing.rst:1265
msgid ""
"Nested ``Annotated`` types are flattened. The order of the metadata elements "
"starts with the innermost annotation::"
msgstr ""

#: ../../library/typing.rst:1272
msgid "Duplicated metadata elements are not removed::"
msgstr ""

#: ../../library/typing.rst:1278
msgid "``Annotated`` can be used with nested and generic aliases:"
msgstr ""

#: ../../library/typing.rst:1292
msgid "``Annotated`` cannot be used with an unpacked :class:`TypeVarTuple`::"
msgstr ""

#: ../../library/typing.rst:1296
msgid "This would be equivalent to::"
msgstr ""

#: ../../library/typing.rst:1300
msgid ""
"where ``T1``, ``T2``, etc. are :class:`TypeVars <TypeVar>`. This would be "
"invalid: only one type should be passed to Annotated."
msgstr ""

#: ../../library/typing.rst:1303
msgid ""
"By default, :func:`get_type_hints` strips the metadata from annotations. "
"Pass ``include_extras=True`` to have the metadata preserved:"
msgstr ""

#: ../../library/typing.rst:1316
msgid ""
"At runtime, the metadata associated with an ``Annotated`` type can be "
"retrieved via the :attr:`!__metadata__` attribute:"
msgstr ""

#: ../../library/typing.rst:1330
msgid ":pep:`593` - Flexible function and variable annotations"
msgstr ""

#: ../../library/typing.rst:1331
msgid "The PEP introducing ``Annotated`` to the standard library."
msgstr ""

#: ../../library/typing.rst:1338
msgid ""
"Special typing form used to annotate the return type of a user-defined type "
"guard function.  ``TypeGuard`` only accepts a single type argument. At "
"runtime, functions marked this way should return a boolean."
msgstr ""
"用于注释用户定义的类型保护函数的返回类型的特殊类型化形式。 ``TypeGuard`` 只接"
"受一个单一的类型参数。 在运行时，以这种方式标记的函数应该返回一个布尔值。"

#: ../../library/typing.rst:1342
msgid ""
"``TypeGuard`` aims to benefit *type narrowing* -- a technique used by static "
"type checkers to determine a more precise type of an expression within a "
"program's code flow.  Usually type narrowing is done by analyzing "
"conditional code flow and applying the narrowing to a block of code.  The "
"conditional expression here is sometimes referred to as a \"type guard\"::"
msgstr ""
"PX旨在使 *类型缩小* 受益--这是静态类型检查器用来确定程序代码流中表达式的更精"
"确类型的一种技术。通常，类型缩小是通过分析条件性代码流并将缩小的结果应用于一"
"个代码块来完成的。 这里的条件表达式有时被称为 \"类型保护\"::"

#: ../../library/typing.rst:1357
msgid ""
"Sometimes it would be convenient to use a user-defined boolean function as a "
"type guard.  Such a function should use ``TypeGuard[...]`` as its return "
"type to alert static type checkers to this intention."
msgstr ""
"有时，使用一个用户定义的布尔函数作为类型保护会很方便。 这样的函数应该使用 "
"``TypeGuard[...]`` 作为其返回类型，以提醒静态类型检查器注意这一意图。"

#: ../../library/typing.rst:1361
msgid ""
"Using  ``-> TypeGuard`` tells the static type checker that for a given "
"function:"
msgstr "对于一个给定的函数，使用 ``-> TypeGuard`` 告诉静态类型检查器:"

#: ../../library/typing.rst:1364
msgid "The return value is a boolean."
msgstr "返回值是一个布尔值。"

#: ../../library/typing.rst:1365
msgid ""
"If the return value is ``True``, the type of its argument is the type inside "
"``TypeGuard``."
msgstr "如果返回值是 ``True``，其参数的类型是 ``TypeGuard`` 里面的类型。"

#: ../../library/typing.rst:1382
msgid ""
"If ``is_str_list`` is a class or instance method, then the type in "
"``TypeGuard`` maps to the type of the second parameter after ``cls`` or "
"``self``."
msgstr ""
"如果 ``is_str_list`` 是一个类或实例方法，那么 ``TypeGuard`` 中的类型映射到 "
"``cls`` 或 ``self`` 之后的第二个参数的类型。"

#: ../../library/typing.rst:1386
msgid ""
"In short, the form ``def foo(arg: TypeA) -> TypeGuard[TypeB]: ...``, means "
"that if ``foo(arg)`` returns ``True``, then ``arg`` narrows from ``TypeA`` "
"to ``TypeB``."
msgstr ""
"简而言之，``def foo(arg: TypeA) -> TypeGuard[TypeB]: ...`` 形式的意思是：如"
"果 ``foo(arg)`` 返回 ``True``，那么 ``arg`` 将把 ``TypeA`` 缩小为 ``TypeB``。"

#: ../../library/typing.rst:1392
msgid ""
"``TypeB`` need not be a narrower form of ``TypeA`` -- it can even be a wider "
"form. The main reason is to allow for things like narrowing ``list[object]`` "
"to ``list[str]`` even though the latter is not a subtype of the former, "
"since ``list`` is invariant. The responsibility of writing type-safe type "
"guards is left to the user."
msgstr ""
"``TypeB`` 无需为 ``TypeA`` 的缩小形式 -- 它甚至可以是扩大形式。 主要原因是允"
"许像把 ``list[object]`` 缩小到 ``list[str]`` 这样的事情，即使后者不是前者的一"
"个子类型，因为 ``list`` 是不变的。 编写类型安全的类型防护的责任留给了用户。"

#: ../../library/typing.rst:1398
msgid ""
"``TypeGuard`` also works with type variables.  See :pep:`647` for more "
"details."
msgstr "``TypeGuard`` 也适用于类型变量。 详情参见 :pep:`647`。"

#: ../../library/typing.rst:1405
msgid ""
"A typing operator that conceptually marks an object as having been unpacked. "
"For example, using the unpack operator ``*`` on a :class:`type variable "
"tuple <TypeVarTuple>` is equivalent to using ``Unpack`` to mark the type "
"variable tuple as having been unpacked::"
msgstr ""
"一个在概念上将一个对象标记为已被解包的类型运算符。 例如，在一个 :class:`类型"
"变量元组 <TypeVarTuple>` 上使用解包运算符 ``*`` 等价于使用 ``Unpack`` 来将该"
"类型变量元组标记为已被解包::"

#: ../../library/typing.rst:1415
msgid ""
"In fact, ``Unpack`` can be used interchangeably with ``*`` in the context "
"of :class:`typing.TypeVarTuple <TypeVarTuple>` and :class:`builtins.tuple "
"<tuple>` types. You might see ``Unpack`` being used explicitly in older "
"versions of Python, where ``*`` couldn't be used in certain places::"
msgstr ""

#: ../../library/typing.rst:1429
msgid ""
"``Unpack`` can also be used along with :class:`typing.TypedDict` for typing "
"``**kwargs`` in a function signature::"
msgstr ""

#: ../../library/typing.rst:1442
msgid ""
"See :pep:`692` for more details on using ``Unpack`` for ``**kwargs`` typing."
msgstr ""

#: ../../library/typing.rst:1447
msgid "Building generic types and type aliases"
msgstr ""

#: ../../library/typing.rst:1449
msgid ""
"The following objects are not used directly in annotations. Instead, they "
"are building blocks for creating generic types and type aliases."
msgstr ""

#: ../../library/typing.rst:1452
msgid ""
"These objects can be created through special syntax (:ref:`type parameter "
"lists <type-params>` and the :keyword:`type` statement). For compatibility "
"with Python 3.11 and earlier, they can also be created without the dedicated "
"syntax, as documented below."
msgstr ""

#: ../../library/typing.rst:1459
msgid "Abstract base class for generic types."
msgstr "用于泛型类型的抽象基类。"

#: ../../library/typing.rst:1461
msgid ""
"A generic type is typically declared by adding a list of type parameters "
"after the class name::"
msgstr ""

#: ../../library/typing.rst:1469
msgid ""
"Such a class implicitly inherits from ``Generic``. The runtime semantics of "
"this syntax are discussed in the :ref:`Language Reference <generic-classes>`."
msgstr ""

#: ../../library/typing.rst:1473
msgid "This class can then be used as follows::"
msgstr "该类的用法如下："

#: ../../library/typing.rst:1481
msgid ""
"Here the brackets after the function name indicate a :ref:`generic function "
"<generic-functions>`."
msgstr ""

#: ../../library/typing.rst:1484
msgid ""
"For backwards compatibility, generic classes can also be declared by "
"explicitly inheriting from ``Generic``. In this case, the type parameters "
"must be declared separately::"
msgstr ""

#: ../../library/typing.rst:1499
msgid "Type variable."
msgstr "类型变量。"

#: ../../library/typing.rst:1501
msgid ""
"The preferred way to construct a type variable is via the dedicated syntax "
"for :ref:`generic functions <generic-functions>`, :ref:`generic classes "
"<generic-classes>`, and :ref:`generic type aliases <generic-type-aliases>`::"
msgstr ""

#: ../../library/typing.rst:1509
msgid ""
"This syntax can also be used to create bound and constrained type variables::"
msgstr ""

#: ../../library/typing.rst:1519
msgid ""
"However, if desired, reusable type variables can also be constructed "
"manually, like so::"
msgstr ""

#: ../../library/typing.rst:1525
msgid ""
"Type variables exist primarily for the benefit of static type checkers.  "
"They serve as the parameters for generic types as well as for generic "
"function and type alias definitions. See :class:`Generic` for more "
"information on generic types.  Generic functions work as follows::"
msgstr ""

#: ../../library/typing.rst:1546
msgid ""
"Note that type variables can be *bound*, *constrained*, or neither, but "
"cannot be both bound *and* constrained."
msgstr ""
"请注意，类型变量可以是 *被绑定的* ， *被约束的* ，或者两者都不是，但不能既是"
"被绑定的 *又是* 被约束的。"

#: ../../library/typing.rst:1549
msgid ""
"The variance of type variables is inferred by type checkers when they are "
"created through the :ref:`type parameter syntax <type-params>` or when "
"``infer_variance=True`` is passed. Manually created type variables may be "
"explicitly marked covariant or contravariant by passing ``covariant=True`` "
"or ``contravariant=True``. By default, manually created type variables are "
"invariant. See :pep:`484` and :pep:`695` for more details."
msgstr ""

#: ../../library/typing.rst:1557
msgid ""
"Bound type variables and constrained type variables have different semantics "
"in several important ways. Using a *bound* type variable means that the "
"``TypeVar`` will be solved using the most specific type possible::"
msgstr ""
"绑定类型变量和约束类型变量在几个重要方面具有不同的主义。 使用 *绑定* 类型变量"
"意味着 ``TypeVar`` 将尽可能使用最为专属的类型来解析::"

#: ../../library/typing.rst:1572
msgid ""
"Type variables can be bound to concrete types, abstract types (ABCs or "
"protocols), and even unions of types::"
msgstr ""
"类型变量可以被绑定到具体类型、抽象类型（ ABC 或 protocol ），甚至是类型的联"
"合::"

#: ../../library/typing.rst:1584
msgid ""
"Using a *constrained* type variable, however, means that the ``TypeVar`` can "
"only ever be solved as being exactly one of the constraints given::"
msgstr ""
"但是，如果使用 *约束* 类型变量，则意味着 ``TypeVar`` 只能被解析为恰好是给定的"
"约束之一::"

#: ../../library/typing.rst:1595
msgid "At runtime, ``isinstance(x, T)`` will raise :exc:`TypeError`."
msgstr ""

#: ../../library/typing.rst:1599
msgid "The name of the type variable."
msgstr ""

#: ../../library/typing.rst:1603
msgid "Whether the type var has been explicitly marked as covariant."
msgstr ""

#: ../../library/typing.rst:1607
msgid "Whether the type var has been explicitly marked as contravariant."
msgstr ""

#: ../../library/typing.rst:1611
msgid ""
"Whether the type variable's variance should be inferred by type checkers."
msgstr ""

#: ../../library/typing.rst:1617
msgid "The bound of the type variable, if any."
msgstr ""

#: ../../library/typing.rst:1621
msgid ""
"For type variables created through :ref:`type parameter syntax <type-"
"params>`, the bound is evaluated only when the attribute is accessed, not "
"when the type variable is created (see :ref:`lazy-evaluation`)."
msgstr ""

#: ../../library/typing.rst:1627
msgid "A tuple containing the constraints of the type variable, if any."
msgstr ""

#: ../../library/typing.rst:1631
msgid ""
"For type variables created through :ref:`type parameter syntax <type-"
"params>`, the constraints are evaluated only when the attribute is accessed, "
"not when the type variable is created (see :ref:`lazy-evaluation`)."
msgstr ""

#: ../../library/typing.rst:1637
msgid ""
"Type variables can now be declared using the :ref:`type parameter <type-"
"params>` syntax introduced by :pep:`695`. The ``infer_variance`` parameter "
"was added."
msgstr ""

#: ../../library/typing.rst:1643
msgid ""
"Type variable tuple. A specialized form of :class:`type variable <TypeVar>` "
"that enables *variadic* generics."
msgstr ""
"类型变量元组。 一种启用了 *variadic* 泛型的专属 :class:`类型变量 <TypeVar>` "
"形式。"

#: ../../library/typing.rst:1646
msgid ""
"Type variable tuples can be declared in :ref:`type parameter lists <type-"
"params>` using a single asterisk (``*``) before the name::"
msgstr ""

#: ../../library/typing.rst:1652
msgid "Or by explicitly invoking the ``TypeVarTuple`` constructor::"
msgstr ""

#: ../../library/typing.rst:1660
msgid ""
"A normal type variable enables parameterization with a single type. A type "
"variable tuple, in contrast, allows parameterization with an *arbitrary* "
"number of types by acting like an *arbitrary* number of type variables "
"wrapped in a tuple. For example::"
msgstr ""
"一个普通类型变量将启用单个类型的形参化。 作为对比，一个类型变量元组通过将 *任"
"意* 数量的类型变量封包在一个元组中来允许 *任意* 数量类型的形参化。 例如::"

#: ../../library/typing.rst:1682
msgid ""
"Note the use of the unpacking operator ``*`` in ``tuple[T, *Ts]``. "
"Conceptually, you can think of ``Ts`` as a tuple of type variables ``(T1, "
"T2, ...)``. ``tuple[T, *Ts]`` would then become ``tuple[T, *(T1, "
"T2, ...)]``, which is equivalent to ``tuple[T, T1, T2, ...]``. (Note that in "
"older versions of Python, you might see this written using :data:`Unpack "
"<Unpack>` instead, as ``Unpack[Ts]``.)"
msgstr ""
"请注意解包运算符 ``*`` 在 ``tuple[T, *Ts]`` 中的使用。 在概念上，你可以将 "
"``Ts`` 当作一个由类型变量组成的元组 ``(T1, T2, ...)``。 那么 ``tuple[T, "
"*Ts]`` 就将变为 ``tuple[T, *(T1, T2, ...)]``，这等价于 ``tuple[T, T1, "
"T2, ...]``。 （请注意在旧版本 Python 中，你可能会看到改用 :data:`Unpack "
"<Unpack>` 的写法，如 ``Unpack[Ts]``。）"

#: ../../library/typing.rst:1690
msgid ""
"Type variable tuples must *always* be unpacked. This helps distinguish type "
"variable tuples from normal type variables::"
msgstr ""
"类型变量元组 *总是* 要被解包。 这有助于区分类型变量元组和普通类型变量::"

#: ../../library/typing.rst:1697
msgid ""
"Type variable tuples can be used in the same contexts as normal type "
"variables. For example, in class definitions, arguments, and return types::"
msgstr ""
"类型变量元组可被用在与普通类型变量相同的上下文中。 例如，在类定义、参数和返回"
"类型中::"

#: ../../library/typing.rst:1705
msgid ""
"Type variable tuples can be happily combined with normal type variables:"
msgstr ""

#: ../../library/typing.rst:1721
msgid ""
"However, note that at most one type variable tuple may appear in a single "
"list of type arguments or type parameters::"
msgstr "但是，请注意在一个类型参数或类型形参列表中最多只能有一个类型变量元组::"

#: ../../library/typing.rst:1728
msgid ""
"Finally, an unpacked type variable tuple can be used as the type annotation "
"of ``*args``::"
msgstr "最后，一个已解包的类型变量元组可以被用作 ``*args`` 的类型标注::"

#: ../../library/typing.rst:1738
msgid ""
"In contrast to non-unpacked annotations of ``*args`` - e.g. ``*args: int``, "
"which would specify that *all* arguments are ``int`` - ``*args: *Ts`` "
"enables reference to the types of the *individual* arguments in ``*args``. "
"Here, this allows us to ensure the types of the ``*args`` passed to "
"``call_soon`` match the types of the (positional) arguments of ``callback``."
msgstr ""
"相比非解包的 ``*args`` 标注 —— 例如 ``*args: int``，它将指明 *所有* 参数均为 "
"``int`` —— ``*args: *Ts`` 启用了对 ``*args`` 中 *单个* 参数的类型的引用。 在"
"此，这允许我们确保传入 ``call_soon`` 的 ``*args`` 的类型与 ``callback`` 的"
"（位置）参数的类型相匹配。"

#: ../../library/typing.rst:1745
msgid "See :pep:`646` for more details on type variable tuples."
msgstr "关于类型变量元组的更多细节，请参见 :pep:`646`。"

#: ../../library/typing.rst:1749
msgid "The name of the type variable tuple."
msgstr ""

#: ../../library/typing.rst:1755
msgid ""
"Type variable tuples can now be declared using the :ref:`type parameter "
"<type-params>` syntax introduced by :pep:`695`."
msgstr ""

#: ../../library/typing.rst:1760
msgid ""
"Parameter specification variable.  A specialized version of :class:`type "
"variables <TypeVar>`."
msgstr "参数规范变量。 :class:`类型变量 <TypeVar>` 的一个专门版本。"

#: ../../library/typing.rst:1763
msgid ""
"In :ref:`type parameter lists <type-params>`, parameter specifications can "
"be declared with two asterisks (``**``)::"
msgstr ""

#: ../../library/typing.rst:1768
msgid ""
"For compatibility with Python 3.11 and earlier, ``ParamSpec`` objects can "
"also be created as follows::"
msgstr ""

#: ../../library/typing.rst:1773
msgid ""
"Parameter specification variables exist primarily for the benefit of static "
"type checkers.  They are used to forward the parameter types of one callable "
"to another callable -- a pattern commonly found in higher order functions "
"and decorators.  They are only valid when used in ``Concatenate``, or as the "
"first argument to ``Callable``, or as parameters for user-defined Generics.  "
"See :class:`Generic` for more information on generic types."
msgstr ""
"参数规范变量的存在主要是为了使静态类型检查器受益。 它们被用来将一个可调用对象"
"的参数类型转发给另一个可调用对象的参数类型——这种模式通常出现在高阶函数和装饰"
"器中。 它们只有在 ``Concatenate`` 中使用时才有效，或者作为 ``Callable`` 的第"
"一个参数，或者作为用户定义的泛型的参数。 参见 :class:`Generic` 以了解更多关于"
"泛型的信息。"

#: ../../library/typing.rst:1780
msgid ""
"For example, to add basic logging to a function, one can create a decorator "
"``add_logging`` to log function calls.  The parameter specification variable "
"tells the type checker that the callable passed into the decorator and the "
"new callable returned by it have inter-dependent type parameters::"
msgstr ""
"例如，为了给一个函数添加基本的日志记录，我们可以创建一个装饰器 "
"``add_logging`` 来记录函数调用。 参数规范变量告诉类型检查器，传入装饰器的可调"
"用对象和由其返回的新可调用对象有相互依赖的类型参数::"

#: ../../library/typing.rst:1800
msgid ""
"Without ``ParamSpec``, the simplest way to annotate this previously was to "
"use a :class:`TypeVar` with bound ``Callable[..., Any]``.  However this "
"causes two problems:"
msgstr ""
"如果没有 ``ParamSpec``，以前注释这个的最简单的方法是使用一个 :class:"
"`TypeVar` 与绑定 ``Callable[..., Any]``。"

#: ../../library/typing.rst:1804
msgid ""
"The type checker can't type check the ``inner`` function because ``*args`` "
"and ``**kwargs`` have to be typed :data:`Any`."
msgstr ""
"类型检查器不能对 ``inner`` 函数进行类型检查，因为 ``*args`` 和 ``**kwargs`` "
"的类型必须是 :data:`Any`。"

#: ../../library/typing.rst:1806
msgid ""
":func:`~cast` may be required in the body of the ``add_logging`` decorator "
"when returning the ``inner`` function, or the static type checker must be "
"told to ignore the ``return inner``."
msgstr ""
":func:`~cast` 在返回 ``inner`` 函数时，可能需要在 ``add_logging`` 装饰器的主"
"体中进行，或者必须告诉静态类型检查器忽略 ``return inner``。"

#: ../../library/typing.rst:1813
msgid ""
"Since ``ParamSpec`` captures both positional and keyword parameters, ``P."
"args`` and ``P.kwargs`` can be used to split a ``ParamSpec`` into its "
"components.  ``P.args`` represents the tuple of positional parameters in a "
"given call and should only be used to annotate ``*args``.  ``P.kwargs`` "
"represents the mapping of keyword parameters to their values in a given "
"call, and should be only be used to annotate ``**kwargs``.  Both attributes "
"require the annotated parameter to be in scope. At runtime, ``P.args`` and "
"``P.kwargs`` are instances respectively of :class:`ParamSpecArgs` and :class:"
"`ParamSpecKwargs`."
msgstr ""
"由于 ``ParamSpec`` 同时捕获了位置参数和关键字参数，``P.args`` 和 ``P."
"kwargs`` 可以用来将 ``ParamSpec`` 分割成其组成部分。 ``P.args`` 代表给定调用"
"中的位置参数的元组，只能用于注释 ``*args``。 ``P.kwargs`` 代表给定调用中的关"
"键字参数到其值的映射，只能用于注释 ``**kwargs``。在运行时，``P.args`` 和 ``P."
"kwargs`` 分别是 :class:`ParamSpecArgs` 和 :class:`ParamSpecKwargs` 的实例。"

#: ../../library/typing.rst:1825
msgid "The name of the parameter specification."
msgstr ""

#: ../../library/typing.rst:1827
msgid ""
"Parameter specification variables created with ``covariant=True`` or "
"``contravariant=True`` can be used to declare covariant or contravariant "
"generic types.  The ``bound`` argument is also accepted, similar to :class:"
"`TypeVar`.  However the actual semantics of these keywords are yet to be "
"decided."
msgstr ""
"用 ``covariant=True`` 或 ``contravariant=True`` 创建的参数规范变量可以用来声"
"明协变或逆变泛型类型。 参数 ``bound`` 也被接受，类似于 :class:`TypeVar`。 然"
"而这些关键字的实际语义还有待决定。"

#: ../../library/typing.rst:1837
msgid ""
"Parameter specifications can now be declared using the :ref:`type parameter "
"<type-params>` syntax introduced by :pep:`695`."
msgstr ""

#: ../../library/typing.rst:1841
msgid ""
"Only parameter specification variables defined in global scope can be "
"pickled."
msgstr "只有在全局范围内定义的参数规范变量可以被 pickle。"

#: ../../library/typing.rst:1847
msgid ":class:`Callable` and :class:`Concatenate`."
msgstr ":class:`Callable` 和 :class:`Concatenate`。"

#: ../../library/typing.rst:1852
msgid ""
"Arguments and keyword arguments attributes of a :class:`ParamSpec`. The ``P."
"args`` attribute of a ``ParamSpec`` is an instance of ``ParamSpecArgs``, and "
"``P.kwargs`` is an instance of ``ParamSpecKwargs``. They are intended for "
"runtime introspection and have no special meaning to static type checkers."
msgstr ""
":class:`ParamSpec`的参数和关键字参数属性。``ParamSpec`` 的 ``P.args`` 属性是 "
"``ParamSpecArgs`` 的一个实例，``P.kwargs`` 是 ``ParamSpecKwargs`` 的一个实"
"例。 它们的目的是用于运行时内部检查的，对静态类型检查器没有特殊意义。"

#: ../../library/typing.rst:1857
msgid ""
"Calling :func:`get_origin` on either of these objects will return the "
"original ``ParamSpec``::"
msgstr ""
"在这些对象中的任何一个上调用 :func:`get_origin`，都会返回原始的 "
"``ParamSpec``::"

#: ../../library/typing.rst:1869
msgid "The type of type aliases created through the :keyword:`type` statement."
msgstr ""

#: ../../library/typing.rst:1883
msgid "The name of the type alias:"
msgstr ""

#: ../../library/typing.rst:1893
msgid "The module in which the type alias was defined::"
msgstr ""

#: ../../library/typing.rst:1901
msgid ""
"The type parameters of the type alias, or an empty tuple if the alias is not "
"generic:"
msgstr ""

#: ../../library/typing.rst:1915
msgid ""
"The type alias's value. This is :ref:`lazily evaluated <lazy-evaluation>`, "
"so names used in the definition of the alias are not resolved until the "
"``__value__`` attribute is accessed:"
msgstr ""

#: ../../library/typing.rst:1933
msgid "Other special directives"
msgstr "其他特殊指令"

#: ../../library/typing.rst:1935
msgid ""
"These are not used in annotations. They are building blocks for declaring "
"types."
msgstr "这些特殊指令是声明类型的基石，但不在注解内使用。"

#: ../../library/typing.rst:1939
msgid "Typed version of :func:`collections.namedtuple`."
msgstr ":func:`collections.namedtuple` 的类型版本。"

#: ../../library/typing.rst:1941
msgid "Usage::"
msgstr "用法："

#: ../../library/typing.rst:1947
msgid "This is equivalent to::"
msgstr "这相当于："

#: ../../library/typing.rst:1951
msgid ""
"To give a field a default value, you can assign to it in the class body::"
msgstr "为字段提供默认值，要在类体内赋值："

#: ../../library/typing.rst:1960
msgid ""
"Fields with a default value must come after any fields without a default."
msgstr "带默认值的字段必须在不带默认值的字段后面。"

#: ../../library/typing.rst:1962
msgid ""
"The resulting class has an extra attribute ``__annotations__`` giving a dict "
"that maps the field names to the field types.  (The field names are in the "
"``_fields`` attribute and the default values are in the ``_field_defaults`` "
"attribute, both of which are part of the :func:`~collections.namedtuple` "
"API.)"
msgstr ""
"由此产生的类有一个额外的属性 ``__annotations__`` ，给出一个 dict ，将字段名映"
"射到字段类型。（字段名在 ``_fields`` 属性中，默认值在 ``_field_defaults`` 属"
"性中，这两者都是 :func:`~collections.namedtuple` API 的一部分。）"

#: ../../library/typing.rst:1968
msgid "``NamedTuple`` subclasses can also have docstrings and methods::"
msgstr "``NamedTuple`` 子类也支持文档字符串与方法："

#: ../../library/typing.rst:1978
msgid "``NamedTuple`` subclasses can be generic::"
msgstr "``NamedTuple`` 子类也可以为泛型："

#: ../../library/typing.rst:1984
msgid "Backward-compatible usage::"
msgstr "反向兼容用法："

#: ../../library/typing.rst:1994
msgid "Added support for :pep:`526` variable annotation syntax."
msgstr "添加了对 :pep:`526` 中变量注解句法的支持。"

#: ../../library/typing.rst:1997
msgid "Added support for default values, methods, and docstrings."
msgstr "添加了对默认值、方法、文档字符串的支持。"

#: ../../library/typing.rst:2000
msgid ""
"The ``_field_types`` and ``__annotations__`` attributes are now regular "
"dictionaries instead of instances of ``OrderedDict``."
msgstr ""
"``_field_types`` 和 ``__annotations__`` 属性现已使用常规字典，不再使用 "
"``OrderedDict`` 实例。"

#: ../../library/typing.rst:2004
msgid ""
"Removed the ``_field_types`` attribute in favor of the more standard "
"``__annotations__`` attribute which has the same information."
msgstr ""
"移除了 ``_field_types`` 属性， 改用具有相同信息，但更标准的  "
"``__annotations__`` 属性。"

#: ../../library/typing.rst:2008
msgid "Added support for generic namedtuples."
msgstr "添加对泛型命名元组的支持。"

#: ../../library/typing.rst:2013
msgid ""
"A helper class to indicate a distinct type to a typechecker, see :ref:"
"`distinct`. At runtime it returns an object that returns its argument when "
"called. Usage::"
msgstr ""
"一个辅助类，用于向类型检查器指示一个不同的类型，见 :ref:`distinct`。在运行"
"时，它返回一个对象，在调用时返回其参数。用法::"

#: ../../library/typing.rst:2023
msgid "The module in which the new type is defined."
msgstr ""

#: ../../library/typing.rst:2027
msgid "The name of the new type."
msgstr ""

#: ../../library/typing.rst:2031
msgid "The type that the new type is based on."
msgstr ""

#: ../../library/typing.rst:2035
msgid "``NewType`` is now a class rather than a function."
msgstr "``NewType`` 现在是一个类而不是函数。"

#: ../../library/typing.rst:2040
msgid ""
"Base class for protocol classes. Protocol classes are defined like this::"
msgstr "Protocol 类的基类。Protocol 类的定义如下："

#: ../../library/typing.rst:2046
msgid ""
"Such classes are primarily used with static type checkers that recognize "
"structural subtyping (static duck-typing), for example::"
msgstr ""
"这些类主要与静态类型检查器搭配使用，用来识别结构子类型（静态鸭子类型），例"
"如："

#: ../../library/typing.rst:2058
msgid ""
"See :pep:`544` for more details. Protocol classes decorated with :func:"
"`runtime_checkable` (described later) act as simple-minded runtime protocols "
"that check only the presence of given attributes, ignoring their type "
"signatures."
msgstr ""
"请参阅 :pep:`544` 了解详情。 使用 :func:`runtime_checkable` 装饰的协议类（稍"
"后将介绍）可作为只检查给定属性是否存在，而忽略其类型签名的简单的运行时协议。"

#: ../../library/typing.rst:2063
msgid "Protocol classes can be generic, for example::"
msgstr "Protocol 类可以是泛型，例如："

#: ../../library/typing.rst:2069
msgid ""
"In code that needs to be compatible with Python 3.11 or older, generic "
"Protocols can be written as follows::"
msgstr ""

#: ../../library/typing.rst:2082
msgid "Mark a protocol class as a runtime protocol."
msgstr "用于把 Protocol 类标记为运行时协议。"

#: ../../library/typing.rst:2084
msgid ""
"Such a protocol can be used with :func:`isinstance` and :func:`issubclass`. "
"This raises :exc:`TypeError` when applied to a non-protocol class.  This "
"allows a simple-minded structural check, very similar to \"one trick "
"ponies\" in :mod:`collections.abc` such as :class:`~collections.abc."
"Iterable`.  For example::"
msgstr ""
"该协议可以与 :func:`isinstance` 和 :func:`issubclass` 一起使用。应用于非协议"
"的类时，会触发 :exc:`TypeError`。该指令支持简易结构检查，与 :mod:"
"`collections.abc` 的 :class:`~collections.abc.Iterable` 非常类似，只擅长做一"
"件事。  例如："

#: ../../library/typing.rst:2104
msgid ""
":func:`!runtime_checkable` will check only the presence of the required "
"methods or attributes, not their type signatures or types. For example, :"
"class:`ssl.SSLObject` is a class, therefore it passes an :func:`issubclass` "
"check against :data:`Callable`.  However, the ``ssl.SSLObject.__init__`` "
"method exists only to raise a :exc:`TypeError` with a more informative "
"message, therefore making it impossible to call (instantiate) :class:`ssl."
"SSLObject`."
msgstr ""
":func:`!runtime_checkable` 将只检查所需方法或属性是否存在，而不检查它们的类型"
"签名或类型。 例如，:class:`ssl.SSLObject` 是一个类，因此它通过了针对 :data:"
"`Callable` 的 :func:`issubclass` 检查。 但是，``ssl.SSLObject.__init__`` 方法"
"的存在只是引发 :exc:`TypeError` 并附带更具信息量的消息，因此它无法调用 (实例"
"化) :class:`ssl.SSLObject`。"

#: ../../library/typing.rst:2115
msgid ""
"An :func:`isinstance` check against a runtime-checkable protocol can be "
"surprisingly slow compared to an ``isinstance()`` check against a non-"
"protocol class. Consider using alternative idioms such as :func:`hasattr` "
"calls for structural checks in performance-sensitive code."
msgstr ""
"针对运行时可检查协议的 :func:`isinstance` 检查相比针对非协议类的 "
"``isinstance()`` 检查可能会惊人的缓慢。 请考虑在性能敏感的代码中使用替代性写"
"法如 :func:`hasattr` 调用进行结构检查。"

#: ../../library/typing.rst:2123
msgid ""
"The internal implementation of :func:`isinstance` checks against runtime-"
"checkable protocols now uses :func:`inspect.getattr_static` to look up "
"attributes (previously, :func:`hasattr` was used). As a result, some objects "
"which used to be considered instances of a runtime-checkable protocol may no "
"longer be considered instances of that protocol on Python 3.12+, and vice "
"versa. Most users are unlikely to be affected by this change."
msgstr ""

#: ../../library/typing.rst:2132
msgid ""
"The members of a runtime-checkable protocol are now considered \"frozen\" at "
"runtime as soon as the class has been created. Monkey-patching attributes "
"onto a runtime-checkable protocol will still work, but will have no impact "
"on :func:`isinstance` checks comparing objects to the protocol. See :ref:"
"`\"What's new in Python 3.12\" <whatsnew-typing-py312>` for more details."
msgstr ""

#: ../../library/typing.rst:2143
msgid ""
"Special construct to add type hints to a dictionary. At runtime it is a "
"plain :class:`dict`."
msgstr "把类型提示添加至字典的特殊构造器。在运行时，它是纯 :class:`dict`。"

#: ../../library/typing.rst:2146
msgid ""
"``TypedDict`` declares a dictionary type that expects all of its instances "
"to have a certain set of keys, where each key is associated with a value of "
"a consistent type. This expectation is not checked at runtime but is only "
"enforced by type checkers. Usage::"
msgstr ""
"``TypedDict`` 声明一个字典类型，该类型预期所有实例都具有一组键集，其中，每个"
"键都与对应类型的值关联。运行时不检查此预期，而是由类型检查器强制执行。用法如"
"下："

#: ../../library/typing.rst:2162
msgid ""
"To allow using this feature with older versions of Python that do not "
"support :pep:`526`, ``TypedDict`` supports two additional equivalent "
"syntactic forms:"
msgstr ""
"为了在不支持 :pep:`526` 的旧版 Python 中使用此特性，``TypedDict`` 支持两种额"
"外的等价语法形式:"

#: ../../library/typing.rst:2166
msgid "Using a literal :class:`dict` as the second argument::"
msgstr "使用字面量 :class:`dict` 作为第二个参数："

#: ../../library/typing.rst:2170
msgid "Using keyword arguments::"
msgstr "使用关键字参数："

#: ../../library/typing.rst:2177
msgid ""
"The keyword-argument syntax is deprecated in 3.11 and will be removed in "
"3.13. It may also be unsupported by static type checkers."
msgstr ""
"使用关键字的语法在 3.11 中被弃用，并且会于 3.13 被移除。同时，该语法可能不被"
"静态类型检查器支持。"

#: ../../library/typing.rst:2178
msgid ""
"The functional syntax should also be used when any of the keys are not "
"valid :ref:`identifiers <identifiers>`, for example because they are "
"keywords or contain hyphens. Example::"
msgstr ""
"当任何一个键不是有效的 :ref:`标识符 <identifiers>` 时，例如因为它们是关键字或"
"包含连字符，也应该使用函数式语法。例子::"

#: ../../library/typing.rst:2190
msgid ""
"By default, all keys must be present in a ``TypedDict``. It is possible to "
"mark individual keys as non-required using :data:`NotRequired`::"
msgstr ""
"默认情况下，所有的键都必须出现在一个 ``TypedDict`` 中。 可以使用 :data:"
"`NotRequired` 将单独的键标记为非必要的::"

#: ../../library/typing.rst:2201
msgid ""
"This means that a ``Point2D`` ``TypedDict`` can have the ``label`` key "
"omitted."
msgstr "这意味着一个 ``Point2D`` ``TypedDict`` 可以省略 ``label`` 键。"

#: ../../library/typing.rst:2204
msgid ""
"It is also possible to mark all keys as non-required by default by "
"specifying a totality of ``False``::"
msgstr "也可以通过全部指定 ``False`` 将所有键都标记为默认非必要的::"

#: ../../library/typing.rst:2214
msgid ""
"This means that a ``Point2D`` ``TypedDict`` can have any of the keys "
"omitted. A type checker is only expected to support a literal ``False`` or "
"``True`` as the value of the ``total`` argument. ``True`` is the default, "
"and makes all items defined in the class body required."
msgstr ""
"这意味着一个 ``Point2D`` ``TypedDict`` 可以省略任何一个键。 类型检查器只需要"
"支持一个字面的 ``False`` 或 ``True`` 作为 ``total`` 参数的值。 ``True`` 是默"
"认的，它使类主体中定义的所有项目都是必需的。"

#: ../../library/typing.rst:2219
msgid ""
"Individual keys of a ``total=False`` ``TypedDict`` can be marked as required "
"using :data:`Required`::"
msgstr ""
"一个 ``total=False`` ``TypedDict`` 中单独的键可以使用 :data:`Required` 标记为"
"必要的::"

#: ../../library/typing.rst:2234
msgid ""
"It is possible for a ``TypedDict`` type to inherit from one or more other "
"``TypedDict`` types using the class-based syntax. Usage::"
msgstr ""
"一个 ``TypedDict`` 类型有可能使用基于类的语法从一个或多个其他 ``TypedDict`` "
"类型继承。用法::"

#: ../../library/typing.rst:2241
msgid ""
"``Point3D`` has three items: ``x``, ``y`` and ``z``. It is equivalent to "
"this definition::"
msgstr "``Point3D`` 有三个项目 : ``x`` , ``y`` 和 ``z`` 。 其等价于定义::"

#: ../../library/typing.rst:2249
msgid ""
"A ``TypedDict`` cannot inherit from a non-\\ ``TypedDict`` class, except "
"for :class:`Generic`. For example::"
msgstr ""
"``TypedDict`` 不能从非 ``TypedDict`` 类继承，除了 :class:`Generic`。 例如::"

#: ../../library/typing.rst:2267
msgid "A ``TypedDict`` can be generic::"
msgstr "``TypedDict`` 也可以为泛型的："

#: ../../library/typing.rst:2273
msgid ""
"To create a generic ``TypedDict`` that is compatible with Python 3.11 or "
"lower, inherit from :class:`Generic` explicitly:"
msgstr ""

#: ../../library/typing.rst:2284
msgid ""
"A ``TypedDict`` can be introspected via annotations dicts (see :ref:"
"`annotations-howto` for more information on annotations best practices), :"
"attr:`__total__`, :attr:`__required_keys__`, and :attr:`__optional_keys__`."
msgstr ""
"``TypedDict`` 可以通过注解字典（参见 :ref:`annotations-howto` 了解更多关于注"
"解的最佳实践）、 :attr:`__total__` 、 :attr:`__required_keys__` 和 :attr:"
"`__optional_keys__` 进行内省。"

#: ../../library/typing.rst:2290
msgid ""
"``Point2D.__total__`` gives the value of the ``total`` argument. Example:"
msgstr ""

#: ../../library/typing.rst:2312
msgid ""
"``Point2D.__required_keys__`` and ``Point2D.__optional_keys__`` return :"
"class:`frozenset` objects containing required and non-required keys, "
"respectively."
msgstr ""
"``Point2D.__required_keys__`` 和 ``Point2D.__optional_keys__`` 返回分别包含必"
"要的和非必要的键的 :class:`frozenset` 对象。"

#: ../../library/typing.rst:2315
msgid ""
"Keys marked with :data:`Required` will always appear in "
"``__required_keys__`` and keys marked with :data:`NotRequired` will always "
"appear in ``__optional_keys__``."
msgstr ""
"标记为 :data:`Required` 的键总是会出现在 ``__required_keys__`` 中而标记为 :"
"data:`NotRequired` 的键总是会出现在 ``__optional_keys__`` 中。"

#: ../../library/typing.rst:2318
msgid ""
"For backwards compatibility with Python 3.10 and below, it is also possible "
"to use inheritance to declare both required and non-required keys in the "
"same ``TypedDict`` . This is done by declaring a ``TypedDict`` with one "
"value for the ``total`` argument and then inheriting from it in another "
"``TypedDict`` with a different value for ``total``:"
msgstr ""

#: ../../library/typing.rst:2341
msgid ""
"See :pep:`589` for more examples and detailed rules of using ``TypedDict``."
msgstr "更多示例与 ``TypedDict`` 的详细规则，详见 :pep:`589`。"

#: ../../library/typing.rst:2345
msgid ""
"Added support for marking individual keys as :data:`Required` or :data:"
"`NotRequired`. See :pep:`655`."
msgstr ""
"增加了对将单独的键标记为 :data:`Required` 或 :data:`NotRequired` 的支持。 参"
"见 :pep:`655`。"

#: ../../library/typing.rst:2349
msgid "Added support for generic ``TypedDict``\\ s."
msgstr "添加对泛型 ``TypedDict`` 的支持。"

#: ../../library/typing.rst:2353
msgid "Generic concrete collections"
msgstr "泛型具象容器"

#: ../../library/typing.rst:2356
msgid "Corresponding to built-in types"
msgstr "对应的内置类型"

#: ../../library/typing.rst:2360
msgid "Deprecated alias to :class:`dict`."
msgstr ""

#: ../../library/typing.rst:2362
msgid ""
"Note that to annotate arguments, it is preferred to use an abstract "
"collection type such as :class:`Mapping` rather than to use :class:`dict` "
"or :class:`!typing.Dict`."
msgstr ""

#: ../../library/typing.rst:2366
msgid "This type can be used as follows::"
msgstr "该类型用法如下："

#: ../../library/typing.rst:2371
msgid ""
":class:`builtins.dict <dict>` now supports subscripting (``[]``). See :pep:"
"`585` and :ref:`types-genericalias`."
msgstr ""
":class:`builtins.dict <dict>` 现在支持下标操作 (``[]``)。 参见 :pep:`585` "
"和 :ref:`types-genericalias`。"

#: ../../library/typing.rst:2377
msgid "Deprecated alias to :class:`list`."
msgstr ""

#: ../../library/typing.rst:2379
msgid ""
"Note that to annotate arguments, it is preferred to use an abstract "
"collection type such as :class:`Sequence` or :class:`Iterable` rather than "
"to use :class:`list` or :class:`!typing.List`."
msgstr ""

#: ../../library/typing.rst:2383
msgid "This type may be used as follows::"
msgstr "该类型用法如下："

#: ../../library/typing.rst:2391
msgid ""
":class:`builtins.list <list>` now supports subscripting (``[]``). See :pep:"
"`585` and :ref:`types-genericalias`."
msgstr ""
":class:`builtins.list <list>` 现在支持下标操作 (``[]``)。 参见 :pep:`585` "
"和 :ref:`types-genericalias`。"

#: ../../library/typing.rst:2397
msgid "Deprecated alias to :class:`builtins.set <set>`."
msgstr ""

#: ../../library/typing.rst:2399
msgid ""
"Note that to annotate arguments, it is preferred to use an abstract "
"collection type such as :class:`AbstractSet` rather than to use :class:`set` "
"or :class:`!typing.Set`."
msgstr ""

#: ../../library/typing.rst:2403
msgid ""
":class:`builtins.set <set>` now supports subscripting (``[]``). See :pep:"
"`585` and :ref:`types-genericalias`."
msgstr ""
":class:`builtins.set <set>` 现在支持下标操作 (``[]``)。 参见 :pep:`585` 和 :"
"ref:`types-genericalias`。"

#: ../../library/typing.rst:2409
msgid "Deprecated alias to :class:`builtins.frozenset <frozenset>`."
msgstr ""

#: ../../library/typing.rst:2411
msgid ""
":class:`builtins.frozenset <frozenset>` now supports subscripting (``[]``). "
"See :pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`builtins.frozenset <frozenset>` 现在支持下标操作 (``[]``)。 参见 :"
"pep:`585` 和 :ref:`types-genericalias`。"

#: ../../library/typing.rst:2416
msgid ":data:`Tuple` is a special form."
msgstr ":data:`Tuple` 是一种特殊形式。"

#: ../../library/typing.rst:2419
msgid "Corresponding to types in :mod:`collections`"
msgstr ":mod:`collections` 对应类型"

#: ../../library/typing.rst:2423
msgid "Deprecated alias to :class:`collections.defaultdict`."
msgstr ""

#: ../../library/typing.rst:2427
msgid ""
":class:`collections.defaultdict` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.defaultdict` 现在支持下标操作 (``[]``)。 参见 :pep:`585` "
"和 :ref:`types-genericalias`。"

#: ../../library/typing.rst:2433
msgid "Deprecated alias to :class:`collections.OrderedDict`."
msgstr ""

#: ../../library/typing.rst:2437
msgid ""
":class:`collections.OrderedDict` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.OrderedDict` 现在支持下标操作 (``[]``)。 参见 :pep:`585` "
"和 :ref:`types-genericalias`。"

#: ../../library/typing.rst:2443
msgid "Deprecated alias to :class:`collections.ChainMap`."
msgstr ""

#: ../../library/typing.rst:2448
msgid ""
":class:`collections.ChainMap` now supports subscripting (``[]``). See :pep:"
"`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.ChainMap` 现在支持下标操作 (``[]``)。 参见 :pep:`585` "
"和 :ref:`types-genericalias`。"

#: ../../library/typing.rst:2454
msgid "Deprecated alias to :class:`collections.Counter`."
msgstr ""

#: ../../library/typing.rst:2459
msgid ""
":class:`collections.Counter` now supports subscripting (``[]``). See :pep:"
"`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.Counter` 现在支持下标操作 (``[]``)。 参见 :pep:`585` 和 :"
"ref:`types-genericalias`。"

#: ../../library/typing.rst:2465
msgid "Deprecated alias to :class:`collections.deque`."
msgstr ""

#: ../../library/typing.rst:2470
msgid ""
":class:`collections.deque` now supports subscripting (``[]``). See :pep:"
"`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.deque` 现在支持下标操作 (``[]``)。 参见 :pep:`585` 和 :"
"ref:`types-genericalias`。"

#: ../../library/typing.rst:2475
msgid "Other concrete types"
msgstr "其他具象类型"

#: ../../library/typing.rst:2481
msgid ""
"Generic type ``IO[AnyStr]`` and its subclasses ``TextIO(IO[str])`` and "
"``BinaryIO(IO[bytes])`` represent the types of I/O streams such as returned "
"by :func:`open`."
msgstr ""
"泛型类型 ``IO[AnyStr]`` 及其子类 ``TextIO(IO[str])`` 与 "
"``BinaryIO(IO[bytes])`` 表示 I/O 流的类型，例如 :func:`open` 所返回的对象。"

#: ../../library/typing.rst:2488
msgid ""
"The ``typing.io`` namespace is deprecated and will be removed. These types "
"should be directly imported from ``typing`` instead."
msgstr ""
"``typing.io`` 命名空间已被弃用并将被删除。 这些类型应该被直接从 ``typing`` 导"
"入。"

#: ../../library/typing.rst:2493
msgid ""
"These type aliases correspond to the return types from :func:`re.compile` "
"and :func:`re.match`.  These types (and the corresponding functions) are "
"generic in ``AnyStr`` and can be made specific by writing ``Pattern[str]``, "
"``Pattern[bytes]``, ``Match[str]``, or ``Match[bytes]``."
msgstr ""
"这些类型对应的是从 :func:`re.compile` 和 :func:`re.match` 返回的类型。 这些类"
"型（及相应的函数）是 ``AnyStr`` 中的泛型并可通过编写 ``Pattern[str]``, "
"``Pattern[bytes]``, ``Match[str]`` 或 ``Match[bytes]`` 来具体指定。"

#: ../../library/typing.rst:2503
msgid ""
"The ``typing.re`` namespace is deprecated and will be removed. These types "
"should be directly imported from ``typing`` instead."
msgstr ""
"``typing.re`` 命名空间已被弃用并将被删除。 这些类型应该被直接从 ``typing`` 导"
"入。"

#: ../../library/typing.rst:2504
msgid ""
"Classes ``Pattern`` and ``Match`` from :mod:`re` now support ``[]``. See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""
":mod:`re` 模块中的 ``Pattern`` 与 ``Match`` 类现已支持 ``[]``。详见 :pep:"
"`585` 与 :ref:`types-genericalias`。"

#: ../../library/typing.rst:2510
msgid ""
"``Text`` is an alias for ``str``. It is provided to supply a forward "
"compatible path for Python 2 code: in Python 2, ``Text`` is an alias for "
"``unicode``."
msgstr ""
"``Text`` 是 ``str`` 的别名。提供了对 Python 2 代码的向下兼容：Python 2 中，"
"``Text`` 是 ``unicode`` 的别名。"

#: ../../library/typing.rst:2514
msgid ""
"Use ``Text`` to indicate that a value must contain a unicode string in a "
"manner that is compatible with both Python 2 and Python 3::"
msgstr ""
"使用 ``Text`` 时，值中必须包含 unicode 字符串，以兼容 Python 2 和 Python 3："

#: ../../library/typing.rst:2522
msgid ""
"Python 2 is no longer supported, and most type checkers also no longer "
"support type checking Python 2 code. Removal of the alias is not currently "
"planned, but users are encouraged to use :class:`str` instead of ``Text``."
msgstr ""
"Python 2 已不再受支持，并且大部分类型检查器也都不再支持 Python 2 代码的类型检"
"查。 目录还没有移除该别名的计划，但建议用户使用 :class:`str` 来代替 "
"``Text``。"

#: ../../library/typing.rst:2529
msgid "Abstract Base Classes"
msgstr "抽象基类"

#: ../../library/typing.rst:2532
msgid "Corresponding to collections in :mod:`collections.abc`"
msgstr ":mod:`collections.abc` 对应的容器"

#: ../../library/typing.rst:2536
msgid "Deprecated alias to :class:`collections.abc.Set`."
msgstr ""

#: ../../library/typing.rst:2538
msgid ""
":class:`collections.abc.Set` now supports subscripting (``[]``). See :pep:"
"`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.Set` 现在支持下标操作 (``[]``)。 参见 :pep:`585` 和 :"
"ref:`types-genericalias`。"

#: ../../library/typing.rst:2544
msgid ""
"This type represents the types :class:`bytes`, :class:`bytearray`, and :"
"class:`memoryview` of byte sequences."
msgstr ""
"该类型代表了 :class:`bytes`、:class:`bytearray`、:class:`memoryview` 等字节序"
"列类型。"

#: ../../library/typing.rst:2548
msgid ""
"Prefer :class:`collections.abc.Buffer`, or a union like ``bytes | bytearray "
"| memoryview``."
msgstr ""
"首选 :class:`collections.abc.Buffer`，或是 ``bytes | bytearray | "
"memoryview`` 这样的并集。"

#: ../../library/typing.rst:2552
msgid "Deprecated alias to :class:`collections.abc.Collection`."
msgstr ""

#: ../../library/typing.rst:2556
msgid ""
":class:`collections.abc.Collection` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.Collection` 现在支持下标操作 (``[]``)。 参见 :pep:"
"`585` 和 :ref:`types-genericalias`。"

#: ../../library/typing.rst:2562
msgid "Deprecated alias to :class:`collections.abc.Container`."
msgstr ""

#: ../../library/typing.rst:2564
msgid ""
":class:`collections.abc.Container` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.Container` 现在支持下标操作 (``[]``)。 参见 :pep:"
"`585` 和 :ref:`types-genericalias`。"

#: ../../library/typing.rst:2570
msgid "Deprecated alias to :class:`collections.abc.ItemsView`."
msgstr ""

#: ../../library/typing.rst:2572
msgid ""
":class:`collections.abc.ItemsView` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.ItemsView` 现在支持下标操作 (``[]``)。 参见 :pep:"
"`585` 和 :ref:`types-genericalias`。"

#: ../../library/typing.rst:2578
msgid "Deprecated alias to :class:`collections.abc.KeysView`."
msgstr ""

#: ../../library/typing.rst:2580
msgid ""
":class:`collections.abc.KeysView` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.KeysView` 现在支持下标操作 (``[]``)。 参见 :pep:"
"`585` 和 :ref:`types-genericalias`。"

#: ../../library/typing.rst:2586
msgid ""
"Deprecated alias to :class:`collections.abc.Mapping`. This type can be used "
"as follows::"
msgstr ""

#: ../../library/typing.rst:2592
msgid ""
":class:`collections.abc.Mapping` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.Mapping` 现在支持下标操作 (``[]``)。 参见 :pep:`585` "
"和 :ref:`types-genericalias`。"

#: ../../library/typing.rst:2598
msgid "Deprecated alias to :class:`collections.abc.MappingView`."
msgstr ""

#: ../../library/typing.rst:2600
msgid ""
":class:`collections.abc.MappingView` now supports subscripting (``[]``). "
"See :pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.MappingView` 现在支持下标操作 (``[]``)。 参见 :pep:"
"`585` 和 :ref:`types-genericalias`。"

#: ../../library/typing.rst:2606
msgid "Deprecated alias to :class:`collections.abc.MutableMapping`."
msgstr ""

#: ../../library/typing.rst:2608
msgid ""
":class:`collections.abc.MutableMapping` now supports subscripting (``[]``). "
"See :pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.MutableMapping` 现在支持下标操作 (``[]``)。 参见 :"
"pep:`585` 和 :ref:`types-genericalias`。"

#: ../../library/typing.rst:2615
msgid "Deprecated alias to :class:`collections.abc.MutableSequence`."
msgstr ""

#: ../../library/typing.rst:2617
msgid ""
":class:`collections.abc.MutableSequence` now supports subscripting (``[]``). "
"See :pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.MutableSequence` 现在支持下标操作 (``[]``)。 参见 :"
"pep:`585` 和 :ref:`types-genericalias`。"

#: ../../library/typing.rst:2624
msgid "Deprecated alias to :class:`collections.abc.MutableSet`."
msgstr ""

#: ../../library/typing.rst:2626
msgid ""
":class:`collections.abc.MutableSet` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.MutableSet` 现在支持下标操作 (``[]``)。 参见 :pep:"
"`585` 和 :ref:`types-genericalias`。"

#: ../../library/typing.rst:2632
msgid "Deprecated alias to :class:`collections.abc.Sequence`."
msgstr ""

#: ../../library/typing.rst:2634
msgid ""
":class:`collections.abc.Sequence` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.Sequence` 现在支持下标操作 (``[]``)。 参见 :pep:"
"`585` 和 :ref:`types-genericalias`。"

#: ../../library/typing.rst:2640
msgid "Deprecated alias to :class:`collections.abc.ValuesView`."
msgstr ""

#: ../../library/typing.rst:2642
msgid ""
":class:`collections.abc.ValuesView` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.ValuesView` 现在支持下标操作 (``[]``)。 参见 :pep:"
"`585` 和 :ref:`types-genericalias`。"

#: ../../library/typing.rst:2647
msgid "Corresponding to other types in :mod:`collections.abc`"
msgstr ":mod:`collections.abc` 对应的其他类型"

#: ../../library/typing.rst:2651
msgid "Deprecated alias to :class:`collections.abc.Iterable`."
msgstr ""

#: ../../library/typing.rst:2653
msgid ""
":class:`collections.abc.Iterable` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.Iterable` 现在支持下标操作 (``[]``)。 参见 :pep:"
"`585` 和 :ref:`types-genericalias`。"

#: ../../library/typing.rst:2659
msgid "Deprecated alias to :class:`collections.abc.Iterator`."
msgstr ""

#: ../../library/typing.rst:2661
msgid ""
":class:`collections.abc.Iterator` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.Iterator` 现在支持下标操作 (``[]``)。 参见 :pep:"
"`585` 和 :ref:`types-genericalias`。"

#: ../../library/typing.rst:2667
msgid "Deprecated alias to :class:`collections.abc.Generator`."
msgstr ""

#: ../../library/typing.rst:2669
msgid ""
"A generator can be annotated by the generic type ``Generator[YieldType, "
"SendType, ReturnType]``. For example::"
msgstr ""
"生成器可以由泛型类型 ``Generator[YieldType, SendType, ReturnType]`` 注解。例"
"如："

#: ../../library/typing.rst:2678
msgid ""
"Note that unlike many other generics in the typing module, the ``SendType`` "
"of :class:`Generator` behaves contravariantly, not covariantly or "
"invariantly."
msgstr ""
"注意，与 typing 模块里的其他泛型不同， :class:`Generator` 的 ``SendType`` 属"
"于逆变行为，不是协变行为，也是不变行为。"

#: ../../library/typing.rst:2682
msgid ""
"If your generator will only yield values, set the ``SendType`` and "
"``ReturnType`` to ``None``::"
msgstr ""
"如果生成器只产生值，可将 ``SendType`` 与 ``ReturnType`` 设为 ``None``："

#: ../../library/typing.rst:2690
msgid ""
"Alternatively, annotate your generator as having a return type of either "
"``Iterable[YieldType]`` or ``Iterator[YieldType]``::"
msgstr ""
"此外，还可以把生成器的返回类型注解为 ``Iterable[YieldType]`` 或 "
"``Iterator[YieldType]``："

#: ../../library/typing.rst:2698
msgid ""
":class:`collections.abc.Generator` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.Generator` 现在支持下标操作 (``[]``)。 参见 :pep:"
"`585` 和 :ref:`types-genericalias`。"

#: ../../library/typing.rst:2704
msgid "Deprecated alias to :class:`collections.abc.Hashable`."
msgstr ""

#: ../../library/typing.rst:2706
msgid "Use :class:`collections.abc.Hashable` directly instead."
msgstr ""

#: ../../library/typing.rst:2711
msgid "Deprecated alias to :class:`collections.abc.Reversible`."
msgstr ""

#: ../../library/typing.rst:2713
msgid ""
":class:`collections.abc.Reversible` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.Reversible` 现在支持下标操作 (``[]``)。 参见 :pep:"
"`585` 和 :ref:`types-genericalias`。"

#: ../../library/typing.rst:2719
msgid "Deprecated alias to :class:`collections.abc.Sized`."
msgstr ""

#: ../../library/typing.rst:2721
msgid "Use :class:`collections.abc.Sized` directly instead."
msgstr ""

#: ../../library/typing.rst:2725
msgid "Asynchronous programming"
msgstr "异步编程"

#: ../../library/typing.rst:2729
msgid "Deprecated alias to :class:`collections.abc.Coroutine`."
msgstr ""

#: ../../library/typing.rst:2731
msgid ""
"The variance and order of type variables correspond to those of :class:"
"`Generator`, for example::"
msgstr ""

#: ../../library/typing.rst:2742
msgid ""
":class:`collections.abc.Coroutine` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.Coroutine` 现在支持下标操作（``[]``）。参见 :pep:"
"`585` 和 :ref:`types-genericalias`。"

#: ../../library/typing.rst:2748
msgid "Deprecated alias to :class:`collections.abc.AsyncGenerator`."
msgstr ""

#: ../../library/typing.rst:2750
msgid ""
"An async generator can be annotated by the generic type "
"``AsyncGenerator[YieldType, SendType]``. For example::"
msgstr ""
"异步生成器可由泛型类型 ``AsyncGenerator[YieldType, SendType]`` 注解。例如："

#: ../../library/typing.rst:2759
msgid ""
"Unlike normal generators, async generators cannot return a value, so there "
"is no ``ReturnType`` type parameter. As with :class:`Generator`, the "
"``SendType`` behaves contravariantly."
msgstr ""
"与常规生成器不同，异步生成器不能返回值，因此没有 ``ReturnType`` 类型参数。 "
"与 :class:`Generator` 类似，``SendType`` 也属于逆变行为。"

#: ../../library/typing.rst:2763
msgid ""
"If your generator will only yield values, set the ``SendType`` to ``None``::"
msgstr "如果生成器只产生值，可将 ``SendType`` 设置为 ``None``："

#: ../../library/typing.rst:2771
msgid ""
"Alternatively, annotate your generator as having a return type of either "
"``AsyncIterable[YieldType]`` or ``AsyncIterator[YieldType]``::"
msgstr ""
"此外，可用 ``AsyncIterable[YieldType]`` 或 ``AsyncIterator[YieldType]`` 注解"
"生成器的返回类型："

#: ../../library/typing.rst:2781
msgid ""
":class:`collections.abc.AsyncGenerator` now supports subscripting (``[]``). "
"See :pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.AsyncGenerator` 现在支持下标操作（``[]``）。参见 :"
"pep:`585` 和 :ref:`types-genericalias`。"

#: ../../library/typing.rst:2788
msgid "Deprecated alias to :class:`collections.abc.AsyncIterable`."
msgstr ""

#: ../../library/typing.rst:2792
msgid ""
":class:`collections.abc.AsyncIterable` now supports subscripting (``[]``). "
"See :pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.AsyncIterable` 现在支持下标操作 (``[]``)。 参见 :pep:"
"`585` 和 :ref:`types-genericalias`。"

#: ../../library/typing.rst:2798
msgid "Deprecated alias to :class:`collections.abc.AsyncIterator`."
msgstr ""

#: ../../library/typing.rst:2802
msgid ""
":class:`collections.abc.AsyncIterator` now supports subscripting (``[]``). "
"See :pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.AsyncIterator` 现在支持下标操作 (``[]``)。 参见 :pep:"
"`585` 和 :ref:`types-genericalias`。"

#: ../../library/typing.rst:2808
msgid "Deprecated alias to :class:`collections.abc.Awaitable`."
msgstr ""

#: ../../library/typing.rst:2812
msgid ""
":class:`collections.abc.Awaitable` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.Awaitable` 现在支持下标操作 (``[]``)。 参见 :pep:"
"`585` 和 :ref:`types-genericalias`。"

#: ../../library/typing.rst:2818
msgid "Context manager types"
msgstr "上下文管理器类型"

#: ../../library/typing.rst:2822
msgid "Deprecated alias to :class:`contextlib.AbstractContextManager`."
msgstr ""

#: ../../library/typing.rst:2827
msgid ""
":class:`contextlib.AbstractContextManager` now supports subscripting "
"(``[]``). See :pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`contextlib.AbstractContextManager` 现在支持下标操作 (``[]``)。 参见 :"
"pep:`585` 和 :ref:`types-genericalias`。"

#: ../../library/typing.rst:2834
msgid "Deprecated alias to :class:`contextlib.AbstractAsyncContextManager`."
msgstr ""

#: ../../library/typing.rst:2839
msgid ""
":class:`contextlib.AbstractAsyncContextManager` now supports subscripting "
"(``[]``). See :pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`contextlib.AbstractAsyncContextManager` 现在 支持下标操作 (``[]``)。 "
"参见 :pep:`585` 和 :ref:`types-genericalias`。"

#: ../../library/typing.rst:2845
msgid "Protocols"
msgstr "协议"

#: ../../library/typing.rst:2847
msgid "These protocols are decorated with :func:`runtime_checkable`."
msgstr "这些协议由 :func:`runtime_checkable` 装饰。"

#: ../../library/typing.rst:2851
msgid ""
"An ABC with one abstract method ``__abs__`` that is covariant in its return "
"type."
msgstr "含抽象方法 ``__abs__`` 的抽象基类，是其返回类型里的协变量。"

#: ../../library/typing.rst:2856
msgid "An ABC with one abstract method ``__bytes__``."
msgstr "含抽象方法 ``__bytes__`` 的抽象基类。"

#: ../../library/typing.rst:2860
msgid "An ABC with one abstract method ``__complex__``."
msgstr "含抽象方法 ``__complex__`` 的抽象基类。"

#: ../../library/typing.rst:2864
msgid "An ABC with one abstract method ``__float__``."
msgstr "含抽象方法 ``__float__`` 的抽象基类。"

#: ../../library/typing.rst:2868
msgid "An ABC with one abstract method ``__index__``."
msgstr "含抽象方法 ``__index__`` 的抽象基类。"

#: ../../library/typing.rst:2874
msgid "An ABC with one abstract method ``__int__``."
msgstr "含抽象方法 ``__int__`` 的抽象基类。"

#: ../../library/typing.rst:2878
msgid ""
"An ABC with one abstract method ``__round__`` that is covariant in its "
"return type."
msgstr "含抽象方法 ``__round__`` 的抽象基类，是其返回类型的协变量。"

#: ../../library/typing.rst:2882
msgid "Functions and decorators"
msgstr "函数与装饰器"

#: ../../library/typing.rst:2886
msgid "Cast a value to a type."
msgstr "把值强制转换为类型。"

#: ../../library/typing.rst:2888
msgid ""
"This returns the value unchanged.  To the type checker this signals that the "
"return value has the designated type, but at runtime we intentionally don't "
"check anything (we want this to be as fast as possible)."
msgstr ""
"不变更返回值。对类型检查器而言，代表了返回值具有指定的类型，但运行时故意不做"
"任何检查（以便让检查速度尽量快）。"

#: ../../library/typing.rst:2895
msgid ""
"Ask a static type checker to confirm that *val* has an inferred type of "
"*typ*."
msgstr "让静态类型检查器确认 *val* 具有推断为 *typ* 的类型。"

#: ../../library/typing.rst:2897
msgid ""
"At runtime this does nothing: it returns the first argument unchanged with "
"no checks or side effects, no matter the actual type of the argument."
msgstr ""
"在运行时这将不做任何事：它会原样返回第一个参数而没有任何检查或附带影响，无论"
"参数的实际类型是什么。"

#: ../../library/typing.rst:2900
msgid ""
"When a static type checker encounters a call to ``assert_type()``, it emits "
"an error if the value is not of the specified type::"
msgstr ""
"当静态类型检查器遇到对 ``assert_type()`` 的调用时，如果该值不是指定的类型则会"
"报错::"

#: ../../library/typing.rst:2907
msgid ""
"This function is useful for ensuring the type checker's understanding of a "
"script is in line with the developer's intentions::"
msgstr "此函数适用于确保类型检查器对脚本的理解符合开发者的意图::"

#: ../../library/typing.rst:2921
msgid ""
"Ask a static type checker to confirm that a line of code is unreachable."
msgstr "让静态类型检查器确认一行代码是不可达的。"

#: ../../library/typing.rst:2923
msgid "Example::"
msgstr "示例："

#: ../../library/typing.rst:2934
msgid ""
"Here, the annotations allow the type checker to infer that the last case can "
"never execute, because ``arg`` is either an :class:`int` or a :class:`str`, "
"and both options are covered by earlier cases. If a type checker finds that "
"a call to ``assert_never()`` is reachable, it will emit an error. For "
"example, if the type annotation for ``arg`` was instead ``int | str | "
"float``, the type checker would emit an error pointing out that "
"``unreachable`` is of type :class:`float`. For a call to ``assert_never`` to "
"pass type checking, the inferred type of the argument passed in must be the "
"bottom type, :data:`Never`, and nothing else."
msgstr ""
"在这里，标注让类型检查器能推断出最后一个分支永远不会被执行，因为 ``arg`` 为 :"
"class:`int` 或为 :class:`str`，而这两种情况都已被之前的分支所覆盖。 如果类型"
"检查器发现对 ``assert_never()`` 的调用是可达的，它就将报告错误。 例如，如果 "
"``arg`` 的类型标注改为 ``int | str | float``，则类型检查器将报告错误指出 "
"``unreachable`` 为 :class:`float` 类型。 对于通过类型检查的 ``assert_never`` "
"调用，传入参数的推断类型必须为底部类型 :data:`Never`，而不能为其他任何类型。"

#: ../../library/typing.rst:2946
msgid "At runtime, this throws an exception when called."
msgstr "在运行时，如果调用此函数将抛出一个异常。"

#: ../../library/typing.rst:2949
msgid ""
"`Unreachable Code and Exhaustiveness Checking <https://typing.readthedocs.io/"
"en/latest/source/unreachable.html>`__ has more information about "
"exhaustiveness checking with static typing."
msgstr ""
"`Unreachable Code and Exhaustiveness Checking <https://typing.readthedocs.io/"
"en/latest/source/unreachable.html>`__ 有更多关于使用静态类型进行穷尽性检查的"
"信息。"

#: ../../library/typing.rst:2957
msgid "Reveal the inferred static type of an expression."
msgstr "揭示一个表达式的推断静态类型。"

#: ../../library/typing.rst:2959
msgid ""
"When a static type checker encounters a call to this function, it emits a "
"diagnostic with the type of the argument. For example::"
msgstr ""
"当静态类型检查器遇到一个对此函数的调用时，它将发出包含参数类型的诊断信息。 例"
"如::"

#: ../../library/typing.rst:2965
msgid ""
"This can be useful when you want to debug how your type checker handles a "
"particular piece of code."
msgstr "这在你想要调试你的类型检查器如何处理一段特定代码时很有用处。"

#: ../../library/typing.rst:2968
msgid ""
"The function returns its argument unchanged, which allows using it within an "
"expression::"
msgstr "该函数将不加修改地返回其参数，这将允许在表达式中使用它::"

#: ../../library/typing.rst:2973
msgid ""
"Most type checkers support ``reveal_type()`` anywhere, even if the name is "
"not imported from ``typing``. Importing the name from ``typing`` allows your "
"code to run without runtime errors and communicates intent more clearly."
msgstr ""
"大多数类型检查器都能在任何地方支持 ``reveal_type()``，即使并未从 ``typing`` "
"导入该名称。 从 ``typing`` 导入该名称能让你的代码运行时不会出现运行时错误并且"
"更清晰地传递意图。"

#: ../../library/typing.rst:2978
msgid ""
"At runtime, this function prints the runtime type of its argument to stderr "
"and returns it unchanged::"
msgstr ""
"在运行时，该函数会将其参数的运行时类型打印到 stderr 并不加修改地返回它::"

#: ../../library/typing.rst:2988
msgid ""
":data:`~typing.dataclass_transform` may be used to decorate a class, "
"metaclass, or a function that is itself a decorator. The presence of "
"``@dataclass_transform()`` tells a static type checker that the decorated "
"object performs runtime \"magic\" that transforms a class, giving it :func:"
"`dataclasses.dataclass`-like behaviors."
msgstr ""
":data:`~typing.dataclass_transform` 可被用于装饰类、元类或本身为装饰器的函"
"数。 使用 ``@dataclass_transform()`` 将让静态类型检查器知道被装饰的对象会执行"
"转换类的运行时“魔法”，从而给予它类似 :func:`dataclasses.dataclass` 的行为。"

#: ../../library/typing.rst:2994
msgid "Example usage with a decorator function:"
msgstr ""

#: ../../library/typing.rst:3008
msgid "On a base class::"
msgstr "在基类上::"

#: ../../library/typing.rst:3017
msgid "On a metaclass::"
msgstr "在元类上::"

#: ../../library/typing.rst:3028
msgid ""
"The ``CustomerModel`` classes defined above will be treated by type checkers "
"similarly to classes created with :func:`@dataclasses.dataclass <dataclasses."
"dataclass>`. For example, type checkers will assume these classes have "
"``__init__`` methods that accept ``id`` and ``name``."
msgstr ""
"上面定义的 ``CustomerModel`` 类将被类型检查器视为类似于使用 :func:"
"`@dataclasses.dataclass <dataclasses.dataclass>` 创建的类。 例如，类型检查器"
"将假定这些类具有接受 ``id`` 和 ``name`` 的 ``__init__`` 方法。"

#: ../../library/typing.rst:3034
msgid ""
"The decorated class, metaclass, or function may accept the following bool "
"arguments which type checkers will assume have the same effect as they would "
"have on the :func:`@dataclasses.dataclass<dataclasses.dataclass>` decorator: "
"``init``, ``eq``, ``order``, ``unsafe_hash``, ``frozen``, ``match_args``, "
"``kw_only``, and ``slots``. It must be possible for the value of these "
"arguments (``True`` or ``False``) to be statically evaluated."
msgstr ""
"被装饰的类、元类或函数可以接受以下布尔值参数，类型检查器将假定它们具有与 :"
"func:`@dataclasses.dataclass<dataclasses.dataclass>` 装饰器相同的效果: "
"``init``, ``eq``, ``order``, ``unsafe_hash``, ``frozen``, ``match_args``, "
"``kw_only`` 和 ``slots``。 这些参数的值 (``True`` 或 ``False``) 必须可以被静"
"态地求值。"

#: ../../library/typing.rst:3042
msgid ""
"The arguments to the ``dataclass_transform`` decorator can be used to "
"customize the default behaviors of the decorated class, metaclass, or "
"function:"
msgstr ""
"传给 ``dataclass_transform`` 装饰器的参数可以被用来定制被装饰的类、元类或函数"
"的默认行为:"

#: ../../library/typing.rst:3046
msgid ""
"``eq_default`` indicates whether the ``eq`` parameter is assumed to be "
"``True`` or ``False`` if it is omitted by the caller."
msgstr ""
"``eq_default`` 指明如果调用方省略 ``eq`` 形参则应将其假定为 ``True`` 还是 "
"``False``。"

#: ../../library/typing.rst:3048
msgid ""
"``order_default`` indicates whether the ``order`` parameter is assumed to be "
"True or False if it is omitted by the caller."
msgstr ""
"``order_default`` 指明如果调用方省略 ``order`` 形参则应将其假定为 True 还是 "
"False。"

#: ../../library/typing.rst:3050
msgid ""
"``kw_only_default`` indicates whether the ``kw_only`` parameter is assumed "
"to be True or False if it is omitted by the caller."
msgstr ""
"``kw_only_default`` 指明如果调用方省略indicates whether the ``kw_only`` 形参"
"则应将其假定为 True 还是 False。"

#: ../../library/typing.rst:3052
msgid ""
"``frozen_default`` indicates whether the ``frozen`` parameter is assumed to "
"be True or False if it is omitted by the caller."
msgstr ""

#: ../../library/typing.rst:3056
msgid ""
"``field_specifiers`` specifies a static list of supported classes or "
"functions that describe fields, similar to ``dataclasses.field()``."
msgstr ""
"``field_specifiers`` 指定一个受支持的类或描述字段的函数的静态列表，类似于 "
"``dataclasses.field()``。"

#: ../../library/typing.rst:3058
msgid ""
"Arbitrary other keyword arguments are accepted in order to allow for "
"possible future extensions."
msgstr "接受任何其他关键字以便允许可能的未来扩展。"

#: ../../library/typing.rst:3061
msgid ""
"Type checkers recognize the following optional arguments on field specifiers:"
msgstr "类型检查器能识别下列字段设定器的可选参数:"

#: ../../library/typing.rst:3064
msgid ""
"``init`` indicates whether the field should be included in the synthesized "
"``__init__`` method. If unspecified, ``init`` defaults to ``True``."
msgstr ""
"``init`` 指明字段是否应当被包括在合成的 ``__init__`` 方法中。 如果未指明，则 "
"``init`` 默认为 ``True``。"

#: ../../library/typing.rst:3067
msgid "``default`` provides the default value for the field."
msgstr "``default`` 为字段提供默认值。"

#: ../../library/typing.rst:3068
msgid ""
"``default_factory`` provides a runtime callback that returns the default "
"value for the field. If neither ``default`` nor ``default_factory`` are "
"specified, the field is assumed to have no default value and must be "
"provided a value when the class is instantiated."
msgstr ""
"``default_factory`` 提供一个返回字段默认值的运行时回调。 如果 ``default`` 或 "
"``default_factory`` 均未指定，则会假定字段没有默认值而在类被初始化时必须提供"
"一个值。"

#: ../../library/typing.rst:3073
msgid "``factory`` is an alias for ``default_factory``."
msgstr "``factory`` 是 ``default_factory`` 的一个别名。"

#: ../../library/typing.rst:3074
msgid ""
"``kw_only`` indicates whether the field should be marked as keyword-only. If "
"``True``, the field will be keyword-only. If ``False``, it will not be "
"keyword-only. If unspecified, the value of the ``kw_only`` parameter on the "
"object decorated with ``dataclass_transform`` will be used, or if that is "
"unspecified, the value of ``kw_only_default`` on ``dataclass_transform`` "
"will be used."
msgstr ""
"``kw_only`` 指明字段是否应被标记为仅限关键字的。 如为 ``True``，字段将是仅限"
"关键字的。 如为 ``False``，它将不是仅限关键字的。 如未指明，则将使用以 "
"``dataclass_transform`` 装饰的对象的 ``kw_only`` 形参的值，或者如果该值也未指"
"明，则将使用 ``dataclass_transform`` 上 ``kw_only_default`` 的值。"

#: ../../library/typing.rst:3080
msgid ""
"``alias`` provides an alternative name for the field. This alternative name "
"is used in the synthesized ``__init__`` method."
msgstr ""
"``alias`` 提供了字段的替代名称。 该替代名称会被用于合成的 ``__init__`` 方法。"
"method."

#: ../../library/typing.rst:3083
msgid ""
"At runtime, this decorator records its arguments in the "
"``__dataclass_transform__`` attribute on the decorated object. It has no "
"other runtime effect."
msgstr ""
"在运行时，该装饰器会将其参数记录到被装饰对象的 ``__dataclass_transform__`` 属"
"性。 它没有其他的运行时影响。"

#: ../../library/typing.rst:3087
msgid "See :pep:`681` for more details."
msgstr "更多细节请参见 :pep:`681`。"

#: ../../library/typing.rst:3093
msgid ""
"The ``@overload`` decorator allows describing functions and methods that "
"support multiple different combinations of argument types. A series of "
"``@overload``-decorated definitions must be followed by exactly one non-"
"``@overload``-decorated definition (for the same function/method). The "
"``@overload``-decorated definitions are for the benefit of the type checker "
"only, since they will be overwritten by the non-``@overload``-decorated "
"definition, while the latter is used at runtime but should be ignored by a "
"type checker.  At runtime, calling a ``@overload``-decorated function "
"directly will raise :exc:`NotImplementedError`. An example of overload that "
"gives a more precise type than can be expressed using a union or a type "
"variable:"
msgstr ""

#: ../../library/typing.rst:3119
msgid ""
"See :pep:`484` for more details and comparison with other typing semantics."
msgstr "请参阅 :pep:`484` 了解更多细节以及与其他类型语义的比较。"

#: ../../library/typing.rst:3121
msgid ""
"Overloaded functions can now be introspected at runtime using :func:"
"`get_overloads`."
msgstr "过载的函数现在可以使用 :func:`get_overloads` 在运行时进行内省。"

#: ../../library/typing.rst:3128
msgid ""
"Return a sequence of :func:`@overload <overload>`-decorated definitions for "
"*func*. *func* is the function object for the implementation of the "
"overloaded function. For example, given the definition of ``process`` in the "
"documentation for :func:`@overload <overload>`, ``get_overloads(process)`` "
"will return a sequence of three function objects for the three defined "
"overloads. If called on a function with no overloads, ``get_overloads()`` "
"returns an empty sequence."
msgstr ""
"返回一个 *func* 的由 :func:`@overload <overload>` 装饰的定义组成的序列。 "
"*func* 是用于实现过载函数的函数对象。 例如，在文档中为 :func:`@overload "
"<overload>` 给出 ``process`` 的定义，``get_overloads(process)`` 将为所定义的"
"三个过载函数返回由三个函数对象组成的序列。 如果在不带过载的函数上调用，"
"``get_overloads()`` 将返回一个空序列。"

#: ../../library/typing.rst:3136
msgid ""
"``get_overloads()`` can be used for introspecting an overloaded function at "
"runtime."
msgstr "``get_overloads()`` 可被用来在运行时内省一个过载函数。"

#: ../../library/typing.rst:3144
msgid ""
"Clear all registered overloads in the internal registry. This can be used to "
"reclaim the memory used by the registry."
msgstr ""
"清空内部注册表中所有的已注册过载函数。 这可被用来收回注册表所使用的内存。"

#: ../../library/typing.rst:3152
msgid ""
"A decorator to indicate to type checkers that the decorated method cannot be "
"overridden, and the decorated class cannot be subclassed. For example::"
msgstr ""
"告知类型检查器被装饰的方法不能被重载，且被装饰的类不能被子类化的装饰器，例"
"如::"

#: ../../library/typing.rst:3175
msgid ""
"The decorator will now set the ``__final__`` attribute to ``True`` on the "
"decorated object. Thus, a check like ``if getattr(obj, \"__final__\", "
"False)`` can be used at runtime to determine whether an object ``obj`` has "
"been marked as final. If the decorated object does not support setting "
"attributes, the decorator returns the object unchanged without raising an "
"exception."
msgstr ""
"该装饰器现在将在被装饰的对象上将 ``__final__`` 属性设为 ``True``。 这样，可以"
"在运行时使用 ``if getattr(obj, \"__final__\", False)`` 这样的检查来确定对象 "
"``obj`` 是否已被标记为终结。 如果被装饰的对象不支持设置属性，该装饰器将不加修"
"改地返回对象而不会引发异常。"

#: ../../library/typing.rst:3186
msgid "Decorator to indicate that annotations are not type hints."
msgstr "标明注解不是类型提示的装饰器。"

#: ../../library/typing.rst:3188
msgid ""
"This works as class or function :term:`decorator`.  With a class, it applies "
"recursively to all methods and classes defined in that class (but not to "
"methods defined in its superclasses or subclasses)."
msgstr ""
"这起到类或函数 :term:`decorator` 的作用。 当用于类时，它将递归地应用到该类中"
"定义的所有方法和类（但不包括在其超类或子类中定义的方法）。"

#: ../../library/typing.rst:3192
msgid "This mutates the function(s) in place."
msgstr "本方法将原地修改函数（或多个函数）。"

#: ../../library/typing.rst:3196
msgid "Decorator to give another decorator the :func:`no_type_check` effect."
msgstr "让其他装饰器具有 :func:`no_type_check` 效果的装饰器。"

#: ../../library/typing.rst:3198
msgid ""
"This wraps the decorator with something that wraps the decorated function "
"in :func:`no_type_check`."
msgstr "本装饰器用 :func:`no_type_check` 里的装饰函数打包其他装饰器。"

#: ../../library/typing.rst:3204
msgid ""
"A decorator for methods that indicates to type checkers that this method "
"should override a method or attribute with the same name on a base class. "
"This helps prevent bugs that may occur when a base class is changed without "
"an equivalent change to a child class."
msgstr ""

#: ../../library/typing.rst:3226
msgid "There is no runtime checking of this property."
msgstr ""

#: ../../library/typing.rst:3228
msgid ""
"The decorator will set the ``__override__`` attribute to ``True`` on the "
"decorated object. Thus, a check like ``if getattr(obj, \"__override__\", "
"False)`` can be used at runtime to determine whether an object ``obj`` has "
"been marked as an override.  If the decorated object does not support "
"setting attributes, the decorator returns the object unchanged without "
"raising an exception."
msgstr ""

#: ../../library/typing.rst:3235
msgid "See :pep:`698` for more details."
msgstr ""

#: ../../library/typing.rst:3242
msgid "Decorator to mark a class or function to be unavailable at runtime."
msgstr "标记类或函数内不可用于运行时的装饰器。"

#: ../../library/typing.rst:3244
msgid ""
"This decorator is itself not available at runtime. It is mainly intended to "
"mark classes that are defined in type stub files if an implementation "
"returns an instance of a private class::"
msgstr ""
"在运行时，该装饰器本身不可用。实现返回的是私有类实例时，它主要是用于标记在类"
"型存根文件中定义的类。"

#: ../../library/typing.rst:3255
msgid ""
"Note that returning instances of private classes is not recommended. It is "
"usually preferable to make such classes public."
msgstr "注意，建议不要返回私有类实例，最好将之设为公共类。"

#: ../../library/typing.rst:3259
msgid "Introspection helpers"
msgstr "内省辅助器"

#: ../../library/typing.rst:3263
msgid ""
"Return a dictionary containing type hints for a function, method, module or "
"class object."
msgstr "返回函数、方法、模块、类对象的类型提示的字典。"

#: ../../library/typing.rst:3266
msgid ""
"This is often the same as ``obj.__annotations__``. In addition, forward "
"references encoded as string literals are handled by evaluating them in "
"``globals`` and ``locals`` namespaces. For a class ``C``, return a "
"dictionary constructed by merging all the ``__annotations__`` along ``C."
"__mro__`` in reverse order."
msgstr ""
"这往往与 ``obj.__annotations__`` 相同。 此外，编码为字符串字面值的前向引用是"
"通过在 ``globals`` 与 ``locals`` 命名空间中执行求值来处理的。 对于一个类 "
"``C``，则返回一个由所有 ``__annotations__`` 与 ``C.__mro__`` 逆序合并所构建的"
"字典。"

#: ../../library/typing.rst:3272
msgid ""
"The function recursively replaces all ``Annotated[T, ...]`` with ``T``, "
"unless ``include_extras`` is set to ``True`` (see :class:`Annotated` for "
"more information). For example:"
msgstr ""

#: ../../library/typing.rst:3289
msgid ""
":func:`get_type_hints` does not work with imported :ref:`type aliases <type-"
"aliases>` that include forward references. Enabling postponed evaluation of "
"annotations (:pep:`563`) may remove the need for most forward references."
msgstr ""
":func:`get_type_hints` 在导入的 :ref:`类型别名 <type-aliases>` 中不工作，包括"
"前向引用。启用注解的延迟评估（ :pep:`563` ）可能会消除对大多数前向引用的需"
"要。"

#: ../../library/typing.rst:3294
msgid "Added ``include_extras`` parameter as part of :pep:`593`."
msgstr ":pep:`593` 的组成部分，添加了 ``include_extras`` 参数。"

#: ../../library/typing.rst:3297
msgid ""
"Previously, ``Optional[t]`` was added for function and method annotations if "
"a default value equal to ``None`` was set. Now the annotation is returned "
"unchanged."
msgstr ""
"在之前，如果设置了等于 ``None`` 的默认值则会为函数和方法标注添加 "
"``Optional[t]``。 现在标注将被不加修改地返回。"

#: ../../library/typing.rst:3304
msgid ""
"Get the unsubscripted version of a type: for a typing object of the form "
"``X[Y, Z, ...]`` return ``X``. If ``X`` is a generic alias for a builtin or :"
"mod:`collections` class, it gets normalized to the original class. If ``X`` "
"is an instance of :class:`ParamSpecArgs` or :class:`ParamSpecKwargs`, return "
"the underlying :class:`ParamSpec`. Return ``None`` for unsupported objects. "
"Examples:"
msgstr ""

#: ../../library/typing.rst:3325
msgid ""
"Get type arguments with all substitutions performed: for a typing object of "
"the form ``X[Y, Z, ...]`` return ``(Y, Z, ...)``. If ``X`` is a union or :"
"class:`Literal` contained in another generic type, the order of ``(Y, "
"Z, ...)`` may be different from the order of the original arguments ``[Y, "
"Z, ...]`` due to type caching. Return ``()`` for unsupported objects. "
"Examples:"
msgstr ""

#: ../../library/typing.rst:3343
msgid "Check if a type is a :class:`TypedDict`."
msgstr "检查一个类型是否为 :class:`TypedDict`。"

#: ../../library/typing.rst:3364
msgid ""
"A class used for internal typing representation of string forward "
"references. For example, ``List[\"SomeClass\"]`` is implicitly transformed "
"into ``List[ForwardRef(\"SomeClass\")]``.  This class should not be "
"instantiated by a user, but may be used by introspection tools."
msgstr ""
"用于字符串前向引用的内部类型表示的类。 例如，``List[\"SomeClass\"]`` 会被隐式"
"转换为 ``List[ForwardRef(\"SomeClass\")]``。 这个类不应由用户来实例化，但可以"
"由内省工具使用。"

#: ../../library/typing.rst:3370
msgid ""
":pep:`585` generic types such as ``list[\"SomeClass\"]`` will not be "
"implicitly transformed into ``list[ForwardRef(\"SomeClass\")]`` and thus "
"will not automatically resolve to ``list[SomeClass]``."
msgstr ""
":pep:`585` 泛型类型例如 ``list[\"SomeClass\"]`` 将不会被隐式地转换为 "
"``list[ForwardRef(\"SomeClass\")]`` 因而将不会自动解析为 "
"``list[SomeClass]``。"

#: ../../library/typing.rst:3377
msgid "Constant"
msgstr "常量"

#: ../../library/typing.rst:3381
msgid ""
"A special constant that is assumed to be ``True`` by 3rd party static type "
"checkers. It is ``False`` at runtime. Usage::"
msgstr ""
"被第三方静态类型检查器假定为 ``True`` 的特殊常量。 在运行时为 ``False``。 用"
"法如下::"

#: ../../library/typing.rst:3390
msgid ""
"The first type annotation must be enclosed in quotes, making it a \"forward "
"reference\", to hide the ``expensive_mod`` reference from the interpreter "
"runtime.  Type annotations for local variables are not evaluated, so the "
"second annotation does not need to be enclosed in quotes."
msgstr ""
"第一个类型注解必须用引号标注，才能把它当作“前向引用”，从而在解释器运行时中隐"
"藏 ``expensive_mod`` 引用。局部变量的类型注释不会被评估，因此，第二个注解不需"
"要用引号引起来。"

#: ../../library/typing.rst:3397
msgid ""
"If ``from __future__ import annotations`` is used, annotations are not "
"evaluated at function definition time. Instead, they are stored as strings "
"in ``__annotations__``. This makes it unnecessary to use quotes around the "
"annotation (see :pep:`563`)."
msgstr ""
"使用 ``from __future__ import`` 时，函数定义时不处理注解， 而是把注解当作字符"
"串存在 ``__annotations__`` 里，这样就不必为注解使用引号。（详见 :pep:"
"`563`）。"

#: ../../library/typing.rst:3406
msgid "Deprecation Timeline of Major Features"
msgstr "主要特性的弃用时间线"

#: ../../library/typing.rst:3408
msgid ""
"Certain features in ``typing`` are deprecated and may be removed in a future "
"version of Python. The following table summarizes major deprecations for "
"your convenience. This is subject to change, and not all deprecations are "
"listed."
msgstr ""
"``typing`` 的特定特性被弃用，并且可能在将来的 Python 版本中被移除。下表总结了"
"主要的弃用特性。该表可能会被更改，请注意部分弃用特性可能并未在此列出。"

#: ../../library/typing.rst:3413
msgid "Feature"
msgstr "特性"

#: ../../library/typing.rst:3413
msgid "Deprecated in"
msgstr "弃用于"

#: ../../library/typing.rst:3413
msgid "Projected removal"
msgstr "计划移除"

#: ../../library/typing.rst:3413
msgid "PEP/issue"
msgstr "PEP/问题"

#: ../../library/typing.rst:3415
msgid "``typing.io`` and ``typing.re`` submodules"
msgstr "``typing.io`` 和 ``typing.re`` 子模块"

#: ../../library/typing.rst:3415
msgid "3.8"
msgstr "3.8"

#: ../../library/typing.rst:3415
msgid "3.13"
msgstr "3.13"

#: ../../library/typing.rst:3415
msgid ":issue:`38291`"
msgstr ":issue:`38291`"

#: ../../library/typing.rst:3418
msgid "``typing`` versions of standard collections"
msgstr "标准多项集的 ``typing`` 版本"

#: ../../library/typing.rst:3418 ../../library/typing.rst:3421
msgid "3.9"
msgstr "3.9"

#: ../../library/typing.rst:3418 ../../library/typing.rst:3423
#: ../../library/typing.rst:3425 ../../library/typing.rst:3428
msgid "Undecided"
msgstr "未确定"

#: ../../library/typing.rst:3418
msgid ":pep:`585`"
msgstr ":pep:`585`"

#: ../../library/typing.rst:3421
msgid "``typing.ByteString``"
msgstr "``typing.ByteString``"

#: ../../library/typing.rst:3421
msgid "3.14"
msgstr "3.14"

#: ../../library/typing.rst:3421
msgid ":gh:`91896`"
msgstr ":gh:`91896`"

#: ../../library/typing.rst:3423
msgid "``typing.Text``"
msgstr "``typing.Text``"

#: ../../library/typing.rst:3423
msgid "3.11"
msgstr "3.11"

#: ../../library/typing.rst:3423
msgid ":gh:`92332`"
msgstr ":gh:`92332`"

#: ../../library/typing.rst:3425
msgid "``typing.Hashable`` and ``typing.Sized``"
msgstr ""

#: ../../library/typing.rst:3425 ../../library/typing.rst:3428
msgid "3.12"
msgstr ""

#: ../../library/typing.rst:3425
msgid ":gh:`94309`"
msgstr ""

#: ../../library/typing.rst:3428
msgid "``typing.TypeAlias``"
msgstr ""

#: ../../library/typing.rst:3428
msgid ":pep:`695`"
msgstr ""
