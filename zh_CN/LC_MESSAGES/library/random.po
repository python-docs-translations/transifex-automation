# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2023, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Alpha Du <alphanow@gmail.com>, 2019
# Freesand Leo <yuqinju@163.com>, 2022
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-06-02 14:49+0000\n"
"PO-Revision-Date: 2019-09-01 03:22+0000\n"
"Last-Translator: Freesand Leo <yuqinju@163.com>, 2022\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/random.rst:2
msgid ":mod:`random` --- Generate pseudo-random numbers"
msgstr ":mod:`random` --- 生成伪随机数"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/random.rst:7
msgid "**Source code:** :source:`Lib/random.py`"
msgstr "**源码：** :source:`Lib/random.py`"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/random.rst:11
msgid ""
"This module implements pseudo-random number generators for various "
"distributions."
msgstr "该模块实现了各种分布的伪随机数生成器。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/random.rst:14
msgid ""
"For integers, there is uniform selection from a range. For sequences, there "
"is uniform selection of a random element, a function to generate a random "
"permutation of a list in-place, and a function for random sampling without "
"replacement."
msgstr "对于整数，从范围中有统一的选择。 对于序列，存在随机元素的统一选择、用于生成列表的随机排列的函数、以及用于随机抽样而无需替换的函数。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/random.rst:19
msgid ""
"On the real line, there are functions to compute uniform, normal (Gaussian),"
" lognormal, negative exponential, gamma, and beta distributions. For "
"generating distributions of angles, the von Mises distribution is available."
msgstr "在实数轴上，有计算均匀、正态（高斯）、对数正态、负指数、伽马和贝塔分布的函数。 为了生成角度分布，可以使用 von Mises 分布。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/random.rst:23
msgid ""
"Almost all module functions depend on the basic function :func:`.random`, "
"which generates a random float uniformly in the semi-open range [0.0, 1.0)."
"  Python uses the Mersenne Twister as the core generator.  It produces "
"53-bit precision floats and has a period of 2\\*\\*19937-1.  The underlying "
"implementation in C is both fast and threadsafe.  The Mersenne Twister is "
"one of the most extensively tested random number generators in existence.  "
"However, being completely deterministic, it is not suitable for all "
"purposes, and is completely unsuitable for cryptographic purposes."
msgstr ""
"几乎所有模块函数都依赖于基本函数 :func:`.random` ，它在半开放区间 [0.0,1.0) 内均匀生成随机浮点数。 Python 使用 "
"Mersenne Twister 作为核心生成器。 它产生 53 位精度浮点数，周期为 2\\*\\*19937-1 ，其在 C "
"中的底层实现既快又线程安全。 Mersenne Twister 是现存最广泛测试的随机数发生器之一。 "
"但是，因为完全确定性，它不适用于所有目的，并且完全不适合加密目的。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/random.rst:32
msgid ""
"The functions supplied by this module are actually bound methods of a hidden"
" instance of the :class:`random.Random` class.  You can instantiate your own"
" instances of :class:`Random` to get generators that don't share state."
msgstr ""
"这个模块提供的函数实际上是 :class:`random.Random` 类的隐藏实例的绑定方法。 你可以实例化自己的 :class:`Random` "
"类实例以获取不共享状态的生成器。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/random.rst:36
msgid ""
"Class :class:`Random` can also be subclassed if you want to use a different "
"basic generator of your own devising: in that case, override the "
":meth:`~Random.random`, :meth:`~Random.seed`, :meth:`~Random.getstate`, and "
":meth:`~Random.setstate` methods. Optionally, a new generator can supply a "
":meth:`~Random.getrandbits` method --- this allows :meth:`randrange` to "
"produce selections over an arbitrarily large range."
msgstr ""
"如果你想使用自己设计的不同基础生成器，类 :class:`Random` 也可以作为子类：在这种情况下，重载 "
":meth:`~Random.random` 、 :meth:`~Random.seed` 、 :meth:`~Random.getstate` 以及 "
":meth:`~Random.setstate` 方法。可选地，新生成器可以提供 :meth:`~Random.getrandbits` 方法——这允许"
" :meth:`randrange` 在任意大的范围内产生选择。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/random.rst:42
msgid ""
"The :mod:`random` module also provides the :class:`SystemRandom` class which"
" uses the system function :func:`os.urandom` to generate random numbers from"
" sources provided by the operating system."
msgstr ""
":mod:`random` 模块还提供 :class:`SystemRandom` 类，它使用系统函数 :func:`os.urandom` "
"从操作系统提供的源生成随机数。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/random.rst:48
msgid ""
"The pseudo-random generators of this module should not be used for security "
"purposes.  For security or cryptographic uses, see the :mod:`secrets` "
"module."
msgstr "不应将此模块的伪随机生成器用于安全目的。 有关安全性或加密用途，请参阅 :mod:`secrets` 模块。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/random.rst:54
msgid ""
"M. Matsumoto and T. Nishimura, \"Mersenne Twister: A 623-dimensionally "
"equidistributed uniform pseudorandom number generator\", ACM Transactions on"
" Modeling and Computer Simulation Vol. 8, No. 1, January pp.3--30 1998."
msgstr ""
"M. Matsumoto and T. Nishimura, \"Mersenne Twister: A 623-dimensionally "
"equidistributed uniform pseudorandom number generator\", ACM Transactions on"
" Modeling and Computer Simulation Vol. 8, No. 1, January pp.3--30 1998."

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/random.rst:59
msgid ""
"`Complementary-Multiply-with-Carry recipe "
"<https://code.activestate.com/recipes/576707/>`_ for a compatible "
"alternative random number generator with a long period and comparatively "
"simple update operations."
msgstr ""
"`Complementary-Multiply-with-Carry recipe "
"<https://code.activestate.com/recipes/576707/>`_ "
"用于兼容的替代随机数发生器，具有长周期和相对简单的更新操作。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/random.rst:66
msgid "Bookkeeping functions"
msgstr "簿记功能"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/random.rst:70
msgid "Initialize the random number generator."
msgstr "初始化随机数生成器。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/random.rst:72
msgid ""
"If *a* is omitted or ``None``, the current system time is used.  If "
"randomness sources are provided by the operating system, they are used "
"instead of the system time (see the :func:`os.urandom` function for details "
"on availability)."
msgstr ""
"如果 *a* 被省略或为 ``None`` ，则使用当前系统时间。 如果操作系统提供随机源，则使用它们而不是系统时间（有关可用性的详细信息，请参阅 "
":func:`os.urandom` 函数）。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/random.rst:77
msgid "If *a* is an int, it is used directly."
msgstr "如果 *a* 是 int 类型，则直接使用。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/random.rst:79
msgid ""
"With version 2 (the default), a :class:`str`, :class:`bytes`, or "
":class:`bytearray` object gets converted to an :class:`int` and all of its "
"bits are used."
msgstr ""
"对于版本2（默认的），:class:`str` 、 :class:`bytes` 或 :class:`bytearray` 对象转换为 "
":class:`int` 并使用它的所有位。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/random.rst:82
msgid ""
"With version 1 (provided for reproducing random sequences from older "
"versions of Python), the algorithm for :class:`str` and :class:`bytes` "
"generates a narrower range of seeds."
msgstr ""
"对于版本1（用于从旧版本的Python再现随机序列），用于 :class:`str` 和 :class:`bytes` 的算法生成更窄的种子范围。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/random.rst:86
msgid ""
"Moved to the version 2 scheme which uses all of the bits in a string seed."
msgstr "已移至版本2方案，该方案使用字符串种子中的所有位。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/random.rst:91
msgid ""
"Return an object capturing the current internal state of the generator.  "
"This object can be passed to :func:`setstate` to restore the state."
msgstr "返回捕获生成器当前内部状态的对象。 这个对象可以传递给 :func:`setstate` 来恢复状态。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/random.rst:97
msgid ""
"*state* should have been obtained from a previous call to :func:`getstate`, "
"and :func:`setstate` restores the internal state of the generator to what it"
" was at the time :func:`getstate` was called."
msgstr ""
"*state* 应该是从之前调用 :func:`getstate` 获得的，并且 :func:`setstate` 将生成器的内部状态恢复到 "
":func:`getstate` 被调用时的状态。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/random.rst:104
msgid ""
"Returns a Python integer with *k* random bits. This method is supplied with "
"the MersenneTwister generator and some other generators may also provide it "
"as an optional part of the API. When available, :meth:`getrandbits` enables "
":meth:`randrange` to handle arbitrarily large ranges."
msgstr ""
"返回带有 *k* 位随机的Python整数。 此方法随 MersenneTwister "
"生成器一起提供，其他一些生成器也可以将其作为API的可选部分提供。 如果可用，:meth:`getrandbits` 启用 "
":meth:`randrange` 来处理任意大范围。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/random.rst:111
msgid "Functions for integers"
msgstr "整数用函数"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/random.rst:116
msgid ""
"Return a randomly selected element from ``range(start, stop, step)``.  This "
"is equivalent to ``choice(range(start, stop, step))``, but doesn't actually "
"build a range object."
msgstr ""
"从 ``range(start, stop, step)`` 返回一个随机选择的元素。 这相当于 ``choice(range(start, stop,"
" step))`` ，但实际上并没有构建一个 range 对象。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/random.rst:120
msgid ""
"The positional argument pattern matches that of :func:`range`.  Keyword "
"arguments should not be used because the function may use them in unexpected"
" ways."
msgstr "位置参数模式匹配 :func:`range` 。不应使用关键字参数，因为该函数可能以意外的方式使用它们。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/random.rst:123
msgid ""
":meth:`randrange` is more sophisticated about producing equally distributed "
"values.  Formerly it used a style like ``int(random()*n)`` which could "
"produce slightly uneven distributions."
msgstr ""
":meth:`randrange` 在生成均匀分布的值方面更为复杂。 "
"以前它使用了像``int(random()*n)``这样的形式，它可以产生稍微不均匀的分布。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/random.rst:130
msgid ""
"Return a random integer *N* such that ``a <= N <= b``.  Alias for "
"``randrange(a, b+1)``."
msgstr "返回随机整数 *N* 满足 ``a <= N <= b``。相当于 ``randrange(a, b+1)``。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/random.rst:135
msgid "Functions for sequences"
msgstr "序列用函数"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/random.rst:139
msgid ""
"Return a random element from the non-empty sequence *seq*. If *seq* is "
"empty, raises :exc:`IndexError`."
msgstr "从非空序列 *seq* 返回一个随机元素。 如果 *seq* 为空，则引发 :exc:`IndexError`。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/random.rst:144
msgid ""
"Return a *k* sized list of elements chosen from the *population* with "
"replacement. If the *population* is empty, raises :exc:`IndexError`."
msgstr ""
"从 *population* 中有重复地随机选取元素，返回大小为 *k* 的元素列表。 如果 *population* 为空，则引发 "
":exc:`IndexError`。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/random.rst:147
msgid ""
"If a *weights* sequence is specified, selections are made according to the "
"relative weights.  Alternatively, if a *cum_weights* sequence is given, the "
"selections are made according to the cumulative weights (perhaps computed "
"using :func:`itertools.accumulate`).  For example, the relative weights "
"``[10, 5, 30, 5]`` are equivalent to the cumulative weights ``[10, 15, 45, "
"50]``.  Internally, the relative weights are converted to cumulative weights"
" before making selections, so supplying the cumulative weights saves work."
msgstr ""
"如果指定了 *weight* 序列，则根据相对权重进行选择。 或者，如果给出 *cum_weights* 序列，则根据累积权重（可能使用 "
":func:`itertools.accumulate` 计算）进行选择。 例如，相对权重``[10, 5, 30, 5]``相当于累积权重``[10,"
" 15, 45, 50]``。 在内部，相对权重在进行选择之前会转换为累积权重，因此提供累积权重可以节省工作量。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/random.rst:156
msgid ""
"If neither *weights* nor *cum_weights* are specified, selections are made "
"with equal probability.  If a weights sequence is supplied, it must be the "
"same length as the *population* sequence.  It is a :exc:`TypeError` to "
"specify both *weights* and *cum_weights*."
msgstr ""
"如果既未指定 *weight* 也未指定 *cum_weights* ，则以相等的概率进行选择。 如果提供了权重序列，则它必须与 "
"*population* 序列的长度相同。 一个 :exc:`TypeError` 指定了 *weights* 和*cum_weights*。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/random.rst:161
msgid ""
"The *weights* or *cum_weights* can use any numeric type that interoperates "
"with the :class:`float` values returned by :func:`random` (that includes "
"integers, floats, and fractions but excludes decimals)."
msgstr ""
"*weights* 或 *cum_weights* 可以使用任何与 :func:`random` 返回的 :class:`float` "
"值互操作的数值类型（包括整数，浮点数和分数但不包括十进制小数）。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/random.rst:165
msgid ""
"For a given seed, the :func:`choices` function with equal weighting "
"typically produces a different sequence than repeated calls to "
":func:`choice`.  The algorithm used by :func:`choices` uses floating point "
"arithmetic for internal consistency and speed.  The algorithm used by "
":func:`choice` defaults to integer arithmetic with repeated selections to "
"avoid small biases from round-off error."
msgstr ""
"对于给定的种子，具有相等加权的 :func:`choices` 函数通常产生与重复调用 :func:`choice` 不同的序列。 "
":func:`choices` 使用的算法使用浮点运算来实现内部一致性和速度。 :func:`choice`  "
"使用的算法默认为重复选择的整数运算，以避免因舍入误差引起的小偏差。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/random.rst:177
msgid "Shuffle the sequence *x* in place."
msgstr "将序列 *x* 随机打乱位置。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/random.rst:179
msgid ""
"The optional argument *random* is a 0-argument function returning a random "
"float in [0.0, 1.0); by default, this is the function :func:`.random`."
msgstr ""
"可选参数 *random* 是一个0参数函数，在 [0.0, 1.0) 中返回随机浮点数；默认情况下，这是函数 :func:`.random` 。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/random.rst:182
msgid ""
"To shuffle an immutable sequence and return a new shuffled list, use "
"``sample(x, k=len(x))`` instead."
msgstr "要改变一个不可变的序列并返回一个新的打乱列表，请使用``sample(x, k=len(x))``。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/random.rst:185
msgid ""
"Note that even for small ``len(x)``, the total number of permutations of *x*"
" can quickly grow larger than the period of most random number generators. "
"This implies that most permutations of a long sequence can never be "
"generated.  For example, a sequence of length 2080 is the largest that can "
"fit within the period of the Mersenne Twister random number generator."
msgstr ""
"请注意，即使对于小的 ``len(x)``，*x* 的排列总数也可以快速增长，大于大多数随机数生成器的周期。 这意味着长序列的大多数排列永远不会产生。 "
"例如，长度为2080的序列是可以在 Mersenne Twister 随机数生成器的周期内拟合的最大序列。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/random.rst:194
msgid ""
"Return a *k* length list of unique elements chosen from the population "
"sequence or set. Used for random sampling without replacement."
msgstr "返回从总体序列或集合中选择的唯一元素的 *k* 长度列表。 用于无重复的随机抽样。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/random.rst:197
msgid ""
"Returns a new list containing elements from the population while leaving the"
" original population unchanged.  The resulting list is in selection order so"
" that all sub-slices will also be valid random samples.  This allows raffle "
"winners (the sample) to be partitioned into grand prize and second place "
"winners (the subslices)."
msgstr ""
"返回包含来自总体的元素的新列表，同时保持原始总体不变。 结果列表按选择顺序排列，因此所有子切片也将是有效的随机样本。 "
"这允许抽奖获奖者（样本）被划分为大奖和第二名获胜者（子切片）。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/random.rst:203
msgid ""
"Members of the population need not be :term:`hashable` or unique.  If the "
"population contains repeats, then each occurrence is a possible selection in"
" the sample."
msgstr "总体成员不必是 :term:`hashable` 或 unique 。 如果总体包含重复，则每次出现都是样本中可能的选择。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/random.rst:206
msgid ""
"To choose a sample from a range of integers, use a :func:`range` object as "
"an argument.  This is especially fast and space efficient for sampling from "
"a large population:  ``sample(range(10000000), k=60)``."
msgstr ""
"要从一系列整数中选择样本，请使用 :func:`range` 对象作为参数。 "
"对于从大量人群中采样，这种方法特别快速且节省空间：``sample(range(10000000), k=60)`` 。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/random.rst:210
msgid ""
"If the sample size is larger than the population size, a :exc:`ValueError` "
"is raised."
msgstr "如果样本大小大于总体大小，则引发 :exc:`ValueError` 。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/random.rst:214
msgid "Real-valued distributions"
msgstr "实值分布"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/random.rst:216
msgid ""
"The following functions generate specific real-valued distributions. "
"Function parameters are named after the corresponding variables in the "
"distribution's equation, as used in common mathematical practice; most of "
"these equations can be found in any statistics text."
msgstr ""
"以下函数生成特定的实值分布。如常用数学实践中所使用的那样, 函数参数以分布方程中的相应变量命名;大多数这些方程都可以在任何统计学教材中找到。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/random.rst:224
msgid "Return the next random floating point number in the range [0.0, 1.0)."
msgstr "返回 [0.0, 1.0) 范围内的下一个随机浮点数。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/random.rst:229
msgid ""
"Return a random floating point number *N* such that ``a <= N <= b`` for ``a "
"<= b`` and ``b <= N <= a`` for ``b < a``."
msgstr ""
"返回一个随机浮点数 *N* ，当 ``a <= b`` 时 ``a <= N <= b`` ，当 ``b < a`` 时 ``b <= N <= a``"
" 。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/random.rst:232
msgid ""
"The end-point value ``b`` may or may not be included in the range depending "
"on floating-point rounding in the equation ``a + (b-a) * random()``."
msgstr "取决于等式 ``a + (b-a) * random()`` 中的浮点舍入，终点 ``b`` 可以包括或不包括在该范围内。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/random.rst:238
msgid ""
"Return a random floating point number *N* such that ``low <= N <= high`` and"
" with the specified *mode* between those bounds.  The *low* and *high* "
"bounds default to zero and one.  The *mode* argument defaults to the "
"midpoint between the bounds, giving a symmetric distribution."
msgstr ""
"返回一个随机浮点数 *N* ，使得 ``low <= N <= high`` 并在这些边界之间使用指定的 *mode* 。 *low* 和 *high*"
" 边界默认为零和一。 *mode* 参数默认为边界之间的中点，给出对称分布。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/random.rst:246
msgid ""
"Beta distribution.  Conditions on the parameters are ``alpha > 0`` and "
"``beta > 0``. Returned values range between 0 and 1."
msgstr "Beta 分布。 参数的条件是 ``alpha > 0`` 和 ``beta > 0``。 返回值的范围介于 0 和 1 之间。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/random.rst:252
msgid ""
"Exponential distribution.  *lambd* is 1.0 divided by the desired mean.  It "
"should be nonzero.  (The parameter would be called \"lambda\", but that is a"
" reserved word in Python.)  Returned values range from 0 to positive "
"infinity if *lambd* is positive, and from negative infinity to 0 if *lambd* "
"is negative."
msgstr ""
"指数分布。 *lambd* 是 1.0 除以所需的平均值，它应该是非零的。 （该参数本应命名为 “lambda” ，但这是 Python "
"中的保留字。）如果 *lambd* 为正，则返回值的范围为 0 到正无穷大；如果 *lambd* 为负，则返回值从负无穷大到 0。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/random.rst:261
msgid ""
"Gamma distribution.  (*Not* the gamma function!)  Conditions on the "
"parameters are ``alpha > 0`` and ``beta > 0``."
msgstr "Gamma 分布。 （ *不是* gamma 函数！ ） 参数的条件是 ``alpha > 0`` 和 ``beta > 0``。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/random.rst:264
msgid "The probability distribution function is::"
msgstr "概率分布函数是::"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/random.rst:273
msgid ""
"Gaussian distribution.  *mu* is the mean, and *sigma* is the standard "
"deviation.  This is slightly faster than the :func:`normalvariate` function "
"defined below."
msgstr "高斯分布。 *mu* 是平均值，*sigma* 是标准差。 这比下面定义的 :func:`normalvariate` 函数略快。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/random.rst:280
msgid ""
"Log normal distribution.  If you take the natural logarithm of this "
"distribution, you'll get a normal distribution with mean *mu* and standard "
"deviation *sigma*.  *mu* can have any value, and *sigma* must be greater "
"than zero."
msgstr ""
"对数正态分布。 如果你采用这个分布的自然对数，你将得到一个正态分布，平均值为 *mu* 和标准差为 *sigma* 。 *mu* "
"可以是任何值，*sigma* 必须大于零。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/random.rst:288
msgid ""
"Normal distribution.  *mu* is the mean, and *sigma* is the standard "
"deviation."
msgstr "正态分布。 *mu* 是平均值，*sigma* 是标准差。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/random.rst:293
msgid ""
"*mu* is the mean angle, expressed in radians between 0 and 2\\*\\ *pi*, and "
"*kappa* is the concentration parameter, which must be greater than or equal "
"to zero.  If *kappa* is equal to zero, this distribution reduces to a "
"uniform random angle over the range 0 to 2\\*\\ *pi*."
msgstr ""
"冯·米塞斯分布。 *mu* 是平均角度，以弧度表示，介于0和 2\\*\\ *pi* 之间，*kappa* 是浓度参数，必须大于或等于零。 如果 "
"*kappa* 等于零，则该分布在 0 到 2\\*\\ *pi* 的范围内减小到均匀的随机角度。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/random.rst:301
msgid "Pareto distribution.  *alpha* is the shape parameter."
msgstr "帕累托分布。 *alpha* 是形状参数。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/random.rst:306
msgid ""
"Weibull distribution.  *alpha* is the scale parameter and *beta* is the "
"shape parameter."
msgstr "威布尔分布。 *alpha* 是比例参数，*beta* 是形状参数。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/random.rst:311
msgid "Alternative Generator"
msgstr "替代生成器"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/random.rst:315
msgid ""
"Class that implements the default pseudo-random number generator used by the"
" :mod:`random` module."
msgstr "该类实现了 :mod:`random` 模块所用的默认伪随机数生成器。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/random.rst:320
msgid ""
"Class that uses the :func:`os.urandom` function for generating random "
"numbers from sources provided by the operating system. Not available on all "
"systems. Does not rely on software state, and sequences are not "
"reproducible. Accordingly, the :meth:`seed` method has no effect and is "
"ignored. The :meth:`getstate` and :meth:`setstate` methods raise "
":exc:`NotImplementedError` if called."
msgstr ""
"使用 :func:`os.urandom` 函数的类，用从操作系统提供的源生成随机数。 这并非适用于所有系统。 也不依赖于软件状态，序列不可重现。 "
"因此，:meth:`seed` 方法没有效果而被忽略。 :meth:`getstate` 和 :meth:`setstate` 方法如果被调用则引发 "
":exc:`NotImplementedError`。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/random.rst:329
msgid "Notes on Reproducibility"
msgstr "关于再现性的说明"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/random.rst:331
msgid ""
"Sometimes it is useful to be able to reproduce the sequences given by a "
"pseudo random number generator.  By re-using a seed value, the same sequence"
" should be reproducible from run to run as long as multiple threads are not "
"running."
msgstr "有时能够重现伪随机数生成器给出的序列是有用的。 通过重新使用种子值，只要多个线程没有运行，相同的序列就可以在两次不同运行之间重现。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/random.rst:335
msgid ""
"Most of the random module's algorithms and seeding functions are subject to "
"change across Python versions, but two aspects are guaranteed not to change:"
msgstr "大多数随机模块的算法和种子函数都会在 Python 版本中发生变化，但保证两个方面不会改变："

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/random.rst:338
msgid ""
"If a new seeding method is added, then a backward compatible seeder will be "
"offered."
msgstr "如果添加了新的播种方法，则将提供向后兼容的播种机。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/random.rst:341
msgid ""
"The generator's :meth:`~Random.random` method will continue to produce the "
"same sequence when the compatible seeder is given the same seed."
msgstr "当兼容的播种机被赋予相同的种子时，生成器的 :meth:`~Random.random` 方法将继续产生相同的序列。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/random.rst:347
msgid "Examples and Recipes"
msgstr "例子和配方"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/random.rst:349
msgid "Basic examples::"
msgstr "基本示例::"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/random.rst:377
msgid "Simulations::"
msgstr "模拟::"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/random.rst:406
msgid ""
"Example of `statistical bootstrapping "
"<https://en.wikipedia.org/wiki/Bootstrapping_(statistics)>`_ using "
"resampling with replacement to estimate a confidence interval for the mean "
"of a sample of size five::"
msgstr ""
"`statistical bootstrapping "
"<https://en.wikipedia.org/wiki/Bootstrapping_(statistics)>`_ "
"使用重采样和替换来估计大小为五的样本的均值的置信区间的示例::"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/random.rst:420
msgid ""
"Example of a `resampling permutation test "
"<https://en.wikipedia.org/wiki/Resampling_(statistics)#Permutation_tests>`_ "
"to determine the statistical significance or `p-value "
"<https://en.wikipedia.org/wiki/P-value>`_ of an observed difference between "
"the effects of a drug versus a placebo::"
msgstr ""
"使用 `重新采样排列测试 "
"<https://en.wikipedia.org/wiki/Resampling_(statistics)#Permutation_tests>`_ "
"来确定统计学显著性或者使用  `p-值 <https://en.wikipedia.org/wiki/P-value>`_ "
"来观察药物与安慰剂的作用之间差异的示例::"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/random.rst:447
msgid ""
"Simulation of arrival times and service deliveries in a single server "
"queue::"
msgstr "模拟单个服务器队列中的到达时间和服务交付::"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/random.rst:478
msgid ""
"`Statistics for Hackers <https://www.youtube.com/watch?v=Iq9DzN6mvYA>`_ a "
"video tutorial by `Jake Vanderplas "
"<https://us.pycon.org/2016/speaker/profile/295/>`_ on statistical analysis "
"using just a few fundamental concepts including simulation, sampling, "
"shuffling, and cross-validation."
msgstr ""
"`Statistics for Hackers <https://www.youtube.com/watch?v=Iq9DzN6mvYA>`_ "
"`Jake Vanderplas <https://us.pycon.org/2016/speaker/profile/295/>`_ "
"撰写的视频教程，使用一些基本概念进行统计分析，包括模拟、抽样、改组和交叉验证。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/random.rst:484
msgid ""
"`Economics Simulation "
"<http://nbviewer.jupyter.org/url/norvig.com/ipython/Economics.ipynb>`_ a "
"simulation of a marketplace by `Peter Norvig <http://norvig.com/bio.html>`_ "
"that shows effective use of many of the tools and distributions provided by "
"this module (gauss, uniform, sample, betavariate, choice, triangular, and "
"randrange)."
msgstr ""
"`Economics Simulation "
"<http://nbviewer.jupyter.org/url/norvig.com/ipython/Economics.ipynb>`_ "
"`Peter Norvig <http://norvig.com/bio.html>`_ "
"编写的市场模拟，显示了该模块提供的许多工具和分布的有效使用（高斯、均匀、样本、beta变量、选择、三角和随机范围等）。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/random.rst:491
msgid ""
"`A Concrete Introduction to Probability (using Python) "
"<http://nbviewer.jupyter.org/url/norvig.com/ipython/Probability.ipynb>`_ a "
"tutorial by `Peter Norvig <http://norvig.com/bio.html>`_ covering the basics"
" of probability theory, how to write simulations, and how to perform data "
"analysis using Python."
msgstr ""
"`A Concrete Introduction to Probability (using Python) "
"<http://nbviewer.jupyter.org/url/norvig.com/ipython/Probability.ipynb>`_ "
"`Peter Norvig <http://norvig.com/bio.html>`_ 撰写的教程，涵盖了概率论基础知识，如何编写模拟，以及如何使用 "
"Python 进行数据分析。"
