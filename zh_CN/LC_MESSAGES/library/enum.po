# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2023, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# dannyvi <dannyvis@icloud.com>, 2019
# Alpha Du <alphanow@gmail.com>, 2019
# ppcfish <ppcfish@gmail.com>, 2019
# Arisaka97 <solitaire2312@gmail.com>, 2019
# Freesand Leo <yuqinju@163.com>, 2021
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-06-02 14:49+0000\n"
"PO-Revision-Date: 2019-09-01 03:26+0000\n"
"Last-Translator: Freesand Leo <yuqinju@163.com>, 2021\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/enum.rst:2
msgid ":mod:`enum` --- Support for enumerations"
msgstr ":mod:`enum` --- 枚举类型支持"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/enum.rst:14
msgid "**Source code:** :source:`Lib/enum.py`"
msgstr "**源代码：** :source:`Lib/enum.py`"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/enum.rst:18
msgid ""
"An enumeration is a set of symbolic names (members) bound to unique, "
"constant values.  Within an enumeration, the members can be compared by "
"identity, and the enumeration itself can be iterated over."
msgstr "枚举是一组符号名称（枚举成员）的集合，枚举成员应该是唯一的、不可变的。在枚举中，可以对成员进行恒等比较，并且枚举本身是可迭代的。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/enum.rst:24
msgid "Module Contents"
msgstr "模块内容"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/enum.rst:26
msgid ""
"This module defines four enumeration classes that can be used to define "
"unique sets of names and values: :class:`Enum`, :class:`IntEnum`, "
":class:`Flag`, and :class:`IntFlag`.  It also defines one decorator, "
":func:`unique`, and one helper, :class:`auto`."
msgstr ""
"此模块定义了四个枚举类，它们可被用来定义名称和值的不重复集合: :class:`Enum`, :class:`IntEnum`, "
":class:`Flag` 和 :class:`IntFlag`。 此外还定义了一个装饰器 :func:`unique` 和一个辅助类 "
":class:`auto`。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/enum.rst:33
msgid ""
"Base class for creating enumerated constants.  See section `Functional API`_"
" for an alternate construction syntax."
msgstr "用于创建枚举型常数的基类。 请参阅 `Functional API`_ 小节了解另一种替代性的构建语法。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/enum.rst:38
msgid ""
"Base class for creating enumerated constants that are also subclasses of "
":class:`int`."
msgstr "用于创建同时也是 :class:`int` 的子类的枚举型常数的基类。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/enum.rst:43
msgid ""
"Base class for creating enumerated constants that can be combined using the "
"bitwise operators without losing their :class:`IntFlag` membership. "
":class:`IntFlag` members are also subclasses of :class:`int`."
msgstr ""
"此基类用于创建可使用按位运算符进行组合而不会丢失其 :class:`IntFlag` 成员资格的枚举常量。 :class:`IntFlag` "
"成员同样也是 :class:`int` 的子类。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/enum.rst:49
msgid ""
"Base class for creating enumerated constants that can be combined using the "
"bitwise operations without losing their :class:`Flag` membership."
msgstr "此基类用于创建枚举常量 可使用按位运算符进行组合而不会丢失其 :class:`Flag` 成员资格的枚举常量。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/enum.rst:54
msgid ""
"Enum class decorator that ensures only one name is bound to any one value."
msgstr "此 Enum 类装饰器可确保只将一个名称绑定到任意一个值。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/enum.rst:58
msgid ""
"Instances are replaced with an appropriate value for Enum members. Initial "
"value starts at 1."
msgstr "实例会被替换为一个可作为 Enum 成员的适当的值。 初始值从 1 开始。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/enum.rst:60
msgid "``Flag``, ``IntFlag``, ``auto``"
msgstr "``Flag``, ``IntFlag``, ``auto``"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/enum.rst:64
msgid "Creating an Enum"
msgstr "创建一个 Enum"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/enum.rst:66
msgid ""
"Enumerations are created using the :keyword:`class` syntax, which makes them"
" easy to read and write.  An alternative creation method is described in "
"`Functional API`_.  To define an enumeration, subclass :class:`Enum` as "
"follows::"
msgstr ""
"枚举是使用 :keyword:`class` 语法来创建的，这使得它们易于读写。 另一种替代创建方法的描述见 `Functional API`_。 "
"要定义一个枚举，可以对 :class:`Enum` 进行如下的子类化::"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/enum.rst:78
msgid "Enum member values"
msgstr "Enum 的成员值"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/enum.rst:80
msgid ""
"Member values can be anything: :class:`int`, :class:`str`, etc..  If the "
"exact value is unimportant you may use :class:`auto` instances and an "
"appropriate value will be chosen for you.  Care must be taken if you mix "
":class:`auto` with other values."
msgstr ""
"成员值可以为任意类型: :class:`int`, :class:`str` 等等。 如果具体的值不重要，你可以使用 :class:`auto` "
"实例，将为你选择适当的值。 但如果你混用 :class:`auto` 与其他值则需要小心谨慎。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/enum.rst:85
msgid "Nomenclature"
msgstr "命名法"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/enum.rst:87
msgid "The class :class:`Color` is an *enumeration* (or *enum*)"
msgstr "类 :class:`Color` 是一个 *enumeration* (或称 *enum*)"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/enum.rst:88
msgid ""
"The attributes :attr:`Color.RED`, :attr:`Color.GREEN`, etc., are "
"*enumeration members* (or *enum members*) and are functionally constants."
msgstr ""
"属性 :attr:`Color.RED`, :attr:`Color.GREEN` 等等是 *枚举成员* (或称 *enum 成员*) 并且被用作常量。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/enum.rst:90
msgid ""
"The enum members have *names* and *values* (the name of :attr:`Color.RED` is"
" ``RED``, the value of :attr:`Color.BLUE` is ``3``, etc.)"
msgstr ""
"枚举成员具有 *名称* 和 *值* (例如 :attr:`Color.RED` 的名称为 ``RED``，:attr:`Color.BLUE` 的值为 "
"``3`` 等等)"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/enum.rst:96
msgid ""
"Even though we use the :keyword:`class` syntax to create Enums, Enums are "
"not normal Python classes.  See `How are Enums different?`_ for more "
"details."
msgstr ""
"虽然我们使用 :keyword:`class` 语法来创建 Enum，但 Enum 并不是普通的 Python 类。 更多细节请参阅 `How are "
"Enums different?`_。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/enum.rst:100
msgid "Enumeration members have human readable string representations::"
msgstr "枚举成员具有适合人类阅读的表示形式::"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/enum.rst:105
msgid "...while their ``repr`` has more information::"
msgstr "...而它们的 ``repr`` 包含更多信息::"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/enum.rst:110
msgid "The *type* of an enumeration member is the enumeration it belongs to::"
msgstr "一个枚举成员的 *type* 就是它所从属的枚举::"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/enum.rst:118
msgid "Enum members also have a property that contains just their item name::"
msgstr "Enum 的成员还有一个包含其条目名称的特征属性::"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/enum.rst:123
msgid "Enumerations support iteration, in definition order::"
msgstr "枚举支持按照定义顺序进行迭代::"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/enum.rst:139
msgid ""
"Enumeration members are hashable, so they can be used in dictionaries and "
"sets::"
msgstr "枚举成员是可哈希的，因此它们可在字典和集合中可用::"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/enum.rst:149
msgid "Programmatic access to enumeration members and their attributes"
msgstr "对枚举成员及其属性的程序化访问"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/enum.rst:151
msgid ""
"Sometimes it's useful to access members in enumerations programmatically "
"(i.e. situations where ``Color.RED`` won't do because the exact color is not"
" known at program-writing time).  ``Enum`` allows such access::"
msgstr ""
"有时对枚举中的成员进行程序化访问是很有用的（例如在某些场合不能使用 ``Color.RED`` 因为在编程时并不知道要指定的确切颜色）。  "
"``Enum`` 允许这样的访问::"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/enum.rst:160
msgid "If you want to access enum members by *name*, use item access::"
msgstr "如果你希望通过 *name* 来访问枚举成员，可使用条目访问::"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/enum.rst:167
msgid ""
"If you have an enum member and need its :attr:`name` or :attr:`value`::"
msgstr "如果你有一个枚举成员并且需要它的 :attr:`name` 或 :attr:`value`::"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/enum.rst:177
msgid "Duplicating enum members and values"
msgstr "复制枚举成员和值"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/enum.rst:179
msgid "Having two enum members with the same name is invalid::"
msgstr "不允许有同名的枚举成员::"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/enum.rst:189
msgid ""
"However, two enum members are allowed to have the same value.  Given two "
"members A and B with the same value (and A defined first), B is an alias to "
"A.  By-value lookup of the value of A and B will return A.  By-name lookup "
"of B will also return A::"
msgstr ""
"但是，允许两个枚举成员有相同的值。 假定两个成员 A 和 B 有相同的值（且 A 先被定义），则 B 就是 A 的一个别名。 按值查找 A 和 B "
"的值将返回 A。 按名称查找 B 也将返回 A::"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/enum.rst:209
msgid ""
"Attempting to create a member with the same name as an already defined "
"attribute (another member, a method, etc.) or attempting to create an "
"attribute with the same name as a member is not allowed."
msgstr "试图创建具有与某个已定义的属性（另一个成员或方法等）相同名称的成员或者试图创建具有相同名称的属性也是不允许的。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/enum.rst:215
msgid "Ensuring unique enumeration values"
msgstr "确保唯一的枚举值"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/enum.rst:217
msgid ""
"By default, enumerations allow multiple names as aliases for the same value."
" When this behavior isn't desired, the following decorator can be used to "
"ensure each value is used only once in the enumeration:"
msgstr "默认情况下，枚举允许有多个名称作为某个相同值的别名。 如果不想要这样的行为，可以使用以下装饰器来确保每个值在枚举中只被使用一次:"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/enum.rst:223
msgid ""
"A :keyword:`class` decorator specifically for enumerations.  It searches an "
"enumeration's :attr:`__members__` gathering any aliases it finds; if any are"
" found :exc:`ValueError` is raised with the details::"
msgstr ""
"专用于枚举的 :keyword:`class` 装饰器。 它会搜索一个枚举的 :attr:`__members__` "
"并收集所找到的任何别名；只要找到任何别名就会引发 :exc:`ValueError` 并附带相关细节信息::"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/enum.rst:241
msgid "Using automatic values"
msgstr "使用自动设定的值"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/enum.rst:243
msgid "If the exact value is unimportant you can use :class:`auto`::"
msgstr "如果确切的值不重要，你可以使用 :class:`auto`::"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/enum.rst:254
msgid ""
"The values are chosen by :func:`_generate_next_value_`, which can be "
"overridden::"
msgstr "值将由 :func:`_generate_next_value_` 来选择，该函数可以被重载::"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/enum.rst:272
msgid ""
"The goal of the default :meth:`_generate_next_value_` methods is to provide "
"the next :class:`int` in sequence with the last :class:`int` provided, but "
"the way it does this is an implementation detail and may change."
msgstr ""
"默认 :meth:`_generate_next_value_` 方法的目标是提供所给出的最后一个 :class:`int` 所在序列的下一个 "
":class:`int`，但这种行为方式属于实现细节并且可能发生改变。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/enum.rst:278
msgid ""
"The :meth:`_generate_next_value_` method must be defined before any members."
msgstr ":meth:`_generate_next_value_` 方法定义必须在任何其他成员之前。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/enum.rst:281
msgid "Iteration"
msgstr "迭代"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/enum.rst:283
msgid "Iterating over the members of an enum does not provide the aliases::"
msgstr "对枚举成员的迭代不会给出别名::"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/enum.rst:288
msgid ""
"The special attribute ``__members__`` is an ordered dictionary mapping names"
" to members.  It includes all names defined in the enumeration, including "
"the aliases::"
msgstr "特殊属性 ``__members__`` 是一个将名称映射到成员的有序字典。 它包含枚举中定义的所有名称，包括别名::"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/enum.rst:300
msgid ""
"The ``__members__`` attribute can be used for detailed programmatic access "
"to the enumeration members.  For example, finding all the aliases::"
msgstr "``__members__`` 属性可被用于对枚举成员进行详细的程序化访问。 例如，找出所有别名::"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/enum.rst:308
msgid "Comparisons"
msgstr "比较运算"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/enum.rst:310
msgid "Enumeration members are compared by identity::"
msgstr "枚举成员是按标识号进行比较的::"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/enum.rst:319
msgid ""
"Ordered comparisons between enumeration values are *not* supported.  Enum "
"members are not integers (but see `IntEnum`_ below)::"
msgstr "枚举值之间的排序比较 *不被* 支持。 Enum 成员不属于整数 (另请参阅下文的 `IntEnum`_)::"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/enum.rst:327
msgid "Equality comparisons are defined though::"
msgstr "相等比较的定义如下::"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/enum.rst:336
msgid ""
"Comparisons against non-enumeration values will always compare not equal "
"(again, :class:`IntEnum` was explicitly designed to behave differently, see "
"below)::"
msgstr "与非枚举值的比较将总是不相等（同样地，:class:`IntEnum` 被显式设计成不同的行为，参见下文）::"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/enum.rst:345
msgid "Allowed members and attributes of enumerations"
msgstr "允许的枚举成员和属性"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/enum.rst:347
msgid ""
"The examples above use integers for enumeration values.  Using integers is "
"short and handy (and provided by default by the `Functional API`_), but not "
"strictly enforced.  In the vast majority of use-cases, one doesn't care what"
" the actual value of an enumeration is.  But if the value *is* important, "
"enumerations can have arbitrary values."
msgstr ""
"以上示例使用整数作为枚举值。 使用整数相当简洁方便（并由 `Functional API`_ 默认提供），但并不强制要求使用。 "
"在大部分用例中，开发者都关心枚举的实际值是什么。 但如果值 *确实* 重要，则枚举可以使用任意的值。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/enum.rst:353
msgid ""
"Enumerations are Python classes, and can have methods and special methods as"
" usual.  If we have this enumeration::"
msgstr "枚举属于 Python 的类，并可具有普通方法和特殊方法。 如果我们有这样一个枚举::"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/enum.rst:373
msgid "Then::"
msgstr "那么::"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/enum.rst:382
msgid ""
"The rules for what is allowed are as follows: names that start and end with "
"a single underscore are reserved by enum and cannot be used; all other "
"attributes defined within an enumeration will become members of this "
"enumeration, with the exception of special methods (:meth:`__str__`, "
":meth:`__add__`, etc.), descriptors (methods are also descriptors), and "
"variable names listed in :attr:`_ignore_`."
msgstr ""
"对于允许内容的规则如下：以单下划线开头和结尾的名称是由枚举保留而不可使用；在枚举中定义的所有其他属性将成为该枚举的成员，例外项则包括特殊方法成员 "
"(:meth:`__str__`, :meth:`__add__` 等)，描述符 (方法也属于描述符) 以及在 :attr:`_ignore_` "
"中列出的变量名。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/enum.rst:389
msgid ""
"Note:  if your enumeration defines :meth:`__new__` and/or :meth:`__init__` "
"then whatever value(s) were given to the enum member will be passed into "
"those methods.  See `Planet`_ for an example."
msgstr ""
"注意：如果你的枚举定义了 :meth:`__new__` 和/或 :meth:`__init__` 那么指定给枚举成员的任何值都会被传入这些方法。 "
"请参阅示例 `Planet`_。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/enum.rst:395
msgid "Restricted Enum subclassing"
msgstr "受限的 Enum 子类化"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/enum.rst:397
msgid ""
"A new :class:`Enum` class must have one base Enum class, up to one concrete "
"data type, and as many :class:`object`-based mixin classes as needed.  The "
"order of these base classes is::"
msgstr ""
"一个新的 :class:`Enum` 类必须基于一个 Enum 类，至多一个实体数据类型以及出于实际需要的任意多个基于 :class:`object` "
"的 mixin 类。 这些基类的顺序为::"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/enum.rst:404
msgid ""
"Also, subclassing an enumeration is allowed only if the enumeration does not"
" define any members.  So this is forbidden::"
msgstr "另外，仅当一个枚举未定义任何成员时才允许子类化该枚举。 因此禁止以下写法::"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/enum.rst:414
msgid "But this is allowed::"
msgstr "但是允许这样的写法::"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/enum.rst:425
msgid ""
"Allowing subclassing of enums that define members would lead to a violation "
"of some important invariants of types and instances.  On the other hand, it "
"makes sense to allow sharing some common behavior between a group of "
"enumerations. (See `OrderedEnum`_ for an example.)"
msgstr ""
"允许子类化定义了成员的枚举将会导致违反类型与实例的某些重要的不可变规则。 在另一方面，允许在一组枚举之间共享某些通用行为也是有意义的。 （请参阅示例 "
"`OrderedEnum`_ 。）"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/enum.rst:432
msgid "Pickling"
msgstr "封存"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/enum.rst:434
msgid "Enumerations can be pickled and unpickled::"
msgstr "枚举可以被封存与解封::"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/enum.rst:441
msgid ""
"The usual restrictions for pickling apply: picklable enums must be defined "
"in the top level of a module, since unpickling requires them to be "
"importable from that module."
msgstr "封存的常规限制同样适用：可封存枚举必须在模块的最高层级中定义，因为解封操作要求它们可以从该模块导入。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/enum.rst:447
msgid ""
"With pickle protocol version 4 it is possible to easily pickle enums nested "
"in other classes."
msgstr "使用 pickle 协议版本 4 可以方便地封存嵌套在其他类中的枚举。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/enum.rst:450
msgid ""
"It is possible to modify how Enum members are pickled/unpickled by defining "
":meth:`__reduce_ex__` in the enumeration class."
msgstr "通过在枚举类中定义 :meth:`__reduce_ex__` 可以对 Enum 成员的封存/解封方式进行修改。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/enum.rst:455
msgid "Functional API"
msgstr "可用 API"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/enum.rst:457
msgid ""
"The :class:`Enum` class is callable, providing the following functional "
"API::"
msgstr ":class:`Enum` 类属于可调用对象，它提供了以下可用的 API::"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/enum.rst:469
msgid ""
"The semantics of this API resemble :class:`~collections.namedtuple`. The "
"first argument of the call to :class:`Enum` is the name of the enumeration."
msgstr ""
"该 API 的主义类似于 :class:`~collections.namedtuple`。 调用 :class:`Enum` "
"的第一个参数是枚举的名称。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/enum.rst:472
msgid ""
"The second argument is the *source* of enumeration member names.  It can be "
"a whitespace-separated string of names, a sequence of names, a sequence of "
"2-tuples with key/value pairs, or a mapping (e.g. dictionary) of names to "
"values.  The last two options enable assigning arbitrary values to "
"enumerations; the others auto-assign increasing integers starting with 1 "
"(use the ``start`` parameter to specify a different starting value).  A new "
"class derived from :class:`Enum` is returned.  In other words, the above "
"assignment to :class:`Animal` is equivalent to::"
msgstr ""
"第二个参数是枚举成员名称的 *来源*。 它可以是一个用空格分隔的名称字符串、名称序列、键/值对 2 元组的序列，或者名称到值的映射（例如字典）。 "
"最后两种选项使得可以为枚举任意赋值；其他选项会自动以从 1 开始递增的整数赋值（使用 ``start`` 形参可指定不同的起始值）。 返回值是一个派生自"
" :class:`Enum` 的新类。 换句话说，以上对 :class:`Animal` 的赋值就等价于::"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/enum.rst:488
msgid ""
"The reason for defaulting to ``1`` as the starting number and not ``0`` is "
"that ``0`` is ``False`` in a boolean sense, but enum members all evaluate to"
" ``True``."
msgstr ""
"默认以 ``1`` 而以 ``0`` 作为起始数值的原因在于 ``0`` 的布尔值为 ``False``，但所有枚举成员都应被求值为 ``True``。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/enum.rst:492
msgid ""
"Pickling enums created with the functional API can be tricky as frame stack "
"implementation details are used to try and figure out which module the "
"enumeration is being created in (e.g. it will fail if you use a utility "
"function in separate module, and also may not work on IronPython or Jython)."
" The solution is to specify the module name explicitly as follows::"
msgstr ""
"封存通过功能性 API  "
"创建的枚举可能会有点麻烦，因为要使用帧堆栈的实现细节来尝试并找出枚举是在哪个模块中创建的（例如，当你使用不同模块的工具函数时可能会失败，在 "
"IronPython 或 Jython 上也可能会没有效果）。 解决办法是显式地指定模块名称，如下所示::"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/enum.rst:502
msgid ""
"If ``module`` is not supplied, and Enum cannot determine what it is, the new"
" Enum members will not be unpicklable; to keep errors closer to the source, "
"pickling will be disabled."
msgstr ""
"如果未提供 ``module``，且 Enum 无法确定是哪个模块，新的 Enum 成员将不可被解封；为了让错误尽量靠近源头，封存将被禁用。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/enum.rst:506
msgid ""
"The new pickle protocol 4 also, in some circumstances, relies on "
":attr:`~definition.__qualname__` being set to the location where pickle will"
" be able to find the class.  For example, if the class was made available in"
" class SomeData in the global scope::"
msgstr ""
"新的 pickle 协议版本 4 在某些情况下同样依赖于 :attr:`~definition.__qualname__` 被设为特定位置以便 "
"pickle 能够找到相应的类。 例如，类是否存在于全局作用域的 SomeData 类中::"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/enum.rst:513
msgid "The complete signature is::"
msgstr "完整的签名为::"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/enum.rst:0
msgid "value"
msgstr "值"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/enum.rst:517
msgid "What the new Enum class will record as its name."
msgstr "将被新 Enum 类将记录为其名称的数据。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/enum.rst:0
msgid "names"
msgstr "names"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/enum.rst:519
msgid ""
"The Enum members.  This can be a whitespace or comma separated string "
"(values will start at 1 unless otherwise specified)::"
msgstr "Enum 的成员。 这可以是一个空格或逗号分隔的字符串 (起始值将为 1，除非另行指定)::"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/enum.rst:524
msgid "or an iterator of names::"
msgstr "或是一个名称的迭代器::"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/enum.rst:528
msgid "or an iterator of (name, value) pairs::"
msgstr "或是一个 (名称, 值) 对的迭代器::"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/enum.rst:532
msgid "or a mapping::"
msgstr "或是一个映射::"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/enum.rst:0
msgid "module"
msgstr "module"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/enum.rst:536
msgid "name of module where new Enum class can be found."
msgstr "新 Enum 类所在模块的名称。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/enum.rst:0
msgid "qualname"
msgstr "qualname"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/enum.rst:538
msgid "where in module new Enum class can be found."
msgstr "新 Enum 类在模块中的具体位置。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/enum.rst:0
msgid "type"
msgstr "type"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/enum.rst:540
msgid "type to mix in to new Enum class."
msgstr "要加入新 Enum 类的类型。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/enum.rst:0
msgid "start"
msgstr "start"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/enum.rst:542
msgid "number to start counting at if only names are passed in."
msgstr "当只传入名称时要使用的起始数值。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/enum.rst:544
msgid "The *start* parameter was added."
msgstr "增加了 *start* 形参。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/enum.rst:549
msgid "Derived Enumerations"
msgstr "派生的枚举"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/enum.rst:552
msgid "IntEnum"
msgstr "IntEnum"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/enum.rst:554
msgid ""
"The first variation of :class:`Enum` that is provided is also a subclass of "
":class:`int`.  Members of an :class:`IntEnum` can be compared to integers; "
"by extension, integer enumerations of different types can also be compared "
"to each other::"
msgstr ""
"所提供的第一个变种 :class:`Enum` 同时也是 :class:`int` 的一个子类。 :class:`IntEnum` "
"的成员可与整数进行比较；通过扩展，不同类型的整数枚举也可以相互进行比较::"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/enum.rst:575
msgid ""
"However, they still can't be compared to standard :class:`Enum` "
"enumerations::"
msgstr "不过，它们仍然不可与标准 :class:`Enum` 枚举进行比较::"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/enum.rst:588
msgid ""
":class:`IntEnum` values behave like integers in other ways you'd expect::"
msgstr ":class:`IntEnum` 值在其他方面的行为都如你预期的一样类似于整数::"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/enum.rst:599
msgid "IntFlag"
msgstr "IntFlag"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/enum.rst:601
msgid ""
"The next variation of :class:`Enum` provided, :class:`IntFlag`, is also "
"based on :class:`int`.  The difference being :class:`IntFlag` members can be"
" combined using the bitwise operators (&, \\|, ^, ~) and the result is still"
" an :class:`IntFlag` member.  However, as the name implies, :class:`IntFlag`"
" members also subclass :class:`int` and can be used wherever an :class:`int`"
" is used.  Any operation on an :class:`IntFlag` member besides the bit-wise "
"operations will lose the :class:`IntFlag` membership."
msgstr ""
"所提供的下一个 :class:`Enum` 的变种 :class:`IntFlag` 同样是基于 :class:`int` 的，不同之处在于 "
":class:`IntFlag` 成员可使用按位运算符 (&, \\|, ^, ~) 进行合并且结果仍然为 :class:`IntFlag` 成员。 "
"如果，正如名称所表明的，:class:`IntFlag` 成员同时也是 :class:`int` 的子类，并能在任何使用 :class:`int` "
"的场合被使用。 :class:`IntFlag` 成员进行除按位运算以外的其他运算都将导致失去 :class:`IntFlag` 成员资格。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/enum.rst:611
msgid "Sample :class:`IntFlag` class::"
msgstr "示例 :class:`IntFlag` 类::"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/enum.rst:627
msgid "It is also possible to name the combinations::"
msgstr "对于组合同样可以进行命名::"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/enum.rst:639
msgid ""
"Another important difference between :class:`IntFlag` and :class:`Enum` is "
"that if no flags are set (the value is 0), its boolean evaluation is "
":data:`False`::"
msgstr ""
":class:`IntFlag` 和 :class:`Enum` 的另一个重要区别在于如果没有设置任何旗标（值为 0），则其布尔值为 "
":data:`False`::"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/enum.rst:647
msgid ""
"Because :class:`IntFlag` members are also subclasses of :class:`int` they "
"can be combined with them::"
msgstr "由于 :class:`IntFlag` 成员同时也是 :class:`int` 的子类，因此它们可以相互组合::"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/enum.rst:655
msgid "Flag"
msgstr "标志"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/enum.rst:657
msgid ""
"The last variation is :class:`Flag`.  Like :class:`IntFlag`, :class:`Flag` "
"members can be combined using the bitwise operators (&, \\|, ^, ~).  Unlike "
":class:`IntFlag`, they cannot be combined with, nor compared against, any "
"other :class:`Flag` enumeration, nor :class:`int`.  While it is possible to "
"specify the values directly it is recommended to use :class:`auto` as the "
"value and let :class:`Flag` select an appropriate value."
msgstr ""
"最后一个变种是 :class:`Flag`。 与 :class:`IntFlag` 类似，:class:`Flag` 成员可使用按位运算符 (&, "
"\\|, ^, ~) 进行组合，与 :class:`IntFlag` 不同的是它们不可与任何其它 :class:`Flag` 枚举或 "
":class:`int` 进行组合或比较。 虽然可以直接指定值，但推荐使用 :class:`auto` 作为值以便让 :class:`Flag` "
"选择适当的值。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/enum.rst:666
msgid ""
"Like :class:`IntFlag`, if a combination of :class:`Flag` members results in "
"no flags being set, the boolean evaluation is :data:`False`::"
msgstr ""
"与 :class:`IntFlag` 类似，如果 :class:`Flag` 成员的某种组合导致没有设置任何旗标，则其布尔值为 "
":data:`False`::"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/enum.rst:680
msgid ""
"Individual flags should have values that are powers of two (1, 2, 4, 8, "
"...), while combinations of flags won't::"
msgstr "单个旗标的值应当为二的乘方 (1, 2, 4, 8, ...)，旗标的组合则无此限制::"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/enum.rst:692
msgid ""
"Giving a name to the \"no flags set\" condition does not change its boolean "
"value::"
msgstr "对 \"no flags set\" 条件指定一个名称并不会改变其布尔值::"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/enum.rst:708
msgid ""
"For the majority of new code, :class:`Enum` and :class:`Flag` are strongly "
"recommended, since :class:`IntEnum` and :class:`IntFlag` break some semantic"
" promises of an enumeration (by being comparable to integers, and thus by "
"transitivity to other unrelated enumerations).  :class:`IntEnum` and "
":class:`IntFlag` should be used only in cases where :class:`Enum` and "
":class:`Flag` will not do; for example, when integer constants are replaced "
"with enumerations, or for interoperability with other systems."
msgstr ""
"对于大多数新代码，强烈推荐使用 :class:`Enum` 和 :class:`Flag`，因为 :class:`IntEnum` 和 "
":class:`IntFlag` 打破了枚举的某些语义约定（例如可以同整数进行比较，并因而导致此行为被传递给其他无关的枚举）。 "
":class:`IntEnum` 和 :class:`IntFlag` 的使用应当仅限于 :class:`Enum` 和 :class:`Flag` "
"无法使用的场合；例如，当使用枚举替代整数常量时，或是与其他系统进行交互操作时。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/enum.rst:718
msgid "Others"
msgstr "其他事项"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/enum.rst:720
msgid ""
"While :class:`IntEnum` is part of the :mod:`enum` module, it would be very "
"simple to implement independently::"
msgstr "虽然 :class:`IntEnum` 是 :mod:`enum` 模块的一部分，但要独立实现也应该相当容易::"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/enum.rst:726
msgid ""
"This demonstrates how similar derived enumerations can be defined; for "
"example a :class:`StrEnum` that mixes in :class:`str` instead of "
":class:`int`."
msgstr ""
"这里演示了如何定义类似的派生枚举；例如一个混合了 :class:`str` 而不是 :class:`int` 的 :class:`StrEnum`。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/enum.rst:729
msgid "Some rules:"
msgstr "几条规则："

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/enum.rst:731
msgid ""
"When subclassing :class:`Enum`, mix-in types must appear before "
":class:`Enum` itself in the sequence of bases, as in the :class:`IntEnum` "
"example above."
msgstr ""
"当子类化 :class:`Enum` 时，在基类序列中的混合类型必须出现于 :class:`Enum` 本身之前，如以上 "
":class:`IntEnum` 的例子所示。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/enum.rst:734
msgid ""
"While :class:`Enum` can have members of any type, once you mix in an "
"additional type, all the members must have values of that type, e.g. "
":class:`int` above.  This restriction does not apply to mix-ins which only "
"add methods and don't specify another data type such as :class:`int` or "
":class:`str`."
msgstr ""
"虽然 :class:`Enum` 可以拥有任意类型的成员，不过一旦你混合了附加类型，则所有成员必须为相应类型的值，如在上面的例子中即为 "
":class:`int`。 此限制不适用于仅添加方法而未指定另一数据类型如 :class:`int` 或 :class:`str` 的混合类。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/enum.rst:739
msgid ""
"When another data type is mixed in, the :attr:`value` attribute is *not the "
"same* as the enum member itself, although it is equivalent and will compare "
"equal."
msgstr "当混合了另一数据类型时，:attr:`value` 属性会 *不同于* 枚举成员自身，但它们仍保持等价且比较结果也相等。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/enum.rst:742
msgid ""
"%-style formatting:  `%s` and `%r` call the :class:`Enum` class's "
":meth:`__str__` and :meth:`__repr__` respectively; other codes (such as `%i`"
" or `%h` for IntEnum) treat the enum member as its mixed-in type."
msgstr ""
"%-style formatting:  `%s` 和 `%r` 会分别调用 :class:`Enum` 类的 :meth:`__str__` 和 "
":meth:`__repr__`；其他代码 (例如表示 IntEnum 的 `%i` 或 `%h`) 会将枚举成员视为对应的混合类型。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/enum.rst:745
msgid ""
":ref:`Formatted string literals <f-strings>`, :meth:`str.format`, and "
":func:`format` will use the mixed-in type's :meth:`__format__`.  If the "
":class:`Enum` class's :func:`str` or :func:`repr` is desired, use the `!s` "
"or `!r` format codes."
msgstr ""
":ref:`格式化字符串字面值 <f-strings>`, :meth:`str.format` 和 :func:`format` 将使用混合类型的 "
":meth:`__format__`。 如果需要 :class:`Enum` 类的 :func:`str` 或 :func:`repr`，请使用 "
"`!s` 或 `!r` 格式代码。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/enum.rst:752
msgid "Interesting examples"
msgstr "有趣的示例"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/enum.rst:754
msgid ""
"While :class:`Enum`, :class:`IntEnum`, :class:`IntFlag`, and :class:`Flag` "
"are expected to cover the majority of use-cases, they cannot cover them all."
"  Here are recipes for some different types of enumerations that can be used"
" directly, or as examples for creating one's own."
msgstr ""
"虽然 :class:`Enum`, :class:`IntEnum`, :class:`IntFlag` 和 :class:`Flag` "
"预期可覆盖大多数应用场景，但它们无法覆盖全部。 这里有一些不同类型枚举的方案，它们可以被直接使用，或是作为自行创建的参考示例。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/enum.rst:761
msgid "Omitting values"
msgstr "省略值"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/enum.rst:763
msgid ""
"In many use-cases one doesn't care what the actual value of an enumeration "
"is. There are several ways to define this type of simple enumeration:"
msgstr "在许多应用场景中人们都不关心枚举的实际值是什么。 有几个方式可以定义此种类型的简单枚举："

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/enum.rst:766
msgid "use instances of :class:`auto` for the value"
msgstr "使用 :class:`auto` 的实例作为值"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/enum.rst:767
msgid "use instances of :class:`object` as the value"
msgstr "使用 :class:`object` 的实例作为值"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/enum.rst:768
msgid "use a descriptive string as the value"
msgstr "使用描述性的字符串作为值"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/enum.rst:769
msgid ""
"use a tuple as the value and a custom :meth:`__new__` to replace the tuple "
"with an :class:`int` value"
msgstr "使用元组作为值并用自定义的 :meth:`__new__` 以一个 :class:`int` 值来替代该元组"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/enum.rst:772
msgid ""
"Using any of these methods signifies to the user that these values are not "
"important, and also enables one to add, remove, or reorder members without "
"having to renumber the remaining members."
msgstr "使用以上任何一种方法均可向用户指明值并不重要，并且使人能够添加、移除或重排序成员而不必改变其余成员的数值。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/enum.rst:776
msgid ""
"Whichever method you choose, you should provide a :meth:`repr` that also "
"hides the (unimportant) value::"
msgstr "无论你选择何种方法，你都应当提供一个 :meth:`repr` 并且它也需要隐藏（不重要的）值::"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/enum.rst:786
msgid "Using :class:`auto`"
msgstr "使用 :class:`auto`"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/enum.rst:788
msgid "Using :class:`auto` would look like::"
msgstr "使用 :class:`auto` 看起来是这样::"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/enum.rst:800
msgid "Using :class:`object`"
msgstr "使用 :class:`object`"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/enum.rst:802
msgid "Using :class:`object` would look like::"
msgstr "使用 :class:`object` 的形式如下::"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/enum.rst:814
msgid "Using a descriptive string"
msgstr "使用描述性字符串"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/enum.rst:816
msgid "Using a string as the value would look like::"
msgstr "使用字符串作为值的形式如下::"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/enum.rst:830
msgid "Using a custom :meth:`__new__`"
msgstr "使用自定义的 :meth:`__new__`"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/enum.rst:832
msgid "Using an auto-numbering :meth:`__new__` would look like::"
msgstr "使用自动编号 :meth:`__new__` 的形式如下::"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/enum.rst:854
msgid ""
"The :meth:`__new__` method, if defined, is used during creation of the Enum "
"members; it is then replaced by Enum's :meth:`__new__` which is used after "
"class creation for lookup of existing members."
msgstr ""
"如果定义了 :meth:`__new__` 则它会在创建 Enum 成员期间被使用；随后它将被 Enum 的 :meth:`__new__` "
"所替换，该方法会在类创建后被用来查找现有成员。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/enum.rst:860
msgid "OrderedEnum"
msgstr "OrderedEnum"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/enum.rst:862
msgid ""
"An ordered enumeration that is not based on :class:`IntEnum` and so "
"maintains the normal :class:`Enum` invariants (such as not being comparable "
"to other enumerations)::"
msgstr ""
"一个有序枚举，它不是基于 :class:`IntEnum`，因此保持了正常的 :class:`Enum` 不变特性（例如不可与其他枚举进行比较）::"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/enum.rst:896
msgid "DuplicateFreeEnum"
msgstr "DuplicateFreeEnum"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/enum.rst:898
msgid ""
"Raises an error if a duplicate member name is found instead of creating an "
"alias::"
msgstr "如果发现重复的成员名称则将引发错误而不是创建别名::"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/enum.rst:923
msgid ""
"This is a useful example for subclassing Enum to add or change other "
"behaviors as well as disallowing aliases.  If the only desired change is "
"disallowing aliases, the :func:`unique` decorator can be used instead."
msgstr ""
"这个例子适用于子类化 Enum 来添加或改变禁用别名以及其他行为。 如果需要的改变只是禁用别名，也可以选择使用 :func:`unique` 装饰器。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/enum.rst:929
msgid "Planet"
msgstr "Planet"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/enum.rst:931
msgid ""
"If :meth:`__new__` or :meth:`__init__` is defined the value of the enum "
"member will be passed to those methods::"
msgstr "如果定义了 :meth:`__new__` 或 :meth:`__init__` 则枚举成员的值将被传给这些方法::"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/enum.rst:959
msgid "TimePeriod"
msgstr "TimePeriod"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/enum.rst:961
msgid "An example to show the :attr:`_ignore_` attribute in use::"
msgstr "一个演示如何使用 :attr:`_ignore_` 属性的例子::"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/enum.rst:978
msgid "How are Enums different?"
msgstr "各种枚举有何区别？"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/enum.rst:980
msgid ""
"Enums have a custom metaclass that affects many aspects of both derived Enum"
" classes and their instances (members)."
msgstr "枚举具有自定义的元类，它会影响所派生枚举类及其实例（成员）的各个方面。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/enum.rst:985
msgid "Enum Classes"
msgstr "枚举类"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/enum.rst:987
msgid ""
"The :class:`EnumMeta` metaclass is responsible for providing the "
":meth:`__contains__`, :meth:`__dir__`, :meth:`__iter__` and other methods "
"that allow one to do things with an :class:`Enum` class that fail on a "
"typical class, such as `list(Color)` or `some_enum_var in Color`.  "
":class:`EnumMeta` is responsible for ensuring that various other methods on "
"the final :class:`Enum` class are correct (such as :meth:`__new__`, "
":meth:`__getnewargs__`, :meth:`__str__` and :meth:`__repr__`)."
msgstr ""
":class:`EnumMeta` 元类负责提供 :meth:`__contains__`, :meth:`__dir__`, "
":meth:`__iter__` 及其他方法以允许用户通过 :class:`Enum` 类来完成一般类做不到的事情，例如 `list(Color)` 或"
" `some_enum_var in Color`。 :class:`EnumMeta` 会负责确保最终 :class:`Enum` "
"类中的各种其他方法是正确的 (例如 :meth:`__new__`, :meth:`__getnewargs__`, :meth:`__str__` 和"
" :meth:`__repr__`)。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/enum.rst:997
msgid "Enum Members (aka instances)"
msgstr "枚举成员（即实例）"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/enum.rst:999
msgid ""
"The most interesting thing about Enum members is that they are singletons. "
":class:`EnumMeta` creates them all while it is creating the :class:`Enum` "
"class itself, and then puts a custom :meth:`__new__` in place to ensure that"
" no new ones are ever instantiated by returning only the existing member "
"instances."
msgstr ""
"有关枚举成员最有趣的特点是它们都是单例对象。 :class:`EnumMeta` 会在创建 :class:`Enum` "
"类本身时将它们全部创建完成，然后准备好一个自定义的 :meth:`__new__`，通过只返回现有的成员实例来确保不会再实例化新的对象。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/enum.rst:1007
msgid "Finer Points"
msgstr "细节要点"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/enum.rst:1010
msgid "Supported ``__dunder__`` names"
msgstr "支持 ``__dunder__`` 名称"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/enum.rst:1012
msgid ""
":attr:`__members__` is an :class:`OrderedDict` of ``member_name``:``member``"
" items.  It is only available on the class."
msgstr ""
":attr:`__members__` 是一个 :class:`OrderedDict`，由 ``member_name``:``member`` "
"条目组成。 它只在类上可用。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/enum.rst:1015
msgid ""
":meth:`__new__`, if specified, must create and return the enum members; it "
"is also a very good idea to set the member's :attr:`_value_` appropriately."
"  Once all the members are created it is no longer used."
msgstr ""
"如果指定了 :meth:`__new__`，它必须创建并返回枚举成员；相应地设定成员的 :attr:`_value_` 也是一个很好的主意。 "
"一旦所有成员都创建完成它就不会再被使用。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/enum.rst:1021
msgid "Supported ``_sunder_`` names"
msgstr "支持的 ``_sunder_`` 名称"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/enum.rst:1023
msgid "``_name_`` -- name of the member"
msgstr "``_name_`` -- 成员的名称"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/enum.rst:1024
msgid ""
"``_value_`` -- value of the member; can be set / modified in ``__new__``"
msgstr "``_value_`` -- 成员的值；可以在 ``__new__`` 中设置 / 修改"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/enum.rst:1026
msgid ""
"``_missing_`` -- a lookup function used when a value is not found; may be "
"overridden"
msgstr "``_missing_`` -- 当未发现某个值时所使用的查找函数；可被重载"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/enum.rst:1028
msgid ""
"``_ignore_`` -- a list of names, either as a :func:`list` or a :func:`str`, "
"that will not be transformed into members, and will be removed from the "
"final class"
msgstr ""
"``_ignore_`` -- 一个名称列表，可以为 :func:`list` 或 :func:`str`，它将不会被转化为成员，并会从最终类中被移除"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/enum.rst:1031
msgid ""
"``_order_`` -- used in Python 2/3 code to ensure member order is consistent "
"(class attribute, removed during class creation)"
msgstr "``_order_`` -- 用于 Python 2/3 代码以确保成员顺序一致（类属性，在类创建期间会被移除）"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/enum.rst:1033
msgid ""
"``_generate_next_value_`` -- used by the `Functional API`_ and by "
":class:`auto` to get an appropriate value for an enum member; may be "
"overridden"
msgstr ""
"``_generate_next_value_`` -- 用于 `Functional API`_ 并通过 :class:`auto` "
"为枚举成员获取适当的值；可被重载"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/enum.rst:1037
msgid "``_missing_``, ``_order_``, ``_generate_next_value_``"
msgstr "``_missing_``, ``_order_``, ``_generate_next_value_``"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/enum.rst:1038
msgid "``_ignore_``"
msgstr "``_ignore_``"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/enum.rst:1040
msgid ""
"To help keep Python 2 / Python 3 code in sync an :attr:`_order_` attribute "
"can be provided.  It will be checked against the actual order of the "
"enumeration and raise an error if the two do not match::"
msgstr ""
"用来帮助 Python 2 / Python 3 代码保持同步提供 :attr:`_order_` 属性。 "
"它将与枚举的实际顺序进行对照检查，如果两者不匹配则会引发错误::"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/enum.rst:1056
msgid ""
"In Python 2 code the :attr:`_order_` attribute is necessary as definition "
"order is lost before it can be recorded."
msgstr "在 Python 2 代码中 :attr:`_order_` 属性是必须的，因为定义顺序在被记录之前就会丢失。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/enum.rst:1060
msgid "``Enum`` member type"
msgstr "``Enum`` 成员类型"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/enum.rst:1062
msgid ""
":class:`Enum` members are instances of their :class:`Enum` class, and are "
"normally accessed as ``EnumClass.member``.  Under certain circumstances they"
" can also be accessed as ``EnumClass.member.member``, but you should never "
"do this as that lookup may fail or, worse, return something besides the "
":class:`Enum` member you are looking for (this is another good reason to use"
" all-uppercase names for members)::"
msgstr ""
":class:`Enum` 成员是其 :class:`Enum` 类的实例，一般通过 ``EnumClass.member`` 的形式来访问。 "
"在特定情况下它们也可通过 ``EnumClass.member.member`` "
"的形式来访问，但你绝对不应这样做，因为查找可能失败，或者更糟糕地返回你所查找的 :class:`Enum` "
"成员以外的对象（这也是成员应使用全大写名称的另一个好理由）::"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/enum.rst:1083
msgid "Boolean value of ``Enum`` classes and members"
msgstr "``Enum`` 类和成员的布尔值"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/enum.rst:1085
msgid ""
":class:`Enum` members that are mixed with non-:class:`Enum` types (such as "
":class:`int`, :class:`str`, etc.) are evaluated according to the mixed-in "
"type's rules; otherwise, all members evaluate as :data:`True`.  To make your"
" own Enum's boolean evaluation depend on the member's value add the "
"following to your class::"
msgstr ""
"混合了非 :class:`Enum` 类型（例如 :class:`int`, :class:`str` 等）的 :class:`Enum` "
"成员会按所混合类型的规则被求值；在其他情况下，所有成员都将被求值为 :data:`True`。 要使你的自定义 Enum "
"的布尔值取决于成员的值，请在你的类中添加以下代码::"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/enum.rst:1094
msgid ":class:`Enum` classes always evaluate as :data:`True`."
msgstr ":class:`Enum` 类总是会被求值为 :data:`True`。"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/enum.rst:1098
msgid "``Enum`` classes with methods"
msgstr "带有方法的 ``Enum`` 类"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/enum.rst:1100
msgid ""
"If you give your :class:`Enum` subclass extra methods, like the `Planet`_ "
"class above, those methods will show up in a :func:`dir` of the member, but "
"not of the class::"
msgstr ""
"如果你为你的 :class:`Enum` 子类添加了额外的方法，如同上述的 `Planet`_ 类一样，这些方法将在对成员执行 :func:`dir` "
"时显示出来，但对类执行时则不会显示::"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/enum.rst:1111
msgid "Combining members of ``Flag``"
msgstr "组合 ``Flag`` 的成员"

#: /home/runner/work/docspush-transifex/docspush-transifex/cpython/Doc/library/enum.rst:1113
msgid ""
"If a combination of Flag members is not named, the :func:`repr` will include"
" all named flags and all named combinations of flags that are in the value::"
msgstr "如果 Flag 成员的某种组合未被命名，则 :func:`repr` 将包含所有已命名的旗标和值中所有已命名的旗标组合::"
