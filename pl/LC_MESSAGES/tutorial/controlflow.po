# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2023, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Maciej Olko <maciej.olko@gmail.com>, 2020
# Lidia Lipinska-Zubrycka <lidiawandalipinska@gmail.com>, 2020
# Igor Zubrycki <igorzubrycki@gmail.com>, 2020
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-06-16 16:41+0000\n"
"PO-Revision-Date: 2019-09-01 02:42+0000\n"
"Last-Translator: Igor Zubrycki <igorzubrycki@gmail.com>, 2020\n"
"Language-Team: Polish (https://app.transifex.com/python-doc/teams/5390/pl/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: pl\n"
"Plural-Forms: nplurals=4; plural=(n==1 ? 0 : (n%10>=2 && n%10<=4) && "
"(n%100<12 || n%100>14) ? 1 : n!=1 && (n%10>=0 && n%10<=1) || (n%10>=5 && "
"n%10<=9) || (n%100>=12 && n%100<=14) ? 2 : 3);\n"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:5
msgid "More Control Flow Tools"
msgstr "Więcej narzędzi kontroli przepływu"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:7
msgid ""
"Besides the :keyword:`while` statement just introduced, Python uses the "
"usual flow control statements known from other languages, with some twists."
msgstr ""
"Oprócz wprowadzonej przed chwilą instrukcji :keyword:`while`, Python używa "
"zwykłych instrukcji kontroli przepływu znanych z innych języków, z drobnymi "
"zmianami."

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:14
msgid ":keyword:`!if` Statements"
msgstr "Instrukcje :keyword:`if`"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:16
msgid ""
"Perhaps the most well-known statement type is the :keyword:`if` statement.  "
"For example::"
msgstr ""
"Prawdopodobnie najbardziej znanym typem instrukcji jest instrukcja :keyword:"
"`if`. Na przykład::"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:33
msgid ""
"There can be zero or more :keyword:`elif` parts, and the :keyword:`else` "
"part is optional.  The keyword ':keyword:`!elif`' is short for 'else if', "
"and is useful to avoid excessive indentation.  An  :keyword:`!if` ... :"
"keyword:`!elif` ... :keyword:`!elif` ... sequence is a substitute for the "
"``switch`` or ``case`` statements found in other languages."
msgstr ""
"Części :keyword:`elif` może być zero lub więcej i część :keyword:`else` jest "
"opcjonalna. Keyword „:keyword:`!elif`” jest skrótem od „else if” i jest "
"przydatny by uniknąć nadmiarowych wcięć. Sekwencja :keyword:`!if` … :keyword:"
"`!elif` … :keyword:`!elif` … jest zamiennikiem instrukcji ``switch`` lub "
"``case`` z innych języków."

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:43
msgid ":keyword:`!for` Statements"
msgstr "Instrukcje :keyword:`!for`"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:48
msgid ""
"The :keyword:`for` statement in Python differs a bit from what you may be "
"used to in C or Pascal.  Rather than always iterating over an arithmetic "
"progression of numbers (like in Pascal), or giving the user the ability to "
"define both the iteration step and halting condition (as C), Python's :"
"keyword:`!for` statement iterates over the items of any sequence (a list or "
"a string), in the order that they appear in the sequence.  For example (no "
"pun intended):"
msgstr ""
"Instrukcja :keyword:`for` różni się troszeczkę w Pythonie od tego, co "
"używasz w C lub Pascalu. Nie prowadzi się iteracji od liczby do liczby (jak "
"w Pascalu) lub daje się użytkownikowi możliwość definiowania kroku iteracji "
"i warunki zakończenia iteracji (jak w C). Instrukcja :keyword:`!for` w "
"Pythonie powoduje iterację po elementach jakiejkolwiek sekwencji (listy lub "
"łańcucha znaków), w takim porządku, w jakim są one umieszczone w danej "
"sekwencji. Na przykład (gra słów niezamierzona): "

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:69
msgid ""
"If you need to modify the sequence you are iterating over while inside the "
"loop (for example to duplicate selected items), it is recommended that you "
"first make a copy.  Iterating over a sequence does not implicitly make a "
"copy.  The slice notation makes this especially convenient::"
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:81
msgid ""
"With ``for w in words:``, the example would attempt to create an infinite "
"list, inserting ``defenestrate`` over and over again."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:88
msgid "The :func:`range` Function"
msgstr "Funkcja :func:`range`"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:90
msgid ""
"If you do need to iterate over a sequence of numbers, the built-in function :"
"func:`range` comes in handy.  It generates arithmetic progressions::"
msgstr ""
"Jeśli potrzebujesz iterować po sekwencji liczb, przydatna jest wbudowana "
"funkcja :func:`range`. Generuje ciągi arytmetyczne::"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:102
msgid ""
"The given end point is never part of the generated sequence; ``range(10)`` "
"generates 10 values, the legal indices for items of a sequence of length "
"10.  It is possible to let the range start at another number, or to specify "
"a different increment (even negative; sometimes this is called the 'step')::"
msgstr ""
"Podany punkt końcowy nigdy nie jest częścią generowanej sekwencji; "
"``range(10)`` generuje 10 wartości, poprawne indeksy dla elementów sekwencji "
"o długości 10. Możliwe jest zacząć zakres od innej liczby lub podać inne "
"zwiększenie (nawet ujemne; czasem jest to nazywane „krokiem”)::"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:116
msgid ""
"To iterate over the indices of a sequence, you can combine :func:`range` "
"and :func:`len` as follows::"
msgstr ""
"By przeiterować po indeksach sekwencji możesz połączyć :func:`range` i :func:"
"`len` w następujący sposób::"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:129
msgid ""
"In most such cases, however, it is convenient to use the :func:`enumerate` "
"function, see :ref:`tut-loopidioms`."
msgstr ""
"Jednak w większości takich przypadków wygodnie jest użyć funkcji :func:"
"`enumerate`, patrz :ref:`tut-loopidioms`."

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:132
msgid "A strange thing happens if you just print a range::"
msgstr "Dzieje się dziwna rzecz jeśli po prostu wydrukujesz zakres::"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:137
msgid ""
"In many ways the object returned by :func:`range` behaves as if it is a "
"list, but in fact it isn't. It is an object which returns the successive "
"items of the desired sequence when you iterate over it, but it doesn't "
"really make the list, thus saving space."
msgstr ""
"Pod wieloma względami obiekt zwracany przez :func:`range` zachowuje się, "
"jakby był listą, ale w rzeczywistości nią nie jest. Jest obiektem, który "
"zwraca kolejne elementy żądanej sekwencji w trakcie twojego iterowania po "
"nim, lecz naprawdę nie tworzy listy, tak więc oszczędza miejsce w pamięci "
"komputera."

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:142
msgid ""
"We say such an object is *iterable*, that is, suitable as a target for "
"functions and constructs that expect something from which they can obtain "
"successive items until the supply is exhausted. We have seen that the :"
"keyword:`for` statement is such an *iterator*. The function :func:`list` is "
"another; it creates lists from iterables::"
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:152
msgid ""
"Later we will see more functions that return iterables and take iterables as "
"argument."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:158
msgid ""
":keyword:`!break` and :keyword:`!continue` Statements, and :keyword:`!else` "
"Clauses on Loops"
msgstr ""
":keyword:`!break` i :keyword:`!continue` oraz klauzula :keyword:`!else` w "
"pętlach"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:160
msgid ""
"The :keyword:`break` statement, like in C, breaks out of the innermost "
"enclosing :keyword:`for` or :keyword:`while` loop."
msgstr ""
"Instrukcja :keyword:`break`, tak jak w C, wychodzi z najbardziej wewnętrznej "
"pętli :keyword:`for` lub :keyword:`while` zawierającej :keyword:`break`."

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:163
msgid ""
"Loop statements may have an :keyword:`!else` clause; it is executed when the "
"loop terminates through exhaustion of the list (with :keyword:`for`) or when "
"the condition becomes false (with :keyword:`while`), but not when the loop "
"is terminated by a :keyword:`break` statement.  This is exemplified by the "
"following loop, which searches for prime numbers::"
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:187
msgid ""
"(Yes, this is the correct code.  Look closely: the ``else`` clause belongs "
"to the :keyword:`for` loop, **not** the :keyword:`if` statement.)"
msgstr ""
"(Tak, to poprawny kod. Przyjrzyj się: klauzula ``else`` należy do pętli :"
"keyword:`for`, **nie** do instrukcji :keyword:`if`.)"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:190
msgid ""
"When used with a loop, the ``else`` clause has more in common with the "
"``else`` clause of a :keyword:`try` statement than it does that of :keyword:"
"`if` statements: a :keyword:`!try` statement's ``else`` clause runs when no "
"exception occurs, and a loop's ``else`` clause runs when no ``break`` "
"occurs. For more on the :keyword:`!try` statement and exceptions, see :ref:"
"`tut-handling`."
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:197
msgid ""
"The :keyword:`continue` statement, also borrowed from C, continues with the "
"next iteration of the loop::"
msgstr ""
"Instrukcja :keyword:`continue`, również pożyczona z C, kontynuuje następną "
"iterację pętli::"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:217
msgid ":keyword:`!pass` Statements"
msgstr "Instrukcje :keyword:`!pass`"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:219
msgid ""
"The :keyword:`pass` statement does nothing. It can be used when a statement "
"is required syntactically but the program requires no action. For example::"
msgstr ""
"Instrukcja :keyword:`pass` nie robi nic. Można jej użyć, gdy składnia wymaga "
"instrukcji a program nie wymaga działania. Na przykład::"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:226
msgid "This is commonly used for creating minimal classes::"
msgstr "Często jej się używa do tworzenia minimalnych klas::"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:232
msgid ""
"Another place :keyword:`pass` can be used is as a place-holder for a "
"function or conditional body when you are working on new code, allowing you "
"to keep thinking at a more abstract level.  The :keyword:`!pass` is silently "
"ignored::"
msgstr ""
"Innym miejscem, w którym można użyć :keyword:`pass` to placeholder dla "
"funkcji lub ciała warunku, kiedy pracujesz nad nowym kodem. Pozwoli ci to "
"myśleć na bardziej abstrakcyjnym poziomie. :keyword:`!pass` jest „po cichu” "
"ignorowane::"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:243
msgid "Defining Functions"
msgstr "Definiowanie funkcji"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:245
msgid ""
"We can create a function that writes the Fibonacci series to an arbitrary "
"boundary::"
msgstr ""
"Możemy stworzyć funkcję, która wypisuje ciąg Fibonacciego do wskazanej "
"granicy::"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:265
msgid ""
"The keyword :keyword:`def` introduces a function *definition*.  It must be "
"followed by the function name and the parenthesized list of formal "
"parameters. The statements that form the body of the function start at the "
"next line, and must be indented."
msgstr ""
"Słowo kluczowe :keyword:`def` oznacza *definicję* funkcji. Po nim musi "
"następować nazwa funkcji oraz lista formalnych parametrów otoczona "
"nawiasami. Instrukcje, które stanowią ciało funkcji zaczynają się w "
"następnej linii i muszą być wcięte."

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:270
msgid ""
"The first statement of the function body can optionally be a string literal; "
"this string literal is the function's documentation string, or :dfn:"
"`docstring`. (More about docstrings can be found in the section :ref:`tut-"
"docstrings`.) There are tools which use docstrings to automatically produce "
"online or printed documentation, or to let the user interactively browse "
"through code; it's good practice to include docstrings in code that you "
"write, so make a habit of it."
msgstr ""
"Opcjonalnie, pierwszy wiersz ciała funkcji może być gołym napisem "
"(literałem): jest to tzw. napis dokumentujący lub inaczej :dfn:"
"`docstring`. (Więcej o docstringach znajdziesz w sekcji :ref:`tut-"
"docstrings`.) Istnieją pewne narzędzia, które używają docstringów do "
"automatycznego tworzenia drukowanej lub dostępnej online dokumentacji albo "
"pozwalają użytkownikowi na interaktywne przeglądanie kodu. Dobrym zwyczajem "
"jest pisane napisów dokumentacyjnych w czasie pisania programu: spróbuj się "
"do tego przyzwyczaić."

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:277
msgid ""
"The *execution* of a function introduces a new symbol table used for the "
"local variables of the function.  More precisely, all variable assignments "
"in a function store the value in the local symbol table; whereas variable "
"references first look in the local symbol table, then in the local symbol "
"tables of enclosing functions, then in the global symbol table, and finally "
"in the table of built-in names. Thus, global variables and variables of "
"enclosing functions cannot be directly assigned a value within a function "
"(unless, for global variables, named in a :keyword:`global` statement, or, "
"for variables of enclosing functions, named in a :keyword:`nonlocal` "
"statement), although they may be referenced."
msgstr ""
"*Wykonanie* funkcji powoduje stworzenie nowej tablicy symboli lokalnych "
"używanych w tej funkcji. Mówiąc precyzyjniej: wszystkie przypisania do "
"zmiennych lokalnych funkcji powodują umieszczenie tych wartości w lokalnej "
"tablicy symboli. Odniesienia do zmiennych najpierw szukają swych wartości w "
"lokalnej tablicy symboli, potem w lokalnych tablicach symboli funkcji "
"otaczających, potem w globalnej, a dopiero na końcu w tablicy nazw "
"wbudowanych w interpreter. Tak więc, zmiennym globalnym ani zmiennym w "
"otaczających funkcjach nie można wprost przypisać wartości w ciele funkcji "
"(chyba, że zostaną wymienione w niej za pomocą instrukcji :keyword:`global` "
"lub dla zmiennych w otaczających funkcjach, wymienionych w instrukcji :"
"keyword:`nonlocal`), aczkolwiek mogą w niej być używane (czytane)."

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:288
msgid ""
"The actual parameters (arguments) to a function call are introduced in the "
"local symbol table of the called function when it is called; thus, arguments "
"are passed using *call by value* (where the *value* is always an object "
"*reference*, not the value of the object). [#]_ When a function calls "
"another function, a new local symbol table is created for that call."
msgstr ""
"Parametry (argumenty) wywołania funkcji wprowadzane są do lokalnej tablicy "
"symboli w momencie wywołania funkcji. Tak więc, argumenty przekazywane są "
"jej przez wartość (gdzie *wartość* jest zawsze *odniesieniem* do obiektu, a "
"nie samym obiektem). [#]_ Nowa tablica symboli tworzona jest również w "
"przypadku, gdy funkcja wywołuje inną funkcję."

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:294
msgid ""
"A function definition introduces the function name in the current symbol "
"table. The value of the function name has a type that is recognized by the "
"interpreter as a user-defined function.  This value can be assigned to "
"another name which can then also be used as a function.  This serves as a "
"general renaming mechanism::"
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:306
msgid ""
"Coming from other languages, you might object that ``fib`` is not a function "
"but a procedure since it doesn't return a value.  In fact, even functions "
"without a :keyword:`return` statement do return a value, albeit a rather "
"boring one.  This value is called ``None`` (it's a built-in name).  Writing "
"the value ``None`` is normally suppressed by the interpreter if it would be "
"the only value written. You can see it if you really want to using :func:"
"`print`::"
msgstr ""
"Przychodząc z innych języków, mógłbyś oponować, że ``fib`` nie jest funkcją, "
"ale procedurą, jako że nie zwraca wartości. Tak naprawdę nawet funkcje bez "
"instrukcji :keyword:`return` zwracają wartość, chociaż dość nudną. Tę "
"wartość nazywamy ``None`` (to wbudowana nazwa). Wypisywanie wartości "
"``None`` jest normalnie pomijane przez interpreter, jeśli miałaby to jedyna "
"wypisywana wartość. Możesz ją zobaczyć, jeśli bardzo chcesz, używając :func:"
"`print`::"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:317
msgid ""
"It is simple to write a function that returns a list of the numbers of the "
"Fibonacci series, instead of printing it::"
msgstr ""
"Prosto można napisać funkcję, która zwraca listę numerów ciągu Fibonnaciego "
"zamiast go wyświetlać::"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:333
msgid "This example, as usual, demonstrates some new Python features:"
msgstr "Ten przykład, jak zazwyczaj, prezentuje nowe cechy Pythona:"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:335
msgid ""
"The :keyword:`return` statement returns with a value from a function. :"
"keyword:`!return` without an expression argument returns ``None``. Falling "
"off the end of a function also returns ``None``."
msgstr ""
"Instrukcja :keyword:`return` zwraca wartość funkcji. :keyword:`!return` bez "
"wyrażenia podanego jako argument zwraca ``None``. Dojście do końca funkcji "
"również zwraca ``None``."

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:339
msgid ""
"The statement ``result.append(a)`` calls a *method* of the list object "
"``result``.  A method is a function that 'belongs' to an object and is named "
"``obj.methodname``, where ``obj`` is some object (this may be an "
"expression), and ``methodname`` is the name of a method that is defined by "
"the object's type. Different types define different methods.  Methods of "
"different types may have the same name without causing ambiguity.  (It is "
"possible to define your own object types and methods, using *classes*, see :"
"ref:`tut-classes`) The method :meth:`append` shown in the example is defined "
"for list objects; it adds a new element at the end of the list.  In this "
"example it is equivalent to ``result = result + [a]``, but more efficient."
msgstr ""
"Instrukcja ``result.append(a)`` wywołuje *metodę* listy obiektów ``result``. "
"Metoda to funkcja, która „należy” do obiektu i jest nazwana ``obj."
"methodname``, gdzie ``obj`` jest jakimś obiektem (może też być wyrażeniem) a "
"``methodname`` jest nazwą metody, które jest zdefiniowana przez typ obiektu. "
"Różne typy definiują różne metody. Metody różnych typów mogą mieć te same "
"nazwy bez powodowania dwuznaczności. (Da się definiować własne typy obiektów "
"i metody, używając *klas*, patrz :ref:`tut-classes`.) Metoda :meth:`append` "
"pokazana w przykładzie jest zdefiniowana dla listy obiektów; dodaje nowy "
"element na końcu listy. W tym przykładzie jest równoważna ``result = result "
"+ [a]``, ale bardziej wydajna."

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:354
msgid "More on Defining Functions"
msgstr "Więcej o definiowaniu funkcji"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:356
msgid ""
"It is also possible to define functions with a variable number of arguments. "
"There are three forms, which can be combined."
msgstr ""
"Można też definiować funkcje ze zmienną liczbą argumentów. Są trzy sposoby, "
"które można łączyć."

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:363
msgid "Default Argument Values"
msgstr "Domyślne wartości argumentów"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:365
msgid ""
"The most useful form is to specify a default value for one or more "
"arguments. This creates a function that can be called with fewer arguments "
"than it is defined to allow.  For example::"
msgstr ""
"Najbardziej przydatnym sposobem jest podanie domyślnej wartości dla jednego "
"lub więcej argumentów. Tworzy to funkcję, która może zostać wywołana z "
"mniejszą liczbą argumentów, niż jest podane w jej definicji. Na przykład::"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:381
msgid "This function can be called in several ways:"
msgstr "Tę funkcję można wywołać na kilka sposobów:"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:383
msgid ""
"giving only the mandatory argument: ``ask_ok('Do you really want to quit?')``"
msgstr ""
"podając tylko wymagany argument: ``ask_ok('Do you really want to quit?')``"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:385
msgid ""
"giving one of the optional arguments: ``ask_ok('OK to overwrite the file?', "
"2)``"
msgstr ""
"podając jeden z opcjonalnych argumentów: ``ask_ok('OK to overwrite the "
"file?', 2)``"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:387
msgid ""
"or even giving all arguments: ``ask_ok('OK to overwrite the file?', 2, 'Come "
"on, only yes or no!')``"
msgstr ""
"lub podając wszystkie argumenty: ``ask_ok('OK to overwrite file?', 2, 'Come "
"on, only yes or no!')``"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:390
msgid ""
"This example also introduces the :keyword:`in` keyword. This tests whether "
"or not a sequence contains a certain value."
msgstr ""
"Ten przykład wprowadza słowo kluczowe :keyword:`in`. Sprawdza ono, czy "
"sekwencja zawiera szczególną wartość."

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:393
msgid ""
"The default values are evaluated at the point of function definition in the "
"*defining* scope, so that ::"
msgstr ""
"Wartości domyślne są ewaluowane w momencie definiowania funkcji w scopie "
"*defining*, więc ::"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:404
msgid "will print ``5``."
msgstr "wyświetli ``5``."

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:406
msgid ""
"**Important warning:**  The default value is evaluated only once. This makes "
"a difference when the default is a mutable object such as a list, "
"dictionary, or instances of most classes.  For example, the following "
"function accumulates the arguments passed to it on subsequent calls::"
msgstr ""
"**Ważna uwaga**: Wartość domyślna jest wyliczana tylko raz. Ma to znaczenie, "
"gdy domyślna wartość jest obiektem mutowalnym takim jak lista, słownik lub "
"instancje większości klas. Na przykład następująca funkcja akumuluje "
"argumenty przekazane do niej w kolejnych wywołaniach::"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:419
msgid "This will print ::"
msgstr "To wyświetli ::"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:425
msgid ""
"If you don't want the default to be shared between subsequent calls, you can "
"write the function like this instead::"
msgstr ""
"Jeśli nie chcesz, żeby domyślna wartość była współdzielona pomiędzy "
"kolejnymi wywołaniami, możesz napisać funkcję w ten sposób::"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:438
msgid "Keyword Arguments"
msgstr "Argumenty nazwane"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:440
msgid ""
"Functions can also be called using :term:`keyword arguments <keyword "
"argument>` of the form ``kwarg=value``.  For instance, the following "
"function::"
msgstr ""
"Funkcje mogą być również wywoływane przy użyciu :term:`argumentów nazwanych "
"<keyword argument>` w formie ``kwarg=value``. Na przykład poniższa funkcja::"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:449
msgid ""
"accepts one required argument (``voltage``) and three optional arguments "
"(``state``, ``action``, and ``type``).  This function can be called in any "
"of the following ways::"
msgstr ""
"akceptuje jeden wymagany argument (``voltage``) i trzy opcjonalne argumenty "
"(``state``, ``action`` i ``type``). Funkcja może być wywołana w dowolny z "
"poniższych sposobów::"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:460
msgid "but all the following calls would be invalid::"
msgstr "ale wszystkie poniższe wywołania byłyby niepoprawne::"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:467
msgid ""
"In a function call, keyword arguments must follow positional arguments. All "
"the keyword arguments passed must match one of the arguments accepted by the "
"function (e.g. ``actor`` is not a valid argument for the ``parrot`` "
"function), and their order is not important.  This also includes non-"
"optional arguments (e.g. ``parrot(voltage=1000)`` is valid too). No argument "
"may receive a value more than once. Here's an example that fails due to this "
"restriction::"
msgstr ""
"W wywołaniu funkcji argumenty nazwane muszą znajdować się za argumentami "
"pozycyjnymi. Wszystkie przekazane argumenty nazwane muszą pasować do jednego "
"argumentu akceptowanego przez funkcję (na przykład ``actor`` nie jest "
"poprawnym argumentem dla funkcji ``parrot``) a ich kolejność nie ma "
"znaczenia. Dotyczy to również nie-opcjonalnych argumentów (na przykład "
"``parrot(voltage=1000)`` też jest poprawne). Żaden argument nie może "
"otrzymać wartości więcej niż raz. Tutaj jest przykład, który się nie "
"powiedzie z powodu tego ograniczenia::"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:483
msgid ""
"When a final formal parameter of the form ``**name`` is present, it receives "
"a dictionary (see :ref:`typesmapping`) containing all keyword arguments "
"except for those corresponding to a formal parameter.  This may be combined "
"with a formal parameter of the form ``*name`` (described in the next "
"subsection) which receives a :ref:`tuple <tut-tuples>` containing the "
"positional arguments beyond the formal parameter list.  (``*name`` must "
"occur before ``**name``.) For example, if we define a function like this::"
msgstr ""
"Kiedy ostatni formalny parametr ma postać ``**nazwa``, to otrzymuje on "
"słownik (zobacz :ref:`typesmapping`) zawierający wszystkie argumenty "
"kluczowe oprócz tych które odpowiadają formalnym parametrom. Może to być "
"połączone z formalnym parametrem o postaci ``*nazwa`` (opisanym w następnej "
"subsekcji) który otrzymuje  :ref:`krotkę <tut-tuples>` zawierającą argumenty "
"pozycyjne z poza listy formalnych parametrów.  (``*nazwa`` musi występować "
"przed ``**nazwa``.) Dla przykładu możemy zdefiniować funkcję tak::"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:500
msgid "It could be called like this::"
msgstr "Można ją wywołać w ten sposób::"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:508
msgid "and of course it would print:"
msgstr "i oczywiście wyświetli się nam:"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:521
msgid ""
"Note that the order in which the keyword arguments are printed is guaranteed "
"to match the order in which they were provided in the function call."
msgstr ""
"Zwróć uwagę, że kolejność w jakim argumenty są wyświetlane dokładnie "
"odpowiada kolejności w jakim zostały one podane w wywołaniu funkcji."

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:528
msgid "Arbitrary Argument Lists"
msgstr "Arbitralne listy argumentów"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:533
msgid ""
"Finally, the least frequently used option is to specify that a function can "
"be called with an arbitrary number of arguments.  These arguments will be "
"wrapped up in a tuple (see :ref:`tut-tuples`).  Before the variable number "
"of arguments, zero or more normal arguments may occur. ::"
msgstr ""
"Najmniej często wykorzystywaną opcją jest specyfikowanie, że funkcja może "
"być wywoływana z arbitralną liczbą argumentów. Takie argumenty zostaną "
"opakowane w krotkę (zobacz :ref:`krotki <tut-tuples>`). Przed zmienną liczbą "
"argumentów, można wymusić jeden lub więcej argumentów. ::"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:542
msgid ""
"Normally, these ``variadic`` arguments will be last in the list of formal "
"parameters, because they scoop up all remaining input arguments that are "
"passed to the function. Any formal parameters which occur after the "
"``*args`` parameter are 'keyword-only' arguments, meaning that they can only "
"be used as keywords rather than positional arguments. ::"
msgstr ""
"Zazwyczaj takie ``wariadyczne`` argumenty będą na koniec listy formalnych "
"parametrów, ponieważ zbierają one wszystkie pozostałe argumenty przekazane "
"funkcji. Każdy formalny argument po ``*args`` może być  'tylko-kluczowy', to "
"znaczy da się go wprowadzić tylko poprzez słowo kluczowe a nie przez "
"pozycję. :: "

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:559
msgid "Unpacking Argument Lists"
msgstr "Rozpakowywanie listy argumentów"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:561
msgid ""
"The reverse situation occurs when the arguments are already in a list or "
"tuple but need to be unpacked for a function call requiring separate "
"positional arguments.  For instance, the built-in :func:`range` function "
"expects separate *start* and *stop* arguments.  If they are not available "
"separately, write the function call with the  ``*`` operator to unpack the "
"arguments out of a list or tuple::"
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:577
msgid ""
"In the same fashion, dictionaries can deliver keyword arguments with the "
"``**`` operator::"
msgstr ""

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:593
msgid "Lambda Expressions"
msgstr "Wyrażenia Lambda"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:595
msgid ""
"Small anonymous functions can be created with the :keyword:`lambda` keyword. "
"This function returns the sum of its two arguments: ``lambda a, b: a+b``. "
"Lambda functions can be used wherever function objects are required.  They "
"are syntactically restricted to a single expression.  Semantically, they are "
"just syntactic sugar for a normal function definition.  Like nested function "
"definitions, lambda functions can reference variables from the containing "
"scope::"
msgstr ""
"Niewielkie anonimowe funkcje mogą byś tworzone z wykorzystaniem słowa "
"kluczowego  :keyword:`lambda`. Wykorzystując tą notację: ``lambda a, b: "
"a+b`` powstanie funkcja sumująca podane argumenty. Funkcje lambda mogą być "
"wykorzystywane zawsze wtedy gdy potrzebne są objekty funkcji. Są "
"synaktycznie ograniczone do jednego wyrażenia. \n"
"Semantycznie, jest to tylko lukier składniowy normalnej definicji funkcji. "
"Podobnie jak funkcje zagnieżdżone funkcje lambda mogą odwoływać się do "
"zmiennych z otaczającego zakresu ::"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:612
msgid ""
"The above example uses a lambda expression to return a function.  Another "
"use is to pass a small function as an argument::"
msgstr ""
"Powyższy przykład wykorzystuje ekspresję lambda aby zwrócić funkcję. Inne "
"wykorzystanie to przekazanie małej funkcji jako argumentu::"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:624
msgid "Documentation Strings"
msgstr "Napisy dokumentujące"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:631
msgid ""
"Here are some conventions about the content and formatting of documentation "
"strings."
msgstr ""
"Oto kilka konwencji dotyczących zawartości i formatowania ciągów "
"dokumentacji."

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:634
msgid ""
"The first line should always be a short, concise summary of the object's "
"purpose.  For brevity, it should not explicitly state the object's name or "
"type, since these are available by other means (except if the name happens "
"to be a verb describing a function's operation).  This line should begin "
"with a capital letter and end with a period."
msgstr ""
"Pierwsza linijka powinna zawierać zwięzłe streszczenie sensu jaki stoi za "
"obiektem. Nie powinna wprost zawierać nazwy obiektu ani typu, gdyż te są "
"dostępne w inny sposób (chyba, że nazwa jest czasownikiem opisujęcym "
"działanie funkcji). Ta linijka powinna zaczynać się z dużej litery i kończyć "
"kropką. "

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:640
msgid ""
"If there are more lines in the documentation string, the second line should "
"be blank, visually separating the summary from the rest of the description.  "
"The following lines should be one or more paragraphs describing the object's "
"calling conventions, its side effects, etc."
msgstr ""
"Jeśli w docstringu jest więcej niż jedna linijka, druga linijka powinna być "
"pusta, aby rozdzielić ją od reszty opisu. Następne linijki powinny zawierać "
"konwencje nazwenicze, efekty uboczne itd. "

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:645
msgid ""
"The Python parser does not strip indentation from multi-line string literals "
"in Python, so tools that process documentation have to strip indentation if "
"desired.  This is done using the following convention. The first non-blank "
"line *after* the first line of the string determines the amount of "
"indentation for the entire documentation string.  (We can't use the first "
"line since it is generally adjacent to the string's opening quotes so its "
"indentation is not apparent in the string literal.)  Whitespace "
"\"equivalent\" to this indentation is then stripped from the start of all "
"lines of the string.  Lines that are indented less should not occur, but if "
"they occur all their leading whitespace should be stripped.  Equivalence of "
"whitespace should be tested after expansion of tabs (to 8 spaces, normally)."
msgstr ""
"Parser Pythona nie usuwa wcięć z literału stringu wielolinijkowego, więc "
"jeśli to jest pożądane, to narzędzia obrabiające dokumentację powinny usuwać "
"wcięcia. Robi się to, wykorzystując następujące. Pierwsza nie-pusta linijka "
"*po* pierwszej określa jak dużo wcięcia jest w całym docstringu. (Nie można "
"do tego wykorzystać pierwszej linijki, ponieważ ta zazwyczaj przylega do "
"cudzysłowów, więc sposób wcięcia jest nieoczywisty.) \"Ilość wcięcia\" z tej "
"linijki jest następnie usuwana z tej i wszystkich następnych linijek. W "
"kolejnych linijkach nie powinno być mniej wcięć ale jeśli tak będzie to "
"całość wcięcia powinna być usunięta. Ilość wcięcia powinna być usuwana po "
"zamianie tabulatorów na spacje (zazwyczaj na 8 spacji)."

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:657
msgid "Here is an example of a multi-line docstring::"
msgstr "Poniżej przykład wielolinijkowego docstringu::"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:675
msgid "Function Annotations"
msgstr "Adnotacje funkcji"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:683
msgid ""
":ref:`Function annotations <function>` are completely optional metadata "
"information about the types used by user-defined functions (see :pep:`3107` "
"and :pep:`484` for more information)."
msgstr ""
":ref:`Function annotations 1` są całkowicie opcjonalnymi meta danymi o "
"typach wykorzystywanych przez zdefiniowane przez użytkownika funkcje "
"(zobacz :pep:`3107` oraz :pep:`484` aby uzyskać więcej informacji)."

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:687
msgid ""
":term:`Annotations <function annotation>` are stored in the :attr:"
"`__annotations__` attribute of the function as a dictionary and have no "
"effect on any other part of the function.  Parameter annotations are defined "
"by a colon after the parameter name, followed by an expression evaluating to "
"the value of the annotation.  Return annotations are defined by a literal ``-"
">``, followed by an expression, between the parameter list and the colon "
"denoting the end of the :keyword:`def` statement.  The following example has "
"a positional argument, a keyword argument, and the return value annotated::"
msgstr ""
":term:`Adnotacje <function annotation>` przechowywane są w atrybucie :attr:"
"`__annotations__` funkcji jako słownik i nie mają oprócz żadnego innego "
"wpływu na nią.  Adnotacje parametrów są definiowane po nazwie parametru i "
"dwukropku, jako wyrażenie sprawdzające wartość argumentu.  Adonotacje do "
"zwracanego wyniku  definiuje się pomiędzy nawiasem z listą parametrów a "
"drukropkiem kończącym instrukcję :keyword:`def` , poprzez literał ``->``, z "
"następującym po nim wyrażeniem.  Poniższy przykład ma adnotację dotyczącą "
"argumentu pozycyjnego, argumentu kluczowego oraz adnotację zwracanego "
"wyniku::"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:709
msgid "Intermezzo: Coding Style"
msgstr "Intermezzo: Styl kodowania"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:714
msgid ""
"Now that you are about to write longer, more complex pieces of Python, it is "
"a good time to talk about *coding style*.  Most languages can be written (or "
"more concise, *formatted*) in different styles; some are more readable than "
"others. Making it easy for others to read your code is always a good idea, "
"and adopting a nice coding style helps tremendously for that."
msgstr ""
"Teraz, kiedy już jesteś gotowa aby pisać dłuższe, bardziej złożone Pythonowe "
"dzieła, dobrze żebyśmy porozmawiali o *stylu kodowania*. Większość języków "
"może być pisana (a mówiąc precyzyjniej, *formatowana*) w różnym stylu; "
"bardziej lub mniej czytelnym. Zawsze dobrze jest dążyć, aby Twój kod był "
"łatwy do czytania przez innych a w tym bardzo pomaga   stosowanie fajnego "
"stylu kodowania. "

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:720
msgid ""
"For Python, :pep:`8` has emerged as the style guide that most projects "
"adhere to; it promotes a very readable and eye-pleasing coding style.  Every "
"Python developer should read it at some point; here are the most important "
"points extracted for you:"
msgstr ""
"Dla Pythona :pep:`8` stał się wzorcem stylu, którego trzyma się większość "
"projektów; szerzy czytelny i miły dla oka styl kodowania. W którymś "
"momencie, powinien go przeczytać każdy developer Pythona, poniżej "
"przedstawiliśmy jego najistotniejsze elementy:"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:725
msgid "Use 4-space indentation, and no tabs."
msgstr "Jako wcięcie, wykorzystuj cztery spacje, nie tabulator."

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:727
msgid ""
"4 spaces are a good compromise between small indentation (allows greater "
"nesting depth) and large indentation (easier to read).  Tabs introduce "
"confusion, and are best left out."
msgstr ""
"Cztery spacje są dobrym kompromisem pomiędzy płytkim wcięciem (pozwala na "
"więcej kroków zagnieżdżania ) a głębokim wcięciem (jest łatwiejsze do "
"przeczytania). Tabulatorów najlepiej nie używać, wprowadzają zamiesznie. "

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:731
msgid "Wrap lines so that they don't exceed 79 characters."
msgstr "Zawijaj linie tak, aby nie ich długość nie przekraczała 79 znaków. "

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:733
msgid ""
"This helps users with small displays and makes it possible to have several "
"code files side-by-side on larger displays."
msgstr ""
"To pomoże użytkownikom z małymi wyświetlaczami a na większych ekranach "
"pozwoli mieć kilka plików obok siebie na ekranie. "

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:736
msgid ""
"Use blank lines to separate functions and classes, and larger blocks of code "
"inside functions."
msgstr ""
"Wstawiaj puste linie aby oddzielić od siebie funkcje, klasy lub większe "
"bloki kodu wewnątrz funkcji."

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:739
msgid "When possible, put comments on a line of their own."
msgstr "Jeśli jest to możliwe, wstawiaj komentarze na oddzielnej lini. "

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:741
msgid "Use docstrings."
msgstr "Wykorzystuj docstringi"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:743
msgid ""
"Use spaces around operators and after commas, but not directly inside "
"bracketing constructs: ``a = f(1, 2) + g(3, 4)``."
msgstr ""
"Korzystaj ze spacji naokoło operatorów oraz za przecinkami, ale nie przy "
"nawiasach:   ``a = f(1, 2) + g(3, 4)``."

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:746
msgid ""
"Name your classes and functions consistently; the convention is to use "
"``UpperCamelCase`` for classes and ``lowercase_with_underscores`` for "
"functions and methods.  Always use ``self`` as the name for the first method "
"argument (see :ref:`tut-firstclasses` for more on classes and methods)."
msgstr ""
"Nazywaj klasy i funkcje w konsekwentny sposób. Preferowaną konwencją jest "
"\"UpperCamelCase\" dla nazw klas i \"lowercase_with_underscores\" dla "
"funkcji i metod. Zawsze wykorzystuj \"self\" jako nazwę dla pierwszego "
"argumentu metody (zobacz :ref:`tut-firstclasses` aby dowiedzieć się więcej o "
"klasach i metodach)."

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:751
msgid ""
"Don't use fancy encodings if your code is meant to be used in international "
"environments.  Python's default, UTF-8, or even plain ASCII work best in any "
"case."
msgstr ""
"Nie wykorzystuj ambitnych zestawów znaków (encoding) jeśli Twój kod będzie "
"wykorzystywany międzynarodowo. Najepiej trzymać się domyślnych w Pythonie: "
"UTF-8 lub nawet ASCII. "

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:755
msgid ""
"Likewise, don't use non-ASCII characters in identifiers if there is only the "
"slightest chance people speaking a different language will read or maintain "
"the code."
msgstr ""
"Podobnie, nie korzystaj ze znaków innych niż ASCII jako identyfikatorów, "
"jeśli jest chociaż szansa, że osoby mówiące innym językiem będą czytać lub "
"rozwijać Twój kod."

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:761
msgid "Footnotes"
msgstr "Przypisy"

#: /home/runner/work/python-docs-tx-translations/python-docs-tx-translations/cpython/Doc/tutorial/controlflow.rst:762
msgid ""
"Actually, *call by object reference* would be a better description, since if "
"a mutable object is passed, the caller will see any changes the callee makes "
"to it (items inserted into a list)."
msgstr ""
"Tak właściwie, *wywołanie przez referencję obiektu* byłoby lepszym opisem, "
"jako że jeśli mutowalny obiekt jest przekazany, wszystkie zmiany które "
"wywoływany robi (elementy wstawiane na listę) będą widziane przez "
"wywołującego. "
