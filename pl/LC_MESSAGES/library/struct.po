# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2023, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Tomasz Rodzen <t.rodzen@poczta.fm>, 2021
# Maciej Olko <maciej.olko@gmail.com>, 2022
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-05-08 19:31+0000\n"
"PO-Revision-Date: 2021-06-28 01:14+0000\n"
"Last-Translator: Maciej Olko <maciej.olko@gmail.com>, 2022\n"
"Language-Team: Polish (https://app.transifex.com/python-doc/teams/5390/pl/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: pl\n"
"Plural-Forms: nplurals=4; plural=(n==1 ? 0 : (n%10>=2 && n%10<=4) && "
"(n%100<12 || n%100>14) ? 1 : n!=1 && (n%10>=0 && n%10<=1) || (n%10>=5 && "
"n%10<=9) || (n%100>=12 && n%100<=14) ? 2 : 3);\n"

msgid ":mod:`struct` --- Interpret bytes as packed binary data"
msgstr ""

msgid "**Source code:** :source:`Lib/struct.py`"
msgstr ""

msgid ""
"This module converts between Python values and C structs represented as "
"Python :class:`bytes` objects.  Compact :ref:`format strings <struct-format-"
"strings>` describe the intended conversions to/from Python values. The "
"module's functions and objects can be used for two largely distinct "
"applications, data exchange with external sources (files or network "
"connections), or data transfer between the Python application and the C "
"layer."
msgstr ""

msgid ""
"When no prefix character is given, native mode is the default. It packs or "
"unpacks data based on the platform and compiler on which the Python "
"interpreter was built. The result of packing a given C struct includes pad "
"bytes which maintain proper alignment for the C types involved; similarly, "
"alignment is taken into account when unpacking.  In contrast, when "
"communicating data between external sources, the programmer is responsible "
"for defining byte ordering and padding between elements. See :ref:`struct-"
"alignment` for details."
msgstr ""

msgid ""
"Several :mod:`struct` functions (and methods of :class:`Struct`) take a "
"*buffer* argument.  This refers to objects that implement the :ref:"
"`bufferobjects` and provide either a readable or read-writable buffer.  The "
"most common types used for that purpose are :class:`bytes` and :class:"
"`bytearray`, but many other types that can be viewed as an array of bytes "
"implement the buffer protocol, so that they can be read/filled without "
"additional copying from a :class:`bytes` object."
msgstr ""

msgid "Functions and Exceptions"
msgstr ""

msgid "The module defines the following exception and functions:"
msgstr ""

msgid ""
"Exception raised on various occasions; argument is a string describing what "
"is wrong."
msgstr ""

msgid ""
"Return a bytes object containing the values *v1*, *v2*, ... packed according "
"to the format string *format*.  The arguments must match the values required "
"by the format exactly."
msgstr ""

msgid ""
"Pack the values *v1*, *v2*, ... according to the format string *format* and "
"write the packed bytes into the writable buffer *buffer* starting at "
"position *offset*.  Note that *offset* is a required argument."
msgstr ""

msgid ""
"Unpack from the buffer *buffer* (presumably packed by ``pack(format, ...)``) "
"according to the format string *format*.  The result is a tuple even if it "
"contains exactly one item.  The buffer's size in bytes must match the size "
"required by the format, as reflected by :func:`calcsize`."
msgstr ""

msgid ""
"Unpack from *buffer* starting at position *offset*, according to the format "
"string *format*.  The result is a tuple even if it contains exactly one "
"item.  The buffer's size in bytes, starting at position *offset*, must be at "
"least the size required by the format, as reflected by :func:`calcsize`."
msgstr ""

msgid ""
"Iteratively unpack from the buffer *buffer* according to the format string "
"*format*.  This function returns an iterator which will read equally sized "
"chunks from the buffer until all its contents have been consumed.  The "
"buffer's size in bytes must be a multiple of the size required by the "
"format, as reflected by :func:`calcsize`."
msgstr ""

msgid "Each iteration yields a tuple as specified by the format string."
msgstr ""

msgid ""
"Return the size of the struct (and hence of the bytes object produced by "
"``pack(format, ...)``) corresponding to the format string *format*."
msgstr ""

msgid "Format Strings"
msgstr ""

msgid ""
"Format strings describe the data layout when packing and unpacking data.  "
"They are built up from :ref:`format characters<format-characters>`, which "
"specify the type of data being packed/unpacked.  In addition, special "
"characters control the :ref:`byte order, size and alignment<struct-"
"alignment>`. Each format string consists of an optional prefix character "
"which describes the overall properties of the data and one or more format "
"characters which describe the actual data values and padding."
msgstr ""

msgid "Byte Order, Size, and Alignment"
msgstr ""

msgid ""
"By default, C types are represented in the machine's native format and byte "
"order, and properly aligned by skipping pad bytes if necessary (according to "
"the rules used by the C compiler). This behavior is chosen so that the bytes "
"of a packed struct correspond exactly to the memory layout of the "
"corresponding C struct. Whether to use native byte ordering and padding or "
"standard formats depends on the application."
msgstr ""

msgid ""
"Alternatively, the first character of the format string can be used to "
"indicate the byte order, size and alignment of the packed data, according to "
"the following table:"
msgstr ""

msgid "Character"
msgstr ""

msgid "Byte order"
msgstr ""

msgid "Size"
msgstr ""

msgid "Alignment"
msgstr ""

msgid "``@``"
msgstr ""

msgid "native"
msgstr ""

msgid "``=``"
msgstr ""

msgid "standard"
msgstr ""

msgid "none"
msgstr ""

msgid "``<``"
msgstr ""

msgid "little-endian"
msgstr ""

msgid "``>``"
msgstr ""

msgid "big-endian"
msgstr ""

msgid "``!``"
msgstr ""

msgid "network (= big-endian)"
msgstr ""

msgid "If the first character is not one of these, ``'@'`` is assumed."
msgstr ""

msgid ""
"Native byte order is big-endian or little-endian, depending on the host "
"system. For example, Intel x86, AMD64 (x86-64), and Apple M1 are little-"
"endian; IBM z and many legacy architectures are big-endian. Use :data:`sys."
"byteorder` to check the endianness of your system."
msgstr ""

msgid ""
"Native size and alignment are determined using the C compiler's ``sizeof`` "
"expression.  This is always combined with native byte order."
msgstr ""

msgid ""
"Standard size depends only on the format character;  see the table in the :"
"ref:`format-characters` section."
msgstr ""

msgid ""
"Note the difference between ``'@'`` and ``'='``: both use native byte order, "
"but the size and alignment of the latter is standardized."
msgstr ""

msgid ""
"The form ``'!'`` represents the network byte order which is always big-"
"endian as defined in `IETF RFC 1700 <IETF RFC 1700_>`_."
msgstr ""

msgid ""
"There is no way to indicate non-native byte order (force byte-swapping); use "
"the appropriate choice of ``'<'`` or ``'>'``."
msgstr ""

msgid "Notes:"
msgstr "Uwagi:"

msgid ""
"Padding is only automatically added between successive structure members. No "
"padding is added at the beginning or the end of the encoded struct."
msgstr ""

msgid ""
"No padding is added when using non-native size and alignment, e.g. with '<', "
"'>', '=', and '!'."
msgstr ""

msgid ""
"To align the end of a structure to the alignment requirement of a particular "
"type, end the format with the code for that type with a repeat count of "
"zero.  See :ref:`struct-examples`."
msgstr ""

msgid "Format Characters"
msgstr ""

msgid ""
"Format characters have the following meaning; the conversion between C and "
"Python values should be obvious given their types.  The 'Standard size' "
"column refers to the size of the packed value in bytes when using standard "
"size; that is, when the format string starts with one of ``'<'``, ``'>'``, "
"``'!'`` or ``'='``.  When using native size, the size of the packed value is "
"platform-dependent."
msgstr ""

msgid "Format"
msgstr "Format"

msgid "C Type"
msgstr "typ jÄ™zyka C"

msgid "Python type"
msgstr ""

msgid "Standard size"
msgstr ""

msgid "Notes"
msgstr "Notatki"

msgid "``x``"
msgstr ""

msgid "pad byte"
msgstr ""

msgid "no value"
msgstr ""

msgid "\\(7)"
msgstr ""

msgid "``c``"
msgstr ""

msgid ":c:expr:`char`"
msgstr ""

msgid "bytes of length 1"
msgstr ""

msgid "1"
msgstr "1"

msgid "``b``"
msgstr ""

msgid ":c:expr:`signed char`"
msgstr ""

msgid "integer"
msgstr ""

msgid "\\(1), \\(2)"
msgstr ""

msgid "``B``"
msgstr ""

msgid ":c:expr:`unsigned char`"
msgstr ""

msgid "\\(2)"
msgstr "\\(2)"

msgid "``?``"
msgstr ""

msgid ":c:expr:`_Bool`"
msgstr ""

msgid "bool"
msgstr ""

msgid "\\(1)"
msgstr "\\(1)"

msgid "``h``"
msgstr ""

msgid ":c:expr:`short`"
msgstr ""

msgid "2"
msgstr "2"

msgid "``H``"
msgstr ""

msgid ":c:expr:`unsigned short`"
msgstr ""

msgid "``i``"
msgstr ""

msgid ":c:expr:`int`"
msgstr ""

msgid "4"
msgstr "4"

msgid "``I``"
msgstr ""

msgid ":c:expr:`unsigned int`"
msgstr ""

msgid "``l``"
msgstr ""

msgid ":c:expr:`long`"
msgstr ""

msgid "``L``"
msgstr ""

msgid ":c:expr:`unsigned long`"
msgstr ""

msgid "``q``"
msgstr ""

msgid ":c:expr:`long long`"
msgstr ""

msgid "8"
msgstr "8"

msgid "``Q``"
msgstr ""

msgid ":c:expr:`unsigned long long`"
msgstr ""

msgid "``n``"
msgstr ""

msgid ":c:expr:`ssize_t`"
msgstr ""

msgid "\\(3)"
msgstr "\\(3)"

msgid "``N``"
msgstr ""

msgid ":c:expr:`size_t`"
msgstr ""

msgid "``e``"
msgstr ""

msgid "\\(6)"
msgstr ""

msgid "float"
msgstr "typ (float) zmiennoprzecinkowy pojedynczej precyzji"

msgid "\\(4)"
msgstr "\\(4)"

msgid "``f``"
msgstr ""

msgid ":c:expr:`float`"
msgstr ""

msgid "``d``"
msgstr ""

msgid ":c:expr:`double`"
msgstr ""

msgid "``s``"
msgstr ""

msgid ":c:expr:`char[]`"
msgstr ""

msgid "bytes"
msgstr ""

msgid "\\(9)"
msgstr ""

msgid "``p``"
msgstr ""

msgid "\\(8)"
msgstr ""

msgid "``P``"
msgstr ""

msgid ":c:expr:`void \\*`"
msgstr ""

msgid "\\(5)"
msgstr "\\(5)"

msgid "Added support for the ``'n'`` and ``'N'`` formats."
msgstr ""

msgid "Added support for the ``'e'`` format."
msgstr ""

msgid ""
"The ``'?'`` conversion code corresponds to the :c:expr:`_Bool` type defined "
"by C99. If this type is not available, it is simulated using a :c:expr:"
"`char`. In standard mode, it is always represented by one byte."
msgstr ""

msgid ""
"When attempting to pack a non-integer using any of the integer conversion "
"codes, if the non-integer has a :meth:`__index__` method then that method is "
"called to convert the argument to an integer before packing."
msgstr ""

msgid "Added use of the :meth:`__index__` method for non-integers."
msgstr ""

msgid ""
"The ``'n'`` and ``'N'`` conversion codes are only available for the native "
"size (selected as the default or with the ``'@'`` byte order character). For "
"the standard size, you can use whichever of the other integer formats fits "
"your application."
msgstr ""

msgid ""
"For the ``'f'``, ``'d'`` and ``'e'`` conversion codes, the packed "
"representation uses the IEEE 754 binary32, binary64 or binary16 format (for "
"``'f'``, ``'d'`` or ``'e'`` respectively), regardless of the floating-point "
"format used by the platform."
msgstr ""

msgid ""
"The ``'P'`` format character is only available for the native byte ordering "
"(selected as the default or with the ``'@'`` byte order character). The byte "
"order character ``'='`` chooses to use little- or big-endian ordering based "
"on the host system. The struct module does not interpret this as native "
"ordering, so the ``'P'`` format is not available."
msgstr ""

msgid ""
"The IEEE 754 binary16 \"half precision\" type was introduced in the 2008 "
"revision of the `IEEE 754 standard <ieee 754 standard_>`_. It has a sign "
"bit, a 5-bit exponent and 11-bit precision (with 10 bits explicitly stored), "
"and can represent numbers between approximately ``6.1e-05`` and ``6.5e+04`` "
"at full precision. This type is not widely supported by C compilers: on a "
"typical machine, an unsigned short can be used for storage, but not for math "
"operations. See the Wikipedia page on the `half-precision floating-point "
"format <half precision format_>`_ for more information."
msgstr ""

msgid "When packing, ``'x'`` inserts one NUL byte."
msgstr ""

msgid ""
"The ``'p'`` format character encodes a \"Pascal string\", meaning a short "
"variable-length string stored in a *fixed number of bytes*, given by the "
"count. The first byte stored is the length of the string, or 255, whichever "
"is smaller.  The bytes of the string follow.  If the string passed in to :"
"func:`pack` is too long (longer than the count minus 1), only the leading "
"``count-1`` bytes of the string are stored.  If the string is shorter than "
"``count-1``, it is padded with null bytes so that exactly count bytes in all "
"are used.  Note that for :func:`unpack`, the ``'p'`` format character "
"consumes ``count`` bytes, but that the string returned can never contain "
"more than 255 bytes."
msgstr ""

msgid ""
"For the ``'s'`` format character, the count is interpreted as the length of "
"the bytes, not a repeat count like for the other format characters; for "
"example, ``'10s'`` means a single 10-byte string mapping to or from a single "
"Python byte string, while ``'10c'`` means 10 separate one byte character "
"elements (e.g., ``cccccccccc``) mapping to or from ten different Python byte "
"objects. (See :ref:`struct-examples` for a concrete demonstration of the "
"difference.) If a count is not given, it defaults to 1.  For packing, the "
"string is truncated or padded with null bytes as appropriate to make it fit. "
"For unpacking, the resulting bytes object always has exactly the specified "
"number of bytes.  As a special case, ``'0s'`` means a single, empty string "
"(while ``'0c'`` means 0 characters)."
msgstr ""

msgid ""
"A format character may be preceded by an integral repeat count.  For "
"example, the format string ``'4h'`` means exactly the same as ``'hhhh'``."
msgstr ""

msgid ""
"Whitespace characters between formats are ignored; a count and its format "
"must not contain whitespace though."
msgstr ""

msgid ""
"When packing a value ``x`` using one of the integer formats (``'b'``, "
"``'B'``, ``'h'``, ``'H'``, ``'i'``, ``'I'``, ``'l'``, ``'L'``, ``'q'``, "
"``'Q'``), if ``x`` is outside the valid range for that format then :exc:"
"`struct.error` is raised."
msgstr ""

msgid ""
"Previously, some of the integer formats wrapped out-of-range values and "
"raised :exc:`DeprecationWarning` instead of :exc:`struct.error`."
msgstr ""

msgid ""
"For the ``'?'`` format character, the return value is either :const:`True` "
"or :const:`False`. When packing, the truth value of the argument object is "
"used. Either 0 or 1 in the native or standard bool representation will be "
"packed, and any non-zero value will be ``True`` when unpacking."
msgstr ""

msgid "Examples"
msgstr "PrzykÅ‚ady"

msgid ""
"Native byte order examples (designated by the ``'@'`` format prefix or lack "
"of any prefix character) may not match what the reader's machine produces as "
"that depends on the platform and compiler."
msgstr ""

msgid ""
"Pack and unpack integers of three different sizes, using big endian "
"ordering::"
msgstr ""

msgid "Attempt to pack an integer which is too large for the defined field::"
msgstr ""

msgid ""
"Demonstrate the difference between ``'s'`` and ``'c'`` format characters::"
msgstr ""

msgid ""
"Unpacked fields can be named by assigning them to variables or by wrapping "
"the result in a named tuple::"
msgstr ""

msgid ""
"The ordering of format characters may have an impact on size in native mode "
"since padding is implicit. In standard mode, the user is responsible for "
"inserting any desired padding. Note in the first ``pack`` call below that "
"three NUL bytes were added after the packed ``'#'`` to align the following "
"integer on a four-byte boundary. In this example, the output was produced on "
"a little endian machine::"
msgstr ""

msgid ""
"The following format ``'llh0l'`` results in two pad bytes being added at the "
"end, assuming the platform's longs are aligned on 4-byte boundaries::"
msgstr ""

msgid "Module :mod:`array`"
msgstr ""

msgid "Packed binary storage of homogeneous data."
msgstr ""

msgid "Module :mod:`json`"
msgstr ""

msgid "JSON encoder and decoder."
msgstr ""

msgid "Module :mod:`pickle`"
msgstr ""

msgid "Python object serialization."
msgstr ""

msgid "Applications"
msgstr ""

msgid ""
"Two main applications for the :mod:`struct` module exist, data interchange "
"between Python and C code within an application or another application "
"compiled using the same compiler (:ref:`native formats<struct-native-"
"formats>`), and data interchange between applications using agreed upon data "
"layout (:ref:`standard formats<struct-standard-formats>`).  Generally "
"speaking, the format strings constructed for these two domains are distinct."
msgstr ""

msgid "Native Formats"
msgstr ""

msgid ""
"When constructing format strings which mimic native layouts, the compiler "
"and machine architecture determine byte ordering and padding. In such cases, "
"the ``@`` format character should be used to specify native byte ordering "
"and data sizes.  Internal pad bytes are normally inserted automatically.  It "
"is possible that a zero-repeat format code will be needed at the end of a "
"format string to round up to the correct byte boundary for proper alignment "
"of consective chunks of data."
msgstr ""

msgid ""
"Consider these two simple examples (on a 64-bit, little-endian machine)::"
msgstr ""

msgid ""
"Data is not padded to an 8-byte boundary at the end of the second format "
"string without the use of extra padding.  A zero-repeat format code solves "
"that problem::"
msgstr ""

msgid ""
"The ``'x'`` format code can be used to specify the repeat, but for native "
"formats it is better to use a zero-repeat format like ``'0l'``."
msgstr ""

msgid ""
"By default, native byte ordering and alignment is used, but it is better to "
"be explicit and use the ``'@'`` prefix character."
msgstr ""

msgid "Standard Formats"
msgstr ""

msgid ""
"When exchanging data beyond your process such as networking or storage, be "
"precise.  Specify the exact byte order, size, and alignment.  Do not assume "
"they match the native order of a particular machine. For example, network "
"byte order is big-endian, while many popular CPUs are little-endian.  By "
"defining this explicitly, the user need not care about the specifics of the "
"platform their code is running on. The first character should typically be "
"``<`` or ``>`` (or ``!``).  Padding is the responsibility of the "
"programmer.  The zero-repeat format character won't work.  Instead, the user "
"must explicitly add ``'x'`` pad bytes where needed.  Revisiting the examples "
"from the previous section, we have::"
msgstr ""

msgid ""
"The above results (executed on a 64-bit machine) aren't guaranteed to match "
"when executed on different machines.  For example, the examples below were "
"executed on a 32-bit machine::"
msgstr ""

msgid "Classes"
msgstr "Klasy"

msgid "The :mod:`struct` module also defines the following type:"
msgstr ""

msgid ""
"Return a new Struct object which writes and reads binary data according to "
"the format string *format*.  Creating a ``Struct`` object once and calling "
"its methods is more efficient than calling module-level functions with the "
"same format since the format string is only compiled once."
msgstr ""

msgid ""
"The compiled versions of the most recent format strings passed to :class:"
"`Struct` and the module-level functions are cached, so programs that use "
"only a few format strings needn't worry about reusing a single :class:"
"`Struct` instance."
msgstr ""

msgid "Compiled Struct objects support the following methods and attributes:"
msgstr ""

msgid ""
"Identical to the :func:`pack` function, using the compiled format. "
"(``len(result)`` will equal :attr:`size`.)"
msgstr ""

msgid "Identical to the :func:`pack_into` function, using the compiled format."
msgstr ""

msgid ""
"Identical to the :func:`unpack` function, using the compiled format. The "
"buffer's size in bytes must equal :attr:`size`."
msgstr ""

msgid ""
"Identical to the :func:`unpack_from` function, using the compiled format. "
"The buffer's size in bytes, starting at position *offset*, must be at least :"
"attr:`size`."
msgstr ""

msgid ""
"Identical to the :func:`iter_unpack` function, using the compiled format. "
"The buffer's size in bytes must be a multiple of :attr:`size`."
msgstr ""

msgid "The format string used to construct this Struct object."
msgstr ""

msgid "The format string type is now :class:`str` instead of :class:`bytes`."
msgstr ""

msgid ""
"The calculated size of the struct (and hence of the bytes object produced by "
"the :meth:`pack` method) corresponding to :attr:`format`."
msgstr ""

msgid "C"
msgstr ""

msgid "structures"
msgstr ""

msgid "packing"
msgstr ""

msgid "binary"
msgstr ""

msgid "data"
msgstr ""

msgid "@ (at)"
msgstr ""

msgid "in struct format strings"
msgstr ""

msgid "= (equals)"
msgstr ""

msgid "< (less)"
msgstr ""

msgid "> (greater)"
msgstr ""

msgid "! (exclamation)"
msgstr ""

msgid "? (question mark)"
msgstr ""
